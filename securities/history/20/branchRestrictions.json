,{
  "2020-11-12T05:22:27.151ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:22:33.507ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:22:39.809ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:22:46.141ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:22:52.524ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:22:59.230ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:07.442ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:14.205ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:20.991ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+413",
              "sol": "block.timestamp+413"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+413",
                "sol": "block.timestamp+413"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+413",
                "sol": "block.timestamp+413"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+413",
                "sol": "block.timestamp+413"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.727ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.728ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.730ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.733ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[9],accounts[0],accounts[1],accounts[3],accounts[3],accounts[3],accounts[5],accounts[4],accounts[6],accounts[2],accounts[6],accounts[3],accounts[6],accounts[0],accounts[3],accounts[9],accounts[6],accounts[2],accounts[2],accounts[6],accounts[9],accounts[5],accounts[5],accounts[4],accounts[3],accounts[4],accounts[9],accounts[8],accounts[9],accounts[3],accounts[7],accounts[9],accounts[7],accounts[8],accounts[9],accounts[7],accounts[6],accounts[1],accounts[7],accounts[1],accounts[4],accounts[4],accounts[0],accounts[3],accounts[2],accounts[6],accounts[6],accounts[0],accounts[3],accounts[8],accounts[5],accounts[4],accounts[2],accounts[6],accounts[1],accounts[3],accounts[7],accounts[0],accounts[4],accounts[3],accounts[1],accounts[7],accounts[1],accounts[3],accounts[4],accounts[4],accounts[7],accounts[5],accounts[1],accounts[0],accounts[7],accounts[1],accounts[5],accounts[1],accounts[7],accounts[8],accounts[5],accounts[8],accounts[2],accounts[0],accounts[9],accounts[0],accounts[0],accounts[1],accounts[1],accounts[2],accounts[5],accounts[6],accounts[1],accounts[8],accounts[1],accounts[4],accounts[1],accounts[7],accounts[2],accounts[7]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[256,1,1532892064,255,2014223716,66,1,95,97,3,0,65,10000,10000,29,0,3,3,1532892064,1532892064,3,4,26,3,6,4,5,97,255,95,9999,4,1532892062,1532892062,255,1336,1336,28,9999,28,6,10000,26,64,6,95,0,2014223716,28,1532892064,256,6,95,1336,2014223716,254,5,10001,66,4,3,1532892063,96,1532892064,5,1,5,96,4,2,1336,66,27,3,29,1338,64,256,1532892064,2,2,1532892062,1,97,27,3,2,96,254,26,254,26,1,10001,95,5]",
              "sol": "[uint256(256),uint256(1),uint256(1532892064),uint256(255),uint256(2014223716),uint256(66),uint256(1),uint256(95),uint256(97),uint256(3),uint256(0),uint256(65),uint256(10000),uint256(10000),uint256(29),uint256(0),uint256(3),uint256(3),uint256(1532892064),uint256(1532892064),uint256(3),uint256(4),uint256(26),uint256(3),uint256(6),uint256(4),uint256(5),uint256(97),uint256(255),uint256(95),uint256(9999),uint256(4),uint256(1532892062),uint256(1532892062),uint256(255),uint256(1336),uint256(1336),uint256(28),uint256(9999),uint256(28),uint256(6),uint256(10000),uint256(26),uint256(64),uint256(6),uint256(95),uint256(0),uint256(2014223716),uint256(28),uint256(1532892064),uint256(256),uint256(6),uint256(95),uint256(1336),uint256(2014223716),uint256(254),uint256(5),uint256(10001),uint256(66),uint256(4),uint256(3),uint256(1532892063),uint256(96),uint256(1532892064),uint256(5),uint256(1),uint256(5),uint256(96),uint256(4),uint256(2),uint256(1336),uint256(66),uint256(27),uint256(3),uint256(29),uint256(1338),uint256(64),uint256(256),uint256(1532892064),uint256(2),uint256(2),uint256(1532892062),uint256(1),uint256(97),uint256(27),uint256(3),uint256(2),uint256(96),uint256(254),uint256(26),uint256(254),uint256(26),uint256(1),uint256(10001),uint256(95),uint256(5)]"
            },
            {
              "js": "[1532892064,95,65,1,254,6,1532892062,5,28,1338,1336,2014223714,2014223716,9999,0,4,2014223715,10000,29,27,1532892064,10001,96,2014223714,2,254,254,9999,255,1336,4,4,10000,2014223716,96,2,4,254,9999,254,254,1338,2014223715,96,1532892064,2014223714,28,1337,255,6,2014223714,10001,10000,10001,2014223716,1337,1532892063,64,4,2,28,26,64,1532892062,9999,97,1,5,1338,4,256,95,256,2014223716,10000,255,257,29,1532892064,2,254,1,1532892062,3,5,27,1337,64,27,5,10000,65,256,2,96,257]",
              "sol": "[uint256(1532892064),uint256(95),uint256(65),uint256(1),uint256(254),uint256(6),uint256(1532892062),uint256(5),uint256(28),uint256(1338),uint256(1336),uint256(2014223714),uint256(2014223716),uint256(9999),uint256(0),uint256(4),uint256(2014223715),uint256(10000),uint256(29),uint256(27),uint256(1532892064),uint256(10001),uint256(96),uint256(2014223714),uint256(2),uint256(254),uint256(254),uint256(9999),uint256(255),uint256(1336),uint256(4),uint256(4),uint256(10000),uint256(2014223716),uint256(96),uint256(2),uint256(4),uint256(254),uint256(9999),uint256(254),uint256(254),uint256(1338),uint256(2014223715),uint256(96),uint256(1532892064),uint256(2014223714),uint256(28),uint256(1337),uint256(255),uint256(6),uint256(2014223714),uint256(10001),uint256(10000),uint256(10001),uint256(2014223716),uint256(1337),uint256(1532892063),uint256(64),uint256(4),uint256(2),uint256(28),uint256(26),uint256(64),uint256(1532892062),uint256(9999),uint256(97),uint256(1),uint256(5),uint256(1338),uint256(4),uint256(256),uint256(95),uint256(256),uint256(2014223716),uint256(10000),uint256(255),uint256(257),uint256(29),uint256(1532892064),uint256(2),uint256(254),uint256(1),uint256(1532892062),uint256(3),uint256(5),uint256(27),uint256(1337),uint256(64),uint256(27),uint256(5),uint256(10000),uint256(65),uint256(256),uint256(2),uint256(96),uint256(257)]"
            },
            {
              "js": "[[43,96,131,68,101,156,176,172,104,199,125,141,254,35,150,233,157,55,192,57,196,14,195,45,27,47,39,14,54,71,123,84],[191,40,149,196,235,99,239,213,126,242,145,178,114,192,187,246,171,221,65,202,196,103,11,221,127,241,173,131,112,30,113,223],[6,88,192,98,157,240,210,153,44,219,197,129,146,16,192,178,201,154,18,19,32,4,200,185,13,150,2,214,205,127,172,114],[83,186,220,135,106,198,46,68,21,99,93,107,59,252,104,36,232,13,121,91,38,166,213,67,252,39,208,16,234,254,17,110],[33,8,44,49,10,96,102,52,109,154,188,187,78,68,120,132,147,150,122,69,237,151,197,194,80,135,252,64,42,172,46,187],[153,88,170,239,204,122,199,40,134,82,41,74,9,26,79,176,14,20,55,70,206,230,37,145,195,179,39,133,251,64,26,171],[92,107,3,2,63,242,217,182,208,184,153,255,116,7,90,108,70,9,171,235,26,93,169,47,240,227,4,112,16,149,175,54],[130,2,231,2,222,202,183,244,49,68,243,247,70,20,143,76,14,1,90,137,169,93,180,100,74,136,109,164,176,165,152,201],[219,97,94,134,100,199,33,189,110,10,113,132,58,238,251,22,57,239,76,121,146,237,128,174,0,38,82,157,203,48,68,43],[231,109,158,255,22,219,122,40,128,136,104,198,143,221,216,37,170,238,107,100,147,237,102,119,205,154,122,233,39,227,147,132],[10,136,160,184,71,161,76,31,129,211,28,18,7,77,225,173,235,125,144,53,63,42,74,141,189,60,105,235,15,156,199,63],[44,151,160,235,241,42,115,183,205,241,122,230,35,117,245,18,52,59,30,66,84,236,14,36,126,15,195,90,112,216,187,252],[221,40,156,147,38,113,61,220,118,135,50,21,2,105,17,61,241,57,125,219,1,240,101,236,58,238,116,18,17,211,2,21],[222,177,81,47,217,200,20,254,71,98,39,84,145,186,139,70,100,97,19,227,244,82,90,40,88,95,21,110,211,242,27,17],[59,75,24,155,105,184,224,178,234,118,158,43,87,190,60,129,13,221,27,171,219,223,154,228,26,248,6,120,34,136,76,107],[245,109,48,105,229,146,216,44,81,155,226,196,146,2,235,62,255,170,25,22,55,92,181,31,129,151,192,122,244,197,74,48],[198,155,152,219,41,35,83,83,145,4,153,164,3,124,97,216,139,156,236,59,219,168,10,7,80,59,167,187,243,93,86,173],[212,235,95,121,19,176,34,55,193,94,140,43,247,175,40,45,155,124,154,203,205,49,195,229,35,106,17,97,52,213,200,217],[158,115,102,96,157,24,57,136,155,226,124,110,62,186,194,37,230,254,37,214,255,235,231,100,133,113,118,2,228,2,87,21],[142,93,185,147,121,221,39,138,157,248,180,248,126,67,66,30,194,92,201,78,129,35,118,147,82,213,3,73,183,6,30,123],[188,162,63,50,60,54,3,86,220,23,72,223,229,45,64,239,231,181,93,232,0,182,238,128,40,23,198,179,73,13,195,201],[9,144,227,86,69,49,243,212,48,229,51,72,58,205,21,183,226,210,236,45,213,237,90,44,80,128,98,204,150,62,147,33],[123,189,157,114,42,238,15,226,241,3,62,248,19,178,86,208,247,195,198,209,129,26,12,133,155,202,86,119,190,229,225,27],[182,199,99,33,62,157,30,137,184,37,244,30,185,107,19,60,211,142,129,115,7,240,92,198,142,1,179,77,18,255,87,22],[9,42,227,220,3,189,205,28,104,74,204,178,49,91,198,72,48,189,243,230,161,23,133,3,194,196,206,88,78,143,187,42],[194,114,75,111,164,240,188,191,104,218,249,114,122,17,166,122,35,83,234,210,106,184,57,5,170,221,68,123,135,71,116,249],[212,212,52,234,73,225,22,85,1,251,63,240,30,249,113,66,105,89,243,104,13,181,152,231,94,140,225,214,134,72,195,177],[125,206,254,177,8,67,95,63,42,125,59,22,96,186,207,162,163,244,117,156,193,8,61,18,27,128,148,123,187,128,203,114],[184,139,216,103,211,245,0,55,64,225,28,17,113,93,100,84,96,243,230,192,20,152,163,163,125,127,36,10,43,98,14,153],[117,76,74,173,66,51,217,171,212,24,183,129,174,210,48,107,139,91,209,218,83,79,42,227,189,82,105,74,153,75,135,192],[12,224,87,105,78,179,73,113,219,79,147,185,38,205,44,177,208,155,253,115,56,183,44,0,11,19,182,167,131,47,73,158],[23,176,243,45,82,2,60,102,36,148,150,155,76,173,13,198,47,19,129,5,228,176,10,246,207,171,125,83,10,55,69,35],[135,204,60,124,162,154,152,249,74,94,141,194,209,54,208,89,237,34,12,235,195,34,80,84,14,185,100,139,1,44,224,87],[172,191,195,193,253,149,200,134,38,68,87,65,224,63,56,196,204,1,75,20,117,56,98,101,172,79,178,51,142,209,36,88],[98,226,50,193,18,123,79,32,251,244,187,200,157,251,143,123,33,218,66,21,210,52,102,0,123,73,152,129,100,78,58,60],[24,248,72,210,3,106,47,133,157,86,151,236,214,190,90,20,133,206,79,248,131,175,138,26,81,149,139,0,103,64,144,45],[8,37,92,201,47,240,9,55,201,68,234,128,194,193,56,148,166,221,174,160,60,34,214,188,91,210,223,186,223,67,74,37],[54,109,162,174,255,119,184,171,174,119,183,203,163,203,50,15,223,147,24,220,130,164,144,238,180,235,10,56,208,182,149,96],[30,86,25,78,214,100,58,233,151,132,155,199,53,122,188,152,210,145,79,246,125,83,211,106,162,15,187,137,21,14,220,49],[153,103,197,243,153,84,52,14,158,136,220,163,141,136,109,45,135,186,91,40,80,67,121,7,109,187,57,205,118,220,73,23],[184,143,19,0,14,123,9,42,87,232,107,8,119,77,249,108,185,150,185,32,21,39,136,155,173,141,61,200,208,184,40,108],[68,38,162,158,200,36,17,217,168,34,185,230,159,71,71,7,237,148,115,201,171,219,225,115,94,5,198,80,118,58,64,56],[84,168,94,50,38,237,27,38,16,101,184,120,10,49,102,144,76,139,101,103,144,11,20,75,166,2,88,75,34,234,232,245],[205,28,73,62,182,117,71,31,57,69,61,224,208,126,185,37,13,46,117,68,236,29,8,111,49,221,167,143,190,104,168,79],[193,97,147,33,158,182,112,81,158,43,161,2,145,167,188,176,61,253,23,253,76,60,32,135,248,110,140,185,110,35,104,2],[233,130,85,153,223,242,185,206,135,126,237,152,244,137,26,111,225,95,51,121,98,30,226,180,161,189,254,147,160,142,183,31],[53,126,87,21,7,106,197,209,240,8,28,209,17,49,129,29,27,234,207,65,131,205,215,228,63,118,80,148,48,129,140,46],[34,247,164,63,166,207,46,112,139,227,77,60,86,52,233,249,188,94,212,149,215,59,145,203,52,55,180,193,34,192,137,10],[233,251,119,233,116,205,204,81,122,189,65,248,118,82,128,208,81,194,178,61,68,166,221,209,82,171,137,124,222,18,124,47],[110,179,2,203,50,128,221,176,209,83,69,91,85,96,101,206,211,123,33,89,5,132,252,21,103,77,28,23,60,98,84,62],[112,112,104,133,94,126,96,33,39,119,215,190,94,147,56,185,1,241,246,139,180,62,223,20,217,53,207,233,91,83,123,222],[153,80,19,89,47,80,214,136,179,224,212,174,16,126,14,15,217,18,71,196,158,20,171,1,132,109,59,242,193,111,46,242],[101,117,38,2,172,214,75,183,180,93,101,94,239,239,126,115,206,32,74,221,187,3,46,205,238,144,45,226,254,147,254,209],[196,204,131,14,223,124,253,158,47,148,2,132,13,217,19,57,241,171,189,229,213,97,216,51,235,77,149,33,33,82,14,74],[244,43,235,141,146,209,6,2,178,197,6,224,90,71,45,28,0,150,4,185,197,161,2,17,123,210,95,72,4,137,15,134],[102,205,222,175,138,1,35,50,11,166,161,200,81,18,228,117,22,236,213,83,177,103,222,142,184,156,157,109,17,33,7,87],[59,194,104,82,253,117,17,71,89,217,244,79,43,221,157,120,68,90,200,5,1,162,229,248,78,241,146,170,220,223,8,243],[43,156,219,207,247,117,94,18,62,126,197,60,50,69,254,111,254,47,50,126,60,6,146,252,156,229,209,189,177,59,31,237],[113,164,217,6,179,169,215,235,123,233,221,74,13,146,169,14,15,241,224,156,213,153,151,27,5,192,48,118,73,174,111,106],[129,163,180,107,204,37,90,27,90,81,134,58,252,167,233,24,150,87,112,19,46,108,107,77,131,90,202,150,191,222,124,246],[205,138,150,89,213,106,125,125,219,5,153,96,140,191,137,196,129,184,61,215,43,85,44,55,71,193,93,127,21,144,173,237],[191,220,54,81,111,253,86,148,223,134,211,175,229,228,32,169,64,178,80,117,228,98,22,16,203,144,80,179,22,192,81,30],[141,35,163,94,88,21,128,147,3,16,140,168,244,201,6,22,131,223,114,101,216,47,24,154,242,208,48,196,20,88,188,115],[167,212,30,93,231,222,69,186,29,227,251,106,189,158,250,101,83,190,186,8,99,91,77,55,80,128,105,68,123,207,92,209],[12,97,188,34,88,170,70,14,99,251,196,36,94,106,130,42,224,148,29,178,108,144,107,75,148,35,239,81,62,11,42,59],[134,242,178,76,43,207,157,22,202,172,255,101,42,111,160,136,49,30,155,186,145,12,132,8,213,156,14,242,30,81,59,130],[52,0,163,90,45,212,120,44,201,48,62,60,88,96,143,198,74,171,96,111,239,79,175,203,74,11,154,207,44,107,175,181],[48,106,91,115,156,131,153,228,149,198,106,198,33,4,48,243,177,146,17,191,12,241,144,48,115,39,47,191,239,192,225,149],[117,10,189,250,74,213,186,219,51,129,77,127,131,108,52,37,231,187,204,39,206,199,180,22,219,72,103,214,14,158,241,94],[15,54,185,178,222,28,224,77,33,88,229,115,18,134,19,34,161,254,68,171,32,30,66,22,150,71,75,164,65,242,108,75],[182,130,193,19,196,54,228,58,61,213,174,243,141,221,168,125,30,194,251,103,80,62,6,92,189,21,40,102,172,189,122,115],[235,220,3,62,85,82,158,118,138,54,121,93,244,45,168,54,227,45,29,178,236,210,96,247,53,10,236,229,176,84,168,210],[13,222,168,18,245,135,157,89,114,39,217,220,180,42,154,205,158,148,136,105,243,229,154,11,137,227,41,30,8,31,96,155],[239,74,66,176,199,176,87,138,58,2,86,251,243,193,226,205,202,138,127,14,114,209,169,136,189,102,138,87,178,11,167,97],[241,206,47,89,196,152,219,51,28,52,245,215,6,9,229,224,112,193,39,152,99,52,17,43,226,127,54,23,154,156,123,105],[37,27,75,202,58,49,177,46,141,159,158,49,179,147,242,180,175,152,247,60,220,119,18,69,175,69,255,178,215,14,110,20],[79,229,103,33,139,96,11,33,213,213,246,203,158,29,66,71,76,41,171,240,137,118,71,43,58,153,175,197,113,224,127,200],[8,169,38,21,189,109,101,242,71,208,185,123,172,198,86,103,234,192,56,150,68,159,200,142,100,236,105,40,59,181,234,4],[238,84,109,17,101,220,207,199,124,36,32,46,34,60,109,246,2,147,124,214,121,41,99,142,48,88,162,204,203,111,178,205],[47,255,76,175,32,92,159,179,73,62,109,140,147,65,176,19,71,86,59,176,210,156,127,71,136,32,191,226,152,69,12,75],[183,91,32,27,80,154,46,104,237,159,46,232,191,241,125,44,204,174,0,218,172,41,176,200,11,242,66,126,96,156,160,102],[158,192,82,217,253,114,160,74,149,28,172,1,129,136,150,161,185,205,37,165,206,177,247,92,27,129,151,96,184,27,178,72],[248,113,69,105,74,191,231,24,142,135,104,204,136,237,198,135,241,26,1,54,220,225,213,74,61,187,15,98,119,232,104,209],[120,162,120,136,89,191,101,73,96,97,100,122,201,233,131,60,17,112,43,78,127,80,194,182,195,134,72,122,6,233,173,85],[203,30,201,234,202,124,5,84,132,35,239,59,87,145,213,75,207,74,248,108,246,114,20,97,81,39,141,3,109,38,159,215],[61,77,211,142,199,203,0,120,27,224,197,225,141,40,208,81,70,135,211,46,21,247,5,24,235,41,28,1,34,107,240,32],[160,193,89,44,216,137,84,238,53,25,206,194,168,221,19,253,87,84,190,163,242,228,217,164,115,159,97,246,227,127,17,232],[12,17,109,110,158,108,98,28,199,201,230,34,162,3,237,145,132,70,147,199,187,143,153,201,240,173,53,220,163,122,77,93],[206,42,205,206,118,181,50,29,82,156,62,49,46,36,189,189,137,124,215,116,176,219,185,98,219,84,222,101,177,101,26,135],[116,226,179,172,222,68,91,109,170,234,201,232,69,101,120,139,163,172,45,61,50,15,158,160,111,210,198,145,135,146,186,174],[6,129,4,64,206,191,95,167,80,88,248,188,38,209,14,9,80,94,216,112,210,80,110,206,153,145,113,114,186,229,228,234],[117,139,224,200,91,71,57,62,22,127,36,78,203,216,174,34,38,232,49,121,209,141,114,76,112,17,216,152,134,167,51,249],[215,127,201,239,128,106,19,241,37,24,240,36,180,136,12,212,138,6,171,133,76,39,43,128,159,103,234,0,198,195,217,75],[226,182,92,4,18,175,166,22,17,156,9,198,48,13,46,139,120,55,237,250,53,131,172,167,106,114,45,14,223,195,47,99],[50,222,95,200,119,241,108,136,152,129,130,227,101,84,79,145,210,153,47,89,211,179,177,19,37,18,128,145,11,11,16,226],[10,206,232,169,60,241,72,66,217,95,72,156,119,196,38,35,112,139,56,143,154,167,233,115,47,118,137,213,78,152,162,163]]",
              "sol": "[bytes32(stringToBytes32(\"43,96,131,68,101,156,176,172,104,199,125,141,254,35,150,233,157,55,192,57,196,14,195,45,27,47,39,14,54,71,123,84\")),bytes32(stringToBytes32(\"191,40,149,196,235,99,239,213,126,242,145,178,114,192,187,246,171,221,65,202,196,103,11,221,127,241,173,131,112,30,113,223\")),bytes32(stringToBytes32(\"6,88,192,98,157,240,210,153,44,219,197,129,146,16,192,178,201,154,18,19,32,4,200,185,13,150,2,214,205,127,172,114\")),bytes32(stringToBytes32(\"83,186,220,135,106,198,46,68,21,99,93,107,59,252,104,36,232,13,121,91,38,166,213,67,252,39,208,16,234,254,17,110\")),bytes32(stringToBytes32(\"33,8,44,49,10,96,102,52,109,154,188,187,78,68,120,132,147,150,122,69,237,151,197,194,80,135,252,64,42,172,46,187\")),bytes32(stringToBytes32(\"153,88,170,239,204,122,199,40,134,82,41,74,9,26,79,176,14,20,55,70,206,230,37,145,195,179,39,133,251,64,26,171\")),bytes32(stringToBytes32(\"92,107,3,2,63,242,217,182,208,184,153,255,116,7,90,108,70,9,171,235,26,93,169,47,240,227,4,112,16,149,175,54\")),bytes32(stringToBytes32(\"130,2,231,2,222,202,183,244,49,68,243,247,70,20,143,76,14,1,90,137,169,93,180,100,74,136,109,164,176,165,152,201\")),bytes32(stringToBytes32(\"219,97,94,134,100,199,33,189,110,10,113,132,58,238,251,22,57,239,76,121,146,237,128,174,0,38,82,157,203,48,68,43\")),bytes32(stringToBytes32(\"231,109,158,255,22,219,122,40,128,136,104,198,143,221,216,37,170,238,107,100,147,237,102,119,205,154,122,233,39,227,147,132\")),bytes32(stringToBytes32(\"10,136,160,184,71,161,76,31,129,211,28,18,7,77,225,173,235,125,144,53,63,42,74,141,189,60,105,235,15,156,199,63\")),bytes32(stringToBytes32(\"44,151,160,235,241,42,115,183,205,241,122,230,35,117,245,18,52,59,30,66,84,236,14,36,126,15,195,90,112,216,187,252\")),bytes32(stringToBytes32(\"221,40,156,147,38,113,61,220,118,135,50,21,2,105,17,61,241,57,125,219,1,240,101,236,58,238,116,18,17,211,2,21\")),bytes32(stringToBytes32(\"222,177,81,47,217,200,20,254,71,98,39,84,145,186,139,70,100,97,19,227,244,82,90,40,88,95,21,110,211,242,27,17\")),bytes32(stringToBytes32(\"59,75,24,155,105,184,224,178,234,118,158,43,87,190,60,129,13,221,27,171,219,223,154,228,26,248,6,120,34,136,76,107\")),bytes32(stringToBytes32(\"245,109,48,105,229,146,216,44,81,155,226,196,146,2,235,62,255,170,25,22,55,92,181,31,129,151,192,122,244,197,74,48\")),bytes32(stringToBytes32(\"198,155,152,219,41,35,83,83,145,4,153,164,3,124,97,216,139,156,236,59,219,168,10,7,80,59,167,187,243,93,86,173\")),bytes32(stringToBytes32(\"212,235,95,121,19,176,34,55,193,94,140,43,247,175,40,45,155,124,154,203,205,49,195,229,35,106,17,97,52,213,200,217\")),bytes32(stringToBytes32(\"158,115,102,96,157,24,57,136,155,226,124,110,62,186,194,37,230,254,37,214,255,235,231,100,133,113,118,2,228,2,87,21\")),bytes32(stringToBytes32(\"142,93,185,147,121,221,39,138,157,248,180,248,126,67,66,30,194,92,201,78,129,35,118,147,82,213,3,73,183,6,30,123\")),bytes32(stringToBytes32(\"188,162,63,50,60,54,3,86,220,23,72,223,229,45,64,239,231,181,93,232,0,182,238,128,40,23,198,179,73,13,195,201\")),bytes32(stringToBytes32(\"9,144,227,86,69,49,243,212,48,229,51,72,58,205,21,183,226,210,236,45,213,237,90,44,80,128,98,204,150,62,147,33\")),bytes32(stringToBytes32(\"123,189,157,114,42,238,15,226,241,3,62,248,19,178,86,208,247,195,198,209,129,26,12,133,155,202,86,119,190,229,225,27\")),bytes32(stringToBytes32(\"182,199,99,33,62,157,30,137,184,37,244,30,185,107,19,60,211,142,129,115,7,240,92,198,142,1,179,77,18,255,87,22\")),bytes32(stringToBytes32(\"9,42,227,220,3,189,205,28,104,74,204,178,49,91,198,72,48,189,243,230,161,23,133,3,194,196,206,88,78,143,187,42\")),bytes32(stringToBytes32(\"194,114,75,111,164,240,188,191,104,218,249,114,122,17,166,122,35,83,234,210,106,184,57,5,170,221,68,123,135,71,116,249\")),bytes32(stringToBytes32(\"212,212,52,234,73,225,22,85,1,251,63,240,30,249,113,66,105,89,243,104,13,181,152,231,94,140,225,214,134,72,195,177\")),bytes32(stringToBytes32(\"125,206,254,177,8,67,95,63,42,125,59,22,96,186,207,162,163,244,117,156,193,8,61,18,27,128,148,123,187,128,203,114\")),bytes32(stringToBytes32(\"184,139,216,103,211,245,0,55,64,225,28,17,113,93,100,84,96,243,230,192,20,152,163,163,125,127,36,10,43,98,14,153\")),bytes32(stringToBytes32(\"117,76,74,173,66,51,217,171,212,24,183,129,174,210,48,107,139,91,209,218,83,79,42,227,189,82,105,74,153,75,135,192\")),bytes32(stringToBytes32(\"12,224,87,105,78,179,73,113,219,79,147,185,38,205,44,177,208,155,253,115,56,183,44,0,11,19,182,167,131,47,73,158\")),bytes32(stringToBytes32(\"23,176,243,45,82,2,60,102,36,148,150,155,76,173,13,198,47,19,129,5,228,176,10,246,207,171,125,83,10,55,69,35\")),bytes32(stringToBytes32(\"135,204,60,124,162,154,152,249,74,94,141,194,209,54,208,89,237,34,12,235,195,34,80,84,14,185,100,139,1,44,224,87\")),bytes32(stringToBytes32(\"172,191,195,193,253,149,200,134,38,68,87,65,224,63,56,196,204,1,75,20,117,56,98,101,172,79,178,51,142,209,36,88\")),bytes32(stringToBytes32(\"98,226,50,193,18,123,79,32,251,244,187,200,157,251,143,123,33,218,66,21,210,52,102,0,123,73,152,129,100,78,58,60\")),bytes32(stringToBytes32(\"24,248,72,210,3,106,47,133,157,86,151,236,214,190,90,20,133,206,79,248,131,175,138,26,81,149,139,0,103,64,144,45\")),bytes32(stringToBytes32(\"8,37,92,201,47,240,9,55,201,68,234,128,194,193,56,148,166,221,174,160,60,34,214,188,91,210,223,186,223,67,74,37\")),bytes32(stringToBytes32(\"54,109,162,174,255,119,184,171,174,119,183,203,163,203,50,15,223,147,24,220,130,164,144,238,180,235,10,56,208,182,149,96\")),bytes32(stringToBytes32(\"30,86,25,78,214,100,58,233,151,132,155,199,53,122,188,152,210,145,79,246,125,83,211,106,162,15,187,137,21,14,220,49\")),bytes32(stringToBytes32(\"153,103,197,243,153,84,52,14,158,136,220,163,141,136,109,45,135,186,91,40,80,67,121,7,109,187,57,205,118,220,73,23\")),bytes32(stringToBytes32(\"184,143,19,0,14,123,9,42,87,232,107,8,119,77,249,108,185,150,185,32,21,39,136,155,173,141,61,200,208,184,40,108\")),bytes32(stringToBytes32(\"68,38,162,158,200,36,17,217,168,34,185,230,159,71,71,7,237,148,115,201,171,219,225,115,94,5,198,80,118,58,64,56\")),bytes32(stringToBytes32(\"84,168,94,50,38,237,27,38,16,101,184,120,10,49,102,144,76,139,101,103,144,11,20,75,166,2,88,75,34,234,232,245\")),bytes32(stringToBytes32(\"205,28,73,62,182,117,71,31,57,69,61,224,208,126,185,37,13,46,117,68,236,29,8,111,49,221,167,143,190,104,168,79\")),bytes32(stringToBytes32(\"193,97,147,33,158,182,112,81,158,43,161,2,145,167,188,176,61,253,23,253,76,60,32,135,248,110,140,185,110,35,104,2\")),bytes32(stringToBytes32(\"233,130,85,153,223,242,185,206,135,126,237,152,244,137,26,111,225,95,51,121,98,30,226,180,161,189,254,147,160,142,183,31\")),bytes32(stringToBytes32(\"53,126,87,21,7,106,197,209,240,8,28,209,17,49,129,29,27,234,207,65,131,205,215,228,63,118,80,148,48,129,140,46\")),bytes32(stringToBytes32(\"34,247,164,63,166,207,46,112,139,227,77,60,86,52,233,249,188,94,212,149,215,59,145,203,52,55,180,193,34,192,137,10\")),bytes32(stringToBytes32(\"233,251,119,233,116,205,204,81,122,189,65,248,118,82,128,208,81,194,178,61,68,166,221,209,82,171,137,124,222,18,124,47\")),bytes32(stringToBytes32(\"110,179,2,203,50,128,221,176,209,83,69,91,85,96,101,206,211,123,33,89,5,132,252,21,103,77,28,23,60,98,84,62\")),bytes32(stringToBytes32(\"112,112,104,133,94,126,96,33,39,119,215,190,94,147,56,185,1,241,246,139,180,62,223,20,217,53,207,233,91,83,123,222\")),bytes32(stringToBytes32(\"153,80,19,89,47,80,214,136,179,224,212,174,16,126,14,15,217,18,71,196,158,20,171,1,132,109,59,242,193,111,46,242\")),bytes32(stringToBytes32(\"101,117,38,2,172,214,75,183,180,93,101,94,239,239,126,115,206,32,74,221,187,3,46,205,238,144,45,226,254,147,254,209\")),bytes32(stringToBytes32(\"196,204,131,14,223,124,253,158,47,148,2,132,13,217,19,57,241,171,189,229,213,97,216,51,235,77,149,33,33,82,14,74\")),bytes32(stringToBytes32(\"244,43,235,141,146,209,6,2,178,197,6,224,90,71,45,28,0,150,4,185,197,161,2,17,123,210,95,72,4,137,15,134\")),bytes32(stringToBytes32(\"102,205,222,175,138,1,35,50,11,166,161,200,81,18,228,117,22,236,213,83,177,103,222,142,184,156,157,109,17,33,7,87\")),bytes32(stringToBytes32(\"59,194,104,82,253,117,17,71,89,217,244,79,43,221,157,120,68,90,200,5,1,162,229,248,78,241,146,170,220,223,8,243\")),bytes32(stringToBytes32(\"43,156,219,207,247,117,94,18,62,126,197,60,50,69,254,111,254,47,50,126,60,6,146,252,156,229,209,189,177,59,31,237\")),bytes32(stringToBytes32(\"113,164,217,6,179,169,215,235,123,233,221,74,13,146,169,14,15,241,224,156,213,153,151,27,5,192,48,118,73,174,111,106\")),bytes32(stringToBytes32(\"129,163,180,107,204,37,90,27,90,81,134,58,252,167,233,24,150,87,112,19,46,108,107,77,131,90,202,150,191,222,124,246\")),bytes32(stringToBytes32(\"205,138,150,89,213,106,125,125,219,5,153,96,140,191,137,196,129,184,61,215,43,85,44,55,71,193,93,127,21,144,173,237\")),bytes32(stringToBytes32(\"191,220,54,81,111,253,86,148,223,134,211,175,229,228,32,169,64,178,80,117,228,98,22,16,203,144,80,179,22,192,81,30\")),bytes32(stringToBytes32(\"141,35,163,94,88,21,128,147,3,16,140,168,244,201,6,22,131,223,114,101,216,47,24,154,242,208,48,196,20,88,188,115\")),bytes32(stringToBytes32(\"167,212,30,93,231,222,69,186,29,227,251,106,189,158,250,101,83,190,186,8,99,91,77,55,80,128,105,68,123,207,92,209\")),bytes32(stringToBytes32(\"12,97,188,34,88,170,70,14,99,251,196,36,94,106,130,42,224,148,29,178,108,144,107,75,148,35,239,81,62,11,42,59\")),bytes32(stringToBytes32(\"134,242,178,76,43,207,157,22,202,172,255,101,42,111,160,136,49,30,155,186,145,12,132,8,213,156,14,242,30,81,59,130\")),bytes32(stringToBytes32(\"52,0,163,90,45,212,120,44,201,48,62,60,88,96,143,198,74,171,96,111,239,79,175,203,74,11,154,207,44,107,175,181\")),bytes32(stringToBytes32(\"48,106,91,115,156,131,153,228,149,198,106,198,33,4,48,243,177,146,17,191,12,241,144,48,115,39,47,191,239,192,225,149\")),bytes32(stringToBytes32(\"117,10,189,250,74,213,186,219,51,129,77,127,131,108,52,37,231,187,204,39,206,199,180,22,219,72,103,214,14,158,241,94\")),bytes32(stringToBytes32(\"15,54,185,178,222,28,224,77,33,88,229,115,18,134,19,34,161,254,68,171,32,30,66,22,150,71,75,164,65,242,108,75\")),bytes32(stringToBytes32(\"182,130,193,19,196,54,228,58,61,213,174,243,141,221,168,125,30,194,251,103,80,62,6,92,189,21,40,102,172,189,122,115\")),bytes32(stringToBytes32(\"235,220,3,62,85,82,158,118,138,54,121,93,244,45,168,54,227,45,29,178,236,210,96,247,53,10,236,229,176,84,168,210\")),bytes32(stringToBytes32(\"13,222,168,18,245,135,157,89,114,39,217,220,180,42,154,205,158,148,136,105,243,229,154,11,137,227,41,30,8,31,96,155\")),bytes32(stringToBytes32(\"239,74,66,176,199,176,87,138,58,2,86,251,243,193,226,205,202,138,127,14,114,209,169,136,189,102,138,87,178,11,167,97\")),bytes32(stringToBytes32(\"241,206,47,89,196,152,219,51,28,52,245,215,6,9,229,224,112,193,39,152,99,52,17,43,226,127,54,23,154,156,123,105\")),bytes32(stringToBytes32(\"37,27,75,202,58,49,177,46,141,159,158,49,179,147,242,180,175,152,247,60,220,119,18,69,175,69,255,178,215,14,110,20\")),bytes32(stringToBytes32(\"79,229,103,33,139,96,11,33,213,213,246,203,158,29,66,71,76,41,171,240,137,118,71,43,58,153,175,197,113,224,127,200\")),bytes32(stringToBytes32(\"8,169,38,21,189,109,101,242,71,208,185,123,172,198,86,103,234,192,56,150,68,159,200,142,100,236,105,40,59,181,234,4\")),bytes32(stringToBytes32(\"238,84,109,17,101,220,207,199,124,36,32,46,34,60,109,246,2,147,124,214,121,41,99,142,48,88,162,204,203,111,178,205\")),bytes32(stringToBytes32(\"47,255,76,175,32,92,159,179,73,62,109,140,147,65,176,19,71,86,59,176,210,156,127,71,136,32,191,226,152,69,12,75\")),bytes32(stringToBytes32(\"183,91,32,27,80,154,46,104,237,159,46,232,191,241,125,44,204,174,0,218,172,41,176,200,11,242,66,126,96,156,160,102\")),bytes32(stringToBytes32(\"158,192,82,217,253,114,160,74,149,28,172,1,129,136,150,161,185,205,37,165,206,177,247,92,27,129,151,96,184,27,178,72\")),bytes32(stringToBytes32(\"248,113,69,105,74,191,231,24,142,135,104,204,136,237,198,135,241,26,1,54,220,225,213,74,61,187,15,98,119,232,104,209\")),bytes32(stringToBytes32(\"120,162,120,136,89,191,101,73,96,97,100,122,201,233,131,60,17,112,43,78,127,80,194,182,195,134,72,122,6,233,173,85\")),bytes32(stringToBytes32(\"203,30,201,234,202,124,5,84,132,35,239,59,87,145,213,75,207,74,248,108,246,114,20,97,81,39,141,3,109,38,159,215\")),bytes32(stringToBytes32(\"61,77,211,142,199,203,0,120,27,224,197,225,141,40,208,81,70,135,211,46,21,247,5,24,235,41,28,1,34,107,240,32\")),bytes32(stringToBytes32(\"160,193,89,44,216,137,84,238,53,25,206,194,168,221,19,253,87,84,190,163,242,228,217,164,115,159,97,246,227,127,17,232\")),bytes32(stringToBytes32(\"12,17,109,110,158,108,98,28,199,201,230,34,162,3,237,145,132,70,147,199,187,143,153,201,240,173,53,220,163,122,77,93\")),bytes32(stringToBytes32(\"206,42,205,206,118,181,50,29,82,156,62,49,46,36,189,189,137,124,215,116,176,219,185,98,219,84,222,101,177,101,26,135\")),bytes32(stringToBytes32(\"116,226,179,172,222,68,91,109,170,234,201,232,69,101,120,139,163,172,45,61,50,15,158,160,111,210,198,145,135,146,186,174\")),bytes32(stringToBytes32(\"6,129,4,64,206,191,95,167,80,88,248,188,38,209,14,9,80,94,216,112,210,80,110,206,153,145,113,114,186,229,228,234\")),bytes32(stringToBytes32(\"117,139,224,200,91,71,57,62,22,127,36,78,203,216,174,34,38,232,49,121,209,141,114,76,112,17,216,152,134,167,51,249\")),bytes32(stringToBytes32(\"215,127,201,239,128,106,19,241,37,24,240,36,180,136,12,212,138,6,171,133,76,39,43,128,159,103,234,0,198,195,217,75\")),bytes32(stringToBytes32(\"226,182,92,4,18,175,166,22,17,156,9,198,48,13,46,139,120,55,237,250,53,131,172,167,106,114,45,14,223,195,47,99\")),bytes32(stringToBytes32(\"50,222,95,200,119,241,108,136,152,129,130,227,101,84,79,145,210,153,47,89,211,179,177,19,37,18,128,145,11,11,16,226\")),bytes32(stringToBytes32(\"10,206,232,169,60,241,72,66,217,95,72,156,119,196,38,35,112,139,56,143,154,167,233,115,47,118,137,213,78,152,162,163\"))]"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[9],accounts[0],accounts[1],accounts[3],accounts[3],accounts[3],accounts[5],accounts[4],accounts[6],accounts[2],accounts[6],accounts[3],accounts[6],accounts[0],accounts[3],accounts[9],accounts[6],accounts[2],accounts[2],accounts[6],accounts[9],accounts[5],accounts[5],accounts[4],accounts[3],accounts[4],accounts[9],accounts[8],accounts[9],accounts[3],accounts[7],accounts[9],accounts[7],accounts[8],accounts[9],accounts[7],accounts[6],accounts[1],accounts[7],accounts[1],accounts[4],accounts[4],accounts[0],accounts[3],accounts[2],accounts[6],accounts[6],accounts[0],accounts[3],accounts[8],accounts[5],accounts[4],accounts[2],accounts[6],accounts[1],accounts[3],accounts[7],accounts[0],accounts[4],accounts[3],accounts[1],accounts[7],accounts[1],accounts[3],accounts[4],accounts[4],accounts[7],accounts[5],accounts[1],accounts[0],accounts[7],accounts[1],accounts[5],accounts[1],accounts[7],accounts[8],accounts[5],accounts[8],accounts[2],accounts[0],accounts[9],accounts[0],accounts[0],accounts[1],accounts[1],accounts[2],accounts[5],accounts[6],accounts[1],accounts[8],accounts[1],accounts[4],accounts[1],accounts[7],accounts[2],accounts[7]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[256,1,1532892064,255,2014223716,66,1,95,97,3,0,65,10000,10000,29,0,3,3,1532892064,1532892064,3,4,26,3,6,4,5,97,255,95,9999,4,1532892062,1532892062,255,1336,1336,28,9999,28,6,10000,26,64,6,95,0,2014223716,28,1532892064,256,6,95,1336,2014223716,254,5,10001,66,4,3,1532892063,96,1532892064,5,1,5,96,4,2,1336,66,27,3,29,1338,64,256,1532892064,2,2,1532892062,1,97,27,3,2,96,254,26,254,26,1,10001,95,5]",
                "sol": "[uint256(256),uint256(1),uint256(1532892064),uint256(255),uint256(2014223716),uint256(66),uint256(1),uint256(95),uint256(97),uint256(3),uint256(0),uint256(65),uint256(10000),uint256(10000),uint256(29),uint256(0),uint256(3),uint256(3),uint256(1532892064),uint256(1532892064),uint256(3),uint256(4),uint256(26),uint256(3),uint256(6),uint256(4),uint256(5),uint256(97),uint256(255),uint256(95),uint256(9999),uint256(4),uint256(1532892062),uint256(1532892062),uint256(255),uint256(1336),uint256(1336),uint256(28),uint256(9999),uint256(28),uint256(6),uint256(10000),uint256(26),uint256(64),uint256(6),uint256(95),uint256(0),uint256(2014223716),uint256(28),uint256(1532892064),uint256(256),uint256(6),uint256(95),uint256(1336),uint256(2014223716),uint256(254),uint256(5),uint256(10001),uint256(66),uint256(4),uint256(3),uint256(1532892063),uint256(96),uint256(1532892064),uint256(5),uint256(1),uint256(5),uint256(96),uint256(4),uint256(2),uint256(1336),uint256(66),uint256(27),uint256(3),uint256(29),uint256(1338),uint256(64),uint256(256),uint256(1532892064),uint256(2),uint256(2),uint256(1532892062),uint256(1),uint256(97),uint256(27),uint256(3),uint256(2),uint256(96),uint256(254),uint256(26),uint256(254),uint256(26),uint256(1),uint256(10001),uint256(95),uint256(5)]"
              },
              {
                "js": "[1532892064,95,65,1,254,6,1532892062,5,28,1338,1336,2014223714,2014223716,9999,0,4,2014223715,10000,29,27,1532892064,10001,96,2014223714,2,254,254,9999,255,1336,4,4,10000,2014223716,96,2,4,254,9999,254,254,1338,2014223715,96,1532892064,2014223714,28,1337,255,6,2014223714,10001,10000,10001,2014223716,1337,1532892063,64,4,2,28,26,64,1532892062,9999,97,1,5,1338,4,256,95,256,2014223716,10000,255,257,29,1532892064,2,254,1,1532892062,3,5,27,1337,64,27,5,10000,65,256,2,96,257]",
                "sol": "[uint256(1532892064),uint256(95),uint256(65),uint256(1),uint256(254),uint256(6),uint256(1532892062),uint256(5),uint256(28),uint256(1338),uint256(1336),uint256(2014223714),uint256(2014223716),uint256(9999),uint256(0),uint256(4),uint256(2014223715),uint256(10000),uint256(29),uint256(27),uint256(1532892064),uint256(10001),uint256(96),uint256(2014223714),uint256(2),uint256(254),uint256(254),uint256(9999),uint256(255),uint256(1336),uint256(4),uint256(4),uint256(10000),uint256(2014223716),uint256(96),uint256(2),uint256(4),uint256(254),uint256(9999),uint256(254),uint256(254),uint256(1338),uint256(2014223715),uint256(96),uint256(1532892064),uint256(2014223714),uint256(28),uint256(1337),uint256(255),uint256(6),uint256(2014223714),uint256(10001),uint256(10000),uint256(10001),uint256(2014223716),uint256(1337),uint256(1532892063),uint256(64),uint256(4),uint256(2),uint256(28),uint256(26),uint256(64),uint256(1532892062),uint256(9999),uint256(97),uint256(1),uint256(5),uint256(1338),uint256(4),uint256(256),uint256(95),uint256(256),uint256(2014223716),uint256(10000),uint256(255),uint256(257),uint256(29),uint256(1532892064),uint256(2),uint256(254),uint256(1),uint256(1532892062),uint256(3),uint256(5),uint256(27),uint256(1337),uint256(64),uint256(27),uint256(5),uint256(10000),uint256(65),uint256(256),uint256(2),uint256(96),uint256(257)]"
              },
              {
                "js": "[[43,96,131,68,101,156,176,172,104,199,125,141,254,35,150,233,157,55,192,57,196,14,195,45,27,47,39,14,54,71,123,84],[191,40,149,196,235,99,239,213,126,242,145,178,114,192,187,246,171,221,65,202,196,103,11,221,127,241,173,131,112,30,113,223],[6,88,192,98,157,240,210,153,44,219,197,129,146,16,192,178,201,154,18,19,32,4,200,185,13,150,2,214,205,127,172,114],[83,186,220,135,106,198,46,68,21,99,93,107,59,252,104,36,232,13,121,91,38,166,213,67,252,39,208,16,234,254,17,110],[33,8,44,49,10,96,102,52,109,154,188,187,78,68,120,132,147,150,122,69,237,151,197,194,80,135,252,64,42,172,46,187],[153,88,170,239,204,122,199,40,134,82,41,74,9,26,79,176,14,20,55,70,206,230,37,145,195,179,39,133,251,64,26,171],[92,107,3,2,63,242,217,182,208,184,153,255,116,7,90,108,70,9,171,235,26,93,169,47,240,227,4,112,16,149,175,54],[130,2,231,2,222,202,183,244,49,68,243,247,70,20,143,76,14,1,90,137,169,93,180,100,74,136,109,164,176,165,152,201],[219,97,94,134,100,199,33,189,110,10,113,132,58,238,251,22,57,239,76,121,146,237,128,174,0,38,82,157,203,48,68,43],[231,109,158,255,22,219,122,40,128,136,104,198,143,221,216,37,170,238,107,100,147,237,102,119,205,154,122,233,39,227,147,132],[10,136,160,184,71,161,76,31,129,211,28,18,7,77,225,173,235,125,144,53,63,42,74,141,189,60,105,235,15,156,199,63],[44,151,160,235,241,42,115,183,205,241,122,230,35,117,245,18,52,59,30,66,84,236,14,36,126,15,195,90,112,216,187,252],[221,40,156,147,38,113,61,220,118,135,50,21,2,105,17,61,241,57,125,219,1,240,101,236,58,238,116,18,17,211,2,21],[222,177,81,47,217,200,20,254,71,98,39,84,145,186,139,70,100,97,19,227,244,82,90,40,88,95,21,110,211,242,27,17],[59,75,24,155,105,184,224,178,234,118,158,43,87,190,60,129,13,221,27,171,219,223,154,228,26,248,6,120,34,136,76,107],[245,109,48,105,229,146,216,44,81,155,226,196,146,2,235,62,255,170,25,22,55,92,181,31,129,151,192,122,244,197,74,48],[198,155,152,219,41,35,83,83,145,4,153,164,3,124,97,216,139,156,236,59,219,168,10,7,80,59,167,187,243,93,86,173],[212,235,95,121,19,176,34,55,193,94,140,43,247,175,40,45,155,124,154,203,205,49,195,229,35,106,17,97,52,213,200,217],[158,115,102,96,157,24,57,136,155,226,124,110,62,186,194,37,230,254,37,214,255,235,231,100,133,113,118,2,228,2,87,21],[142,93,185,147,121,221,39,138,157,248,180,248,126,67,66,30,194,92,201,78,129,35,118,147,82,213,3,73,183,6,30,123],[188,162,63,50,60,54,3,86,220,23,72,223,229,45,64,239,231,181,93,232,0,182,238,128,40,23,198,179,73,13,195,201],[9,144,227,86,69,49,243,212,48,229,51,72,58,205,21,183,226,210,236,45,213,237,90,44,80,128,98,204,150,62,147,33],[123,189,157,114,42,238,15,226,241,3,62,248,19,178,86,208,247,195,198,209,129,26,12,133,155,202,86,119,190,229,225,27],[182,199,99,33,62,157,30,137,184,37,244,30,185,107,19,60,211,142,129,115,7,240,92,198,142,1,179,77,18,255,87,22],[9,42,227,220,3,189,205,28,104,74,204,178,49,91,198,72,48,189,243,230,161,23,133,3,194,196,206,88,78,143,187,42],[194,114,75,111,164,240,188,191,104,218,249,114,122,17,166,122,35,83,234,210,106,184,57,5,170,221,68,123,135,71,116,249],[212,212,52,234,73,225,22,85,1,251,63,240,30,249,113,66,105,89,243,104,13,181,152,231,94,140,225,214,134,72,195,177],[125,206,254,177,8,67,95,63,42,125,59,22,96,186,207,162,163,244,117,156,193,8,61,18,27,128,148,123,187,128,203,114],[184,139,216,103,211,245,0,55,64,225,28,17,113,93,100,84,96,243,230,192,20,152,163,163,125,127,36,10,43,98,14,153],[117,76,74,173,66,51,217,171,212,24,183,129,174,210,48,107,139,91,209,218,83,79,42,227,189,82,105,74,153,75,135,192],[12,224,87,105,78,179,73,113,219,79,147,185,38,205,44,177,208,155,253,115,56,183,44,0,11,19,182,167,131,47,73,158],[23,176,243,45,82,2,60,102,36,148,150,155,76,173,13,198,47,19,129,5,228,176,10,246,207,171,125,83,10,55,69,35],[135,204,60,124,162,154,152,249,74,94,141,194,209,54,208,89,237,34,12,235,195,34,80,84,14,185,100,139,1,44,224,87],[172,191,195,193,253,149,200,134,38,68,87,65,224,63,56,196,204,1,75,20,117,56,98,101,172,79,178,51,142,209,36,88],[98,226,50,193,18,123,79,32,251,244,187,200,157,251,143,123,33,218,66,21,210,52,102,0,123,73,152,129,100,78,58,60],[24,248,72,210,3,106,47,133,157,86,151,236,214,190,90,20,133,206,79,248,131,175,138,26,81,149,139,0,103,64,144,45],[8,37,92,201,47,240,9,55,201,68,234,128,194,193,56,148,166,221,174,160,60,34,214,188,91,210,223,186,223,67,74,37],[54,109,162,174,255,119,184,171,174,119,183,203,163,203,50,15,223,147,24,220,130,164,144,238,180,235,10,56,208,182,149,96],[30,86,25,78,214,100,58,233,151,132,155,199,53,122,188,152,210,145,79,246,125,83,211,106,162,15,187,137,21,14,220,49],[153,103,197,243,153,84,52,14,158,136,220,163,141,136,109,45,135,186,91,40,80,67,121,7,109,187,57,205,118,220,73,23],[184,143,19,0,14,123,9,42,87,232,107,8,119,77,249,108,185,150,185,32,21,39,136,155,173,141,61,200,208,184,40,108],[68,38,162,158,200,36,17,217,168,34,185,230,159,71,71,7,237,148,115,201,171,219,225,115,94,5,198,80,118,58,64,56],[84,168,94,50,38,237,27,38,16,101,184,120,10,49,102,144,76,139,101,103,144,11,20,75,166,2,88,75,34,234,232,245],[205,28,73,62,182,117,71,31,57,69,61,224,208,126,185,37,13,46,117,68,236,29,8,111,49,221,167,143,190,104,168,79],[193,97,147,33,158,182,112,81,158,43,161,2,145,167,188,176,61,253,23,253,76,60,32,135,248,110,140,185,110,35,104,2],[233,130,85,153,223,242,185,206,135,126,237,152,244,137,26,111,225,95,51,121,98,30,226,180,161,189,254,147,160,142,183,31],[53,126,87,21,7,106,197,209,240,8,28,209,17,49,129,29,27,234,207,65,131,205,215,228,63,118,80,148,48,129,140,46],[34,247,164,63,166,207,46,112,139,227,77,60,86,52,233,249,188,94,212,149,215,59,145,203,52,55,180,193,34,192,137,10],[233,251,119,233,116,205,204,81,122,189,65,248,118,82,128,208,81,194,178,61,68,166,221,209,82,171,137,124,222,18,124,47],[110,179,2,203,50,128,221,176,209,83,69,91,85,96,101,206,211,123,33,89,5,132,252,21,103,77,28,23,60,98,84,62],[112,112,104,133,94,126,96,33,39,119,215,190,94,147,56,185,1,241,246,139,180,62,223,20,217,53,207,233,91,83,123,222],[153,80,19,89,47,80,214,136,179,224,212,174,16,126,14,15,217,18,71,196,158,20,171,1,132,109,59,242,193,111,46,242],[101,117,38,2,172,214,75,183,180,93,101,94,239,239,126,115,206,32,74,221,187,3,46,205,238,144,45,226,254,147,254,209],[196,204,131,14,223,124,253,158,47,148,2,132,13,217,19,57,241,171,189,229,213,97,216,51,235,77,149,33,33,82,14,74],[244,43,235,141,146,209,6,2,178,197,6,224,90,71,45,28,0,150,4,185,197,161,2,17,123,210,95,72,4,137,15,134],[102,205,222,175,138,1,35,50,11,166,161,200,81,18,228,117,22,236,213,83,177,103,222,142,184,156,157,109,17,33,7,87],[59,194,104,82,253,117,17,71,89,217,244,79,43,221,157,120,68,90,200,5,1,162,229,248,78,241,146,170,220,223,8,243],[43,156,219,207,247,117,94,18,62,126,197,60,50,69,254,111,254,47,50,126,60,6,146,252,156,229,209,189,177,59,31,237],[113,164,217,6,179,169,215,235,123,233,221,74,13,146,169,14,15,241,224,156,213,153,151,27,5,192,48,118,73,174,111,106],[129,163,180,107,204,37,90,27,90,81,134,58,252,167,233,24,150,87,112,19,46,108,107,77,131,90,202,150,191,222,124,246],[205,138,150,89,213,106,125,125,219,5,153,96,140,191,137,196,129,184,61,215,43,85,44,55,71,193,93,127,21,144,173,237],[191,220,54,81,111,253,86,148,223,134,211,175,229,228,32,169,64,178,80,117,228,98,22,16,203,144,80,179,22,192,81,30],[141,35,163,94,88,21,128,147,3,16,140,168,244,201,6,22,131,223,114,101,216,47,24,154,242,208,48,196,20,88,188,115],[167,212,30,93,231,222,69,186,29,227,251,106,189,158,250,101,83,190,186,8,99,91,77,55,80,128,105,68,123,207,92,209],[12,97,188,34,88,170,70,14,99,251,196,36,94,106,130,42,224,148,29,178,108,144,107,75,148,35,239,81,62,11,42,59],[134,242,178,76,43,207,157,22,202,172,255,101,42,111,160,136,49,30,155,186,145,12,132,8,213,156,14,242,30,81,59,130],[52,0,163,90,45,212,120,44,201,48,62,60,88,96,143,198,74,171,96,111,239,79,175,203,74,11,154,207,44,107,175,181],[48,106,91,115,156,131,153,228,149,198,106,198,33,4,48,243,177,146,17,191,12,241,144,48,115,39,47,191,239,192,225,149],[117,10,189,250,74,213,186,219,51,129,77,127,131,108,52,37,231,187,204,39,206,199,180,22,219,72,103,214,14,158,241,94],[15,54,185,178,222,28,224,77,33,88,229,115,18,134,19,34,161,254,68,171,32,30,66,22,150,71,75,164,65,242,108,75],[182,130,193,19,196,54,228,58,61,213,174,243,141,221,168,125,30,194,251,103,80,62,6,92,189,21,40,102,172,189,122,115],[235,220,3,62,85,82,158,118,138,54,121,93,244,45,168,54,227,45,29,178,236,210,96,247,53,10,236,229,176,84,168,210],[13,222,168,18,245,135,157,89,114,39,217,220,180,42,154,205,158,148,136,105,243,229,154,11,137,227,41,30,8,31,96,155],[239,74,66,176,199,176,87,138,58,2,86,251,243,193,226,205,202,138,127,14,114,209,169,136,189,102,138,87,178,11,167,97],[241,206,47,89,196,152,219,51,28,52,245,215,6,9,229,224,112,193,39,152,99,52,17,43,226,127,54,23,154,156,123,105],[37,27,75,202,58,49,177,46,141,159,158,49,179,147,242,180,175,152,247,60,220,119,18,69,175,69,255,178,215,14,110,20],[79,229,103,33,139,96,11,33,213,213,246,203,158,29,66,71,76,41,171,240,137,118,71,43,58,153,175,197,113,224,127,200],[8,169,38,21,189,109,101,242,71,208,185,123,172,198,86,103,234,192,56,150,68,159,200,142,100,236,105,40,59,181,234,4],[238,84,109,17,101,220,207,199,124,36,32,46,34,60,109,246,2,147,124,214,121,41,99,142,48,88,162,204,203,111,178,205],[47,255,76,175,32,92,159,179,73,62,109,140,147,65,176,19,71,86,59,176,210,156,127,71,136,32,191,226,152,69,12,75],[183,91,32,27,80,154,46,104,237,159,46,232,191,241,125,44,204,174,0,218,172,41,176,200,11,242,66,126,96,156,160,102],[158,192,82,217,253,114,160,74,149,28,172,1,129,136,150,161,185,205,37,165,206,177,247,92,27,129,151,96,184,27,178,72],[248,113,69,105,74,191,231,24,142,135,104,204,136,237,198,135,241,26,1,54,220,225,213,74,61,187,15,98,119,232,104,209],[120,162,120,136,89,191,101,73,96,97,100,122,201,233,131,60,17,112,43,78,127,80,194,182,195,134,72,122,6,233,173,85],[203,30,201,234,202,124,5,84,132,35,239,59,87,145,213,75,207,74,248,108,246,114,20,97,81,39,141,3,109,38,159,215],[61,77,211,142,199,203,0,120,27,224,197,225,141,40,208,81,70,135,211,46,21,247,5,24,235,41,28,1,34,107,240,32],[160,193,89,44,216,137,84,238,53,25,206,194,168,221,19,253,87,84,190,163,242,228,217,164,115,159,97,246,227,127,17,232],[12,17,109,110,158,108,98,28,199,201,230,34,162,3,237,145,132,70,147,199,187,143,153,201,240,173,53,220,163,122,77,93],[206,42,205,206,118,181,50,29,82,156,62,49,46,36,189,189,137,124,215,116,176,219,185,98,219,84,222,101,177,101,26,135],[116,226,179,172,222,68,91,109,170,234,201,232,69,101,120,139,163,172,45,61,50,15,158,160,111,210,198,145,135,146,186,174],[6,129,4,64,206,191,95,167,80,88,248,188,38,209,14,9,80,94,216,112,210,80,110,206,153,145,113,114,186,229,228,234],[117,139,224,200,91,71,57,62,22,127,36,78,203,216,174,34,38,232,49,121,209,141,114,76,112,17,216,152,134,167,51,249],[215,127,201,239,128,106,19,241,37,24,240,36,180,136,12,212,138,6,171,133,76,39,43,128,159,103,234,0,198,195,217,75],[226,182,92,4,18,175,166,22,17,156,9,198,48,13,46,139,120,55,237,250,53,131,172,167,106,114,45,14,223,195,47,99],[50,222,95,200,119,241,108,136,152,129,130,227,101,84,79,145,210,153,47,89,211,179,177,19,37,18,128,145,11,11,16,226],[10,206,232,169,60,241,72,66,217,95,72,156,119,196,38,35,112,139,56,143,154,167,233,115,47,118,137,213,78,152,162,163]]",
                "sol": "[bytes32(stringToBytes32(\"43,96,131,68,101,156,176,172,104,199,125,141,254,35,150,233,157,55,192,57,196,14,195,45,27,47,39,14,54,71,123,84\")),bytes32(stringToBytes32(\"191,40,149,196,235,99,239,213,126,242,145,178,114,192,187,246,171,221,65,202,196,103,11,221,127,241,173,131,112,30,113,223\")),bytes32(stringToBytes32(\"6,88,192,98,157,240,210,153,44,219,197,129,146,16,192,178,201,154,18,19,32,4,200,185,13,150,2,214,205,127,172,114\")),bytes32(stringToBytes32(\"83,186,220,135,106,198,46,68,21,99,93,107,59,252,104,36,232,13,121,91,38,166,213,67,252,39,208,16,234,254,17,110\")),bytes32(stringToBytes32(\"33,8,44,49,10,96,102,52,109,154,188,187,78,68,120,132,147,150,122,69,237,151,197,194,80,135,252,64,42,172,46,187\")),bytes32(stringToBytes32(\"153,88,170,239,204,122,199,40,134,82,41,74,9,26,79,176,14,20,55,70,206,230,37,145,195,179,39,133,251,64,26,171\")),bytes32(stringToBytes32(\"92,107,3,2,63,242,217,182,208,184,153,255,116,7,90,108,70,9,171,235,26,93,169,47,240,227,4,112,16,149,175,54\")),bytes32(stringToBytes32(\"130,2,231,2,222,202,183,244,49,68,243,247,70,20,143,76,14,1,90,137,169,93,180,100,74,136,109,164,176,165,152,201\")),bytes32(stringToBytes32(\"219,97,94,134,100,199,33,189,110,10,113,132,58,238,251,22,57,239,76,121,146,237,128,174,0,38,82,157,203,48,68,43\")),bytes32(stringToBytes32(\"231,109,158,255,22,219,122,40,128,136,104,198,143,221,216,37,170,238,107,100,147,237,102,119,205,154,122,233,39,227,147,132\")),bytes32(stringToBytes32(\"10,136,160,184,71,161,76,31,129,211,28,18,7,77,225,173,235,125,144,53,63,42,74,141,189,60,105,235,15,156,199,63\")),bytes32(stringToBytes32(\"44,151,160,235,241,42,115,183,205,241,122,230,35,117,245,18,52,59,30,66,84,236,14,36,126,15,195,90,112,216,187,252\")),bytes32(stringToBytes32(\"221,40,156,147,38,113,61,220,118,135,50,21,2,105,17,61,241,57,125,219,1,240,101,236,58,238,116,18,17,211,2,21\")),bytes32(stringToBytes32(\"222,177,81,47,217,200,20,254,71,98,39,84,145,186,139,70,100,97,19,227,244,82,90,40,88,95,21,110,211,242,27,17\")),bytes32(stringToBytes32(\"59,75,24,155,105,184,224,178,234,118,158,43,87,190,60,129,13,221,27,171,219,223,154,228,26,248,6,120,34,136,76,107\")),bytes32(stringToBytes32(\"245,109,48,105,229,146,216,44,81,155,226,196,146,2,235,62,255,170,25,22,55,92,181,31,129,151,192,122,244,197,74,48\")),bytes32(stringToBytes32(\"198,155,152,219,41,35,83,83,145,4,153,164,3,124,97,216,139,156,236,59,219,168,10,7,80,59,167,187,243,93,86,173\")),bytes32(stringToBytes32(\"212,235,95,121,19,176,34,55,193,94,140,43,247,175,40,45,155,124,154,203,205,49,195,229,35,106,17,97,52,213,200,217\")),bytes32(stringToBytes32(\"158,115,102,96,157,24,57,136,155,226,124,110,62,186,194,37,230,254,37,214,255,235,231,100,133,113,118,2,228,2,87,21\")),bytes32(stringToBytes32(\"142,93,185,147,121,221,39,138,157,248,180,248,126,67,66,30,194,92,201,78,129,35,118,147,82,213,3,73,183,6,30,123\")),bytes32(stringToBytes32(\"188,162,63,50,60,54,3,86,220,23,72,223,229,45,64,239,231,181,93,232,0,182,238,128,40,23,198,179,73,13,195,201\")),bytes32(stringToBytes32(\"9,144,227,86,69,49,243,212,48,229,51,72,58,205,21,183,226,210,236,45,213,237,90,44,80,128,98,204,150,62,147,33\")),bytes32(stringToBytes32(\"123,189,157,114,42,238,15,226,241,3,62,248,19,178,86,208,247,195,198,209,129,26,12,133,155,202,86,119,190,229,225,27\")),bytes32(stringToBytes32(\"182,199,99,33,62,157,30,137,184,37,244,30,185,107,19,60,211,142,129,115,7,240,92,198,142,1,179,77,18,255,87,22\")),bytes32(stringToBytes32(\"9,42,227,220,3,189,205,28,104,74,204,178,49,91,198,72,48,189,243,230,161,23,133,3,194,196,206,88,78,143,187,42\")),bytes32(stringToBytes32(\"194,114,75,111,164,240,188,191,104,218,249,114,122,17,166,122,35,83,234,210,106,184,57,5,170,221,68,123,135,71,116,249\")),bytes32(stringToBytes32(\"212,212,52,234,73,225,22,85,1,251,63,240,30,249,113,66,105,89,243,104,13,181,152,231,94,140,225,214,134,72,195,177\")),bytes32(stringToBytes32(\"125,206,254,177,8,67,95,63,42,125,59,22,96,186,207,162,163,244,117,156,193,8,61,18,27,128,148,123,187,128,203,114\")),bytes32(stringToBytes32(\"184,139,216,103,211,245,0,55,64,225,28,17,113,93,100,84,96,243,230,192,20,152,163,163,125,127,36,10,43,98,14,153\")),bytes32(stringToBytes32(\"117,76,74,173,66,51,217,171,212,24,183,129,174,210,48,107,139,91,209,218,83,79,42,227,189,82,105,74,153,75,135,192\")),bytes32(stringToBytes32(\"12,224,87,105,78,179,73,113,219,79,147,185,38,205,44,177,208,155,253,115,56,183,44,0,11,19,182,167,131,47,73,158\")),bytes32(stringToBytes32(\"23,176,243,45,82,2,60,102,36,148,150,155,76,173,13,198,47,19,129,5,228,176,10,246,207,171,125,83,10,55,69,35\")),bytes32(stringToBytes32(\"135,204,60,124,162,154,152,249,74,94,141,194,209,54,208,89,237,34,12,235,195,34,80,84,14,185,100,139,1,44,224,87\")),bytes32(stringToBytes32(\"172,191,195,193,253,149,200,134,38,68,87,65,224,63,56,196,204,1,75,20,117,56,98,101,172,79,178,51,142,209,36,88\")),bytes32(stringToBytes32(\"98,226,50,193,18,123,79,32,251,244,187,200,157,251,143,123,33,218,66,21,210,52,102,0,123,73,152,129,100,78,58,60\")),bytes32(stringToBytes32(\"24,248,72,210,3,106,47,133,157,86,151,236,214,190,90,20,133,206,79,248,131,175,138,26,81,149,139,0,103,64,144,45\")),bytes32(stringToBytes32(\"8,37,92,201,47,240,9,55,201,68,234,128,194,193,56,148,166,221,174,160,60,34,214,188,91,210,223,186,223,67,74,37\")),bytes32(stringToBytes32(\"54,109,162,174,255,119,184,171,174,119,183,203,163,203,50,15,223,147,24,220,130,164,144,238,180,235,10,56,208,182,149,96\")),bytes32(stringToBytes32(\"30,86,25,78,214,100,58,233,151,132,155,199,53,122,188,152,210,145,79,246,125,83,211,106,162,15,187,137,21,14,220,49\")),bytes32(stringToBytes32(\"153,103,197,243,153,84,52,14,158,136,220,163,141,136,109,45,135,186,91,40,80,67,121,7,109,187,57,205,118,220,73,23\")),bytes32(stringToBytes32(\"184,143,19,0,14,123,9,42,87,232,107,8,119,77,249,108,185,150,185,32,21,39,136,155,173,141,61,200,208,184,40,108\")),bytes32(stringToBytes32(\"68,38,162,158,200,36,17,217,168,34,185,230,159,71,71,7,237,148,115,201,171,219,225,115,94,5,198,80,118,58,64,56\")),bytes32(stringToBytes32(\"84,168,94,50,38,237,27,38,16,101,184,120,10,49,102,144,76,139,101,103,144,11,20,75,166,2,88,75,34,234,232,245\")),bytes32(stringToBytes32(\"205,28,73,62,182,117,71,31,57,69,61,224,208,126,185,37,13,46,117,68,236,29,8,111,49,221,167,143,190,104,168,79\")),bytes32(stringToBytes32(\"193,97,147,33,158,182,112,81,158,43,161,2,145,167,188,176,61,253,23,253,76,60,32,135,248,110,140,185,110,35,104,2\")),bytes32(stringToBytes32(\"233,130,85,153,223,242,185,206,135,126,237,152,244,137,26,111,225,95,51,121,98,30,226,180,161,189,254,147,160,142,183,31\")),bytes32(stringToBytes32(\"53,126,87,21,7,106,197,209,240,8,28,209,17,49,129,29,27,234,207,65,131,205,215,228,63,118,80,148,48,129,140,46\")),bytes32(stringToBytes32(\"34,247,164,63,166,207,46,112,139,227,77,60,86,52,233,249,188,94,212,149,215,59,145,203,52,55,180,193,34,192,137,10\")),bytes32(stringToBytes32(\"233,251,119,233,116,205,204,81,122,189,65,248,118,82,128,208,81,194,178,61,68,166,221,209,82,171,137,124,222,18,124,47\")),bytes32(stringToBytes32(\"110,179,2,203,50,128,221,176,209,83,69,91,85,96,101,206,211,123,33,89,5,132,252,21,103,77,28,23,60,98,84,62\")),bytes32(stringToBytes32(\"112,112,104,133,94,126,96,33,39,119,215,190,94,147,56,185,1,241,246,139,180,62,223,20,217,53,207,233,91,83,123,222\")),bytes32(stringToBytes32(\"153,80,19,89,47,80,214,136,179,224,212,174,16,126,14,15,217,18,71,196,158,20,171,1,132,109,59,242,193,111,46,242\")),bytes32(stringToBytes32(\"101,117,38,2,172,214,75,183,180,93,101,94,239,239,126,115,206,32,74,221,187,3,46,205,238,144,45,226,254,147,254,209\")),bytes32(stringToBytes32(\"196,204,131,14,223,124,253,158,47,148,2,132,13,217,19,57,241,171,189,229,213,97,216,51,235,77,149,33,33,82,14,74\")),bytes32(stringToBytes32(\"244,43,235,141,146,209,6,2,178,197,6,224,90,71,45,28,0,150,4,185,197,161,2,17,123,210,95,72,4,137,15,134\")),bytes32(stringToBytes32(\"102,205,222,175,138,1,35,50,11,166,161,200,81,18,228,117,22,236,213,83,177,103,222,142,184,156,157,109,17,33,7,87\")),bytes32(stringToBytes32(\"59,194,104,82,253,117,17,71,89,217,244,79,43,221,157,120,68,90,200,5,1,162,229,248,78,241,146,170,220,223,8,243\")),bytes32(stringToBytes32(\"43,156,219,207,247,117,94,18,62,126,197,60,50,69,254,111,254,47,50,126,60,6,146,252,156,229,209,189,177,59,31,237\")),bytes32(stringToBytes32(\"113,164,217,6,179,169,215,235,123,233,221,74,13,146,169,14,15,241,224,156,213,153,151,27,5,192,48,118,73,174,111,106\")),bytes32(stringToBytes32(\"129,163,180,107,204,37,90,27,90,81,134,58,252,167,233,24,150,87,112,19,46,108,107,77,131,90,202,150,191,222,124,246\")),bytes32(stringToBytes32(\"205,138,150,89,213,106,125,125,219,5,153,96,140,191,137,196,129,184,61,215,43,85,44,55,71,193,93,127,21,144,173,237\")),bytes32(stringToBytes32(\"191,220,54,81,111,253,86,148,223,134,211,175,229,228,32,169,64,178,80,117,228,98,22,16,203,144,80,179,22,192,81,30\")),bytes32(stringToBytes32(\"141,35,163,94,88,21,128,147,3,16,140,168,244,201,6,22,131,223,114,101,216,47,24,154,242,208,48,196,20,88,188,115\")),bytes32(stringToBytes32(\"167,212,30,93,231,222,69,186,29,227,251,106,189,158,250,101,83,190,186,8,99,91,77,55,80,128,105,68,123,207,92,209\")),bytes32(stringToBytes32(\"12,97,188,34,88,170,70,14,99,251,196,36,94,106,130,42,224,148,29,178,108,144,107,75,148,35,239,81,62,11,42,59\")),bytes32(stringToBytes32(\"134,242,178,76,43,207,157,22,202,172,255,101,42,111,160,136,49,30,155,186,145,12,132,8,213,156,14,242,30,81,59,130\")),bytes32(stringToBytes32(\"52,0,163,90,45,212,120,44,201,48,62,60,88,96,143,198,74,171,96,111,239,79,175,203,74,11,154,207,44,107,175,181\")),bytes32(stringToBytes32(\"48,106,91,115,156,131,153,228,149,198,106,198,33,4,48,243,177,146,17,191,12,241,144,48,115,39,47,191,239,192,225,149\")),bytes32(stringToBytes32(\"117,10,189,250,74,213,186,219,51,129,77,127,131,108,52,37,231,187,204,39,206,199,180,22,219,72,103,214,14,158,241,94\")),bytes32(stringToBytes32(\"15,54,185,178,222,28,224,77,33,88,229,115,18,134,19,34,161,254,68,171,32,30,66,22,150,71,75,164,65,242,108,75\")),bytes32(stringToBytes32(\"182,130,193,19,196,54,228,58,61,213,174,243,141,221,168,125,30,194,251,103,80,62,6,92,189,21,40,102,172,189,122,115\")),bytes32(stringToBytes32(\"235,220,3,62,85,82,158,118,138,54,121,93,244,45,168,54,227,45,29,178,236,210,96,247,53,10,236,229,176,84,168,210\")),bytes32(stringToBytes32(\"13,222,168,18,245,135,157,89,114,39,217,220,180,42,154,205,158,148,136,105,243,229,154,11,137,227,41,30,8,31,96,155\")),bytes32(stringToBytes32(\"239,74,66,176,199,176,87,138,58,2,86,251,243,193,226,205,202,138,127,14,114,209,169,136,189,102,138,87,178,11,167,97\")),bytes32(stringToBytes32(\"241,206,47,89,196,152,219,51,28,52,245,215,6,9,229,224,112,193,39,152,99,52,17,43,226,127,54,23,154,156,123,105\")),bytes32(stringToBytes32(\"37,27,75,202,58,49,177,46,141,159,158,49,179,147,242,180,175,152,247,60,220,119,18,69,175,69,255,178,215,14,110,20\")),bytes32(stringToBytes32(\"79,229,103,33,139,96,11,33,213,213,246,203,158,29,66,71,76,41,171,240,137,118,71,43,58,153,175,197,113,224,127,200\")),bytes32(stringToBytes32(\"8,169,38,21,189,109,101,242,71,208,185,123,172,198,86,103,234,192,56,150,68,159,200,142,100,236,105,40,59,181,234,4\")),bytes32(stringToBytes32(\"238,84,109,17,101,220,207,199,124,36,32,46,34,60,109,246,2,147,124,214,121,41,99,142,48,88,162,204,203,111,178,205\")),bytes32(stringToBytes32(\"47,255,76,175,32,92,159,179,73,62,109,140,147,65,176,19,71,86,59,176,210,156,127,71,136,32,191,226,152,69,12,75\")),bytes32(stringToBytes32(\"183,91,32,27,80,154,46,104,237,159,46,232,191,241,125,44,204,174,0,218,172,41,176,200,11,242,66,126,96,156,160,102\")),bytes32(stringToBytes32(\"158,192,82,217,253,114,160,74,149,28,172,1,129,136,150,161,185,205,37,165,206,177,247,92,27,129,151,96,184,27,178,72\")),bytes32(stringToBytes32(\"248,113,69,105,74,191,231,24,142,135,104,204,136,237,198,135,241,26,1,54,220,225,213,74,61,187,15,98,119,232,104,209\")),bytes32(stringToBytes32(\"120,162,120,136,89,191,101,73,96,97,100,122,201,233,131,60,17,112,43,78,127,80,194,182,195,134,72,122,6,233,173,85\")),bytes32(stringToBytes32(\"203,30,201,234,202,124,5,84,132,35,239,59,87,145,213,75,207,74,248,108,246,114,20,97,81,39,141,3,109,38,159,215\")),bytes32(stringToBytes32(\"61,77,211,142,199,203,0,120,27,224,197,225,141,40,208,81,70,135,211,46,21,247,5,24,235,41,28,1,34,107,240,32\")),bytes32(stringToBytes32(\"160,193,89,44,216,137,84,238,53,25,206,194,168,221,19,253,87,84,190,163,242,228,217,164,115,159,97,246,227,127,17,232\")),bytes32(stringToBytes32(\"12,17,109,110,158,108,98,28,199,201,230,34,162,3,237,145,132,70,147,199,187,143,153,201,240,173,53,220,163,122,77,93\")),bytes32(stringToBytes32(\"206,42,205,206,118,181,50,29,82,156,62,49,46,36,189,189,137,124,215,116,176,219,185,98,219,84,222,101,177,101,26,135\")),bytes32(stringToBytes32(\"116,226,179,172,222,68,91,109,170,234,201,232,69,101,120,139,163,172,45,61,50,15,158,160,111,210,198,145,135,146,186,174\")),bytes32(stringToBytes32(\"6,129,4,64,206,191,95,167,80,88,248,188,38,209,14,9,80,94,216,112,210,80,110,206,153,145,113,114,186,229,228,234\")),bytes32(stringToBytes32(\"117,139,224,200,91,71,57,62,22,127,36,78,203,216,174,34,38,232,49,121,209,141,114,76,112,17,216,152,134,167,51,249\")),bytes32(stringToBytes32(\"215,127,201,239,128,106,19,241,37,24,240,36,180,136,12,212,138,6,171,133,76,39,43,128,159,103,234,0,198,195,217,75\")),bytes32(stringToBytes32(\"226,182,92,4,18,175,166,22,17,156,9,198,48,13,46,139,120,55,237,250,53,131,172,167,106,114,45,14,223,195,47,99\")),bytes32(stringToBytes32(\"50,222,95,200,119,241,108,136,152,129,130,227,101,84,79,145,210,153,47,89,211,179,177,19,37,18,128,145,11,11,16,226\")),bytes32(stringToBytes32(\"10,206,232,169,60,241,72,66,217,95,72,156,119,196,38,35,112,139,56,143,154,167,233,115,47,118,137,213,78,152,162,163\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[256,1,1532892064,255,2014223716,66,1,95,97,3,0,65,10000,10000,29,0,3,3,1532892064,1532892064,3,4,26,3,6,4,5,97,255,95,9999,4,1532892062,1532892062,255,1336,1336,28,9999,28,6,10000,26,64,6,95,0,2014223716,28,1532892064,256,6,95,1336,2014223716,254,5,10001,66,4,3,1532892063,96,1532892064,5,1,5,96,4,2,1336,66,27,3,29,1338,64,256,1532892064,2,2,1532892062,1,97,27,3,2,96,254,26,254,26,1,10001,95,5]",
                "sol": "[uint256(256),uint256(1),uint256(1532892064),uint256(255),uint256(2014223716),uint256(66),uint256(1),uint256(95),uint256(97),uint256(3),uint256(0),uint256(65),uint256(10000),uint256(10000),uint256(29),uint256(0),uint256(3),uint256(3),uint256(1532892064),uint256(1532892064),uint256(3),uint256(4),uint256(26),uint256(3),uint256(6),uint256(4),uint256(5),uint256(97),uint256(255),uint256(95),uint256(9999),uint256(4),uint256(1532892062),uint256(1532892062),uint256(255),uint256(1336),uint256(1336),uint256(28),uint256(9999),uint256(28),uint256(6),uint256(10000),uint256(26),uint256(64),uint256(6),uint256(95),uint256(0),uint256(2014223716),uint256(28),uint256(1532892064),uint256(256),uint256(6),uint256(95),uint256(1336),uint256(2014223716),uint256(254),uint256(5),uint256(10001),uint256(66),uint256(4),uint256(3),uint256(1532892063),uint256(96),uint256(1532892064),uint256(5),uint256(1),uint256(5),uint256(96),uint256(4),uint256(2),uint256(1336),uint256(66),uint256(27),uint256(3),uint256(29),uint256(1338),uint256(64),uint256(256),uint256(1532892064),uint256(2),uint256(2),uint256(1532892062),uint256(1),uint256(97),uint256(27),uint256(3),uint256(2),uint256(96),uint256(254),uint256(26),uint256(254),uint256(26),uint256(1),uint256(10001),uint256(95),uint256(5)]"
              },
              {
                "js": "[1532892064,95,65,1,254,6,1532892062,5,28,1338,1336,2014223714,2014223716,9999,0,4,2014223715,10000,29,27,1532892064,10001,96,2014223714,2,254,254,9999,255,1336,4,4,10000,2014223716,96,2,4,254,9999,254,254,1338,2014223715,96,1532892064,2014223714,28,1337,255,6,2014223714,10001,10000,10001,2014223716,1337,1532892063,64,4,2,28,26,64,1532892062,9999,97,1,5,1338,4,256,95,256,2014223716,10000,255,257,29,1532892064,2,254,1,1532892062,3,5,27,1337,64,27,5,10000,65,256,2,96,257]",
                "sol": "[uint256(1532892064),uint256(95),uint256(65),uint256(1),uint256(254),uint256(6),uint256(1532892062),uint256(5),uint256(28),uint256(1338),uint256(1336),uint256(2014223714),uint256(2014223716),uint256(9999),uint256(0),uint256(4),uint256(2014223715),uint256(10000),uint256(29),uint256(27),uint256(1532892064),uint256(10001),uint256(96),uint256(2014223714),uint256(2),uint256(254),uint256(254),uint256(9999),uint256(255),uint256(1336),uint256(4),uint256(4),uint256(10000),uint256(2014223716),uint256(96),uint256(2),uint256(4),uint256(254),uint256(9999),uint256(254),uint256(254),uint256(1338),uint256(2014223715),uint256(96),uint256(1532892064),uint256(2014223714),uint256(28),uint256(1337),uint256(255),uint256(6),uint256(2014223714),uint256(10001),uint256(10000),uint256(10001),uint256(2014223716),uint256(1337),uint256(1532892063),uint256(64),uint256(4),uint256(2),uint256(28),uint256(26),uint256(64),uint256(1532892062),uint256(9999),uint256(97),uint256(1),uint256(5),uint256(1338),uint256(4),uint256(256),uint256(95),uint256(256),uint256(2014223716),uint256(10000),uint256(255),uint256(257),uint256(29),uint256(1532892064),uint256(2),uint256(254),uint256(1),uint256(1532892062),uint256(3),uint256(5),uint256(27),uint256(1337),uint256(64),uint256(27),uint256(5),uint256(10000),uint256(65),uint256(256),uint256(2),uint256(96),uint256(257)]"
              },
              {
                "js": "[[43,96,131,68,101,156,176,172,104,199,125,141,254,35,150,233,157,55,192,57,196,14,195,45,27,47,39,14,54,71,123,84],[191,40,149,196,235,99,239,213,126,242,145,178,114,192,187,246,171,221,65,202,196,103,11,221,127,241,173,131,112,30,113,223],[6,88,192,98,157,240,210,153,44,219,197,129,146,16,192,178,201,154,18,19,32,4,200,185,13,150,2,214,205,127,172,114],[83,186,220,135,106,198,46,68,21,99,93,107,59,252,104,36,232,13,121,91,38,166,213,67,252,39,208,16,234,254,17,110],[33,8,44,49,10,96,102,52,109,154,188,187,78,68,120,132,147,150,122,69,237,151,197,194,80,135,252,64,42,172,46,187],[153,88,170,239,204,122,199,40,134,82,41,74,9,26,79,176,14,20,55,70,206,230,37,145,195,179,39,133,251,64,26,171],[92,107,3,2,63,242,217,182,208,184,153,255,116,7,90,108,70,9,171,235,26,93,169,47,240,227,4,112,16,149,175,54],[130,2,231,2,222,202,183,244,49,68,243,247,70,20,143,76,14,1,90,137,169,93,180,100,74,136,109,164,176,165,152,201],[219,97,94,134,100,199,33,189,110,10,113,132,58,238,251,22,57,239,76,121,146,237,128,174,0,38,82,157,203,48,68,43],[231,109,158,255,22,219,122,40,128,136,104,198,143,221,216,37,170,238,107,100,147,237,102,119,205,154,122,233,39,227,147,132],[10,136,160,184,71,161,76,31,129,211,28,18,7,77,225,173,235,125,144,53,63,42,74,141,189,60,105,235,15,156,199,63],[44,151,160,235,241,42,115,183,205,241,122,230,35,117,245,18,52,59,30,66,84,236,14,36,126,15,195,90,112,216,187,252],[221,40,156,147,38,113,61,220,118,135,50,21,2,105,17,61,241,57,125,219,1,240,101,236,58,238,116,18,17,211,2,21],[222,177,81,47,217,200,20,254,71,98,39,84,145,186,139,70,100,97,19,227,244,82,90,40,88,95,21,110,211,242,27,17],[59,75,24,155,105,184,224,178,234,118,158,43,87,190,60,129,13,221,27,171,219,223,154,228,26,248,6,120,34,136,76,107],[245,109,48,105,229,146,216,44,81,155,226,196,146,2,235,62,255,170,25,22,55,92,181,31,129,151,192,122,244,197,74,48],[198,155,152,219,41,35,83,83,145,4,153,164,3,124,97,216,139,156,236,59,219,168,10,7,80,59,167,187,243,93,86,173],[212,235,95,121,19,176,34,55,193,94,140,43,247,175,40,45,155,124,154,203,205,49,195,229,35,106,17,97,52,213,200,217],[158,115,102,96,157,24,57,136,155,226,124,110,62,186,194,37,230,254,37,214,255,235,231,100,133,113,118,2,228,2,87,21],[142,93,185,147,121,221,39,138,157,248,180,248,126,67,66,30,194,92,201,78,129,35,118,147,82,213,3,73,183,6,30,123],[188,162,63,50,60,54,3,86,220,23,72,223,229,45,64,239,231,181,93,232,0,182,238,128,40,23,198,179,73,13,195,201],[9,144,227,86,69,49,243,212,48,229,51,72,58,205,21,183,226,210,236,45,213,237,90,44,80,128,98,204,150,62,147,33],[123,189,157,114,42,238,15,226,241,3,62,248,19,178,86,208,247,195,198,209,129,26,12,133,155,202,86,119,190,229,225,27],[182,199,99,33,62,157,30,137,184,37,244,30,185,107,19,60,211,142,129,115,7,240,92,198,142,1,179,77,18,255,87,22],[9,42,227,220,3,189,205,28,104,74,204,178,49,91,198,72,48,189,243,230,161,23,133,3,194,196,206,88,78,143,187,42],[194,114,75,111,164,240,188,191,104,218,249,114,122,17,166,122,35,83,234,210,106,184,57,5,170,221,68,123,135,71,116,249],[212,212,52,234,73,225,22,85,1,251,63,240,30,249,113,66,105,89,243,104,13,181,152,231,94,140,225,214,134,72,195,177],[125,206,254,177,8,67,95,63,42,125,59,22,96,186,207,162,163,244,117,156,193,8,61,18,27,128,148,123,187,128,203,114],[184,139,216,103,211,245,0,55,64,225,28,17,113,93,100,84,96,243,230,192,20,152,163,163,125,127,36,10,43,98,14,153],[117,76,74,173,66,51,217,171,212,24,183,129,174,210,48,107,139,91,209,218,83,79,42,227,189,82,105,74,153,75,135,192],[12,224,87,105,78,179,73,113,219,79,147,185,38,205,44,177,208,155,253,115,56,183,44,0,11,19,182,167,131,47,73,158],[23,176,243,45,82,2,60,102,36,148,150,155,76,173,13,198,47,19,129,5,228,176,10,246,207,171,125,83,10,55,69,35],[135,204,60,124,162,154,152,249,74,94,141,194,209,54,208,89,237,34,12,235,195,34,80,84,14,185,100,139,1,44,224,87],[172,191,195,193,253,149,200,134,38,68,87,65,224,63,56,196,204,1,75,20,117,56,98,101,172,79,178,51,142,209,36,88],[98,226,50,193,18,123,79,32,251,244,187,200,157,251,143,123,33,218,66,21,210,52,102,0,123,73,152,129,100,78,58,60],[24,248,72,210,3,106,47,133,157,86,151,236,214,190,90,20,133,206,79,248,131,175,138,26,81,149,139,0,103,64,144,45],[8,37,92,201,47,240,9,55,201,68,234,128,194,193,56,148,166,221,174,160,60,34,214,188,91,210,223,186,223,67,74,37],[54,109,162,174,255,119,184,171,174,119,183,203,163,203,50,15,223,147,24,220,130,164,144,238,180,235,10,56,208,182,149,96],[30,86,25,78,214,100,58,233,151,132,155,199,53,122,188,152,210,145,79,246,125,83,211,106,162,15,187,137,21,14,220,49],[153,103,197,243,153,84,52,14,158,136,220,163,141,136,109,45,135,186,91,40,80,67,121,7,109,187,57,205,118,220,73,23],[184,143,19,0,14,123,9,42,87,232,107,8,119,77,249,108,185,150,185,32,21,39,136,155,173,141,61,200,208,184,40,108],[68,38,162,158,200,36,17,217,168,34,185,230,159,71,71,7,237,148,115,201,171,219,225,115,94,5,198,80,118,58,64,56],[84,168,94,50,38,237,27,38,16,101,184,120,10,49,102,144,76,139,101,103,144,11,20,75,166,2,88,75,34,234,232,245],[205,28,73,62,182,117,71,31,57,69,61,224,208,126,185,37,13,46,117,68,236,29,8,111,49,221,167,143,190,104,168,79],[193,97,147,33,158,182,112,81,158,43,161,2,145,167,188,176,61,253,23,253,76,60,32,135,248,110,140,185,110,35,104,2],[233,130,85,153,223,242,185,206,135,126,237,152,244,137,26,111,225,95,51,121,98,30,226,180,161,189,254,147,160,142,183,31],[53,126,87,21,7,106,197,209,240,8,28,209,17,49,129,29,27,234,207,65,131,205,215,228,63,118,80,148,48,129,140,46],[34,247,164,63,166,207,46,112,139,227,77,60,86,52,233,249,188,94,212,149,215,59,145,203,52,55,180,193,34,192,137,10],[233,251,119,233,116,205,204,81,122,189,65,248,118,82,128,208,81,194,178,61,68,166,221,209,82,171,137,124,222,18,124,47],[110,179,2,203,50,128,221,176,209,83,69,91,85,96,101,206,211,123,33,89,5,132,252,21,103,77,28,23,60,98,84,62],[112,112,104,133,94,126,96,33,39,119,215,190,94,147,56,185,1,241,246,139,180,62,223,20,217,53,207,233,91,83,123,222],[153,80,19,89,47,80,214,136,179,224,212,174,16,126,14,15,217,18,71,196,158,20,171,1,132,109,59,242,193,111,46,242],[101,117,38,2,172,214,75,183,180,93,101,94,239,239,126,115,206,32,74,221,187,3,46,205,238,144,45,226,254,147,254,209],[196,204,131,14,223,124,253,158,47,148,2,132,13,217,19,57,241,171,189,229,213,97,216,51,235,77,149,33,33,82,14,74],[244,43,235,141,146,209,6,2,178,197,6,224,90,71,45,28,0,150,4,185,197,161,2,17,123,210,95,72,4,137,15,134],[102,205,222,175,138,1,35,50,11,166,161,200,81,18,228,117,22,236,213,83,177,103,222,142,184,156,157,109,17,33,7,87],[59,194,104,82,253,117,17,71,89,217,244,79,43,221,157,120,68,90,200,5,1,162,229,248,78,241,146,170,220,223,8,243],[43,156,219,207,247,117,94,18,62,126,197,60,50,69,254,111,254,47,50,126,60,6,146,252,156,229,209,189,177,59,31,237],[113,164,217,6,179,169,215,235,123,233,221,74,13,146,169,14,15,241,224,156,213,153,151,27,5,192,48,118,73,174,111,106],[129,163,180,107,204,37,90,27,90,81,134,58,252,167,233,24,150,87,112,19,46,108,107,77,131,90,202,150,191,222,124,246],[205,138,150,89,213,106,125,125,219,5,153,96,140,191,137,196,129,184,61,215,43,85,44,55,71,193,93,127,21,144,173,237],[191,220,54,81,111,253,86,148,223,134,211,175,229,228,32,169,64,178,80,117,228,98,22,16,203,144,80,179,22,192,81,30],[141,35,163,94,88,21,128,147,3,16,140,168,244,201,6,22,131,223,114,101,216,47,24,154,242,208,48,196,20,88,188,115],[167,212,30,93,231,222,69,186,29,227,251,106,189,158,250,101,83,190,186,8,99,91,77,55,80,128,105,68,123,207,92,209],[12,97,188,34,88,170,70,14,99,251,196,36,94,106,130,42,224,148,29,178,108,144,107,75,148,35,239,81,62,11,42,59],[134,242,178,76,43,207,157,22,202,172,255,101,42,111,160,136,49,30,155,186,145,12,132,8,213,156,14,242,30,81,59,130],[52,0,163,90,45,212,120,44,201,48,62,60,88,96,143,198,74,171,96,111,239,79,175,203,74,11,154,207,44,107,175,181],[48,106,91,115,156,131,153,228,149,198,106,198,33,4,48,243,177,146,17,191,12,241,144,48,115,39,47,191,239,192,225,149],[117,10,189,250,74,213,186,219,51,129,77,127,131,108,52,37,231,187,204,39,206,199,180,22,219,72,103,214,14,158,241,94],[15,54,185,178,222,28,224,77,33,88,229,115,18,134,19,34,161,254,68,171,32,30,66,22,150,71,75,164,65,242,108,75],[182,130,193,19,196,54,228,58,61,213,174,243,141,221,168,125,30,194,251,103,80,62,6,92,189,21,40,102,172,189,122,115],[235,220,3,62,85,82,158,118,138,54,121,93,244,45,168,54,227,45,29,178,236,210,96,247,53,10,236,229,176,84,168,210],[13,222,168,18,245,135,157,89,114,39,217,220,180,42,154,205,158,148,136,105,243,229,154,11,137,227,41,30,8,31,96,155],[239,74,66,176,199,176,87,138,58,2,86,251,243,193,226,205,202,138,127,14,114,209,169,136,189,102,138,87,178,11,167,97],[241,206,47,89,196,152,219,51,28,52,245,215,6,9,229,224,112,193,39,152,99,52,17,43,226,127,54,23,154,156,123,105],[37,27,75,202,58,49,177,46,141,159,158,49,179,147,242,180,175,152,247,60,220,119,18,69,175,69,255,178,215,14,110,20],[79,229,103,33,139,96,11,33,213,213,246,203,158,29,66,71,76,41,171,240,137,118,71,43,58,153,175,197,113,224,127,200],[8,169,38,21,189,109,101,242,71,208,185,123,172,198,86,103,234,192,56,150,68,159,200,142,100,236,105,40,59,181,234,4],[238,84,109,17,101,220,207,199,124,36,32,46,34,60,109,246,2,147,124,214,121,41,99,142,48,88,162,204,203,111,178,205],[47,255,76,175,32,92,159,179,73,62,109,140,147,65,176,19,71,86,59,176,210,156,127,71,136,32,191,226,152,69,12,75],[183,91,32,27,80,154,46,104,237,159,46,232,191,241,125,44,204,174,0,218,172,41,176,200,11,242,66,126,96,156,160,102],[158,192,82,217,253,114,160,74,149,28,172,1,129,136,150,161,185,205,37,165,206,177,247,92,27,129,151,96,184,27,178,72],[248,113,69,105,74,191,231,24,142,135,104,204,136,237,198,135,241,26,1,54,220,225,213,74,61,187,15,98,119,232,104,209],[120,162,120,136,89,191,101,73,96,97,100,122,201,233,131,60,17,112,43,78,127,80,194,182,195,134,72,122,6,233,173,85],[203,30,201,234,202,124,5,84,132,35,239,59,87,145,213,75,207,74,248,108,246,114,20,97,81,39,141,3,109,38,159,215],[61,77,211,142,199,203,0,120,27,224,197,225,141,40,208,81,70,135,211,46,21,247,5,24,235,41,28,1,34,107,240,32],[160,193,89,44,216,137,84,238,53,25,206,194,168,221,19,253,87,84,190,163,242,228,217,164,115,159,97,246,227,127,17,232],[12,17,109,110,158,108,98,28,199,201,230,34,162,3,237,145,132,70,147,199,187,143,153,201,240,173,53,220,163,122,77,93],[206,42,205,206,118,181,50,29,82,156,62,49,46,36,189,189,137,124,215,116,176,219,185,98,219,84,222,101,177,101,26,135],[116,226,179,172,222,68,91,109,170,234,201,232,69,101,120,139,163,172,45,61,50,15,158,160,111,210,198,145,135,146,186,174],[6,129,4,64,206,191,95,167,80,88,248,188,38,209,14,9,80,94,216,112,210,80,110,206,153,145,113,114,186,229,228,234],[117,139,224,200,91,71,57,62,22,127,36,78,203,216,174,34,38,232,49,121,209,141,114,76,112,17,216,152,134,167,51,249],[215,127,201,239,128,106,19,241,37,24,240,36,180,136,12,212,138,6,171,133,76,39,43,128,159,103,234,0,198,195,217,75],[226,182,92,4,18,175,166,22,17,156,9,198,48,13,46,139,120,55,237,250,53,131,172,167,106,114,45,14,223,195,47,99],[50,222,95,200,119,241,108,136,152,129,130,227,101,84,79,145,210,153,47,89,211,179,177,19,37,18,128,145,11,11,16,226],[10,206,232,169,60,241,72,66,217,95,72,156,119,196,38,35,112,139,56,143,154,167,233,115,47,118,137,213,78,152,162,163]]",
                "sol": "[bytes32(stringToBytes32(\"43,96,131,68,101,156,176,172,104,199,125,141,254,35,150,233,157,55,192,57,196,14,195,45,27,47,39,14,54,71,123,84\")),bytes32(stringToBytes32(\"191,40,149,196,235,99,239,213,126,242,145,178,114,192,187,246,171,221,65,202,196,103,11,221,127,241,173,131,112,30,113,223\")),bytes32(stringToBytes32(\"6,88,192,98,157,240,210,153,44,219,197,129,146,16,192,178,201,154,18,19,32,4,200,185,13,150,2,214,205,127,172,114\")),bytes32(stringToBytes32(\"83,186,220,135,106,198,46,68,21,99,93,107,59,252,104,36,232,13,121,91,38,166,213,67,252,39,208,16,234,254,17,110\")),bytes32(stringToBytes32(\"33,8,44,49,10,96,102,52,109,154,188,187,78,68,120,132,147,150,122,69,237,151,197,194,80,135,252,64,42,172,46,187\")),bytes32(stringToBytes32(\"153,88,170,239,204,122,199,40,134,82,41,74,9,26,79,176,14,20,55,70,206,230,37,145,195,179,39,133,251,64,26,171\")),bytes32(stringToBytes32(\"92,107,3,2,63,242,217,182,208,184,153,255,116,7,90,108,70,9,171,235,26,93,169,47,240,227,4,112,16,149,175,54\")),bytes32(stringToBytes32(\"130,2,231,2,222,202,183,244,49,68,243,247,70,20,143,76,14,1,90,137,169,93,180,100,74,136,109,164,176,165,152,201\")),bytes32(stringToBytes32(\"219,97,94,134,100,199,33,189,110,10,113,132,58,238,251,22,57,239,76,121,146,237,128,174,0,38,82,157,203,48,68,43\")),bytes32(stringToBytes32(\"231,109,158,255,22,219,122,40,128,136,104,198,143,221,216,37,170,238,107,100,147,237,102,119,205,154,122,233,39,227,147,132\")),bytes32(stringToBytes32(\"10,136,160,184,71,161,76,31,129,211,28,18,7,77,225,173,235,125,144,53,63,42,74,141,189,60,105,235,15,156,199,63\")),bytes32(stringToBytes32(\"44,151,160,235,241,42,115,183,205,241,122,230,35,117,245,18,52,59,30,66,84,236,14,36,126,15,195,90,112,216,187,252\")),bytes32(stringToBytes32(\"221,40,156,147,38,113,61,220,118,135,50,21,2,105,17,61,241,57,125,219,1,240,101,236,58,238,116,18,17,211,2,21\")),bytes32(stringToBytes32(\"222,177,81,47,217,200,20,254,71,98,39,84,145,186,139,70,100,97,19,227,244,82,90,40,88,95,21,110,211,242,27,17\")),bytes32(stringToBytes32(\"59,75,24,155,105,184,224,178,234,118,158,43,87,190,60,129,13,221,27,171,219,223,154,228,26,248,6,120,34,136,76,107\")),bytes32(stringToBytes32(\"245,109,48,105,229,146,216,44,81,155,226,196,146,2,235,62,255,170,25,22,55,92,181,31,129,151,192,122,244,197,74,48\")),bytes32(stringToBytes32(\"198,155,152,219,41,35,83,83,145,4,153,164,3,124,97,216,139,156,236,59,219,168,10,7,80,59,167,187,243,93,86,173\")),bytes32(stringToBytes32(\"212,235,95,121,19,176,34,55,193,94,140,43,247,175,40,45,155,124,154,203,205,49,195,229,35,106,17,97,52,213,200,217\")),bytes32(stringToBytes32(\"158,115,102,96,157,24,57,136,155,226,124,110,62,186,194,37,230,254,37,214,255,235,231,100,133,113,118,2,228,2,87,21\")),bytes32(stringToBytes32(\"142,93,185,147,121,221,39,138,157,248,180,248,126,67,66,30,194,92,201,78,129,35,118,147,82,213,3,73,183,6,30,123\")),bytes32(stringToBytes32(\"188,162,63,50,60,54,3,86,220,23,72,223,229,45,64,239,231,181,93,232,0,182,238,128,40,23,198,179,73,13,195,201\")),bytes32(stringToBytes32(\"9,144,227,86,69,49,243,212,48,229,51,72,58,205,21,183,226,210,236,45,213,237,90,44,80,128,98,204,150,62,147,33\")),bytes32(stringToBytes32(\"123,189,157,114,42,238,15,226,241,3,62,248,19,178,86,208,247,195,198,209,129,26,12,133,155,202,86,119,190,229,225,27\")),bytes32(stringToBytes32(\"182,199,99,33,62,157,30,137,184,37,244,30,185,107,19,60,211,142,129,115,7,240,92,198,142,1,179,77,18,255,87,22\")),bytes32(stringToBytes32(\"9,42,227,220,3,189,205,28,104,74,204,178,49,91,198,72,48,189,243,230,161,23,133,3,194,196,206,88,78,143,187,42\")),bytes32(stringToBytes32(\"194,114,75,111,164,240,188,191,104,218,249,114,122,17,166,122,35,83,234,210,106,184,57,5,170,221,68,123,135,71,116,249\")),bytes32(stringToBytes32(\"212,212,52,234,73,225,22,85,1,251,63,240,30,249,113,66,105,89,243,104,13,181,152,231,94,140,225,214,134,72,195,177\")),bytes32(stringToBytes32(\"125,206,254,177,8,67,95,63,42,125,59,22,96,186,207,162,163,244,117,156,193,8,61,18,27,128,148,123,187,128,203,114\")),bytes32(stringToBytes32(\"184,139,216,103,211,245,0,55,64,225,28,17,113,93,100,84,96,243,230,192,20,152,163,163,125,127,36,10,43,98,14,153\")),bytes32(stringToBytes32(\"117,76,74,173,66,51,217,171,212,24,183,129,174,210,48,107,139,91,209,218,83,79,42,227,189,82,105,74,153,75,135,192\")),bytes32(stringToBytes32(\"12,224,87,105,78,179,73,113,219,79,147,185,38,205,44,177,208,155,253,115,56,183,44,0,11,19,182,167,131,47,73,158\")),bytes32(stringToBytes32(\"23,176,243,45,82,2,60,102,36,148,150,155,76,173,13,198,47,19,129,5,228,176,10,246,207,171,125,83,10,55,69,35\")),bytes32(stringToBytes32(\"135,204,60,124,162,154,152,249,74,94,141,194,209,54,208,89,237,34,12,235,195,34,80,84,14,185,100,139,1,44,224,87\")),bytes32(stringToBytes32(\"172,191,195,193,253,149,200,134,38,68,87,65,224,63,56,196,204,1,75,20,117,56,98,101,172,79,178,51,142,209,36,88\")),bytes32(stringToBytes32(\"98,226,50,193,18,123,79,32,251,244,187,200,157,251,143,123,33,218,66,21,210,52,102,0,123,73,152,129,100,78,58,60\")),bytes32(stringToBytes32(\"24,248,72,210,3,106,47,133,157,86,151,236,214,190,90,20,133,206,79,248,131,175,138,26,81,149,139,0,103,64,144,45\")),bytes32(stringToBytes32(\"8,37,92,201,47,240,9,55,201,68,234,128,194,193,56,148,166,221,174,160,60,34,214,188,91,210,223,186,223,67,74,37\")),bytes32(stringToBytes32(\"54,109,162,174,255,119,184,171,174,119,183,203,163,203,50,15,223,147,24,220,130,164,144,238,180,235,10,56,208,182,149,96\")),bytes32(stringToBytes32(\"30,86,25,78,214,100,58,233,151,132,155,199,53,122,188,152,210,145,79,246,125,83,211,106,162,15,187,137,21,14,220,49\")),bytes32(stringToBytes32(\"153,103,197,243,153,84,52,14,158,136,220,163,141,136,109,45,135,186,91,40,80,67,121,7,109,187,57,205,118,220,73,23\")),bytes32(stringToBytes32(\"184,143,19,0,14,123,9,42,87,232,107,8,119,77,249,108,185,150,185,32,21,39,136,155,173,141,61,200,208,184,40,108\")),bytes32(stringToBytes32(\"68,38,162,158,200,36,17,217,168,34,185,230,159,71,71,7,237,148,115,201,171,219,225,115,94,5,198,80,118,58,64,56\")),bytes32(stringToBytes32(\"84,168,94,50,38,237,27,38,16,101,184,120,10,49,102,144,76,139,101,103,144,11,20,75,166,2,88,75,34,234,232,245\")),bytes32(stringToBytes32(\"205,28,73,62,182,117,71,31,57,69,61,224,208,126,185,37,13,46,117,68,236,29,8,111,49,221,167,143,190,104,168,79\")),bytes32(stringToBytes32(\"193,97,147,33,158,182,112,81,158,43,161,2,145,167,188,176,61,253,23,253,76,60,32,135,248,110,140,185,110,35,104,2\")),bytes32(stringToBytes32(\"233,130,85,153,223,242,185,206,135,126,237,152,244,137,26,111,225,95,51,121,98,30,226,180,161,189,254,147,160,142,183,31\")),bytes32(stringToBytes32(\"53,126,87,21,7,106,197,209,240,8,28,209,17,49,129,29,27,234,207,65,131,205,215,228,63,118,80,148,48,129,140,46\")),bytes32(stringToBytes32(\"34,247,164,63,166,207,46,112,139,227,77,60,86,52,233,249,188,94,212,149,215,59,145,203,52,55,180,193,34,192,137,10\")),bytes32(stringToBytes32(\"233,251,119,233,116,205,204,81,122,189,65,248,118,82,128,208,81,194,178,61,68,166,221,209,82,171,137,124,222,18,124,47\")),bytes32(stringToBytes32(\"110,179,2,203,50,128,221,176,209,83,69,91,85,96,101,206,211,123,33,89,5,132,252,21,103,77,28,23,60,98,84,62\")),bytes32(stringToBytes32(\"112,112,104,133,94,126,96,33,39,119,215,190,94,147,56,185,1,241,246,139,180,62,223,20,217,53,207,233,91,83,123,222\")),bytes32(stringToBytes32(\"153,80,19,89,47,80,214,136,179,224,212,174,16,126,14,15,217,18,71,196,158,20,171,1,132,109,59,242,193,111,46,242\")),bytes32(stringToBytes32(\"101,117,38,2,172,214,75,183,180,93,101,94,239,239,126,115,206,32,74,221,187,3,46,205,238,144,45,226,254,147,254,209\")),bytes32(stringToBytes32(\"196,204,131,14,223,124,253,158,47,148,2,132,13,217,19,57,241,171,189,229,213,97,216,51,235,77,149,33,33,82,14,74\")),bytes32(stringToBytes32(\"244,43,235,141,146,209,6,2,178,197,6,224,90,71,45,28,0,150,4,185,197,161,2,17,123,210,95,72,4,137,15,134\")),bytes32(stringToBytes32(\"102,205,222,175,138,1,35,50,11,166,161,200,81,18,228,117,22,236,213,83,177,103,222,142,184,156,157,109,17,33,7,87\")),bytes32(stringToBytes32(\"59,194,104,82,253,117,17,71,89,217,244,79,43,221,157,120,68,90,200,5,1,162,229,248,78,241,146,170,220,223,8,243\")),bytes32(stringToBytes32(\"43,156,219,207,247,117,94,18,62,126,197,60,50,69,254,111,254,47,50,126,60,6,146,252,156,229,209,189,177,59,31,237\")),bytes32(stringToBytes32(\"113,164,217,6,179,169,215,235,123,233,221,74,13,146,169,14,15,241,224,156,213,153,151,27,5,192,48,118,73,174,111,106\")),bytes32(stringToBytes32(\"129,163,180,107,204,37,90,27,90,81,134,58,252,167,233,24,150,87,112,19,46,108,107,77,131,90,202,150,191,222,124,246\")),bytes32(stringToBytes32(\"205,138,150,89,213,106,125,125,219,5,153,96,140,191,137,196,129,184,61,215,43,85,44,55,71,193,93,127,21,144,173,237\")),bytes32(stringToBytes32(\"191,220,54,81,111,253,86,148,223,134,211,175,229,228,32,169,64,178,80,117,228,98,22,16,203,144,80,179,22,192,81,30\")),bytes32(stringToBytes32(\"141,35,163,94,88,21,128,147,3,16,140,168,244,201,6,22,131,223,114,101,216,47,24,154,242,208,48,196,20,88,188,115\")),bytes32(stringToBytes32(\"167,212,30,93,231,222,69,186,29,227,251,106,189,158,250,101,83,190,186,8,99,91,77,55,80,128,105,68,123,207,92,209\")),bytes32(stringToBytes32(\"12,97,188,34,88,170,70,14,99,251,196,36,94,106,130,42,224,148,29,178,108,144,107,75,148,35,239,81,62,11,42,59\")),bytes32(stringToBytes32(\"134,242,178,76,43,207,157,22,202,172,255,101,42,111,160,136,49,30,155,186,145,12,132,8,213,156,14,242,30,81,59,130\")),bytes32(stringToBytes32(\"52,0,163,90,45,212,120,44,201,48,62,60,88,96,143,198,74,171,96,111,239,79,175,203,74,11,154,207,44,107,175,181\")),bytes32(stringToBytes32(\"48,106,91,115,156,131,153,228,149,198,106,198,33,4,48,243,177,146,17,191,12,241,144,48,115,39,47,191,239,192,225,149\")),bytes32(stringToBytes32(\"117,10,189,250,74,213,186,219,51,129,77,127,131,108,52,37,231,187,204,39,206,199,180,22,219,72,103,214,14,158,241,94\")),bytes32(stringToBytes32(\"15,54,185,178,222,28,224,77,33,88,229,115,18,134,19,34,161,254,68,171,32,30,66,22,150,71,75,164,65,242,108,75\")),bytes32(stringToBytes32(\"182,130,193,19,196,54,228,58,61,213,174,243,141,221,168,125,30,194,251,103,80,62,6,92,189,21,40,102,172,189,122,115\")),bytes32(stringToBytes32(\"235,220,3,62,85,82,158,118,138,54,121,93,244,45,168,54,227,45,29,178,236,210,96,247,53,10,236,229,176,84,168,210\")),bytes32(stringToBytes32(\"13,222,168,18,245,135,157,89,114,39,217,220,180,42,154,205,158,148,136,105,243,229,154,11,137,227,41,30,8,31,96,155\")),bytes32(stringToBytes32(\"239,74,66,176,199,176,87,138,58,2,86,251,243,193,226,205,202,138,127,14,114,209,169,136,189,102,138,87,178,11,167,97\")),bytes32(stringToBytes32(\"241,206,47,89,196,152,219,51,28,52,245,215,6,9,229,224,112,193,39,152,99,52,17,43,226,127,54,23,154,156,123,105\")),bytes32(stringToBytes32(\"37,27,75,202,58,49,177,46,141,159,158,49,179,147,242,180,175,152,247,60,220,119,18,69,175,69,255,178,215,14,110,20\")),bytes32(stringToBytes32(\"79,229,103,33,139,96,11,33,213,213,246,203,158,29,66,71,76,41,171,240,137,118,71,43,58,153,175,197,113,224,127,200\")),bytes32(stringToBytes32(\"8,169,38,21,189,109,101,242,71,208,185,123,172,198,86,103,234,192,56,150,68,159,200,142,100,236,105,40,59,181,234,4\")),bytes32(stringToBytes32(\"238,84,109,17,101,220,207,199,124,36,32,46,34,60,109,246,2,147,124,214,121,41,99,142,48,88,162,204,203,111,178,205\")),bytes32(stringToBytes32(\"47,255,76,175,32,92,159,179,73,62,109,140,147,65,176,19,71,86,59,176,210,156,127,71,136,32,191,226,152,69,12,75\")),bytes32(stringToBytes32(\"183,91,32,27,80,154,46,104,237,159,46,232,191,241,125,44,204,174,0,218,172,41,176,200,11,242,66,126,96,156,160,102\")),bytes32(stringToBytes32(\"158,192,82,217,253,114,160,74,149,28,172,1,129,136,150,161,185,205,37,165,206,177,247,92,27,129,151,96,184,27,178,72\")),bytes32(stringToBytes32(\"248,113,69,105,74,191,231,24,142,135,104,204,136,237,198,135,241,26,1,54,220,225,213,74,61,187,15,98,119,232,104,209\")),bytes32(stringToBytes32(\"120,162,120,136,89,191,101,73,96,97,100,122,201,233,131,60,17,112,43,78,127,80,194,182,195,134,72,122,6,233,173,85\")),bytes32(stringToBytes32(\"203,30,201,234,202,124,5,84,132,35,239,59,87,145,213,75,207,74,248,108,246,114,20,97,81,39,141,3,109,38,159,215\")),bytes32(stringToBytes32(\"61,77,211,142,199,203,0,120,27,224,197,225,141,40,208,81,70,135,211,46,21,247,5,24,235,41,28,1,34,107,240,32\")),bytes32(stringToBytes32(\"160,193,89,44,216,137,84,238,53,25,206,194,168,221,19,253,87,84,190,163,242,228,217,164,115,159,97,246,227,127,17,232\")),bytes32(stringToBytes32(\"12,17,109,110,158,108,98,28,199,201,230,34,162,3,237,145,132,70,147,199,187,143,153,201,240,173,53,220,163,122,77,93\")),bytes32(stringToBytes32(\"206,42,205,206,118,181,50,29,82,156,62,49,46,36,189,189,137,124,215,116,176,219,185,98,219,84,222,101,177,101,26,135\")),bytes32(stringToBytes32(\"116,226,179,172,222,68,91,109,170,234,201,232,69,101,120,139,163,172,45,61,50,15,158,160,111,210,198,145,135,146,186,174\")),bytes32(stringToBytes32(\"6,129,4,64,206,191,95,167,80,88,248,188,38,209,14,9,80,94,216,112,210,80,110,206,153,145,113,114,186,229,228,234\")),bytes32(stringToBytes32(\"117,139,224,200,91,71,57,62,22,127,36,78,203,216,174,34,38,232,49,121,209,141,114,76,112,17,216,152,134,167,51,249\")),bytes32(stringToBytes32(\"215,127,201,239,128,106,19,241,37,24,240,36,180,136,12,212,138,6,171,133,76,39,43,128,159,103,234,0,198,195,217,75\")),bytes32(stringToBytes32(\"226,182,92,4,18,175,166,22,17,156,9,198,48,13,46,139,120,55,237,250,53,131,172,167,106,114,45,14,223,195,47,99\")),bytes32(stringToBytes32(\"50,222,95,200,119,241,108,136,152,129,130,227,101,84,79,145,210,153,47,89,211,179,177,19,37,18,128,145,11,11,16,226\")),bytes32(stringToBytes32(\"10,206,232,169,60,241,72,66,217,95,72,156,119,196,38,35,112,139,56,143,154,167,233,115,47,118,137,213,78,152,162,163\"))]"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[8],accounts[1],accounts[7],accounts[0],accounts[9],accounts[9],accounts[7],accounts[7],accounts[4],accounts[1],accounts[5],accounts[2],accounts[0],accounts[5],accounts[2],accounts[5],accounts[1],accounts[4],accounts[6],accounts[9],accounts[8],accounts[3],accounts[9],accounts[5],accounts[9],accounts[4],accounts[1],accounts[3],accounts[4],accounts[3],accounts[9],accounts[8],accounts[1],accounts[8],accounts[7],accounts[7],accounts[2],accounts[4],accounts[5],accounts[8],accounts[1],accounts[4],accounts[7],accounts[5],accounts[8],accounts[7],accounts[3],accounts[6],accounts[9],accounts[7],accounts[0],accounts[0],accounts[1],accounts[9],accounts[4],accounts[8],accounts[6],accounts[4],accounts[0],accounts[0],accounts[3],accounts[6],accounts[6],accounts[6],accounts[8],accounts[3],accounts[7],accounts[3],accounts[1],accounts[2],accounts[4],accounts[4],accounts[5],accounts[5],accounts[2],accounts[0],accounts[0],accounts[7],accounts[9],accounts[1],accounts[4],accounts[0],accounts[9],accounts[4],accounts[9],accounts[8],accounts[7],accounts[0],accounts[1],accounts[5],accounts[2],accounts[0],accounts[2],accounts[3],accounts[0],accounts[7],accounts[0]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[256,1,1532892064,255,2014223716,66,1,95,97,3,0,65,10000,10000,29,0,3,3,1532892064,1532892064,3,4,26,3,6,4,5,97,255,95,9999,4,1532892062,1532892062,255,1336,1336,28,9999,28,6,10000,26,64,6,95,0,2014223716,28,1532892064,256,6,95,1336,2014223716,254,5,10001,66,4,3,1532892063,96,1532892064,5,1,5,96,4,2,1336,66,27,3,29,1338,64,256,1532892064,2,2,1532892062,1,97,27,3,2,96,254,26,254,26,1,10001,95,5]",
                "sol": "[uint256(256),uint256(1),uint256(1532892064),uint256(255),uint256(2014223716),uint256(66),uint256(1),uint256(95),uint256(97),uint256(3),uint256(0),uint256(65),uint256(10000),uint256(10000),uint256(29),uint256(0),uint256(3),uint256(3),uint256(1532892064),uint256(1532892064),uint256(3),uint256(4),uint256(26),uint256(3),uint256(6),uint256(4),uint256(5),uint256(97),uint256(255),uint256(95),uint256(9999),uint256(4),uint256(1532892062),uint256(1532892062),uint256(255),uint256(1336),uint256(1336),uint256(28),uint256(9999),uint256(28),uint256(6),uint256(10000),uint256(26),uint256(64),uint256(6),uint256(95),uint256(0),uint256(2014223716),uint256(28),uint256(1532892064),uint256(256),uint256(6),uint256(95),uint256(1336),uint256(2014223716),uint256(254),uint256(5),uint256(10001),uint256(66),uint256(4),uint256(3),uint256(1532892063),uint256(96),uint256(1532892064),uint256(5),uint256(1),uint256(5),uint256(96),uint256(4),uint256(2),uint256(1336),uint256(66),uint256(27),uint256(3),uint256(29),uint256(1338),uint256(64),uint256(256),uint256(1532892064),uint256(2),uint256(2),uint256(1532892062),uint256(1),uint256(97),uint256(27),uint256(3),uint256(2),uint256(96),uint256(254),uint256(26),uint256(254),uint256(26),uint256(1),uint256(10001),uint256(95),uint256(5)]"
              },
              {
                "js": "[1532892064,95,65,1,254,6,1532892062,5,28,1338,1336,2014223714,2014223716,9999,0,4,2014223715,10000,29,27,1532892064,10001,96,2014223714,2,254,254,9999,255,1336,4,4,10000,2014223716,96,2,4,254,9999,254,254,1338,2014223715,96,1532892064,2014223714,28,1337,255,6,2014223714,10001,10000,10001,2014223716,1337,1532892063,64,4,2,28,26,64,1532892062,9999,97,1,5,1338,4,256,95,256,2014223716,10000,255,257,29,1532892064,2,254,1,1532892062,3,5,27,1337,64,27,5,10000,65,256,2,96,257]",
                "sol": "[uint256(1532892064),uint256(95),uint256(65),uint256(1),uint256(254),uint256(6),uint256(1532892062),uint256(5),uint256(28),uint256(1338),uint256(1336),uint256(2014223714),uint256(2014223716),uint256(9999),uint256(0),uint256(4),uint256(2014223715),uint256(10000),uint256(29),uint256(27),uint256(1532892064),uint256(10001),uint256(96),uint256(2014223714),uint256(2),uint256(254),uint256(254),uint256(9999),uint256(255),uint256(1336),uint256(4),uint256(4),uint256(10000),uint256(2014223716),uint256(96),uint256(2),uint256(4),uint256(254),uint256(9999),uint256(254),uint256(254),uint256(1338),uint256(2014223715),uint256(96),uint256(1532892064),uint256(2014223714),uint256(28),uint256(1337),uint256(255),uint256(6),uint256(2014223714),uint256(10001),uint256(10000),uint256(10001),uint256(2014223716),uint256(1337),uint256(1532892063),uint256(64),uint256(4),uint256(2),uint256(28),uint256(26),uint256(64),uint256(1532892062),uint256(9999),uint256(97),uint256(1),uint256(5),uint256(1338),uint256(4),uint256(256),uint256(95),uint256(256),uint256(2014223716),uint256(10000),uint256(255),uint256(257),uint256(29),uint256(1532892064),uint256(2),uint256(254),uint256(1),uint256(1532892062),uint256(3),uint256(5),uint256(27),uint256(1337),uint256(64),uint256(27),uint256(5),uint256(10000),uint256(65),uint256(256),uint256(2),uint256(96),uint256(257)]"
              },
              {
                "js": "[[43,96,131,68,101,156,176,172,104,199,125,141,254,35,150,233,157,55,192,57,196,14,195,45,27,47,39,14,54,71,123,84],[191,40,149,196,235,99,239,213,126,242,145,178,114,192,187,246,171,221,65,202,196,103,11,221,127,241,173,131,112,30,113,223],[6,88,192,98,157,240,210,153,44,219,197,129,146,16,192,178,201,154,18,19,32,4,200,185,13,150,2,214,205,127,172,114],[83,186,220,135,106,198,46,68,21,99,93,107,59,252,104,36,232,13,121,91,38,166,213,67,252,39,208,16,234,254,17,110],[33,8,44,49,10,96,102,52,109,154,188,187,78,68,120,132,147,150,122,69,237,151,197,194,80,135,252,64,42,172,46,187],[153,88,170,239,204,122,199,40,134,82,41,74,9,26,79,176,14,20,55,70,206,230,37,145,195,179,39,133,251,64,26,171],[92,107,3,2,63,242,217,182,208,184,153,255,116,7,90,108,70,9,171,235,26,93,169,47,240,227,4,112,16,149,175,54],[130,2,231,2,222,202,183,244,49,68,243,247,70,20,143,76,14,1,90,137,169,93,180,100,74,136,109,164,176,165,152,201],[219,97,94,134,100,199,33,189,110,10,113,132,58,238,251,22,57,239,76,121,146,237,128,174,0,38,82,157,203,48,68,43],[231,109,158,255,22,219,122,40,128,136,104,198,143,221,216,37,170,238,107,100,147,237,102,119,205,154,122,233,39,227,147,132],[10,136,160,184,71,161,76,31,129,211,28,18,7,77,225,173,235,125,144,53,63,42,74,141,189,60,105,235,15,156,199,63],[44,151,160,235,241,42,115,183,205,241,122,230,35,117,245,18,52,59,30,66,84,236,14,36,126,15,195,90,112,216,187,252],[221,40,156,147,38,113,61,220,118,135,50,21,2,105,17,61,241,57,125,219,1,240,101,236,58,238,116,18,17,211,2,21],[222,177,81,47,217,200,20,254,71,98,39,84,145,186,139,70,100,97,19,227,244,82,90,40,88,95,21,110,211,242,27,17],[59,75,24,155,105,184,224,178,234,118,158,43,87,190,60,129,13,221,27,171,219,223,154,228,26,248,6,120,34,136,76,107],[245,109,48,105,229,146,216,44,81,155,226,196,146,2,235,62,255,170,25,22,55,92,181,31,129,151,192,122,244,197,74,48],[198,155,152,219,41,35,83,83,145,4,153,164,3,124,97,216,139,156,236,59,219,168,10,7,80,59,167,187,243,93,86,173],[212,235,95,121,19,176,34,55,193,94,140,43,247,175,40,45,155,124,154,203,205,49,195,229,35,106,17,97,52,213,200,217],[158,115,102,96,157,24,57,136,155,226,124,110,62,186,194,37,230,254,37,214,255,235,231,100,133,113,118,2,228,2,87,21],[142,93,185,147,121,221,39,138,157,248,180,248,126,67,66,30,194,92,201,78,129,35,118,147,82,213,3,73,183,6,30,123],[188,162,63,50,60,54,3,86,220,23,72,223,229,45,64,239,231,181,93,232,0,182,238,128,40,23,198,179,73,13,195,201],[9,144,227,86,69,49,243,212,48,229,51,72,58,205,21,183,226,210,236,45,213,237,90,44,80,128,98,204,150,62,147,33],[123,189,157,114,42,238,15,226,241,3,62,248,19,178,86,208,247,195,198,209,129,26,12,133,155,202,86,119,190,229,225,27],[182,199,99,33,62,157,30,137,184,37,244,30,185,107,19,60,211,142,129,115,7,240,92,198,142,1,179,77,18,255,87,22],[9,42,227,220,3,189,205,28,104,74,204,178,49,91,198,72,48,189,243,230,161,23,133,3,194,196,206,88,78,143,187,42],[194,114,75,111,164,240,188,191,104,218,249,114,122,17,166,122,35,83,234,210,106,184,57,5,170,221,68,123,135,71,116,249],[212,212,52,234,73,225,22,85,1,251,63,240,30,249,113,66,105,89,243,104,13,181,152,231,94,140,225,214,134,72,195,177],[125,206,254,177,8,67,95,63,42,125,59,22,96,186,207,162,163,244,117,156,193,8,61,18,27,128,148,123,187,128,203,114],[184,139,216,103,211,245,0,55,64,225,28,17,113,93,100,84,96,243,230,192,20,152,163,163,125,127,36,10,43,98,14,153],[117,76,74,173,66,51,217,171,212,24,183,129,174,210,48,107,139,91,209,218,83,79,42,227,189,82,105,74,153,75,135,192],[12,224,87,105,78,179,73,113,219,79,147,185,38,205,44,177,208,155,253,115,56,183,44,0,11,19,182,167,131,47,73,158],[23,176,243,45,82,2,60,102,36,148,150,155,76,173,13,198,47,19,129,5,228,176,10,246,207,171,125,83,10,55,69,35],[135,204,60,124,162,154,152,249,74,94,141,194,209,54,208,89,237,34,12,235,195,34,80,84,14,185,100,139,1,44,224,87],[172,191,195,193,253,149,200,134,38,68,87,65,224,63,56,196,204,1,75,20,117,56,98,101,172,79,178,51,142,209,36,88],[98,226,50,193,18,123,79,32,251,244,187,200,157,251,143,123,33,218,66,21,210,52,102,0,123,73,152,129,100,78,58,60],[24,248,72,210,3,106,47,133,157,86,151,236,214,190,90,20,133,206,79,248,131,175,138,26,81,149,139,0,103,64,144,45],[8,37,92,201,47,240,9,55,201,68,234,128,194,193,56,148,166,221,174,160,60,34,214,188,91,210,223,186,223,67,74,37],[54,109,162,174,255,119,184,171,174,119,183,203,163,203,50,15,223,147,24,220,130,164,144,238,180,235,10,56,208,182,149,96],[30,86,25,78,214,100,58,233,151,132,155,199,53,122,188,152,210,145,79,246,125,83,211,106,162,15,187,137,21,14,220,49],[153,103,197,243,153,84,52,14,158,136,220,163,141,136,109,45,135,186,91,40,80,67,121,7,109,187,57,205,118,220,73,23],[184,143,19,0,14,123,9,42,87,232,107,8,119,77,249,108,185,150,185,32,21,39,136,155,173,141,61,200,208,184,40,108],[68,38,162,158,200,36,17,217,168,34,185,230,159,71,71,7,237,148,115,201,171,219,225,115,94,5,198,80,118,58,64,56],[84,168,94,50,38,237,27,38,16,101,184,120,10,49,102,144,76,139,101,103,144,11,20,75,166,2,88,75,34,234,232,245],[205,28,73,62,182,117,71,31,57,69,61,224,208,126,185,37,13,46,117,68,236,29,8,111,49,221,167,143,190,104,168,79],[193,97,147,33,158,182,112,81,158,43,161,2,145,167,188,176,61,253,23,253,76,60,32,135,248,110,140,185,110,35,104,2],[233,130,85,153,223,242,185,206,135,126,237,152,244,137,26,111,225,95,51,121,98,30,226,180,161,189,254,147,160,142,183,31],[53,126,87,21,7,106,197,209,240,8,28,209,17,49,129,29,27,234,207,65,131,205,215,228,63,118,80,148,48,129,140,46],[34,247,164,63,166,207,46,112,139,227,77,60,86,52,233,249,188,94,212,149,215,59,145,203,52,55,180,193,34,192,137,10],[233,251,119,233,116,205,204,81,122,189,65,248,118,82,128,208,81,194,178,61,68,166,221,209,82,171,137,124,222,18,124,47],[110,179,2,203,50,128,221,176,209,83,69,91,85,96,101,206,211,123,33,89,5,132,252,21,103,77,28,23,60,98,84,62],[112,112,104,133,94,126,96,33,39,119,215,190,94,147,56,185,1,241,246,139,180,62,223,20,217,53,207,233,91,83,123,222],[153,80,19,89,47,80,214,136,179,224,212,174,16,126,14,15,217,18,71,196,158,20,171,1,132,109,59,242,193,111,46,242],[101,117,38,2,172,214,75,183,180,93,101,94,239,239,126,115,206,32,74,221,187,3,46,205,238,144,45,226,254,147,254,209],[196,204,131,14,223,124,253,158,47,148,2,132,13,217,19,57,241,171,189,229,213,97,216,51,235,77,149,33,33,82,14,74],[244,43,235,141,146,209,6,2,178,197,6,224,90,71,45,28,0,150,4,185,197,161,2,17,123,210,95,72,4,137,15,134],[102,205,222,175,138,1,35,50,11,166,161,200,81,18,228,117,22,236,213,83,177,103,222,142,184,156,157,109,17,33,7,87],[59,194,104,82,253,117,17,71,89,217,244,79,43,221,157,120,68,90,200,5,1,162,229,248,78,241,146,170,220,223,8,243],[43,156,219,207,247,117,94,18,62,126,197,60,50,69,254,111,254,47,50,126,60,6,146,252,156,229,209,189,177,59,31,237],[113,164,217,6,179,169,215,235,123,233,221,74,13,146,169,14,15,241,224,156,213,153,151,27,5,192,48,118,73,174,111,106],[129,163,180,107,204,37,90,27,90,81,134,58,252,167,233,24,150,87,112,19,46,108,107,77,131,90,202,150,191,222,124,246],[205,138,150,89,213,106,125,125,219,5,153,96,140,191,137,196,129,184,61,215,43,85,44,55,71,193,93,127,21,144,173,237],[191,220,54,81,111,253,86,148,223,134,211,175,229,228,32,169,64,178,80,117,228,98,22,16,203,144,80,179,22,192,81,30],[141,35,163,94,88,21,128,147,3,16,140,168,244,201,6,22,131,223,114,101,216,47,24,154,242,208,48,196,20,88,188,115],[167,212,30,93,231,222,69,186,29,227,251,106,189,158,250,101,83,190,186,8,99,91,77,55,80,128,105,68,123,207,92,209],[12,97,188,34,88,170,70,14,99,251,196,36,94,106,130,42,224,148,29,178,108,144,107,75,148,35,239,81,62,11,42,59],[134,242,178,76,43,207,157,22,202,172,255,101,42,111,160,136,49,30,155,186,145,12,132,8,213,156,14,242,30,81,59,130],[52,0,163,90,45,212,120,44,201,48,62,60,88,96,143,198,74,171,96,111,239,79,175,203,74,11,154,207,44,107,175,181],[48,106,91,115,156,131,153,228,149,198,106,198,33,4,48,243,177,146,17,191,12,241,144,48,115,39,47,191,239,192,225,149],[117,10,189,250,74,213,186,219,51,129,77,127,131,108,52,37,231,187,204,39,206,199,180,22,219,72,103,214,14,158,241,94],[15,54,185,178,222,28,224,77,33,88,229,115,18,134,19,34,161,254,68,171,32,30,66,22,150,71,75,164,65,242,108,75],[182,130,193,19,196,54,228,58,61,213,174,243,141,221,168,125,30,194,251,103,80,62,6,92,189,21,40,102,172,189,122,115],[235,220,3,62,85,82,158,118,138,54,121,93,244,45,168,54,227,45,29,178,236,210,96,247,53,10,236,229,176,84,168,210],[13,222,168,18,245,135,157,89,114,39,217,220,180,42,154,205,158,148,136,105,243,229,154,11,137,227,41,30,8,31,96,155],[239,74,66,176,199,176,87,138,58,2,86,251,243,193,226,205,202,138,127,14,114,209,169,136,189,102,138,87,178,11,167,97],[241,206,47,89,196,152,219,51,28,52,245,215,6,9,229,224,112,193,39,152,99,52,17,43,226,127,54,23,154,156,123,105],[37,27,75,202,58,49,177,46,141,159,158,49,179,147,242,180,175,152,247,60,220,119,18,69,175,69,255,178,215,14,110,20],[79,229,103,33,139,96,11,33,213,213,246,203,158,29,66,71,76,41,171,240,137,118,71,43,58,153,175,197,113,224,127,200],[8,169,38,21,189,109,101,242,71,208,185,123,172,198,86,103,234,192,56,150,68,159,200,142,100,236,105,40,59,181,234,4],[238,84,109,17,101,220,207,199,124,36,32,46,34,60,109,246,2,147,124,214,121,41,99,142,48,88,162,204,203,111,178,205],[47,255,76,175,32,92,159,179,73,62,109,140,147,65,176,19,71,86,59,176,210,156,127,71,136,32,191,226,152,69,12,75],[183,91,32,27,80,154,46,104,237,159,46,232,191,241,125,44,204,174,0,218,172,41,176,200,11,242,66,126,96,156,160,102],[158,192,82,217,253,114,160,74,149,28,172,1,129,136,150,161,185,205,37,165,206,177,247,92,27,129,151,96,184,27,178,72],[248,113,69,105,74,191,231,24,142,135,104,204,136,237,198,135,241,26,1,54,220,225,213,74,61,187,15,98,119,232,104,209],[120,162,120,136,89,191,101,73,96,97,100,122,201,233,131,60,17,112,43,78,127,80,194,182,195,134,72,122,6,233,173,85],[203,30,201,234,202,124,5,84,132,35,239,59,87,145,213,75,207,74,248,108,246,114,20,97,81,39,141,3,109,38,159,215],[61,77,211,142,199,203,0,120,27,224,197,225,141,40,208,81,70,135,211,46,21,247,5,24,235,41,28,1,34,107,240,32],[160,193,89,44,216,137,84,238,53,25,206,194,168,221,19,253,87,84,190,163,242,228,217,164,115,159,97,246,227,127,17,232],[12,17,109,110,158,108,98,28,199,201,230,34,162,3,237,145,132,70,147,199,187,143,153,201,240,173,53,220,163,122,77,93],[206,42,205,206,118,181,50,29,82,156,62,49,46,36,189,189,137,124,215,116,176,219,185,98,219,84,222,101,177,101,26,135],[116,226,179,172,222,68,91,109,170,234,201,232,69,101,120,139,163,172,45,61,50,15,158,160,111,210,198,145,135,146,186,174],[6,129,4,64,206,191,95,167,80,88,248,188,38,209,14,9,80,94,216,112,210,80,110,206,153,145,113,114,186,229,228,234],[117,139,224,200,91,71,57,62,22,127,36,78,203,216,174,34,38,232,49,121,209,141,114,76,112,17,216,152,134,167,51,249],[215,127,201,239,128,106,19,241,37,24,240,36,180,136,12,212,138,6,171,133,76,39,43,128,159,103,234,0,198,195,217,75],[226,182,92,4,18,175,166,22,17,156,9,198,48,13,46,139,120,55,237,250,53,131,172,167,106,114,45,14,223,195,47,99],[50,222,95,200,119,241,108,136,152,129,130,227,101,84,79,145,210,153,47,89,211,179,177,19,37,18,128,145,11,11,16,226],[10,206,232,169,60,241,72,66,217,95,72,156,119,196,38,35,112,139,56,143,154,167,233,115,47,118,137,213,78,152,162,163]]",
                "sol": "[bytes32(stringToBytes32(\"43,96,131,68,101,156,176,172,104,199,125,141,254,35,150,233,157,55,192,57,196,14,195,45,27,47,39,14,54,71,123,84\")),bytes32(stringToBytes32(\"191,40,149,196,235,99,239,213,126,242,145,178,114,192,187,246,171,221,65,202,196,103,11,221,127,241,173,131,112,30,113,223\")),bytes32(stringToBytes32(\"6,88,192,98,157,240,210,153,44,219,197,129,146,16,192,178,201,154,18,19,32,4,200,185,13,150,2,214,205,127,172,114\")),bytes32(stringToBytes32(\"83,186,220,135,106,198,46,68,21,99,93,107,59,252,104,36,232,13,121,91,38,166,213,67,252,39,208,16,234,254,17,110\")),bytes32(stringToBytes32(\"33,8,44,49,10,96,102,52,109,154,188,187,78,68,120,132,147,150,122,69,237,151,197,194,80,135,252,64,42,172,46,187\")),bytes32(stringToBytes32(\"153,88,170,239,204,122,199,40,134,82,41,74,9,26,79,176,14,20,55,70,206,230,37,145,195,179,39,133,251,64,26,171\")),bytes32(stringToBytes32(\"92,107,3,2,63,242,217,182,208,184,153,255,116,7,90,108,70,9,171,235,26,93,169,47,240,227,4,112,16,149,175,54\")),bytes32(stringToBytes32(\"130,2,231,2,222,202,183,244,49,68,243,247,70,20,143,76,14,1,90,137,169,93,180,100,74,136,109,164,176,165,152,201\")),bytes32(stringToBytes32(\"219,97,94,134,100,199,33,189,110,10,113,132,58,238,251,22,57,239,76,121,146,237,128,174,0,38,82,157,203,48,68,43\")),bytes32(stringToBytes32(\"231,109,158,255,22,219,122,40,128,136,104,198,143,221,216,37,170,238,107,100,147,237,102,119,205,154,122,233,39,227,147,132\")),bytes32(stringToBytes32(\"10,136,160,184,71,161,76,31,129,211,28,18,7,77,225,173,235,125,144,53,63,42,74,141,189,60,105,235,15,156,199,63\")),bytes32(stringToBytes32(\"44,151,160,235,241,42,115,183,205,241,122,230,35,117,245,18,52,59,30,66,84,236,14,36,126,15,195,90,112,216,187,252\")),bytes32(stringToBytes32(\"221,40,156,147,38,113,61,220,118,135,50,21,2,105,17,61,241,57,125,219,1,240,101,236,58,238,116,18,17,211,2,21\")),bytes32(stringToBytes32(\"222,177,81,47,217,200,20,254,71,98,39,84,145,186,139,70,100,97,19,227,244,82,90,40,88,95,21,110,211,242,27,17\")),bytes32(stringToBytes32(\"59,75,24,155,105,184,224,178,234,118,158,43,87,190,60,129,13,221,27,171,219,223,154,228,26,248,6,120,34,136,76,107\")),bytes32(stringToBytes32(\"245,109,48,105,229,146,216,44,81,155,226,196,146,2,235,62,255,170,25,22,55,92,181,31,129,151,192,122,244,197,74,48\")),bytes32(stringToBytes32(\"198,155,152,219,41,35,83,83,145,4,153,164,3,124,97,216,139,156,236,59,219,168,10,7,80,59,167,187,243,93,86,173\")),bytes32(stringToBytes32(\"212,235,95,121,19,176,34,55,193,94,140,43,247,175,40,45,155,124,154,203,205,49,195,229,35,106,17,97,52,213,200,217\")),bytes32(stringToBytes32(\"158,115,102,96,157,24,57,136,155,226,124,110,62,186,194,37,230,254,37,214,255,235,231,100,133,113,118,2,228,2,87,21\")),bytes32(stringToBytes32(\"142,93,185,147,121,221,39,138,157,248,180,248,126,67,66,30,194,92,201,78,129,35,118,147,82,213,3,73,183,6,30,123\")),bytes32(stringToBytes32(\"188,162,63,50,60,54,3,86,220,23,72,223,229,45,64,239,231,181,93,232,0,182,238,128,40,23,198,179,73,13,195,201\")),bytes32(stringToBytes32(\"9,144,227,86,69,49,243,212,48,229,51,72,58,205,21,183,226,210,236,45,213,237,90,44,80,128,98,204,150,62,147,33\")),bytes32(stringToBytes32(\"123,189,157,114,42,238,15,226,241,3,62,248,19,178,86,208,247,195,198,209,129,26,12,133,155,202,86,119,190,229,225,27\")),bytes32(stringToBytes32(\"182,199,99,33,62,157,30,137,184,37,244,30,185,107,19,60,211,142,129,115,7,240,92,198,142,1,179,77,18,255,87,22\")),bytes32(stringToBytes32(\"9,42,227,220,3,189,205,28,104,74,204,178,49,91,198,72,48,189,243,230,161,23,133,3,194,196,206,88,78,143,187,42\")),bytes32(stringToBytes32(\"194,114,75,111,164,240,188,191,104,218,249,114,122,17,166,122,35,83,234,210,106,184,57,5,170,221,68,123,135,71,116,249\")),bytes32(stringToBytes32(\"212,212,52,234,73,225,22,85,1,251,63,240,30,249,113,66,105,89,243,104,13,181,152,231,94,140,225,214,134,72,195,177\")),bytes32(stringToBytes32(\"125,206,254,177,8,67,95,63,42,125,59,22,96,186,207,162,163,244,117,156,193,8,61,18,27,128,148,123,187,128,203,114\")),bytes32(stringToBytes32(\"184,139,216,103,211,245,0,55,64,225,28,17,113,93,100,84,96,243,230,192,20,152,163,163,125,127,36,10,43,98,14,153\")),bytes32(stringToBytes32(\"117,76,74,173,66,51,217,171,212,24,183,129,174,210,48,107,139,91,209,218,83,79,42,227,189,82,105,74,153,75,135,192\")),bytes32(stringToBytes32(\"12,224,87,105,78,179,73,113,219,79,147,185,38,205,44,177,208,155,253,115,56,183,44,0,11,19,182,167,131,47,73,158\")),bytes32(stringToBytes32(\"23,176,243,45,82,2,60,102,36,148,150,155,76,173,13,198,47,19,129,5,228,176,10,246,207,171,125,83,10,55,69,35\")),bytes32(stringToBytes32(\"135,204,60,124,162,154,152,249,74,94,141,194,209,54,208,89,237,34,12,235,195,34,80,84,14,185,100,139,1,44,224,87\")),bytes32(stringToBytes32(\"172,191,195,193,253,149,200,134,38,68,87,65,224,63,56,196,204,1,75,20,117,56,98,101,172,79,178,51,142,209,36,88\")),bytes32(stringToBytes32(\"98,226,50,193,18,123,79,32,251,244,187,200,157,251,143,123,33,218,66,21,210,52,102,0,123,73,152,129,100,78,58,60\")),bytes32(stringToBytes32(\"24,248,72,210,3,106,47,133,157,86,151,236,214,190,90,20,133,206,79,248,131,175,138,26,81,149,139,0,103,64,144,45\")),bytes32(stringToBytes32(\"8,37,92,201,47,240,9,55,201,68,234,128,194,193,56,148,166,221,174,160,60,34,214,188,91,210,223,186,223,67,74,37\")),bytes32(stringToBytes32(\"54,109,162,174,255,119,184,171,174,119,183,203,163,203,50,15,223,147,24,220,130,164,144,238,180,235,10,56,208,182,149,96\")),bytes32(stringToBytes32(\"30,86,25,78,214,100,58,233,151,132,155,199,53,122,188,152,210,145,79,246,125,83,211,106,162,15,187,137,21,14,220,49\")),bytes32(stringToBytes32(\"153,103,197,243,153,84,52,14,158,136,220,163,141,136,109,45,135,186,91,40,80,67,121,7,109,187,57,205,118,220,73,23\")),bytes32(stringToBytes32(\"184,143,19,0,14,123,9,42,87,232,107,8,119,77,249,108,185,150,185,32,21,39,136,155,173,141,61,200,208,184,40,108\")),bytes32(stringToBytes32(\"68,38,162,158,200,36,17,217,168,34,185,230,159,71,71,7,237,148,115,201,171,219,225,115,94,5,198,80,118,58,64,56\")),bytes32(stringToBytes32(\"84,168,94,50,38,237,27,38,16,101,184,120,10,49,102,144,76,139,101,103,144,11,20,75,166,2,88,75,34,234,232,245\")),bytes32(stringToBytes32(\"205,28,73,62,182,117,71,31,57,69,61,224,208,126,185,37,13,46,117,68,236,29,8,111,49,221,167,143,190,104,168,79\")),bytes32(stringToBytes32(\"193,97,147,33,158,182,112,81,158,43,161,2,145,167,188,176,61,253,23,253,76,60,32,135,248,110,140,185,110,35,104,2\")),bytes32(stringToBytes32(\"233,130,85,153,223,242,185,206,135,126,237,152,244,137,26,111,225,95,51,121,98,30,226,180,161,189,254,147,160,142,183,31\")),bytes32(stringToBytes32(\"53,126,87,21,7,106,197,209,240,8,28,209,17,49,129,29,27,234,207,65,131,205,215,228,63,118,80,148,48,129,140,46\")),bytes32(stringToBytes32(\"34,247,164,63,166,207,46,112,139,227,77,60,86,52,233,249,188,94,212,149,215,59,145,203,52,55,180,193,34,192,137,10\")),bytes32(stringToBytes32(\"233,251,119,233,116,205,204,81,122,189,65,248,118,82,128,208,81,194,178,61,68,166,221,209,82,171,137,124,222,18,124,47\")),bytes32(stringToBytes32(\"110,179,2,203,50,128,221,176,209,83,69,91,85,96,101,206,211,123,33,89,5,132,252,21,103,77,28,23,60,98,84,62\")),bytes32(stringToBytes32(\"112,112,104,133,94,126,96,33,39,119,215,190,94,147,56,185,1,241,246,139,180,62,223,20,217,53,207,233,91,83,123,222\")),bytes32(stringToBytes32(\"153,80,19,89,47,80,214,136,179,224,212,174,16,126,14,15,217,18,71,196,158,20,171,1,132,109,59,242,193,111,46,242\")),bytes32(stringToBytes32(\"101,117,38,2,172,214,75,183,180,93,101,94,239,239,126,115,206,32,74,221,187,3,46,205,238,144,45,226,254,147,254,209\")),bytes32(stringToBytes32(\"196,204,131,14,223,124,253,158,47,148,2,132,13,217,19,57,241,171,189,229,213,97,216,51,235,77,149,33,33,82,14,74\")),bytes32(stringToBytes32(\"244,43,235,141,146,209,6,2,178,197,6,224,90,71,45,28,0,150,4,185,197,161,2,17,123,210,95,72,4,137,15,134\")),bytes32(stringToBytes32(\"102,205,222,175,138,1,35,50,11,166,161,200,81,18,228,117,22,236,213,83,177,103,222,142,184,156,157,109,17,33,7,87\")),bytes32(stringToBytes32(\"59,194,104,82,253,117,17,71,89,217,244,79,43,221,157,120,68,90,200,5,1,162,229,248,78,241,146,170,220,223,8,243\")),bytes32(stringToBytes32(\"43,156,219,207,247,117,94,18,62,126,197,60,50,69,254,111,254,47,50,126,60,6,146,252,156,229,209,189,177,59,31,237\")),bytes32(stringToBytes32(\"113,164,217,6,179,169,215,235,123,233,221,74,13,146,169,14,15,241,224,156,213,153,151,27,5,192,48,118,73,174,111,106\")),bytes32(stringToBytes32(\"129,163,180,107,204,37,90,27,90,81,134,58,252,167,233,24,150,87,112,19,46,108,107,77,131,90,202,150,191,222,124,246\")),bytes32(stringToBytes32(\"205,138,150,89,213,106,125,125,219,5,153,96,140,191,137,196,129,184,61,215,43,85,44,55,71,193,93,127,21,144,173,237\")),bytes32(stringToBytes32(\"191,220,54,81,111,253,86,148,223,134,211,175,229,228,32,169,64,178,80,117,228,98,22,16,203,144,80,179,22,192,81,30\")),bytes32(stringToBytes32(\"141,35,163,94,88,21,128,147,3,16,140,168,244,201,6,22,131,223,114,101,216,47,24,154,242,208,48,196,20,88,188,115\")),bytes32(stringToBytes32(\"167,212,30,93,231,222,69,186,29,227,251,106,189,158,250,101,83,190,186,8,99,91,77,55,80,128,105,68,123,207,92,209\")),bytes32(stringToBytes32(\"12,97,188,34,88,170,70,14,99,251,196,36,94,106,130,42,224,148,29,178,108,144,107,75,148,35,239,81,62,11,42,59\")),bytes32(stringToBytes32(\"134,242,178,76,43,207,157,22,202,172,255,101,42,111,160,136,49,30,155,186,145,12,132,8,213,156,14,242,30,81,59,130\")),bytes32(stringToBytes32(\"52,0,163,90,45,212,120,44,201,48,62,60,88,96,143,198,74,171,96,111,239,79,175,203,74,11,154,207,44,107,175,181\")),bytes32(stringToBytes32(\"48,106,91,115,156,131,153,228,149,198,106,198,33,4,48,243,177,146,17,191,12,241,144,48,115,39,47,191,239,192,225,149\")),bytes32(stringToBytes32(\"117,10,189,250,74,213,186,219,51,129,77,127,131,108,52,37,231,187,204,39,206,199,180,22,219,72,103,214,14,158,241,94\")),bytes32(stringToBytes32(\"15,54,185,178,222,28,224,77,33,88,229,115,18,134,19,34,161,254,68,171,32,30,66,22,150,71,75,164,65,242,108,75\")),bytes32(stringToBytes32(\"182,130,193,19,196,54,228,58,61,213,174,243,141,221,168,125,30,194,251,103,80,62,6,92,189,21,40,102,172,189,122,115\")),bytes32(stringToBytes32(\"235,220,3,62,85,82,158,118,138,54,121,93,244,45,168,54,227,45,29,178,236,210,96,247,53,10,236,229,176,84,168,210\")),bytes32(stringToBytes32(\"13,222,168,18,245,135,157,89,114,39,217,220,180,42,154,205,158,148,136,105,243,229,154,11,137,227,41,30,8,31,96,155\")),bytes32(stringToBytes32(\"239,74,66,176,199,176,87,138,58,2,86,251,243,193,226,205,202,138,127,14,114,209,169,136,189,102,138,87,178,11,167,97\")),bytes32(stringToBytes32(\"241,206,47,89,196,152,219,51,28,52,245,215,6,9,229,224,112,193,39,152,99,52,17,43,226,127,54,23,154,156,123,105\")),bytes32(stringToBytes32(\"37,27,75,202,58,49,177,46,141,159,158,49,179,147,242,180,175,152,247,60,220,119,18,69,175,69,255,178,215,14,110,20\")),bytes32(stringToBytes32(\"79,229,103,33,139,96,11,33,213,213,246,203,158,29,66,71,76,41,171,240,137,118,71,43,58,153,175,197,113,224,127,200\")),bytes32(stringToBytes32(\"8,169,38,21,189,109,101,242,71,208,185,123,172,198,86,103,234,192,56,150,68,159,200,142,100,236,105,40,59,181,234,4\")),bytes32(stringToBytes32(\"238,84,109,17,101,220,207,199,124,36,32,46,34,60,109,246,2,147,124,214,121,41,99,142,48,88,162,204,203,111,178,205\")),bytes32(stringToBytes32(\"47,255,76,175,32,92,159,179,73,62,109,140,147,65,176,19,71,86,59,176,210,156,127,71,136,32,191,226,152,69,12,75\")),bytes32(stringToBytes32(\"183,91,32,27,80,154,46,104,237,159,46,232,191,241,125,44,204,174,0,218,172,41,176,200,11,242,66,126,96,156,160,102\")),bytes32(stringToBytes32(\"158,192,82,217,253,114,160,74,149,28,172,1,129,136,150,161,185,205,37,165,206,177,247,92,27,129,151,96,184,27,178,72\")),bytes32(stringToBytes32(\"248,113,69,105,74,191,231,24,142,135,104,204,136,237,198,135,241,26,1,54,220,225,213,74,61,187,15,98,119,232,104,209\")),bytes32(stringToBytes32(\"120,162,120,136,89,191,101,73,96,97,100,122,201,233,131,60,17,112,43,78,127,80,194,182,195,134,72,122,6,233,173,85\")),bytes32(stringToBytes32(\"203,30,201,234,202,124,5,84,132,35,239,59,87,145,213,75,207,74,248,108,246,114,20,97,81,39,141,3,109,38,159,215\")),bytes32(stringToBytes32(\"61,77,211,142,199,203,0,120,27,224,197,225,141,40,208,81,70,135,211,46,21,247,5,24,235,41,28,1,34,107,240,32\")),bytes32(stringToBytes32(\"160,193,89,44,216,137,84,238,53,25,206,194,168,221,19,253,87,84,190,163,242,228,217,164,115,159,97,246,227,127,17,232\")),bytes32(stringToBytes32(\"12,17,109,110,158,108,98,28,199,201,230,34,162,3,237,145,132,70,147,199,187,143,153,201,240,173,53,220,163,122,77,93\")),bytes32(stringToBytes32(\"206,42,205,206,118,181,50,29,82,156,62,49,46,36,189,189,137,124,215,116,176,219,185,98,219,84,222,101,177,101,26,135\")),bytes32(stringToBytes32(\"116,226,179,172,222,68,91,109,170,234,201,232,69,101,120,139,163,172,45,61,50,15,158,160,111,210,198,145,135,146,186,174\")),bytes32(stringToBytes32(\"6,129,4,64,206,191,95,167,80,88,248,188,38,209,14,9,80,94,216,112,210,80,110,206,153,145,113,114,186,229,228,234\")),bytes32(stringToBytes32(\"117,139,224,200,91,71,57,62,22,127,36,78,203,216,174,34,38,232,49,121,209,141,114,76,112,17,216,152,134,167,51,249\")),bytes32(stringToBytes32(\"215,127,201,239,128,106,19,241,37,24,240,36,180,136,12,212,138,6,171,133,76,39,43,128,159,103,234,0,198,195,217,75\")),bytes32(stringToBytes32(\"226,182,92,4,18,175,166,22,17,156,9,198,48,13,46,139,120,55,237,250,53,131,172,167,106,114,45,14,223,195,47,99\")),bytes32(stringToBytes32(\"50,222,95,200,119,241,108,136,152,129,130,227,101,84,79,145,210,153,47,89,211,179,177,19,37,18,128,145,11,11,16,226\")),bytes32(stringToBytes32(\"10,206,232,169,60,241,72,66,217,95,72,156,119,196,38,35,112,139,56,143,154,167,233,115,47,118,137,213,78,152,162,163\"))]"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[1],accounts[0],accounts[3],accounts[6],accounts[4],accounts[7],accounts[8],accounts[8],accounts[1],accounts[8],accounts[8],accounts[2],accounts[9],accounts[9],accounts[2],accounts[1],accounts[3],accounts[3],accounts[9],accounts[3],accounts[5],accounts[0],accounts[9],accounts[0],accounts[2],accounts[3],accounts[6],accounts[5],accounts[0],accounts[3],accounts[9],accounts[8],accounts[5],accounts[6],accounts[2],accounts[4],accounts[1],accounts[7],accounts[5],accounts[6],accounts[7],accounts[6],accounts[5],accounts[9],accounts[1],accounts[2],accounts[4],accounts[5],accounts[0],accounts[1],accounts[0],accounts[0],accounts[0],accounts[7],accounts[7],accounts[1],accounts[7],accounts[0],accounts[3],accounts[5],accounts[9],accounts[2],accounts[6],accounts[2],accounts[3],accounts[1],accounts[0],accounts[7],accounts[5],accounts[0],accounts[7],accounts[7],accounts[4],accounts[9],accounts[9],accounts[9],accounts[1],accounts[5],accounts[7],accounts[2],accounts[7],accounts[5],accounts[1],accounts[0],accounts[5],accounts[6],accounts[0],accounts[5],accounts[2],accounts[4],accounts[5],accounts[8],accounts[9],accounts[0],accounts[6],accounts[2],accounts[1]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[256,1,1532892064,255,2014223716,66,1,95,97,3,0,65,10000,10000,29,0,3,3,1532892064,1532892064,3,4,26,3,6,4,5,97,255,95,9999,4,1532892062,1532892062,255,1336,1336,28,9999,28,6,10000,26,64,6,95,0,2014223716,28,1532892064,256,6,95,1336,2014223716,254,5,10001,66,4,3,1532892063,96,1532892064,5,1,5,96,4,2,1336,66,27,3,29,1338,64,256,1532892064,2,2,1532892062,1,97,27,3,2,96,254,26,254,26,1,10001,95,5]",
                "sol": "[uint256(256),uint256(1),uint256(1532892064),uint256(255),uint256(2014223716),uint256(66),uint256(1),uint256(95),uint256(97),uint256(3),uint256(0),uint256(65),uint256(10000),uint256(10000),uint256(29),uint256(0),uint256(3),uint256(3),uint256(1532892064),uint256(1532892064),uint256(3),uint256(4),uint256(26),uint256(3),uint256(6),uint256(4),uint256(5),uint256(97),uint256(255),uint256(95),uint256(9999),uint256(4),uint256(1532892062),uint256(1532892062),uint256(255),uint256(1336),uint256(1336),uint256(28),uint256(9999),uint256(28),uint256(6),uint256(10000),uint256(26),uint256(64),uint256(6),uint256(95),uint256(0),uint256(2014223716),uint256(28),uint256(1532892064),uint256(256),uint256(6),uint256(95),uint256(1336),uint256(2014223716),uint256(254),uint256(5),uint256(10001),uint256(66),uint256(4),uint256(3),uint256(1532892063),uint256(96),uint256(1532892064),uint256(5),uint256(1),uint256(5),uint256(96),uint256(4),uint256(2),uint256(1336),uint256(66),uint256(27),uint256(3),uint256(29),uint256(1338),uint256(64),uint256(256),uint256(1532892064),uint256(2),uint256(2),uint256(1532892062),uint256(1),uint256(97),uint256(27),uint256(3),uint256(2),uint256(96),uint256(254),uint256(26),uint256(254),uint256(26),uint256(1),uint256(10001),uint256(95),uint256(5)]"
              },
              {
                "js": "[1532892064,95,65,1,254,6,1532892062,5,28,1338,1336,2014223714,2014223716,9999,0,4,2014223715,10000,29,27,1532892064,10001,96,2014223714,2,254,254,9999,255,1336,4,4,10000,2014223716,96,2,4,254,9999,254,254,1338,2014223715,96,1532892064,2014223714,28,1337,255,6,2014223714,10001,10000,10001,2014223716,1337,1532892063,64,4,2,28,26,64,1532892062,9999,97,1,5,1338,4,256,95,256,2014223716,10000,255,257,29,1532892064,2,254,1,1532892062,3,5,27,1337,64,27,5,10000,65,256,2,96,257]",
                "sol": "[uint256(1532892064),uint256(95),uint256(65),uint256(1),uint256(254),uint256(6),uint256(1532892062),uint256(5),uint256(28),uint256(1338),uint256(1336),uint256(2014223714),uint256(2014223716),uint256(9999),uint256(0),uint256(4),uint256(2014223715),uint256(10000),uint256(29),uint256(27),uint256(1532892064),uint256(10001),uint256(96),uint256(2014223714),uint256(2),uint256(254),uint256(254),uint256(9999),uint256(255),uint256(1336),uint256(4),uint256(4),uint256(10000),uint256(2014223716),uint256(96),uint256(2),uint256(4),uint256(254),uint256(9999),uint256(254),uint256(254),uint256(1338),uint256(2014223715),uint256(96),uint256(1532892064),uint256(2014223714),uint256(28),uint256(1337),uint256(255),uint256(6),uint256(2014223714),uint256(10001),uint256(10000),uint256(10001),uint256(2014223716),uint256(1337),uint256(1532892063),uint256(64),uint256(4),uint256(2),uint256(28),uint256(26),uint256(64),uint256(1532892062),uint256(9999),uint256(97),uint256(1),uint256(5),uint256(1338),uint256(4),uint256(256),uint256(95),uint256(256),uint256(2014223716),uint256(10000),uint256(255),uint256(257),uint256(29),uint256(1532892064),uint256(2),uint256(254),uint256(1),uint256(1532892062),uint256(3),uint256(5),uint256(27),uint256(1337),uint256(64),uint256(27),uint256(5),uint256(10000),uint256(65),uint256(256),uint256(2),uint256(96),uint256(257)]"
              },
              {
                "js": "[[43,96,131,68,101,156,176,172,104,199,125,141,254,35,150,233,157,55,192,57,196,14,195,45,27,47,39,14,54,71,123,84],[191,40,149,196,235,99,239,213,126,242,145,178,114,192,187,246,171,221,65,202,196,103,11,221,127,241,173,131,112,30,113,223],[6,88,192,98,157,240,210,153,44,219,197,129,146,16,192,178,201,154,18,19,32,4,200,185,13,150,2,214,205,127,172,114],[83,186,220,135,106,198,46,68,21,99,93,107,59,252,104,36,232,13,121,91,38,166,213,67,252,39,208,16,234,254,17,110],[33,8,44,49,10,96,102,52,109,154,188,187,78,68,120,132,147,150,122,69,237,151,197,194,80,135,252,64,42,172,46,187],[153,88,170,239,204,122,199,40,134,82,41,74,9,26,79,176,14,20,55,70,206,230,37,145,195,179,39,133,251,64,26,171],[92,107,3,2,63,242,217,182,208,184,153,255,116,7,90,108,70,9,171,235,26,93,169,47,240,227,4,112,16,149,175,54],[130,2,231,2,222,202,183,244,49,68,243,247,70,20,143,76,14,1,90,137,169,93,180,100,74,136,109,164,176,165,152,201],[219,97,94,134,100,199,33,189,110,10,113,132,58,238,251,22,57,239,76,121,146,237,128,174,0,38,82,157,203,48,68,43],[231,109,158,255,22,219,122,40,128,136,104,198,143,221,216,37,170,238,107,100,147,237,102,119,205,154,122,233,39,227,147,132],[10,136,160,184,71,161,76,31,129,211,28,18,7,77,225,173,235,125,144,53,63,42,74,141,189,60,105,235,15,156,199,63],[44,151,160,235,241,42,115,183,205,241,122,230,35,117,245,18,52,59,30,66,84,236,14,36,126,15,195,90,112,216,187,252],[221,40,156,147,38,113,61,220,118,135,50,21,2,105,17,61,241,57,125,219,1,240,101,236,58,238,116,18,17,211,2,21],[222,177,81,47,217,200,20,254,71,98,39,84,145,186,139,70,100,97,19,227,244,82,90,40,88,95,21,110,211,242,27,17],[59,75,24,155,105,184,224,178,234,118,158,43,87,190,60,129,13,221,27,171,219,223,154,228,26,248,6,120,34,136,76,107],[245,109,48,105,229,146,216,44,81,155,226,196,146,2,235,62,255,170,25,22,55,92,181,31,129,151,192,122,244,197,74,48],[198,155,152,219,41,35,83,83,145,4,153,164,3,124,97,216,139,156,236,59,219,168,10,7,80,59,167,187,243,93,86,173],[212,235,95,121,19,176,34,55,193,94,140,43,247,175,40,45,155,124,154,203,205,49,195,229,35,106,17,97,52,213,200,217],[158,115,102,96,157,24,57,136,155,226,124,110,62,186,194,37,230,254,37,214,255,235,231,100,133,113,118,2,228,2,87,21],[142,93,185,147,121,221,39,138,157,248,180,248,126,67,66,30,194,92,201,78,129,35,118,147,82,213,3,73,183,6,30,123],[188,162,63,50,60,54,3,86,220,23,72,223,229,45,64,239,231,181,93,232,0,182,238,128,40,23,198,179,73,13,195,201],[9,144,227,86,69,49,243,212,48,229,51,72,58,205,21,183,226,210,236,45,213,237,90,44,80,128,98,204,150,62,147,33],[123,189,157,114,42,238,15,226,241,3,62,248,19,178,86,208,247,195,198,209,129,26,12,133,155,202,86,119,190,229,225,27],[182,199,99,33,62,157,30,137,184,37,244,30,185,107,19,60,211,142,129,115,7,240,92,198,142,1,179,77,18,255,87,22],[9,42,227,220,3,189,205,28,104,74,204,178,49,91,198,72,48,189,243,230,161,23,133,3,194,196,206,88,78,143,187,42],[194,114,75,111,164,240,188,191,104,218,249,114,122,17,166,122,35,83,234,210,106,184,57,5,170,221,68,123,135,71,116,249],[212,212,52,234,73,225,22,85,1,251,63,240,30,249,113,66,105,89,243,104,13,181,152,231,94,140,225,214,134,72,195,177],[125,206,254,177,8,67,95,63,42,125,59,22,96,186,207,162,163,244,117,156,193,8,61,18,27,128,148,123,187,128,203,114],[184,139,216,103,211,245,0,55,64,225,28,17,113,93,100,84,96,243,230,192,20,152,163,163,125,127,36,10,43,98,14,153],[117,76,74,173,66,51,217,171,212,24,183,129,174,210,48,107,139,91,209,218,83,79,42,227,189,82,105,74,153,75,135,192],[12,224,87,105,78,179,73,113,219,79,147,185,38,205,44,177,208,155,253,115,56,183,44,0,11,19,182,167,131,47,73,158],[23,176,243,45,82,2,60,102,36,148,150,155,76,173,13,198,47,19,129,5,228,176,10,246,207,171,125,83,10,55,69,35],[135,204,60,124,162,154,152,249,74,94,141,194,209,54,208,89,237,34,12,235,195,34,80,84,14,185,100,139,1,44,224,87],[172,191,195,193,253,149,200,134,38,68,87,65,224,63,56,196,204,1,75,20,117,56,98,101,172,79,178,51,142,209,36,88],[98,226,50,193,18,123,79,32,251,244,187,200,157,251,143,123,33,218,66,21,210,52,102,0,123,73,152,129,100,78,58,60],[24,248,72,210,3,106,47,133,157,86,151,236,214,190,90,20,133,206,79,248,131,175,138,26,81,149,139,0,103,64,144,45],[8,37,92,201,47,240,9,55,201,68,234,128,194,193,56,148,166,221,174,160,60,34,214,188,91,210,223,186,223,67,74,37],[54,109,162,174,255,119,184,171,174,119,183,203,163,203,50,15,223,147,24,220,130,164,144,238,180,235,10,56,208,182,149,96],[30,86,25,78,214,100,58,233,151,132,155,199,53,122,188,152,210,145,79,246,125,83,211,106,162,15,187,137,21,14,220,49],[153,103,197,243,153,84,52,14,158,136,220,163,141,136,109,45,135,186,91,40,80,67,121,7,109,187,57,205,118,220,73,23],[184,143,19,0,14,123,9,42,87,232,107,8,119,77,249,108,185,150,185,32,21,39,136,155,173,141,61,200,208,184,40,108],[68,38,162,158,200,36,17,217,168,34,185,230,159,71,71,7,237,148,115,201,171,219,225,115,94,5,198,80,118,58,64,56],[84,168,94,50,38,237,27,38,16,101,184,120,10,49,102,144,76,139,101,103,144,11,20,75,166,2,88,75,34,234,232,245],[205,28,73,62,182,117,71,31,57,69,61,224,208,126,185,37,13,46,117,68,236,29,8,111,49,221,167,143,190,104,168,79],[193,97,147,33,158,182,112,81,158,43,161,2,145,167,188,176,61,253,23,253,76,60,32,135,248,110,140,185,110,35,104,2],[233,130,85,153,223,242,185,206,135,126,237,152,244,137,26,111,225,95,51,121,98,30,226,180,161,189,254,147,160,142,183,31],[53,126,87,21,7,106,197,209,240,8,28,209,17,49,129,29,27,234,207,65,131,205,215,228,63,118,80,148,48,129,140,46],[34,247,164,63,166,207,46,112,139,227,77,60,86,52,233,249,188,94,212,149,215,59,145,203,52,55,180,193,34,192,137,10],[233,251,119,233,116,205,204,81,122,189,65,248,118,82,128,208,81,194,178,61,68,166,221,209,82,171,137,124,222,18,124,47],[110,179,2,203,50,128,221,176,209,83,69,91,85,96,101,206,211,123,33,89,5,132,252,21,103,77,28,23,60,98,84,62],[112,112,104,133,94,126,96,33,39,119,215,190,94,147,56,185,1,241,246,139,180,62,223,20,217,53,207,233,91,83,123,222],[153,80,19,89,47,80,214,136,179,224,212,174,16,126,14,15,217,18,71,196,158,20,171,1,132,109,59,242,193,111,46,242],[101,117,38,2,172,214,75,183,180,93,101,94,239,239,126,115,206,32,74,221,187,3,46,205,238,144,45,226,254,147,254,209],[196,204,131,14,223,124,253,158,47,148,2,132,13,217,19,57,241,171,189,229,213,97,216,51,235,77,149,33,33,82,14,74],[244,43,235,141,146,209,6,2,178,197,6,224,90,71,45,28,0,150,4,185,197,161,2,17,123,210,95,72,4,137,15,134],[102,205,222,175,138,1,35,50,11,166,161,200,81,18,228,117,22,236,213,83,177,103,222,142,184,156,157,109,17,33,7,87],[59,194,104,82,253,117,17,71,89,217,244,79,43,221,157,120,68,90,200,5,1,162,229,248,78,241,146,170,220,223,8,243],[43,156,219,207,247,117,94,18,62,126,197,60,50,69,254,111,254,47,50,126,60,6,146,252,156,229,209,189,177,59,31,237],[113,164,217,6,179,169,215,235,123,233,221,74,13,146,169,14,15,241,224,156,213,153,151,27,5,192,48,118,73,174,111,106],[129,163,180,107,204,37,90,27,90,81,134,58,252,167,233,24,150,87,112,19,46,108,107,77,131,90,202,150,191,222,124,246],[205,138,150,89,213,106,125,125,219,5,153,96,140,191,137,196,129,184,61,215,43,85,44,55,71,193,93,127,21,144,173,237],[191,220,54,81,111,253,86,148,223,134,211,175,229,228,32,169,64,178,80,117,228,98,22,16,203,144,80,179,22,192,81,30],[141,35,163,94,88,21,128,147,3,16,140,168,244,201,6,22,131,223,114,101,216,47,24,154,242,208,48,196,20,88,188,115],[167,212,30,93,231,222,69,186,29,227,251,106,189,158,250,101,83,190,186,8,99,91,77,55,80,128,105,68,123,207,92,209],[12,97,188,34,88,170,70,14,99,251,196,36,94,106,130,42,224,148,29,178,108,144,107,75,148,35,239,81,62,11,42,59],[134,242,178,76,43,207,157,22,202,172,255,101,42,111,160,136,49,30,155,186,145,12,132,8,213,156,14,242,30,81,59,130],[52,0,163,90,45,212,120,44,201,48,62,60,88,96,143,198,74,171,96,111,239,79,175,203,74,11,154,207,44,107,175,181],[48,106,91,115,156,131,153,228,149,198,106,198,33,4,48,243,177,146,17,191,12,241,144,48,115,39,47,191,239,192,225,149],[117,10,189,250,74,213,186,219,51,129,77,127,131,108,52,37,231,187,204,39,206,199,180,22,219,72,103,214,14,158,241,94],[15,54,185,178,222,28,224,77,33,88,229,115,18,134,19,34,161,254,68,171,32,30,66,22,150,71,75,164,65,242,108,75],[182,130,193,19,196,54,228,58,61,213,174,243,141,221,168,125,30,194,251,103,80,62,6,92,189,21,40,102,172,189,122,115],[235,220,3,62,85,82,158,118,138,54,121,93,244,45,168,54,227,45,29,178,236,210,96,247,53,10,236,229,176,84,168,210],[13,222,168,18,245,135,157,89,114,39,217,220,180,42,154,205,158,148,136,105,243,229,154,11,137,227,41,30,8,31,96,155],[239,74,66,176,199,176,87,138,58,2,86,251,243,193,226,205,202,138,127,14,114,209,169,136,189,102,138,87,178,11,167,97],[241,206,47,89,196,152,219,51,28,52,245,215,6,9,229,224,112,193,39,152,99,52,17,43,226,127,54,23,154,156,123,105],[37,27,75,202,58,49,177,46,141,159,158,49,179,147,242,180,175,152,247,60,220,119,18,69,175,69,255,178,215,14,110,20],[79,229,103,33,139,96,11,33,213,213,246,203,158,29,66,71,76,41,171,240,137,118,71,43,58,153,175,197,113,224,127,200],[8,169,38,21,189,109,101,242,71,208,185,123,172,198,86,103,234,192,56,150,68,159,200,142,100,236,105,40,59,181,234,4],[238,84,109,17,101,220,207,199,124,36,32,46,34,60,109,246,2,147,124,214,121,41,99,142,48,88,162,204,203,111,178,205],[47,255,76,175,32,92,159,179,73,62,109,140,147,65,176,19,71,86,59,176,210,156,127,71,136,32,191,226,152,69,12,75],[183,91,32,27,80,154,46,104,237,159,46,232,191,241,125,44,204,174,0,218,172,41,176,200,11,242,66,126,96,156,160,102],[158,192,82,217,253,114,160,74,149,28,172,1,129,136,150,161,185,205,37,165,206,177,247,92,27,129,151,96,184,27,178,72],[248,113,69,105,74,191,231,24,142,135,104,204,136,237,198,135,241,26,1,54,220,225,213,74,61,187,15,98,119,232,104,209],[120,162,120,136,89,191,101,73,96,97,100,122,201,233,131,60,17,112,43,78,127,80,194,182,195,134,72,122,6,233,173,85],[203,30,201,234,202,124,5,84,132,35,239,59,87,145,213,75,207,74,248,108,246,114,20,97,81,39,141,3,109,38,159,215],[61,77,211,142,199,203,0,120,27,224,197,225,141,40,208,81,70,135,211,46,21,247,5,24,235,41,28,1,34,107,240,32],[160,193,89,44,216,137,84,238,53,25,206,194,168,221,19,253,87,84,190,163,242,228,217,164,115,159,97,246,227,127,17,232],[12,17,109,110,158,108,98,28,199,201,230,34,162,3,237,145,132,70,147,199,187,143,153,201,240,173,53,220,163,122,77,93],[206,42,205,206,118,181,50,29,82,156,62,49,46,36,189,189,137,124,215,116,176,219,185,98,219,84,222,101,177,101,26,135],[116,226,179,172,222,68,91,109,170,234,201,232,69,101,120,139,163,172,45,61,50,15,158,160,111,210,198,145,135,146,186,174],[6,129,4,64,206,191,95,167,80,88,248,188,38,209,14,9,80,94,216,112,210,80,110,206,153,145,113,114,186,229,228,234],[117,139,224,200,91,71,57,62,22,127,36,78,203,216,174,34,38,232,49,121,209,141,114,76,112,17,216,152,134,167,51,249],[215,127,201,239,128,106,19,241,37,24,240,36,180,136,12,212,138,6,171,133,76,39,43,128,159,103,234,0,198,195,217,75],[226,182,92,4,18,175,166,22,17,156,9,198,48,13,46,139,120,55,237,250,53,131,172,167,106,114,45,14,223,195,47,99],[50,222,95,200,119,241,108,136,152,129,130,227,101,84,79,145,210,153,47,89,211,179,177,19,37,18,128,145,11,11,16,226],[10,206,232,169,60,241,72,66,217,95,72,156,119,196,38,35,112,139,56,143,154,167,233,115,47,118,137,213,78,152,162,163]]",
                "sol": "[bytes32(stringToBytes32(\"43,96,131,68,101,156,176,172,104,199,125,141,254,35,150,233,157,55,192,57,196,14,195,45,27,47,39,14,54,71,123,84\")),bytes32(stringToBytes32(\"191,40,149,196,235,99,239,213,126,242,145,178,114,192,187,246,171,221,65,202,196,103,11,221,127,241,173,131,112,30,113,223\")),bytes32(stringToBytes32(\"6,88,192,98,157,240,210,153,44,219,197,129,146,16,192,178,201,154,18,19,32,4,200,185,13,150,2,214,205,127,172,114\")),bytes32(stringToBytes32(\"83,186,220,135,106,198,46,68,21,99,93,107,59,252,104,36,232,13,121,91,38,166,213,67,252,39,208,16,234,254,17,110\")),bytes32(stringToBytes32(\"33,8,44,49,10,96,102,52,109,154,188,187,78,68,120,132,147,150,122,69,237,151,197,194,80,135,252,64,42,172,46,187\")),bytes32(stringToBytes32(\"153,88,170,239,204,122,199,40,134,82,41,74,9,26,79,176,14,20,55,70,206,230,37,145,195,179,39,133,251,64,26,171\")),bytes32(stringToBytes32(\"92,107,3,2,63,242,217,182,208,184,153,255,116,7,90,108,70,9,171,235,26,93,169,47,240,227,4,112,16,149,175,54\")),bytes32(stringToBytes32(\"130,2,231,2,222,202,183,244,49,68,243,247,70,20,143,76,14,1,90,137,169,93,180,100,74,136,109,164,176,165,152,201\")),bytes32(stringToBytes32(\"219,97,94,134,100,199,33,189,110,10,113,132,58,238,251,22,57,239,76,121,146,237,128,174,0,38,82,157,203,48,68,43\")),bytes32(stringToBytes32(\"231,109,158,255,22,219,122,40,128,136,104,198,143,221,216,37,170,238,107,100,147,237,102,119,205,154,122,233,39,227,147,132\")),bytes32(stringToBytes32(\"10,136,160,184,71,161,76,31,129,211,28,18,7,77,225,173,235,125,144,53,63,42,74,141,189,60,105,235,15,156,199,63\")),bytes32(stringToBytes32(\"44,151,160,235,241,42,115,183,205,241,122,230,35,117,245,18,52,59,30,66,84,236,14,36,126,15,195,90,112,216,187,252\")),bytes32(stringToBytes32(\"221,40,156,147,38,113,61,220,118,135,50,21,2,105,17,61,241,57,125,219,1,240,101,236,58,238,116,18,17,211,2,21\")),bytes32(stringToBytes32(\"222,177,81,47,217,200,20,254,71,98,39,84,145,186,139,70,100,97,19,227,244,82,90,40,88,95,21,110,211,242,27,17\")),bytes32(stringToBytes32(\"59,75,24,155,105,184,224,178,234,118,158,43,87,190,60,129,13,221,27,171,219,223,154,228,26,248,6,120,34,136,76,107\")),bytes32(stringToBytes32(\"245,109,48,105,229,146,216,44,81,155,226,196,146,2,235,62,255,170,25,22,55,92,181,31,129,151,192,122,244,197,74,48\")),bytes32(stringToBytes32(\"198,155,152,219,41,35,83,83,145,4,153,164,3,124,97,216,139,156,236,59,219,168,10,7,80,59,167,187,243,93,86,173\")),bytes32(stringToBytes32(\"212,235,95,121,19,176,34,55,193,94,140,43,247,175,40,45,155,124,154,203,205,49,195,229,35,106,17,97,52,213,200,217\")),bytes32(stringToBytes32(\"158,115,102,96,157,24,57,136,155,226,124,110,62,186,194,37,230,254,37,214,255,235,231,100,133,113,118,2,228,2,87,21\")),bytes32(stringToBytes32(\"142,93,185,147,121,221,39,138,157,248,180,248,126,67,66,30,194,92,201,78,129,35,118,147,82,213,3,73,183,6,30,123\")),bytes32(stringToBytes32(\"188,162,63,50,60,54,3,86,220,23,72,223,229,45,64,239,231,181,93,232,0,182,238,128,40,23,198,179,73,13,195,201\")),bytes32(stringToBytes32(\"9,144,227,86,69,49,243,212,48,229,51,72,58,205,21,183,226,210,236,45,213,237,90,44,80,128,98,204,150,62,147,33\")),bytes32(stringToBytes32(\"123,189,157,114,42,238,15,226,241,3,62,248,19,178,86,208,247,195,198,209,129,26,12,133,155,202,86,119,190,229,225,27\")),bytes32(stringToBytes32(\"182,199,99,33,62,157,30,137,184,37,244,30,185,107,19,60,211,142,129,115,7,240,92,198,142,1,179,77,18,255,87,22\")),bytes32(stringToBytes32(\"9,42,227,220,3,189,205,28,104,74,204,178,49,91,198,72,48,189,243,230,161,23,133,3,194,196,206,88,78,143,187,42\")),bytes32(stringToBytes32(\"194,114,75,111,164,240,188,191,104,218,249,114,122,17,166,122,35,83,234,210,106,184,57,5,170,221,68,123,135,71,116,249\")),bytes32(stringToBytes32(\"212,212,52,234,73,225,22,85,1,251,63,240,30,249,113,66,105,89,243,104,13,181,152,231,94,140,225,214,134,72,195,177\")),bytes32(stringToBytes32(\"125,206,254,177,8,67,95,63,42,125,59,22,96,186,207,162,163,244,117,156,193,8,61,18,27,128,148,123,187,128,203,114\")),bytes32(stringToBytes32(\"184,139,216,103,211,245,0,55,64,225,28,17,113,93,100,84,96,243,230,192,20,152,163,163,125,127,36,10,43,98,14,153\")),bytes32(stringToBytes32(\"117,76,74,173,66,51,217,171,212,24,183,129,174,210,48,107,139,91,209,218,83,79,42,227,189,82,105,74,153,75,135,192\")),bytes32(stringToBytes32(\"12,224,87,105,78,179,73,113,219,79,147,185,38,205,44,177,208,155,253,115,56,183,44,0,11,19,182,167,131,47,73,158\")),bytes32(stringToBytes32(\"23,176,243,45,82,2,60,102,36,148,150,155,76,173,13,198,47,19,129,5,228,176,10,246,207,171,125,83,10,55,69,35\")),bytes32(stringToBytes32(\"135,204,60,124,162,154,152,249,74,94,141,194,209,54,208,89,237,34,12,235,195,34,80,84,14,185,100,139,1,44,224,87\")),bytes32(stringToBytes32(\"172,191,195,193,253,149,200,134,38,68,87,65,224,63,56,196,204,1,75,20,117,56,98,101,172,79,178,51,142,209,36,88\")),bytes32(stringToBytes32(\"98,226,50,193,18,123,79,32,251,244,187,200,157,251,143,123,33,218,66,21,210,52,102,0,123,73,152,129,100,78,58,60\")),bytes32(stringToBytes32(\"24,248,72,210,3,106,47,133,157,86,151,236,214,190,90,20,133,206,79,248,131,175,138,26,81,149,139,0,103,64,144,45\")),bytes32(stringToBytes32(\"8,37,92,201,47,240,9,55,201,68,234,128,194,193,56,148,166,221,174,160,60,34,214,188,91,210,223,186,223,67,74,37\")),bytes32(stringToBytes32(\"54,109,162,174,255,119,184,171,174,119,183,203,163,203,50,15,223,147,24,220,130,164,144,238,180,235,10,56,208,182,149,96\")),bytes32(stringToBytes32(\"30,86,25,78,214,100,58,233,151,132,155,199,53,122,188,152,210,145,79,246,125,83,211,106,162,15,187,137,21,14,220,49\")),bytes32(stringToBytes32(\"153,103,197,243,153,84,52,14,158,136,220,163,141,136,109,45,135,186,91,40,80,67,121,7,109,187,57,205,118,220,73,23\")),bytes32(stringToBytes32(\"184,143,19,0,14,123,9,42,87,232,107,8,119,77,249,108,185,150,185,32,21,39,136,155,173,141,61,200,208,184,40,108\")),bytes32(stringToBytes32(\"68,38,162,158,200,36,17,217,168,34,185,230,159,71,71,7,237,148,115,201,171,219,225,115,94,5,198,80,118,58,64,56\")),bytes32(stringToBytes32(\"84,168,94,50,38,237,27,38,16,101,184,120,10,49,102,144,76,139,101,103,144,11,20,75,166,2,88,75,34,234,232,245\")),bytes32(stringToBytes32(\"205,28,73,62,182,117,71,31,57,69,61,224,208,126,185,37,13,46,117,68,236,29,8,111,49,221,167,143,190,104,168,79\")),bytes32(stringToBytes32(\"193,97,147,33,158,182,112,81,158,43,161,2,145,167,188,176,61,253,23,253,76,60,32,135,248,110,140,185,110,35,104,2\")),bytes32(stringToBytes32(\"233,130,85,153,223,242,185,206,135,126,237,152,244,137,26,111,225,95,51,121,98,30,226,180,161,189,254,147,160,142,183,31\")),bytes32(stringToBytes32(\"53,126,87,21,7,106,197,209,240,8,28,209,17,49,129,29,27,234,207,65,131,205,215,228,63,118,80,148,48,129,140,46\")),bytes32(stringToBytes32(\"34,247,164,63,166,207,46,112,139,227,77,60,86,52,233,249,188,94,212,149,215,59,145,203,52,55,180,193,34,192,137,10\")),bytes32(stringToBytes32(\"233,251,119,233,116,205,204,81,122,189,65,248,118,82,128,208,81,194,178,61,68,166,221,209,82,171,137,124,222,18,124,47\")),bytes32(stringToBytes32(\"110,179,2,203,50,128,221,176,209,83,69,91,85,96,101,206,211,123,33,89,5,132,252,21,103,77,28,23,60,98,84,62\")),bytes32(stringToBytes32(\"112,112,104,133,94,126,96,33,39,119,215,190,94,147,56,185,1,241,246,139,180,62,223,20,217,53,207,233,91,83,123,222\")),bytes32(stringToBytes32(\"153,80,19,89,47,80,214,136,179,224,212,174,16,126,14,15,217,18,71,196,158,20,171,1,132,109,59,242,193,111,46,242\")),bytes32(stringToBytes32(\"101,117,38,2,172,214,75,183,180,93,101,94,239,239,126,115,206,32,74,221,187,3,46,205,238,144,45,226,254,147,254,209\")),bytes32(stringToBytes32(\"196,204,131,14,223,124,253,158,47,148,2,132,13,217,19,57,241,171,189,229,213,97,216,51,235,77,149,33,33,82,14,74\")),bytes32(stringToBytes32(\"244,43,235,141,146,209,6,2,178,197,6,224,90,71,45,28,0,150,4,185,197,161,2,17,123,210,95,72,4,137,15,134\")),bytes32(stringToBytes32(\"102,205,222,175,138,1,35,50,11,166,161,200,81,18,228,117,22,236,213,83,177,103,222,142,184,156,157,109,17,33,7,87\")),bytes32(stringToBytes32(\"59,194,104,82,253,117,17,71,89,217,244,79,43,221,157,120,68,90,200,5,1,162,229,248,78,241,146,170,220,223,8,243\")),bytes32(stringToBytes32(\"43,156,219,207,247,117,94,18,62,126,197,60,50,69,254,111,254,47,50,126,60,6,146,252,156,229,209,189,177,59,31,237\")),bytes32(stringToBytes32(\"113,164,217,6,179,169,215,235,123,233,221,74,13,146,169,14,15,241,224,156,213,153,151,27,5,192,48,118,73,174,111,106\")),bytes32(stringToBytes32(\"129,163,180,107,204,37,90,27,90,81,134,58,252,167,233,24,150,87,112,19,46,108,107,77,131,90,202,150,191,222,124,246\")),bytes32(stringToBytes32(\"205,138,150,89,213,106,125,125,219,5,153,96,140,191,137,196,129,184,61,215,43,85,44,55,71,193,93,127,21,144,173,237\")),bytes32(stringToBytes32(\"191,220,54,81,111,253,86,148,223,134,211,175,229,228,32,169,64,178,80,117,228,98,22,16,203,144,80,179,22,192,81,30\")),bytes32(stringToBytes32(\"141,35,163,94,88,21,128,147,3,16,140,168,244,201,6,22,131,223,114,101,216,47,24,154,242,208,48,196,20,88,188,115\")),bytes32(stringToBytes32(\"167,212,30,93,231,222,69,186,29,227,251,106,189,158,250,101,83,190,186,8,99,91,77,55,80,128,105,68,123,207,92,209\")),bytes32(stringToBytes32(\"12,97,188,34,88,170,70,14,99,251,196,36,94,106,130,42,224,148,29,178,108,144,107,75,148,35,239,81,62,11,42,59\")),bytes32(stringToBytes32(\"134,242,178,76,43,207,157,22,202,172,255,101,42,111,160,136,49,30,155,186,145,12,132,8,213,156,14,242,30,81,59,130\")),bytes32(stringToBytes32(\"52,0,163,90,45,212,120,44,201,48,62,60,88,96,143,198,74,171,96,111,239,79,175,203,74,11,154,207,44,107,175,181\")),bytes32(stringToBytes32(\"48,106,91,115,156,131,153,228,149,198,106,198,33,4,48,243,177,146,17,191,12,241,144,48,115,39,47,191,239,192,225,149\")),bytes32(stringToBytes32(\"117,10,189,250,74,213,186,219,51,129,77,127,131,108,52,37,231,187,204,39,206,199,180,22,219,72,103,214,14,158,241,94\")),bytes32(stringToBytes32(\"15,54,185,178,222,28,224,77,33,88,229,115,18,134,19,34,161,254,68,171,32,30,66,22,150,71,75,164,65,242,108,75\")),bytes32(stringToBytes32(\"182,130,193,19,196,54,228,58,61,213,174,243,141,221,168,125,30,194,251,103,80,62,6,92,189,21,40,102,172,189,122,115\")),bytes32(stringToBytes32(\"235,220,3,62,85,82,158,118,138,54,121,93,244,45,168,54,227,45,29,178,236,210,96,247,53,10,236,229,176,84,168,210\")),bytes32(stringToBytes32(\"13,222,168,18,245,135,157,89,114,39,217,220,180,42,154,205,158,148,136,105,243,229,154,11,137,227,41,30,8,31,96,155\")),bytes32(stringToBytes32(\"239,74,66,176,199,176,87,138,58,2,86,251,243,193,226,205,202,138,127,14,114,209,169,136,189,102,138,87,178,11,167,97\")),bytes32(stringToBytes32(\"241,206,47,89,196,152,219,51,28,52,245,215,6,9,229,224,112,193,39,152,99,52,17,43,226,127,54,23,154,156,123,105\")),bytes32(stringToBytes32(\"37,27,75,202,58,49,177,46,141,159,158,49,179,147,242,180,175,152,247,60,220,119,18,69,175,69,255,178,215,14,110,20\")),bytes32(stringToBytes32(\"79,229,103,33,139,96,11,33,213,213,246,203,158,29,66,71,76,41,171,240,137,118,71,43,58,153,175,197,113,224,127,200\")),bytes32(stringToBytes32(\"8,169,38,21,189,109,101,242,71,208,185,123,172,198,86,103,234,192,56,150,68,159,200,142,100,236,105,40,59,181,234,4\")),bytes32(stringToBytes32(\"238,84,109,17,101,220,207,199,124,36,32,46,34,60,109,246,2,147,124,214,121,41,99,142,48,88,162,204,203,111,178,205\")),bytes32(stringToBytes32(\"47,255,76,175,32,92,159,179,73,62,109,140,147,65,176,19,71,86,59,176,210,156,127,71,136,32,191,226,152,69,12,75\")),bytes32(stringToBytes32(\"183,91,32,27,80,154,46,104,237,159,46,232,191,241,125,44,204,174,0,218,172,41,176,200,11,242,66,126,96,156,160,102\")),bytes32(stringToBytes32(\"158,192,82,217,253,114,160,74,149,28,172,1,129,136,150,161,185,205,37,165,206,177,247,92,27,129,151,96,184,27,178,72\")),bytes32(stringToBytes32(\"248,113,69,105,74,191,231,24,142,135,104,204,136,237,198,135,241,26,1,54,220,225,213,74,61,187,15,98,119,232,104,209\")),bytes32(stringToBytes32(\"120,162,120,136,89,191,101,73,96,97,100,122,201,233,131,60,17,112,43,78,127,80,194,182,195,134,72,122,6,233,173,85\")),bytes32(stringToBytes32(\"203,30,201,234,202,124,5,84,132,35,239,59,87,145,213,75,207,74,248,108,246,114,20,97,81,39,141,3,109,38,159,215\")),bytes32(stringToBytes32(\"61,77,211,142,199,203,0,120,27,224,197,225,141,40,208,81,70,135,211,46,21,247,5,24,235,41,28,1,34,107,240,32\")),bytes32(stringToBytes32(\"160,193,89,44,216,137,84,238,53,25,206,194,168,221,19,253,87,84,190,163,242,228,217,164,115,159,97,246,227,127,17,232\")),bytes32(stringToBytes32(\"12,17,109,110,158,108,98,28,199,201,230,34,162,3,237,145,132,70,147,199,187,143,153,201,240,173,53,220,163,122,77,93\")),bytes32(stringToBytes32(\"206,42,205,206,118,181,50,29,82,156,62,49,46,36,189,189,137,124,215,116,176,219,185,98,219,84,222,101,177,101,26,135\")),bytes32(stringToBytes32(\"116,226,179,172,222,68,91,109,170,234,201,232,69,101,120,139,163,172,45,61,50,15,158,160,111,210,198,145,135,146,186,174\")),bytes32(stringToBytes32(\"6,129,4,64,206,191,95,167,80,88,248,188,38,209,14,9,80,94,216,112,210,80,110,206,153,145,113,114,186,229,228,234\")),bytes32(stringToBytes32(\"117,139,224,200,91,71,57,62,22,127,36,78,203,216,174,34,38,232,49,121,209,141,114,76,112,17,216,152,134,167,51,249\")),bytes32(stringToBytes32(\"215,127,201,239,128,106,19,241,37,24,240,36,180,136,12,212,138,6,171,133,76,39,43,128,159,103,234,0,198,195,217,75\")),bytes32(stringToBytes32(\"226,182,92,4,18,175,166,22,17,156,9,198,48,13,46,139,120,55,237,250,53,131,172,167,106,114,45,14,223,195,47,99\")),bytes32(stringToBytes32(\"50,222,95,200,119,241,108,136,152,129,130,227,101,84,79,145,210,153,47,89,211,179,177,19,37,18,128,145,11,11,16,226\")),bytes32(stringToBytes32(\"10,206,232,169,60,241,72,66,217,95,72,156,119,196,38,35,112,139,56,143,154,167,233,115,47,118,137,213,78,152,162,163\"))]"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[4],accounts[4],accounts[1],accounts[4],accounts[3],accounts[7],accounts[3],accounts[7],accounts[1],accounts[7],accounts[6],accounts[4],accounts[4],accounts[9],accounts[4],accounts[6],accounts[3],accounts[7],accounts[5],accounts[1],accounts[4],accounts[3],accounts[0],accounts[1],accounts[4],accounts[1],accounts[6],accounts[3],accounts[2],accounts[8],accounts[8],accounts[0],accounts[7],accounts[8],accounts[8],accounts[6],accounts[0],accounts[3],accounts[7],accounts[9],accounts[8],accounts[2],accounts[1],accounts[4],accounts[8],accounts[9],accounts[2],accounts[6],accounts[1],accounts[2],accounts[3],accounts[1],accounts[2],accounts[0],accounts[0],accounts[9],accounts[6],accounts[6],accounts[7],accounts[8],accounts[5],accounts[3],accounts[4],accounts[6],accounts[0],accounts[8],accounts[1],accounts[9],accounts[7],accounts[8],accounts[0],accounts[7],accounts[3],accounts[1],accounts[1],accounts[6],accounts[8],accounts[5],accounts[2],accounts[7],accounts[7],accounts[9],accounts[5],accounts[9],accounts[9],accounts[5],accounts[0],accounts[1],accounts[5],accounts[1],accounts[0],accounts[3],accounts[3],accounts[1],accounts[5],accounts[5],accounts[6]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[256,1,1532892064,255,2014223716,66,1,95,97,3,0,65,10000,10000,29,0,3,3,1532892064,1532892064,3,4,26,3,6,4,5,97,255,95,9999,4,1532892062,1532892062,255,1336,1336,28,9999,28,6,10000,26,64,6,95,0,2014223716,28,1532892064,256,6,95,1336,2014223716,254,5,10001,66,4,3,1532892063,96,1532892064,5,1,5,96,4,2,1336,66,27,3,29,1338,64,256,1532892064,2,2,1532892062,1,97,27,3,2,96,254,26,254,26,1,10001,95,5]",
                "sol": "[uint256(256),uint256(1),uint256(1532892064),uint256(255),uint256(2014223716),uint256(66),uint256(1),uint256(95),uint256(97),uint256(3),uint256(0),uint256(65),uint256(10000),uint256(10000),uint256(29),uint256(0),uint256(3),uint256(3),uint256(1532892064),uint256(1532892064),uint256(3),uint256(4),uint256(26),uint256(3),uint256(6),uint256(4),uint256(5),uint256(97),uint256(255),uint256(95),uint256(9999),uint256(4),uint256(1532892062),uint256(1532892062),uint256(255),uint256(1336),uint256(1336),uint256(28),uint256(9999),uint256(28),uint256(6),uint256(10000),uint256(26),uint256(64),uint256(6),uint256(95),uint256(0),uint256(2014223716),uint256(28),uint256(1532892064),uint256(256),uint256(6),uint256(95),uint256(1336),uint256(2014223716),uint256(254),uint256(5),uint256(10001),uint256(66),uint256(4),uint256(3),uint256(1532892063),uint256(96),uint256(1532892064),uint256(5),uint256(1),uint256(5),uint256(96),uint256(4),uint256(2),uint256(1336),uint256(66),uint256(27),uint256(3),uint256(29),uint256(1338),uint256(64),uint256(256),uint256(1532892064),uint256(2),uint256(2),uint256(1532892062),uint256(1),uint256(97),uint256(27),uint256(3),uint256(2),uint256(96),uint256(254),uint256(26),uint256(254),uint256(26),uint256(1),uint256(10001),uint256(95),uint256(5)]"
              },
              {
                "js": "[1532892064,95,65,1,254,6,1532892062,5,28,1338,1336,2014223714,2014223716,9999,0,4,2014223715,10000,29,27,1532892064,10001,96,2014223714,2,254,254,9999,255,1336,4,4,10000,2014223716,96,2,4,254,9999,254,254,1338,2014223715,96,1532892064,2014223714,28,1337,255,6,2014223714,10001,10000,10001,2014223716,1337,1532892063,64,4,2,28,26,64,1532892062,9999,97,1,5,1338,4,256,95,256,2014223716,10000,255,257,29,1532892064,2,254,1,1532892062,3,5,27,1337,64,27,5,10000,65,256,2,96,257]",
                "sol": "[uint256(1532892064),uint256(95),uint256(65),uint256(1),uint256(254),uint256(6),uint256(1532892062),uint256(5),uint256(28),uint256(1338),uint256(1336),uint256(2014223714),uint256(2014223716),uint256(9999),uint256(0),uint256(4),uint256(2014223715),uint256(10000),uint256(29),uint256(27),uint256(1532892064),uint256(10001),uint256(96),uint256(2014223714),uint256(2),uint256(254),uint256(254),uint256(9999),uint256(255),uint256(1336),uint256(4),uint256(4),uint256(10000),uint256(2014223716),uint256(96),uint256(2),uint256(4),uint256(254),uint256(9999),uint256(254),uint256(254),uint256(1338),uint256(2014223715),uint256(96),uint256(1532892064),uint256(2014223714),uint256(28),uint256(1337),uint256(255),uint256(6),uint256(2014223714),uint256(10001),uint256(10000),uint256(10001),uint256(2014223716),uint256(1337),uint256(1532892063),uint256(64),uint256(4),uint256(2),uint256(28),uint256(26),uint256(64),uint256(1532892062),uint256(9999),uint256(97),uint256(1),uint256(5),uint256(1338),uint256(4),uint256(256),uint256(95),uint256(256),uint256(2014223716),uint256(10000),uint256(255),uint256(257),uint256(29),uint256(1532892064),uint256(2),uint256(254),uint256(1),uint256(1532892062),uint256(3),uint256(5),uint256(27),uint256(1337),uint256(64),uint256(27),uint256(5),uint256(10000),uint256(65),uint256(256),uint256(2),uint256(96),uint256(257)]"
              },
              {
                "js": "[[43,96,131,68,101,156,176,172,104,199,125,141,254,35,150,233,157,55,192,57,196,14,195,45,27,47,39,14,54,71,123,84],[191,40,149,196,235,99,239,213,126,242,145,178,114,192,187,246,171,221,65,202,196,103,11,221,127,241,173,131,112,30,113,223],[6,88,192,98,157,240,210,153,44,219,197,129,146,16,192,178,201,154,18,19,32,4,200,185,13,150,2,214,205,127,172,114],[83,186,220,135,106,198,46,68,21,99,93,107,59,252,104,36,232,13,121,91,38,166,213,67,252,39,208,16,234,254,17,110],[33,8,44,49,10,96,102,52,109,154,188,187,78,68,120,132,147,150,122,69,237,151,197,194,80,135,252,64,42,172,46,187],[153,88,170,239,204,122,199,40,134,82,41,74,9,26,79,176,14,20,55,70,206,230,37,145,195,179,39,133,251,64,26,171],[92,107,3,2,63,242,217,182,208,184,153,255,116,7,90,108,70,9,171,235,26,93,169,47,240,227,4,112,16,149,175,54],[130,2,231,2,222,202,183,244,49,68,243,247,70,20,143,76,14,1,90,137,169,93,180,100,74,136,109,164,176,165,152,201],[219,97,94,134,100,199,33,189,110,10,113,132,58,238,251,22,57,239,76,121,146,237,128,174,0,38,82,157,203,48,68,43],[231,109,158,255,22,219,122,40,128,136,104,198,143,221,216,37,170,238,107,100,147,237,102,119,205,154,122,233,39,227,147,132],[10,136,160,184,71,161,76,31,129,211,28,18,7,77,225,173,235,125,144,53,63,42,74,141,189,60,105,235,15,156,199,63],[44,151,160,235,241,42,115,183,205,241,122,230,35,117,245,18,52,59,30,66,84,236,14,36,126,15,195,90,112,216,187,252],[221,40,156,147,38,113,61,220,118,135,50,21,2,105,17,61,241,57,125,219,1,240,101,236,58,238,116,18,17,211,2,21],[222,177,81,47,217,200,20,254,71,98,39,84,145,186,139,70,100,97,19,227,244,82,90,40,88,95,21,110,211,242,27,17],[59,75,24,155,105,184,224,178,234,118,158,43,87,190,60,129,13,221,27,171,219,223,154,228,26,248,6,120,34,136,76,107],[245,109,48,105,229,146,216,44,81,155,226,196,146,2,235,62,255,170,25,22,55,92,181,31,129,151,192,122,244,197,74,48],[198,155,152,219,41,35,83,83,145,4,153,164,3,124,97,216,139,156,236,59,219,168,10,7,80,59,167,187,243,93,86,173],[212,235,95,121,19,176,34,55,193,94,140,43,247,175,40,45,155,124,154,203,205,49,195,229,35,106,17,97,52,213,200,217],[158,115,102,96,157,24,57,136,155,226,124,110,62,186,194,37,230,254,37,214,255,235,231,100,133,113,118,2,228,2,87,21],[142,93,185,147,121,221,39,138,157,248,180,248,126,67,66,30,194,92,201,78,129,35,118,147,82,213,3,73,183,6,30,123],[188,162,63,50,60,54,3,86,220,23,72,223,229,45,64,239,231,181,93,232,0,182,238,128,40,23,198,179,73,13,195,201],[9,144,227,86,69,49,243,212,48,229,51,72,58,205,21,183,226,210,236,45,213,237,90,44,80,128,98,204,150,62,147,33],[123,189,157,114,42,238,15,226,241,3,62,248,19,178,86,208,247,195,198,209,129,26,12,133,155,202,86,119,190,229,225,27],[182,199,99,33,62,157,30,137,184,37,244,30,185,107,19,60,211,142,129,115,7,240,92,198,142,1,179,77,18,255,87,22],[9,42,227,220,3,189,205,28,104,74,204,178,49,91,198,72,48,189,243,230,161,23,133,3,194,196,206,88,78,143,187,42],[194,114,75,111,164,240,188,191,104,218,249,114,122,17,166,122,35,83,234,210,106,184,57,5,170,221,68,123,135,71,116,249],[212,212,52,234,73,225,22,85,1,251,63,240,30,249,113,66,105,89,243,104,13,181,152,231,94,140,225,214,134,72,195,177],[125,206,254,177,8,67,95,63,42,125,59,22,96,186,207,162,163,244,117,156,193,8,61,18,27,128,148,123,187,128,203,114],[184,139,216,103,211,245,0,55,64,225,28,17,113,93,100,84,96,243,230,192,20,152,163,163,125,127,36,10,43,98,14,153],[117,76,74,173,66,51,217,171,212,24,183,129,174,210,48,107,139,91,209,218,83,79,42,227,189,82,105,74,153,75,135,192],[12,224,87,105,78,179,73,113,219,79,147,185,38,205,44,177,208,155,253,115,56,183,44,0,11,19,182,167,131,47,73,158],[23,176,243,45,82,2,60,102,36,148,150,155,76,173,13,198,47,19,129,5,228,176,10,246,207,171,125,83,10,55,69,35],[135,204,60,124,162,154,152,249,74,94,141,194,209,54,208,89,237,34,12,235,195,34,80,84,14,185,100,139,1,44,224,87],[172,191,195,193,253,149,200,134,38,68,87,65,224,63,56,196,204,1,75,20,117,56,98,101,172,79,178,51,142,209,36,88],[98,226,50,193,18,123,79,32,251,244,187,200,157,251,143,123,33,218,66,21,210,52,102,0,123,73,152,129,100,78,58,60],[24,248,72,210,3,106,47,133,157,86,151,236,214,190,90,20,133,206,79,248,131,175,138,26,81,149,139,0,103,64,144,45],[8,37,92,201,47,240,9,55,201,68,234,128,194,193,56,148,166,221,174,160,60,34,214,188,91,210,223,186,223,67,74,37],[54,109,162,174,255,119,184,171,174,119,183,203,163,203,50,15,223,147,24,220,130,164,144,238,180,235,10,56,208,182,149,96],[30,86,25,78,214,100,58,233,151,132,155,199,53,122,188,152,210,145,79,246,125,83,211,106,162,15,187,137,21,14,220,49],[153,103,197,243,153,84,52,14,158,136,220,163,141,136,109,45,135,186,91,40,80,67,121,7,109,187,57,205,118,220,73,23],[184,143,19,0,14,123,9,42,87,232,107,8,119,77,249,108,185,150,185,32,21,39,136,155,173,141,61,200,208,184,40,108],[68,38,162,158,200,36,17,217,168,34,185,230,159,71,71,7,237,148,115,201,171,219,225,115,94,5,198,80,118,58,64,56],[84,168,94,50,38,237,27,38,16,101,184,120,10,49,102,144,76,139,101,103,144,11,20,75,166,2,88,75,34,234,232,245],[205,28,73,62,182,117,71,31,57,69,61,224,208,126,185,37,13,46,117,68,236,29,8,111,49,221,167,143,190,104,168,79],[193,97,147,33,158,182,112,81,158,43,161,2,145,167,188,176,61,253,23,253,76,60,32,135,248,110,140,185,110,35,104,2],[233,130,85,153,223,242,185,206,135,126,237,152,244,137,26,111,225,95,51,121,98,30,226,180,161,189,254,147,160,142,183,31],[53,126,87,21,7,106,197,209,240,8,28,209,17,49,129,29,27,234,207,65,131,205,215,228,63,118,80,148,48,129,140,46],[34,247,164,63,166,207,46,112,139,227,77,60,86,52,233,249,188,94,212,149,215,59,145,203,52,55,180,193,34,192,137,10],[233,251,119,233,116,205,204,81,122,189,65,248,118,82,128,208,81,194,178,61,68,166,221,209,82,171,137,124,222,18,124,47],[110,179,2,203,50,128,221,176,209,83,69,91,85,96,101,206,211,123,33,89,5,132,252,21,103,77,28,23,60,98,84,62],[112,112,104,133,94,126,96,33,39,119,215,190,94,147,56,185,1,241,246,139,180,62,223,20,217,53,207,233,91,83,123,222],[153,80,19,89,47,80,214,136,179,224,212,174,16,126,14,15,217,18,71,196,158,20,171,1,132,109,59,242,193,111,46,242],[101,117,38,2,172,214,75,183,180,93,101,94,239,239,126,115,206,32,74,221,187,3,46,205,238,144,45,226,254,147,254,209],[196,204,131,14,223,124,253,158,47,148,2,132,13,217,19,57,241,171,189,229,213,97,216,51,235,77,149,33,33,82,14,74],[244,43,235,141,146,209,6,2,178,197,6,224,90,71,45,28,0,150,4,185,197,161,2,17,123,210,95,72,4,137,15,134],[102,205,222,175,138,1,35,50,11,166,161,200,81,18,228,117,22,236,213,83,177,103,222,142,184,156,157,109,17,33,7,87],[59,194,104,82,253,117,17,71,89,217,244,79,43,221,157,120,68,90,200,5,1,162,229,248,78,241,146,170,220,223,8,243],[43,156,219,207,247,117,94,18,62,126,197,60,50,69,254,111,254,47,50,126,60,6,146,252,156,229,209,189,177,59,31,237],[113,164,217,6,179,169,215,235,123,233,221,74,13,146,169,14,15,241,224,156,213,153,151,27,5,192,48,118,73,174,111,106],[129,163,180,107,204,37,90,27,90,81,134,58,252,167,233,24,150,87,112,19,46,108,107,77,131,90,202,150,191,222,124,246],[205,138,150,89,213,106,125,125,219,5,153,96,140,191,137,196,129,184,61,215,43,85,44,55,71,193,93,127,21,144,173,237],[191,220,54,81,111,253,86,148,223,134,211,175,229,228,32,169,64,178,80,117,228,98,22,16,203,144,80,179,22,192,81,30],[141,35,163,94,88,21,128,147,3,16,140,168,244,201,6,22,131,223,114,101,216,47,24,154,242,208,48,196,20,88,188,115],[167,212,30,93,231,222,69,186,29,227,251,106,189,158,250,101,83,190,186,8,99,91,77,55,80,128,105,68,123,207,92,209],[12,97,188,34,88,170,70,14,99,251,196,36,94,106,130,42,224,148,29,178,108,144,107,75,148,35,239,81,62,11,42,59],[134,242,178,76,43,207,157,22,202,172,255,101,42,111,160,136,49,30,155,186,145,12,132,8,213,156,14,242,30,81,59,130],[52,0,163,90,45,212,120,44,201,48,62,60,88,96,143,198,74,171,96,111,239,79,175,203,74,11,154,207,44,107,175,181],[48,106,91,115,156,131,153,228,149,198,106,198,33,4,48,243,177,146,17,191,12,241,144,48,115,39,47,191,239,192,225,149],[117,10,189,250,74,213,186,219,51,129,77,127,131,108,52,37,231,187,204,39,206,199,180,22,219,72,103,214,14,158,241,94],[15,54,185,178,222,28,224,77,33,88,229,115,18,134,19,34,161,254,68,171,32,30,66,22,150,71,75,164,65,242,108,75],[182,130,193,19,196,54,228,58,61,213,174,243,141,221,168,125,30,194,251,103,80,62,6,92,189,21,40,102,172,189,122,115],[235,220,3,62,85,82,158,118,138,54,121,93,244,45,168,54,227,45,29,178,236,210,96,247,53,10,236,229,176,84,168,210],[13,222,168,18,245,135,157,89,114,39,217,220,180,42,154,205,158,148,136,105,243,229,154,11,137,227,41,30,8,31,96,155],[239,74,66,176,199,176,87,138,58,2,86,251,243,193,226,205,202,138,127,14,114,209,169,136,189,102,138,87,178,11,167,97],[241,206,47,89,196,152,219,51,28,52,245,215,6,9,229,224,112,193,39,152,99,52,17,43,226,127,54,23,154,156,123,105],[37,27,75,202,58,49,177,46,141,159,158,49,179,147,242,180,175,152,247,60,220,119,18,69,175,69,255,178,215,14,110,20],[79,229,103,33,139,96,11,33,213,213,246,203,158,29,66,71,76,41,171,240,137,118,71,43,58,153,175,197,113,224,127,200],[8,169,38,21,189,109,101,242,71,208,185,123,172,198,86,103,234,192,56,150,68,159,200,142,100,236,105,40,59,181,234,4],[238,84,109,17,101,220,207,199,124,36,32,46,34,60,109,246,2,147,124,214,121,41,99,142,48,88,162,204,203,111,178,205],[47,255,76,175,32,92,159,179,73,62,109,140,147,65,176,19,71,86,59,176,210,156,127,71,136,32,191,226,152,69,12,75],[183,91,32,27,80,154,46,104,237,159,46,232,191,241,125,44,204,174,0,218,172,41,176,200,11,242,66,126,96,156,160,102],[158,192,82,217,253,114,160,74,149,28,172,1,129,136,150,161,185,205,37,165,206,177,247,92,27,129,151,96,184,27,178,72],[248,113,69,105,74,191,231,24,142,135,104,204,136,237,198,135,241,26,1,54,220,225,213,74,61,187,15,98,119,232,104,209],[120,162,120,136,89,191,101,73,96,97,100,122,201,233,131,60,17,112,43,78,127,80,194,182,195,134,72,122,6,233,173,85],[203,30,201,234,202,124,5,84,132,35,239,59,87,145,213,75,207,74,248,108,246,114,20,97,81,39,141,3,109,38,159,215],[61,77,211,142,199,203,0,120,27,224,197,225,141,40,208,81,70,135,211,46,21,247,5,24,235,41,28,1,34,107,240,32],[160,193,89,44,216,137,84,238,53,25,206,194,168,221,19,253,87,84,190,163,242,228,217,164,115,159,97,246,227,127,17,232],[12,17,109,110,158,108,98,28,199,201,230,34,162,3,237,145,132,70,147,199,187,143,153,201,240,173,53,220,163,122,77,93],[206,42,205,206,118,181,50,29,82,156,62,49,46,36,189,189,137,124,215,116,176,219,185,98,219,84,222,101,177,101,26,135],[116,226,179,172,222,68,91,109,170,234,201,232,69,101,120,139,163,172,45,61,50,15,158,160,111,210,198,145,135,146,186,174],[6,129,4,64,206,191,95,167,80,88,248,188,38,209,14,9,80,94,216,112,210,80,110,206,153,145,113,114,186,229,228,234],[117,139,224,200,91,71,57,62,22,127,36,78,203,216,174,34,38,232,49,121,209,141,114,76,112,17,216,152,134,167,51,249],[215,127,201,239,128,106,19,241,37,24,240,36,180,136,12,212,138,6,171,133,76,39,43,128,159,103,234,0,198,195,217,75],[226,182,92,4,18,175,166,22,17,156,9,198,48,13,46,139,120,55,237,250,53,131,172,167,106,114,45,14,223,195,47,99],[50,222,95,200,119,241,108,136,152,129,130,227,101,84,79,145,210,153,47,89,211,179,177,19,37,18,128,145,11,11,16,226],[10,206,232,169,60,241,72,66,217,95,72,156,119,196,38,35,112,139,56,143,154,167,233,115,47,118,137,213,78,152,162,163]]",
                "sol": "[bytes32(stringToBytes32(\"43,96,131,68,101,156,176,172,104,199,125,141,254,35,150,233,157,55,192,57,196,14,195,45,27,47,39,14,54,71,123,84\")),bytes32(stringToBytes32(\"191,40,149,196,235,99,239,213,126,242,145,178,114,192,187,246,171,221,65,202,196,103,11,221,127,241,173,131,112,30,113,223\")),bytes32(stringToBytes32(\"6,88,192,98,157,240,210,153,44,219,197,129,146,16,192,178,201,154,18,19,32,4,200,185,13,150,2,214,205,127,172,114\")),bytes32(stringToBytes32(\"83,186,220,135,106,198,46,68,21,99,93,107,59,252,104,36,232,13,121,91,38,166,213,67,252,39,208,16,234,254,17,110\")),bytes32(stringToBytes32(\"33,8,44,49,10,96,102,52,109,154,188,187,78,68,120,132,147,150,122,69,237,151,197,194,80,135,252,64,42,172,46,187\")),bytes32(stringToBytes32(\"153,88,170,239,204,122,199,40,134,82,41,74,9,26,79,176,14,20,55,70,206,230,37,145,195,179,39,133,251,64,26,171\")),bytes32(stringToBytes32(\"92,107,3,2,63,242,217,182,208,184,153,255,116,7,90,108,70,9,171,235,26,93,169,47,240,227,4,112,16,149,175,54\")),bytes32(stringToBytes32(\"130,2,231,2,222,202,183,244,49,68,243,247,70,20,143,76,14,1,90,137,169,93,180,100,74,136,109,164,176,165,152,201\")),bytes32(stringToBytes32(\"219,97,94,134,100,199,33,189,110,10,113,132,58,238,251,22,57,239,76,121,146,237,128,174,0,38,82,157,203,48,68,43\")),bytes32(stringToBytes32(\"231,109,158,255,22,219,122,40,128,136,104,198,143,221,216,37,170,238,107,100,147,237,102,119,205,154,122,233,39,227,147,132\")),bytes32(stringToBytes32(\"10,136,160,184,71,161,76,31,129,211,28,18,7,77,225,173,235,125,144,53,63,42,74,141,189,60,105,235,15,156,199,63\")),bytes32(stringToBytes32(\"44,151,160,235,241,42,115,183,205,241,122,230,35,117,245,18,52,59,30,66,84,236,14,36,126,15,195,90,112,216,187,252\")),bytes32(stringToBytes32(\"221,40,156,147,38,113,61,220,118,135,50,21,2,105,17,61,241,57,125,219,1,240,101,236,58,238,116,18,17,211,2,21\")),bytes32(stringToBytes32(\"222,177,81,47,217,200,20,254,71,98,39,84,145,186,139,70,100,97,19,227,244,82,90,40,88,95,21,110,211,242,27,17\")),bytes32(stringToBytes32(\"59,75,24,155,105,184,224,178,234,118,158,43,87,190,60,129,13,221,27,171,219,223,154,228,26,248,6,120,34,136,76,107\")),bytes32(stringToBytes32(\"245,109,48,105,229,146,216,44,81,155,226,196,146,2,235,62,255,170,25,22,55,92,181,31,129,151,192,122,244,197,74,48\")),bytes32(stringToBytes32(\"198,155,152,219,41,35,83,83,145,4,153,164,3,124,97,216,139,156,236,59,219,168,10,7,80,59,167,187,243,93,86,173\")),bytes32(stringToBytes32(\"212,235,95,121,19,176,34,55,193,94,140,43,247,175,40,45,155,124,154,203,205,49,195,229,35,106,17,97,52,213,200,217\")),bytes32(stringToBytes32(\"158,115,102,96,157,24,57,136,155,226,124,110,62,186,194,37,230,254,37,214,255,235,231,100,133,113,118,2,228,2,87,21\")),bytes32(stringToBytes32(\"142,93,185,147,121,221,39,138,157,248,180,248,126,67,66,30,194,92,201,78,129,35,118,147,82,213,3,73,183,6,30,123\")),bytes32(stringToBytes32(\"188,162,63,50,60,54,3,86,220,23,72,223,229,45,64,239,231,181,93,232,0,182,238,128,40,23,198,179,73,13,195,201\")),bytes32(stringToBytes32(\"9,144,227,86,69,49,243,212,48,229,51,72,58,205,21,183,226,210,236,45,213,237,90,44,80,128,98,204,150,62,147,33\")),bytes32(stringToBytes32(\"123,189,157,114,42,238,15,226,241,3,62,248,19,178,86,208,247,195,198,209,129,26,12,133,155,202,86,119,190,229,225,27\")),bytes32(stringToBytes32(\"182,199,99,33,62,157,30,137,184,37,244,30,185,107,19,60,211,142,129,115,7,240,92,198,142,1,179,77,18,255,87,22\")),bytes32(stringToBytes32(\"9,42,227,220,3,189,205,28,104,74,204,178,49,91,198,72,48,189,243,230,161,23,133,3,194,196,206,88,78,143,187,42\")),bytes32(stringToBytes32(\"194,114,75,111,164,240,188,191,104,218,249,114,122,17,166,122,35,83,234,210,106,184,57,5,170,221,68,123,135,71,116,249\")),bytes32(stringToBytes32(\"212,212,52,234,73,225,22,85,1,251,63,240,30,249,113,66,105,89,243,104,13,181,152,231,94,140,225,214,134,72,195,177\")),bytes32(stringToBytes32(\"125,206,254,177,8,67,95,63,42,125,59,22,96,186,207,162,163,244,117,156,193,8,61,18,27,128,148,123,187,128,203,114\")),bytes32(stringToBytes32(\"184,139,216,103,211,245,0,55,64,225,28,17,113,93,100,84,96,243,230,192,20,152,163,163,125,127,36,10,43,98,14,153\")),bytes32(stringToBytes32(\"117,76,74,173,66,51,217,171,212,24,183,129,174,210,48,107,139,91,209,218,83,79,42,227,189,82,105,74,153,75,135,192\")),bytes32(stringToBytes32(\"12,224,87,105,78,179,73,113,219,79,147,185,38,205,44,177,208,155,253,115,56,183,44,0,11,19,182,167,131,47,73,158\")),bytes32(stringToBytes32(\"23,176,243,45,82,2,60,102,36,148,150,155,76,173,13,198,47,19,129,5,228,176,10,246,207,171,125,83,10,55,69,35\")),bytes32(stringToBytes32(\"135,204,60,124,162,154,152,249,74,94,141,194,209,54,208,89,237,34,12,235,195,34,80,84,14,185,100,139,1,44,224,87\")),bytes32(stringToBytes32(\"172,191,195,193,253,149,200,134,38,68,87,65,224,63,56,196,204,1,75,20,117,56,98,101,172,79,178,51,142,209,36,88\")),bytes32(stringToBytes32(\"98,226,50,193,18,123,79,32,251,244,187,200,157,251,143,123,33,218,66,21,210,52,102,0,123,73,152,129,100,78,58,60\")),bytes32(stringToBytes32(\"24,248,72,210,3,106,47,133,157,86,151,236,214,190,90,20,133,206,79,248,131,175,138,26,81,149,139,0,103,64,144,45\")),bytes32(stringToBytes32(\"8,37,92,201,47,240,9,55,201,68,234,128,194,193,56,148,166,221,174,160,60,34,214,188,91,210,223,186,223,67,74,37\")),bytes32(stringToBytes32(\"54,109,162,174,255,119,184,171,174,119,183,203,163,203,50,15,223,147,24,220,130,164,144,238,180,235,10,56,208,182,149,96\")),bytes32(stringToBytes32(\"30,86,25,78,214,100,58,233,151,132,155,199,53,122,188,152,210,145,79,246,125,83,211,106,162,15,187,137,21,14,220,49\")),bytes32(stringToBytes32(\"153,103,197,243,153,84,52,14,158,136,220,163,141,136,109,45,135,186,91,40,80,67,121,7,109,187,57,205,118,220,73,23\")),bytes32(stringToBytes32(\"184,143,19,0,14,123,9,42,87,232,107,8,119,77,249,108,185,150,185,32,21,39,136,155,173,141,61,200,208,184,40,108\")),bytes32(stringToBytes32(\"68,38,162,158,200,36,17,217,168,34,185,230,159,71,71,7,237,148,115,201,171,219,225,115,94,5,198,80,118,58,64,56\")),bytes32(stringToBytes32(\"84,168,94,50,38,237,27,38,16,101,184,120,10,49,102,144,76,139,101,103,144,11,20,75,166,2,88,75,34,234,232,245\")),bytes32(stringToBytes32(\"205,28,73,62,182,117,71,31,57,69,61,224,208,126,185,37,13,46,117,68,236,29,8,111,49,221,167,143,190,104,168,79\")),bytes32(stringToBytes32(\"193,97,147,33,158,182,112,81,158,43,161,2,145,167,188,176,61,253,23,253,76,60,32,135,248,110,140,185,110,35,104,2\")),bytes32(stringToBytes32(\"233,130,85,153,223,242,185,206,135,126,237,152,244,137,26,111,225,95,51,121,98,30,226,180,161,189,254,147,160,142,183,31\")),bytes32(stringToBytes32(\"53,126,87,21,7,106,197,209,240,8,28,209,17,49,129,29,27,234,207,65,131,205,215,228,63,118,80,148,48,129,140,46\")),bytes32(stringToBytes32(\"34,247,164,63,166,207,46,112,139,227,77,60,86,52,233,249,188,94,212,149,215,59,145,203,52,55,180,193,34,192,137,10\")),bytes32(stringToBytes32(\"233,251,119,233,116,205,204,81,122,189,65,248,118,82,128,208,81,194,178,61,68,166,221,209,82,171,137,124,222,18,124,47\")),bytes32(stringToBytes32(\"110,179,2,203,50,128,221,176,209,83,69,91,85,96,101,206,211,123,33,89,5,132,252,21,103,77,28,23,60,98,84,62\")),bytes32(stringToBytes32(\"112,112,104,133,94,126,96,33,39,119,215,190,94,147,56,185,1,241,246,139,180,62,223,20,217,53,207,233,91,83,123,222\")),bytes32(stringToBytes32(\"153,80,19,89,47,80,214,136,179,224,212,174,16,126,14,15,217,18,71,196,158,20,171,1,132,109,59,242,193,111,46,242\")),bytes32(stringToBytes32(\"101,117,38,2,172,214,75,183,180,93,101,94,239,239,126,115,206,32,74,221,187,3,46,205,238,144,45,226,254,147,254,209\")),bytes32(stringToBytes32(\"196,204,131,14,223,124,253,158,47,148,2,132,13,217,19,57,241,171,189,229,213,97,216,51,235,77,149,33,33,82,14,74\")),bytes32(stringToBytes32(\"244,43,235,141,146,209,6,2,178,197,6,224,90,71,45,28,0,150,4,185,197,161,2,17,123,210,95,72,4,137,15,134\")),bytes32(stringToBytes32(\"102,205,222,175,138,1,35,50,11,166,161,200,81,18,228,117,22,236,213,83,177,103,222,142,184,156,157,109,17,33,7,87\")),bytes32(stringToBytes32(\"59,194,104,82,253,117,17,71,89,217,244,79,43,221,157,120,68,90,200,5,1,162,229,248,78,241,146,170,220,223,8,243\")),bytes32(stringToBytes32(\"43,156,219,207,247,117,94,18,62,126,197,60,50,69,254,111,254,47,50,126,60,6,146,252,156,229,209,189,177,59,31,237\")),bytes32(stringToBytes32(\"113,164,217,6,179,169,215,235,123,233,221,74,13,146,169,14,15,241,224,156,213,153,151,27,5,192,48,118,73,174,111,106\")),bytes32(stringToBytes32(\"129,163,180,107,204,37,90,27,90,81,134,58,252,167,233,24,150,87,112,19,46,108,107,77,131,90,202,150,191,222,124,246\")),bytes32(stringToBytes32(\"205,138,150,89,213,106,125,125,219,5,153,96,140,191,137,196,129,184,61,215,43,85,44,55,71,193,93,127,21,144,173,237\")),bytes32(stringToBytes32(\"191,220,54,81,111,253,86,148,223,134,211,175,229,228,32,169,64,178,80,117,228,98,22,16,203,144,80,179,22,192,81,30\")),bytes32(stringToBytes32(\"141,35,163,94,88,21,128,147,3,16,140,168,244,201,6,22,131,223,114,101,216,47,24,154,242,208,48,196,20,88,188,115\")),bytes32(stringToBytes32(\"167,212,30,93,231,222,69,186,29,227,251,106,189,158,250,101,83,190,186,8,99,91,77,55,80,128,105,68,123,207,92,209\")),bytes32(stringToBytes32(\"12,97,188,34,88,170,70,14,99,251,196,36,94,106,130,42,224,148,29,178,108,144,107,75,148,35,239,81,62,11,42,59\")),bytes32(stringToBytes32(\"134,242,178,76,43,207,157,22,202,172,255,101,42,111,160,136,49,30,155,186,145,12,132,8,213,156,14,242,30,81,59,130\")),bytes32(stringToBytes32(\"52,0,163,90,45,212,120,44,201,48,62,60,88,96,143,198,74,171,96,111,239,79,175,203,74,11,154,207,44,107,175,181\")),bytes32(stringToBytes32(\"48,106,91,115,156,131,153,228,149,198,106,198,33,4,48,243,177,146,17,191,12,241,144,48,115,39,47,191,239,192,225,149\")),bytes32(stringToBytes32(\"117,10,189,250,74,213,186,219,51,129,77,127,131,108,52,37,231,187,204,39,206,199,180,22,219,72,103,214,14,158,241,94\")),bytes32(stringToBytes32(\"15,54,185,178,222,28,224,77,33,88,229,115,18,134,19,34,161,254,68,171,32,30,66,22,150,71,75,164,65,242,108,75\")),bytes32(stringToBytes32(\"182,130,193,19,196,54,228,58,61,213,174,243,141,221,168,125,30,194,251,103,80,62,6,92,189,21,40,102,172,189,122,115\")),bytes32(stringToBytes32(\"235,220,3,62,85,82,158,118,138,54,121,93,244,45,168,54,227,45,29,178,236,210,96,247,53,10,236,229,176,84,168,210\")),bytes32(stringToBytes32(\"13,222,168,18,245,135,157,89,114,39,217,220,180,42,154,205,158,148,136,105,243,229,154,11,137,227,41,30,8,31,96,155\")),bytes32(stringToBytes32(\"239,74,66,176,199,176,87,138,58,2,86,251,243,193,226,205,202,138,127,14,114,209,169,136,189,102,138,87,178,11,167,97\")),bytes32(stringToBytes32(\"241,206,47,89,196,152,219,51,28,52,245,215,6,9,229,224,112,193,39,152,99,52,17,43,226,127,54,23,154,156,123,105\")),bytes32(stringToBytes32(\"37,27,75,202,58,49,177,46,141,159,158,49,179,147,242,180,175,152,247,60,220,119,18,69,175,69,255,178,215,14,110,20\")),bytes32(stringToBytes32(\"79,229,103,33,139,96,11,33,213,213,246,203,158,29,66,71,76,41,171,240,137,118,71,43,58,153,175,197,113,224,127,200\")),bytes32(stringToBytes32(\"8,169,38,21,189,109,101,242,71,208,185,123,172,198,86,103,234,192,56,150,68,159,200,142,100,236,105,40,59,181,234,4\")),bytes32(stringToBytes32(\"238,84,109,17,101,220,207,199,124,36,32,46,34,60,109,246,2,147,124,214,121,41,99,142,48,88,162,204,203,111,178,205\")),bytes32(stringToBytes32(\"47,255,76,175,32,92,159,179,73,62,109,140,147,65,176,19,71,86,59,176,210,156,127,71,136,32,191,226,152,69,12,75\")),bytes32(stringToBytes32(\"183,91,32,27,80,154,46,104,237,159,46,232,191,241,125,44,204,174,0,218,172,41,176,200,11,242,66,126,96,156,160,102\")),bytes32(stringToBytes32(\"158,192,82,217,253,114,160,74,149,28,172,1,129,136,150,161,185,205,37,165,206,177,247,92,27,129,151,96,184,27,178,72\")),bytes32(stringToBytes32(\"248,113,69,105,74,191,231,24,142,135,104,204,136,237,198,135,241,26,1,54,220,225,213,74,61,187,15,98,119,232,104,209\")),bytes32(stringToBytes32(\"120,162,120,136,89,191,101,73,96,97,100,122,201,233,131,60,17,112,43,78,127,80,194,182,195,134,72,122,6,233,173,85\")),bytes32(stringToBytes32(\"203,30,201,234,202,124,5,84,132,35,239,59,87,145,213,75,207,74,248,108,246,114,20,97,81,39,141,3,109,38,159,215\")),bytes32(stringToBytes32(\"61,77,211,142,199,203,0,120,27,224,197,225,141,40,208,81,70,135,211,46,21,247,5,24,235,41,28,1,34,107,240,32\")),bytes32(stringToBytes32(\"160,193,89,44,216,137,84,238,53,25,206,194,168,221,19,253,87,84,190,163,242,228,217,164,115,159,97,246,227,127,17,232\")),bytes32(stringToBytes32(\"12,17,109,110,158,108,98,28,199,201,230,34,162,3,237,145,132,70,147,199,187,143,153,201,240,173,53,220,163,122,77,93\")),bytes32(stringToBytes32(\"206,42,205,206,118,181,50,29,82,156,62,49,46,36,189,189,137,124,215,116,176,219,185,98,219,84,222,101,177,101,26,135\")),bytes32(stringToBytes32(\"116,226,179,172,222,68,91,109,170,234,201,232,69,101,120,139,163,172,45,61,50,15,158,160,111,210,198,145,135,146,186,174\")),bytes32(stringToBytes32(\"6,129,4,64,206,191,95,167,80,88,248,188,38,209,14,9,80,94,216,112,210,80,110,206,153,145,113,114,186,229,228,234\")),bytes32(stringToBytes32(\"117,139,224,200,91,71,57,62,22,127,36,78,203,216,174,34,38,232,49,121,209,141,114,76,112,17,216,152,134,167,51,249\")),bytes32(stringToBytes32(\"215,127,201,239,128,106,19,241,37,24,240,36,180,136,12,212,138,6,171,133,76,39,43,128,159,103,234,0,198,195,217,75\")),bytes32(stringToBytes32(\"226,182,92,4,18,175,166,22,17,156,9,198,48,13,46,139,120,55,237,250,53,131,172,167,106,114,45,14,223,195,47,99\")),bytes32(stringToBytes32(\"50,222,95,200,119,241,108,136,152,129,130,227,101,84,79,145,210,153,47,89,211,179,177,19,37,18,128,145,11,11,16,226\")),bytes32(stringToBytes32(\"10,206,232,169,60,241,72,66,217,95,72,156,119,196,38,35,112,139,56,143,154,167,233,115,47,118,137,213,78,152,162,163\"))]"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.757ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[75,0,77,97,184,210,144,113,143,95,209,230,122,0,92,15,131,36,239,15,104,29,180,165,120,64,30,195,122,216,93,162]",
              "sol": "stringToBytes32(\"75,0,77,97,184,210,144,113,143,95,209,230,122,0,92,15,131,36,239,15,104,29,180,165,120,64,30,195,122,216,93,162\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[75,0,77,97,184,210,144,113,143,95,209,230,122,0,92,15,131,36,239,15,104,29,180,165,120,64,30,195,122,216,93,162]",
                "sol": "stringToBytes32(\"75,0,77,97,184,210,144,113,143,95,209,230,122,0,92,15,131,36,239,15,104,29,180,165,120,64,30,195,122,216,93,162\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.758ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:23:27.759ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "[103,216,252,87,172,182,135,6,204,90,251,200,87,96,145,136,103,196,30,170,161,153,27,144,51,126,184,221,132,228,212,13]",
              "sol": "stringToBytes32(\"103,216,252,87,172,182,135,6,204,90,251,200,87,96,145,136,103,196,30,170,161,153,27,144,51,126,184,221,132,228,212,13\")"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "[103,216,252,87,172,182,135,6,204,90,251,200,87,96,145,136,103,196,30,170,161,153,27,144,51,126,184,221,132,228,212,13]",
                "sol": "stringToBytes32(\"103,216,252,87,172,182,135,6,204,90,251,200,87,96,145,136,103,196,30,170,161,153,27,144,51,126,184,221,132,228,212,13\")"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[103,216,252,87,172,182,135,6,204,90,251,200,87,96,145,136,103,196,30,170,161,153,27,144,51,126,184,221,132,228,212,13]",
                "sol": "stringToBytes32(\"103,216,252,87,172,182,135,6,204,90,251,200,87,96,145,136,103,196,30,170,161,153,27,144,51,126,184,221,132,228,212,13\")"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "[19,182,177,47,206,30,160,146,134,16,166,181,94,216,102,159,107,184,157,177,236,71,131,201,100,251,188,99,206,95,31,174]",
              "sol": "stringToBytes32(\"19,182,177,47,206,30,160,146,134,16,166,181,94,216,102,159,107,184,157,177,236,71,131,201,100,251,188,99,206,95,31,174\")"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "[19,182,177,47,206,30,160,146,134,16,166,181,94,216,102,159,107,184,157,177,236,71,131,201,100,251,188,99,206,95,31,174]",
                "sol": "stringToBytes32(\"19,182,177,47,206,30,160,146,134,16,166,181,94,216,102,159,107,184,157,177,236,71,131,201,100,251,188,99,206,95,31,174\")"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[19,182,177,47,206,30,160,146,134,16,166,181,94,216,102,159,107,184,157,177,236,71,131,201,100,251,188,99,206,95,31,174]",
                "sol": "stringToBytes32(\"19,182,177,47,206,30,160,146,134,16,166,181,94,216,102,159,107,184,157,177,236,71,131,201,100,251,188,99,206,95,31,174\")"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.763ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:23:27.764ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[71,178,26,148,132,88,85,27,34,37,105,24,71,144,109,196,170,177,134,57,107,152,126,219,100,175,0,60,210,195,233,55],[56,169,117,23,24,119,83,90,11,2,153,144,164,10,48,168,253,225,241,52,12,250,70,231,28,169,60,86,227,10,105,202],[241,238,80,153,223,97,190,253,138,113,151,17,126,134,144,31,99,221,4,143,125,101,74,51,204,100,253,216,113,33,83,254],[176,108,159,109,5,113,133,130,104,61,237,83,44,55,217,179,195,114,12,176,178,21,28,23,52,77,174,183,227,252,5,61],[140,163,164,190,17,140,62,47,151,217,218,208,42,55,28,251,64,70,138,153,209,189,24,203,199,84,113,173,223,186,134,95]]",
              "sol": "[bytes32(stringToBytes32(\"71,178,26,148,132,88,85,27,34,37,105,24,71,144,109,196,170,177,134,57,107,152,126,219,100,175,0,60,210,195,233,55\")),bytes32(stringToBytes32(\"56,169,117,23,24,119,83,90,11,2,153,144,164,10,48,168,253,225,241,52,12,250,70,231,28,169,60,86,227,10,105,202\")),bytes32(stringToBytes32(\"241,238,80,153,223,97,190,253,138,113,151,17,126,134,144,31,99,221,4,143,125,101,74,51,204,100,253,216,113,33,83,254\")),bytes32(stringToBytes32(\"176,108,159,109,5,113,133,130,104,61,237,83,44,55,217,179,195,114,12,176,178,21,28,23,52,77,174,183,227,252,5,61\")),bytes32(stringToBytes32(\"140,163,164,190,17,140,62,47,151,217,218,208,42,55,28,251,64,70,138,153,209,189,24,203,199,84,113,173,223,186,134,95\"))]"
            },
            {
              "js": "[[249,74,222,146,58,182,34,188,197,150,180,80,196,38,178,192,237,24,60,101,183,163,41,98,13,198,205,131,92,167,230,216],[15,255,246,166,209,165,126,246,184,96,68,41,107,174,50,73,108,239,113,19,203,234,133,0,97,169,113,179,141,44,110,43],[214,185,114,208,154,40,184,200,34,190,223,64,225,2,71,155,105,184,76,159,42,145,151,18,30,244,86,165,171,104,104,25],[107,251,147,198,11,166,163,38,154,125,182,114,178,240,62,86,136,129,66,103,207,59,33,119,59,99,222,95,205,172,195,50],[251,35,70,197,29,159,210,18,16,60,167,92,159,163,39,13,101,222,61,151,29,125,179,46,1,40,130,159,200,225,247,58]]",
              "sol": "[bytes32(stringToBytes32(\"249,74,222,146,58,182,34,188,197,150,180,80,196,38,178,192,237,24,60,101,183,163,41,98,13,198,205,131,92,167,230,216\")),bytes32(stringToBytes32(\"15,255,246,166,209,165,126,246,184,96,68,41,107,174,50,73,108,239,113,19,203,234,133,0,97,169,113,179,141,44,110,43\")),bytes32(stringToBytes32(\"214,185,114,208,154,40,184,200,34,190,223,64,225,2,71,155,105,184,76,159,42,145,151,18,30,244,86,165,171,104,104,25\")),bytes32(stringToBytes32(\"107,251,147,198,11,166,163,38,154,125,182,114,178,240,62,86,136,129,66,103,207,59,33,119,59,99,222,95,205,172,195,50\")),bytes32(stringToBytes32(\"251,35,70,197,29,159,210,18,16,60,167,92,159,163,39,13,101,222,61,151,29,125,179,46,1,40,130,159,200,225,247,58\"))]"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[71,178,26,148,132,88,85,27,34,37,105,24,71,144,109,196,170,177,134,57,107,152,126,219,100,175,0,60,210,195,233,55],[56,169,117,23,24,119,83,90,11,2,153,144,164,10,48,168,253,225,241,52,12,250,70,231,28,169,60,86,227,10,105,202],[241,238,80,153,223,97,190,253,138,113,151,17,126,134,144,31,99,221,4,143,125,101,74,51,204,100,253,216,113,33,83,254],[176,108,159,109,5,113,133,130,104,61,237,83,44,55,217,179,195,114,12,176,178,21,28,23,52,77,174,183,227,252,5,61],[140,163,164,190,17,140,62,47,151,217,218,208,42,55,28,251,64,70,138,153,209,189,24,203,199,84,113,173,223,186,134,95]]",
                "sol": "[bytes32(stringToBytes32(\"71,178,26,148,132,88,85,27,34,37,105,24,71,144,109,196,170,177,134,57,107,152,126,219,100,175,0,60,210,195,233,55\")),bytes32(stringToBytes32(\"56,169,117,23,24,119,83,90,11,2,153,144,164,10,48,168,253,225,241,52,12,250,70,231,28,169,60,86,227,10,105,202\")),bytes32(stringToBytes32(\"241,238,80,153,223,97,190,253,138,113,151,17,126,134,144,31,99,221,4,143,125,101,74,51,204,100,253,216,113,33,83,254\")),bytes32(stringToBytes32(\"176,108,159,109,5,113,133,130,104,61,237,83,44,55,217,179,195,114,12,176,178,21,28,23,52,77,174,183,227,252,5,61\")),bytes32(stringToBytes32(\"140,163,164,190,17,140,62,47,151,217,218,208,42,55,28,251,64,70,138,153,209,189,24,203,199,84,113,173,223,186,134,95\"))]"
              },
              {
                "js": "[[249,74,222,146,58,182,34,188,197,150,180,80,196,38,178,192,237,24,60,101,183,163,41,98,13,198,205,131,92,167,230,216],[15,255,246,166,209,165,126,246,184,96,68,41,107,174,50,73,108,239,113,19,203,234,133,0,97,169,113,179,141,44,110,43],[214,185,114,208,154,40,184,200,34,190,223,64,225,2,71,155,105,184,76,159,42,145,151,18,30,244,86,165,171,104,104,25],[107,251,147,198,11,166,163,38,154,125,182,114,178,240,62,86,136,129,66,103,207,59,33,119,59,99,222,95,205,172,195,50],[251,35,70,197,29,159,210,18,16,60,167,92,159,163,39,13,101,222,61,151,29,125,179,46,1,40,130,159,200,225,247,58]]",
                "sol": "[bytes32(stringToBytes32(\"249,74,222,146,58,182,34,188,197,150,180,80,196,38,178,192,237,24,60,101,183,163,41,98,13,198,205,131,92,167,230,216\")),bytes32(stringToBytes32(\"15,255,246,166,209,165,126,246,184,96,68,41,107,174,50,73,108,239,113,19,203,234,133,0,97,169,113,179,141,44,110,43\")),bytes32(stringToBytes32(\"214,185,114,208,154,40,184,200,34,190,223,64,225,2,71,155,105,184,76,159,42,145,151,18,30,244,86,165,171,104,104,25\")),bytes32(stringToBytes32(\"107,251,147,198,11,166,163,38,154,125,182,114,178,240,62,86,136,129,66,103,207,59,33,119,59,99,222,95,205,172,195,50\")),bytes32(stringToBytes32(\"251,35,70,197,29,159,210,18,16,60,167,92,159,163,39,13,101,222,61,151,29,125,179,46,1,40,130,159,200,225,247,58\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[144,143,141,77,166,246,209,146,47,209,34,166,37,109,252,70,102,152,0,114,134,221,120,242,8,119,120,63,213,213,238,97],[160,237,241,240,109,76,75,102,39,138,54,135,18,7,99,80,2,197,44,73,5,36,44,59,236,137,196,162,215,188,118,209],[193,243,189,252,24,193,232,237,41,238,21,149,99,219,168,60,106,41,239,198,193,217,144,46,124,31,181,162,144,201,181,65],[105,209,161,93,154,242,148,116,235,166,243,126,237,254,126,86,9,96,100,124,120,130,144,116,249,249,33,59,41,239,72,229],[85,177,242,137,166,166,143,238,137,243,208,57,94,201,29,166,41,197,189,98,38,218,186,161,28,194,49,29,212,208,148,173],[208,144,110,223,227,99,30,254,164,8,67,131,214,238,157,252,111,20,94,152,136,169,0,163,28,75,59,67,152,84,225,217]]",
                "sol": "[stringToBytes32(\"41,171,68,181,109,9,226,191,79,101,75,71,50,97,221,245,71,101,197,222,229,52,56,122,245,62,76,170,215,71,167,116\"),stringToBytes32(\"8,240,225,173,192,28,254,129,1,91,196,17,254,24,94,191,101,220,35,192,48,137,40,50,30,92,5,177,114,174,6,78\"),stringToBytes32(\"129,123,250,214,124,126,9,219,77,15,84,63,179,10,105,239,1,208,113,182,162,5,208,209,251,198,179,45,55,8,100,200\"),stringToBytes32(\"36,14,212,50,55,46,134,1,172,165,184,233,214,168,52,160,94,187,52,168,150,214,238,88,161,8,135,83,196,137,55,63\"),stringToBytes32(\"194,77,143,246,21,144,207,140,163,63,118,187,56,214,112,92,67,171,80,101,181,121,194,211,43,98,108,11,160,103,85,241\"),stringToBytes32(\"24,26,235,123,241,202,84,205,218,254,251,108,50,174,3,110,186,216,109,221,25,164,254,133,0,240,167,205,94,104,71,46\")]"
              },
              {
                "js": "[[249,74,222,146,58,182,34,188,197,150,180,80,196,38,178,192,237,24,60,101,183,163,41,98,13,198,205,131,92,167,230,216],[15,255,246,166,209,165,126,246,184,96,68,41,107,174,50,73,108,239,113,19,203,234,133,0,97,169,113,179,141,44,110,43],[214,185,114,208,154,40,184,200,34,190,223,64,225,2,71,155,105,184,76,159,42,145,151,18,30,244,86,165,171,104,104,25],[107,251,147,198,11,166,163,38,154,125,182,114,178,240,62,86,136,129,66,103,207,59,33,119,59,99,222,95,205,172,195,50],[251,35,70,197,29,159,210,18,16,60,167,92,159,163,39,13,101,222,61,151,29,125,179,46,1,40,130,159,200,225,247,58]]",
                "sol": "[bytes32(stringToBytes32(\"249,74,222,146,58,182,34,188,197,150,180,80,196,38,178,192,237,24,60,101,183,163,41,98,13,198,205,131,92,167,230,216\")),bytes32(stringToBytes32(\"15,255,246,166,209,165,126,246,184,96,68,41,107,174,50,73,108,239,113,19,203,234,133,0,97,169,113,179,141,44,110,43\")),bytes32(stringToBytes32(\"214,185,114,208,154,40,184,200,34,190,223,64,225,2,71,155,105,184,76,159,42,145,151,18,30,244,86,165,171,104,104,25\")),bytes32(stringToBytes32(\"107,251,147,198,11,166,163,38,154,125,182,114,178,240,62,86,136,129,66,103,207,59,33,119,59,99,222,95,205,172,195,50\")),bytes32(stringToBytes32(\"251,35,70,197,29,159,210,18,16,60,167,92,159,163,39,13,101,222,61,151,29,125,179,46,1,40,130,159,200,225,247,58\"))]"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[249,74,222,146,58,182,34,188,197,150,180,80,196,38,178,192,237,24,60,101,183,163,41,98,13,198,205,131,92,167,230,216],[15,255,246,166,209,165,126,246,184,96,68,41,107,174,50,73,108,239,113,19,203,234,133,0,97,169,113,179,141,44,110,43],[214,185,114,208,154,40,184,200,34,190,223,64,225,2,71,155,105,184,76,159,42,145,151,18,30,244,86,165,171,104,104,25],[107,251,147,198,11,166,163,38,154,125,182,114,178,240,62,86,136,129,66,103,207,59,33,119,59,99,222,95,205,172,195,50],[251,35,70,197,29,159,210,18,16,60,167,92,159,163,39,13,101,222,61,151,29,125,179,46,1,40,130,159,200,225,247,58]]",
                "sol": "[bytes32(stringToBytes32(\"249,74,222,146,58,182,34,188,197,150,180,80,196,38,178,192,237,24,60,101,183,163,41,98,13,198,205,131,92,167,230,216\")),bytes32(stringToBytes32(\"15,255,246,166,209,165,126,246,184,96,68,41,107,174,50,73,108,239,113,19,203,234,133,0,97,169,113,179,141,44,110,43\")),bytes32(stringToBytes32(\"214,185,114,208,154,40,184,200,34,190,223,64,225,2,71,155,105,184,76,159,42,145,151,18,30,244,86,165,171,104,104,25\")),bytes32(stringToBytes32(\"107,251,147,198,11,166,163,38,154,125,182,114,178,240,62,86,136,129,66,103,207,59,33,119,59,99,222,95,205,172,195,50\")),bytes32(stringToBytes32(\"251,35,70,197,29,159,210,18,16,60,167,92,159,163,39,13,101,222,61,151,29,125,179,46,1,40,130,159,200,225,247,58\"))]"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.771ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"UsesExample\"",
                "sol": "\"UsesExample\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.775ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[0],accounts[3],accounts[7]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[2014223716,95,28]",
              "sol": "[uint256(2014223716),uint256(95),uint256(28)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[0],accounts[3],accounts[7]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[2014223716,95,28]",
                "sol": "[uint256(2014223716),uint256(95),uint256(28)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[0],accounts[6],accounts[2],accounts[8]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[2014223716,95,28]",
                "sol": "[uint256(2014223716),uint256(95),uint256(28)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[2014223716,95,28]",
                "sol": "[uint256(2014223716),uint256(95),uint256(28)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.777ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:23:27.778ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[3],accounts[6],accounts[6],accounts[0]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[3],accounts[6],accounts[6],accounts[0]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[3],accounts[6],accounts[6],accounts[0]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.781ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:23:27.781ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+297",
              "sol": "block.timestamp+297"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+297",
                "sol": "block.timestamp+297"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.788ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.794ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.800ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.805ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.808ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.812ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:23:27.812ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:23:27.813ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[7],accounts[5],accounts[0],accounts[6],accounts[9],accounts[1],accounts[3],accounts[7],accounts[5],accounts[4],accounts[2],accounts[5],accounts[8],accounts[6],accounts[7],accounts[1],accounts[4],accounts[5],accounts[2],accounts[6],accounts[3],accounts[6],accounts[6],accounts[5],accounts[2],accounts[6],accounts[5],accounts[1]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[7],accounts[5],accounts[0],accounts[6],accounts[9],accounts[1],accounts[3],accounts[7],accounts[5],accounts[4],accounts[2],accounts[5],accounts[8],accounts[6],accounts[7],accounts[1],accounts[4],accounts[5],accounts[2],accounts[6],accounts[3],accounts[6],accounts[6],accounts[5],accounts[2],accounts[6],accounts[5],accounts[1]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[7],accounts[5],accounts[0],accounts[6],accounts[9],accounts[1],accounts[3],accounts[7],accounts[5],accounts[4],accounts[2],accounts[5],accounts[8],accounts[6],accounts[7],accounts[1],accounts[4],accounts[5],accounts[2],accounts[6],accounts[3],accounts[6],accounts[6],accounts[5],accounts[2],accounts[6],accounts[5],accounts[1]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.814ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:23:27.815ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:23:27.816ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}