,{
  "2020-11-12T20:11:22.680ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:11:29.001ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:11:35.389ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:11:41.723ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:11:48.114ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:11:54.586ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:02.784ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:10.973ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:19.099ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:25.867ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:32.488ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+648",
              "sol": "block.timestamp+648"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+648",
                "sol": "block.timestamp+648"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+648",
                "sol": "block.timestamp+648"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+648",
                "sol": "block.timestamp+648"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.213ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.215ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.218ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.223ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[8],accounts[6],accounts[2],accounts[6],accounts[9],accounts[9],accounts[3],accounts[3],accounts[4],accounts[0],accounts[1],accounts[7],accounts[8],accounts[7],accounts[3],accounts[9],accounts[2],accounts[0],accounts[8],accounts[7],accounts[4],accounts[1],accounts[4],accounts[1],accounts[6],accounts[7],accounts[1]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[6,29,27,2014223716,27,255,66,3,2014223716,64,1532892063,257,97,9999,5,4,1336,9999,10000,1532892062,1532892062,255,27,96,5,3,29]",
              "sol": "[uint256(6),uint256(29),uint256(27),uint256(2014223716),uint256(27),uint256(255),uint256(66),uint256(3),uint256(2014223716),uint256(64),uint256(1532892063),uint256(257),uint256(97),uint256(9999),uint256(5),uint256(4),uint256(1336),uint256(9999),uint256(10000),uint256(1532892062),uint256(1532892062),uint256(255),uint256(27),uint256(96),uint256(5),uint256(3),uint256(29)]"
            },
            {
              "js": "[1532892062,1,66,4,2014223714,28,0,10001,65,0,2014223715,1532892063,10001,64,64,255,64,6,66,1338,257,256,10001,64,256,27,95]",
              "sol": "[uint256(1532892062),uint256(1),uint256(66),uint256(4),uint256(2014223714),uint256(28),uint256(0),uint256(10001),uint256(65),uint256(0),uint256(2014223715),uint256(1532892063),uint256(10001),uint256(64),uint256(64),uint256(255),uint256(64),uint256(6),uint256(66),uint256(1338),uint256(257),uint256(256),uint256(10001),uint256(64),uint256(256),uint256(27),uint256(95)]"
            },
            {
              "js": "[[255,254,20,106,100,203,209,34,16,167,121,1,169,63,154,21,97,252,52,212,108,159,76,40,6,12,228,226,92,184,40,173],[78,249,19,56,44,208,27,82,136,45,63,102,129,99,154,33,171,19,106,14,96,31,170,135,190,236,198,53,69,135,127,52],[165,78,214,117,44,112,202,39,129,254,90,185,80,245,30,110,88,1,79,49,232,64,181,70,95,157,75,76,0,133,192,69],[116,111,224,168,126,170,123,183,6,158,14,238,209,156,26,71,134,217,230,204,44,162,178,92,203,0,81,144,44,213,109,91],[143,82,197,67,183,181,208,160,234,132,222,31,148,231,78,196,212,233,210,139,15,24,188,211,250,5,218,77,175,198,167,180],[52,104,210,66,83,0,255,114,205,159,165,161,228,8,210,19,223,42,77,132,27,188,234,129,106,135,228,59,189,212,194,31],[210,244,121,226,82,54,78,99,163,106,109,114,206,242,202,219,138,72,216,189,253,72,251,211,246,245,109,199,154,253,48,22],[191,82,229,72,150,30,82,215,124,31,6,254,45,98,253,10,230,15,170,138,43,164,198,132,103,120,227,106,67,47,107,206],[217,19,80,124,30,241,89,203,47,97,123,158,32,174,221,215,152,128,48,36,40,249,79,181,213,231,127,94,78,31,240,104],[152,170,40,161,225,134,69,112,26,79,208,223,34,106,12,140,110,155,89,116,199,165,74,101,240,84,84,13,120,81,120,26],[66,81,24,152,50,242,146,196,108,240,140,99,194,51,234,144,235,190,195,76,173,88,203,17,21,157,35,244,110,59,75,230],[167,100,108,137,221,193,14,197,111,0,10,27,90,133,73,237,19,199,39,20,145,214,37,81,156,168,74,22,36,161,219,149],[208,82,62,63,245,43,207,162,167,220,36,216,96,68,255,154,17,40,245,113,32,24,135,251,180,226,162,171,52,57,240,235],[134,84,242,53,37,202,131,41,244,34,191,212,153,92,234,186,21,52,248,65,126,28,31,139,244,51,218,26,38,149,52,243],[255,196,25,175,98,155,54,2,38,106,84,225,60,43,54,102,2,129,11,56,178,64,250,33,10,78,199,48,231,100,61,135],[120,206,227,117,160,215,211,189,142,173,136,101,120,58,107,60,115,170,7,115,121,91,181,199,52,25,194,226,29,17,157,225],[239,71,198,21,238,20,233,223,30,147,37,33,77,10,57,101,208,216,177,101,81,117,211,119,7,184,151,92,124,140,164,215],[185,122,136,227,47,228,94,104,85,218,52,99,26,58,67,23,195,30,87,69,112,60,67,56,4,194,37,128,143,177,162,5],[142,249,37,142,168,98,232,251,153,29,2,122,99,173,46,74,172,228,9,235,122,160,190,94,63,213,215,232,63,76,179,98],[230,95,209,12,84,42,190,21,117,122,241,170,54,214,42,191,231,94,15,220,176,12,233,240,212,152,91,131,188,249,9,212],[134,3,166,151,43,143,67,178,23,104,237,232,211,122,180,128,61,57,115,177,74,77,154,177,154,109,60,76,35,142,76,156],[219,65,148,246,252,130,217,48,103,114,49,196,119,102,12,156,68,97,132,242,201,228,113,184,52,12,75,61,184,200,84,183],[19,0,242,170,130,169,75,138,67,11,157,22,33,104,107,8,172,233,223,84,222,226,32,184,106,152,41,53,131,235,85,138],[120,255,183,152,63,249,189,17,75,168,226,212,91,198,164,56,92,152,232,34,112,132,254,167,188,4,68,65,212,227,25,160],[25,6,96,128,146,171,53,64,163,201,59,246,150,238,227,225,35,53,140,24,48,153,129,186,42,139,83,65,119,63,7,216],[62,195,173,148,141,43,235,38,2,221,238,180,35,96,196,36,183,80,93,212,130,27,114,217,139,172,78,74,183,249,17,210],[167,81,169,242,101,230,67,65,170,228,222,103,133,2,207,232,245,212,44,142,86,76,112,124,156,26,80,139,26,215,135,22]]",
              "sol": "[bytes32(stringToBytes32(\"255,254,20,106,100,203,209,34,16,167,121,1,169,63,154,21,97,252,52,212,108,159,76,40,6,12,228,226,92,184,40,173\")),bytes32(stringToBytes32(\"78,249,19,56,44,208,27,82,136,45,63,102,129,99,154,33,171,19,106,14,96,31,170,135,190,236,198,53,69,135,127,52\")),bytes32(stringToBytes32(\"165,78,214,117,44,112,202,39,129,254,90,185,80,245,30,110,88,1,79,49,232,64,181,70,95,157,75,76,0,133,192,69\")),bytes32(stringToBytes32(\"116,111,224,168,126,170,123,183,6,158,14,238,209,156,26,71,134,217,230,204,44,162,178,92,203,0,81,144,44,213,109,91\")),bytes32(stringToBytes32(\"143,82,197,67,183,181,208,160,234,132,222,31,148,231,78,196,212,233,210,139,15,24,188,211,250,5,218,77,175,198,167,180\")),bytes32(stringToBytes32(\"52,104,210,66,83,0,255,114,205,159,165,161,228,8,210,19,223,42,77,132,27,188,234,129,106,135,228,59,189,212,194,31\")),bytes32(stringToBytes32(\"210,244,121,226,82,54,78,99,163,106,109,114,206,242,202,219,138,72,216,189,253,72,251,211,246,245,109,199,154,253,48,22\")),bytes32(stringToBytes32(\"191,82,229,72,150,30,82,215,124,31,6,254,45,98,253,10,230,15,170,138,43,164,198,132,103,120,227,106,67,47,107,206\")),bytes32(stringToBytes32(\"217,19,80,124,30,241,89,203,47,97,123,158,32,174,221,215,152,128,48,36,40,249,79,181,213,231,127,94,78,31,240,104\")),bytes32(stringToBytes32(\"152,170,40,161,225,134,69,112,26,79,208,223,34,106,12,140,110,155,89,116,199,165,74,101,240,84,84,13,120,81,120,26\")),bytes32(stringToBytes32(\"66,81,24,152,50,242,146,196,108,240,140,99,194,51,234,144,235,190,195,76,173,88,203,17,21,157,35,244,110,59,75,230\")),bytes32(stringToBytes32(\"167,100,108,137,221,193,14,197,111,0,10,27,90,133,73,237,19,199,39,20,145,214,37,81,156,168,74,22,36,161,219,149\")),bytes32(stringToBytes32(\"208,82,62,63,245,43,207,162,167,220,36,216,96,68,255,154,17,40,245,113,32,24,135,251,180,226,162,171,52,57,240,235\")),bytes32(stringToBytes32(\"134,84,242,53,37,202,131,41,244,34,191,212,153,92,234,186,21,52,248,65,126,28,31,139,244,51,218,26,38,149,52,243\")),bytes32(stringToBytes32(\"255,196,25,175,98,155,54,2,38,106,84,225,60,43,54,102,2,129,11,56,178,64,250,33,10,78,199,48,231,100,61,135\")),bytes32(stringToBytes32(\"120,206,227,117,160,215,211,189,142,173,136,101,120,58,107,60,115,170,7,115,121,91,181,199,52,25,194,226,29,17,157,225\")),bytes32(stringToBytes32(\"239,71,198,21,238,20,233,223,30,147,37,33,77,10,57,101,208,216,177,101,81,117,211,119,7,184,151,92,124,140,164,215\")),bytes32(stringToBytes32(\"185,122,136,227,47,228,94,104,85,218,52,99,26,58,67,23,195,30,87,69,112,60,67,56,4,194,37,128,143,177,162,5\")),bytes32(stringToBytes32(\"142,249,37,142,168,98,232,251,153,29,2,122,99,173,46,74,172,228,9,235,122,160,190,94,63,213,215,232,63,76,179,98\")),bytes32(stringToBytes32(\"230,95,209,12,84,42,190,21,117,122,241,170,54,214,42,191,231,94,15,220,176,12,233,240,212,152,91,131,188,249,9,212\")),bytes32(stringToBytes32(\"134,3,166,151,43,143,67,178,23,104,237,232,211,122,180,128,61,57,115,177,74,77,154,177,154,109,60,76,35,142,76,156\")),bytes32(stringToBytes32(\"219,65,148,246,252,130,217,48,103,114,49,196,119,102,12,156,68,97,132,242,201,228,113,184,52,12,75,61,184,200,84,183\")),bytes32(stringToBytes32(\"19,0,242,170,130,169,75,138,67,11,157,22,33,104,107,8,172,233,223,84,222,226,32,184,106,152,41,53,131,235,85,138\")),bytes32(stringToBytes32(\"120,255,183,152,63,249,189,17,75,168,226,212,91,198,164,56,92,152,232,34,112,132,254,167,188,4,68,65,212,227,25,160\")),bytes32(stringToBytes32(\"25,6,96,128,146,171,53,64,163,201,59,246,150,238,227,225,35,53,140,24,48,153,129,186,42,139,83,65,119,63,7,216\")),bytes32(stringToBytes32(\"62,195,173,148,141,43,235,38,2,221,238,180,35,96,196,36,183,80,93,212,130,27,114,217,139,172,78,74,183,249,17,210\")),bytes32(stringToBytes32(\"167,81,169,242,101,230,67,65,170,228,222,103,133,2,207,232,245,212,44,142,86,76,112,124,156,26,80,139,26,215,135,22\"))]"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[8],accounts[6],accounts[2],accounts[6],accounts[9],accounts[9],accounts[3],accounts[3],accounts[4],accounts[0],accounts[1],accounts[7],accounts[8],accounts[7],accounts[3],accounts[9],accounts[2],accounts[0],accounts[8],accounts[7],accounts[4],accounts[1],accounts[4],accounts[1],accounts[6],accounts[7],accounts[1]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[6,29,27,2014223716,27,255,66,3,2014223716,64,1532892063,257,97,9999,5,4,1336,9999,10000,1532892062,1532892062,255,27,96,5,3,29]",
                "sol": "[uint256(6),uint256(29),uint256(27),uint256(2014223716),uint256(27),uint256(255),uint256(66),uint256(3),uint256(2014223716),uint256(64),uint256(1532892063),uint256(257),uint256(97),uint256(9999),uint256(5),uint256(4),uint256(1336),uint256(9999),uint256(10000),uint256(1532892062),uint256(1532892062),uint256(255),uint256(27),uint256(96),uint256(5),uint256(3),uint256(29)]"
              },
              {
                "js": "[1532892062,1,66,4,2014223714,28,0,10001,65,0,2014223715,1532892063,10001,64,64,255,64,6,66,1338,257,256,10001,64,256,27,95]",
                "sol": "[uint256(1532892062),uint256(1),uint256(66),uint256(4),uint256(2014223714),uint256(28),uint256(0),uint256(10001),uint256(65),uint256(0),uint256(2014223715),uint256(1532892063),uint256(10001),uint256(64),uint256(64),uint256(255),uint256(64),uint256(6),uint256(66),uint256(1338),uint256(257),uint256(256),uint256(10001),uint256(64),uint256(256),uint256(27),uint256(95)]"
              },
              {
                "js": "[[255,254,20,106,100,203,209,34,16,167,121,1,169,63,154,21,97,252,52,212,108,159,76,40,6,12,228,226,92,184,40,173],[78,249,19,56,44,208,27,82,136,45,63,102,129,99,154,33,171,19,106,14,96,31,170,135,190,236,198,53,69,135,127,52],[165,78,214,117,44,112,202,39,129,254,90,185,80,245,30,110,88,1,79,49,232,64,181,70,95,157,75,76,0,133,192,69],[116,111,224,168,126,170,123,183,6,158,14,238,209,156,26,71,134,217,230,204,44,162,178,92,203,0,81,144,44,213,109,91],[143,82,197,67,183,181,208,160,234,132,222,31,148,231,78,196,212,233,210,139,15,24,188,211,250,5,218,77,175,198,167,180],[52,104,210,66,83,0,255,114,205,159,165,161,228,8,210,19,223,42,77,132,27,188,234,129,106,135,228,59,189,212,194,31],[210,244,121,226,82,54,78,99,163,106,109,114,206,242,202,219,138,72,216,189,253,72,251,211,246,245,109,199,154,253,48,22],[191,82,229,72,150,30,82,215,124,31,6,254,45,98,253,10,230,15,170,138,43,164,198,132,103,120,227,106,67,47,107,206],[217,19,80,124,30,241,89,203,47,97,123,158,32,174,221,215,152,128,48,36,40,249,79,181,213,231,127,94,78,31,240,104],[152,170,40,161,225,134,69,112,26,79,208,223,34,106,12,140,110,155,89,116,199,165,74,101,240,84,84,13,120,81,120,26],[66,81,24,152,50,242,146,196,108,240,140,99,194,51,234,144,235,190,195,76,173,88,203,17,21,157,35,244,110,59,75,230],[167,100,108,137,221,193,14,197,111,0,10,27,90,133,73,237,19,199,39,20,145,214,37,81,156,168,74,22,36,161,219,149],[208,82,62,63,245,43,207,162,167,220,36,216,96,68,255,154,17,40,245,113,32,24,135,251,180,226,162,171,52,57,240,235],[134,84,242,53,37,202,131,41,244,34,191,212,153,92,234,186,21,52,248,65,126,28,31,139,244,51,218,26,38,149,52,243],[255,196,25,175,98,155,54,2,38,106,84,225,60,43,54,102,2,129,11,56,178,64,250,33,10,78,199,48,231,100,61,135],[120,206,227,117,160,215,211,189,142,173,136,101,120,58,107,60,115,170,7,115,121,91,181,199,52,25,194,226,29,17,157,225],[239,71,198,21,238,20,233,223,30,147,37,33,77,10,57,101,208,216,177,101,81,117,211,119,7,184,151,92,124,140,164,215],[185,122,136,227,47,228,94,104,85,218,52,99,26,58,67,23,195,30,87,69,112,60,67,56,4,194,37,128,143,177,162,5],[142,249,37,142,168,98,232,251,153,29,2,122,99,173,46,74,172,228,9,235,122,160,190,94,63,213,215,232,63,76,179,98],[230,95,209,12,84,42,190,21,117,122,241,170,54,214,42,191,231,94,15,220,176,12,233,240,212,152,91,131,188,249,9,212],[134,3,166,151,43,143,67,178,23,104,237,232,211,122,180,128,61,57,115,177,74,77,154,177,154,109,60,76,35,142,76,156],[219,65,148,246,252,130,217,48,103,114,49,196,119,102,12,156,68,97,132,242,201,228,113,184,52,12,75,61,184,200,84,183],[19,0,242,170,130,169,75,138,67,11,157,22,33,104,107,8,172,233,223,84,222,226,32,184,106,152,41,53,131,235,85,138],[120,255,183,152,63,249,189,17,75,168,226,212,91,198,164,56,92,152,232,34,112,132,254,167,188,4,68,65,212,227,25,160],[25,6,96,128,146,171,53,64,163,201,59,246,150,238,227,225,35,53,140,24,48,153,129,186,42,139,83,65,119,63,7,216],[62,195,173,148,141,43,235,38,2,221,238,180,35,96,196,36,183,80,93,212,130,27,114,217,139,172,78,74,183,249,17,210],[167,81,169,242,101,230,67,65,170,228,222,103,133,2,207,232,245,212,44,142,86,76,112,124,156,26,80,139,26,215,135,22]]",
                "sol": "[bytes32(stringToBytes32(\"255,254,20,106,100,203,209,34,16,167,121,1,169,63,154,21,97,252,52,212,108,159,76,40,6,12,228,226,92,184,40,173\")),bytes32(stringToBytes32(\"78,249,19,56,44,208,27,82,136,45,63,102,129,99,154,33,171,19,106,14,96,31,170,135,190,236,198,53,69,135,127,52\")),bytes32(stringToBytes32(\"165,78,214,117,44,112,202,39,129,254,90,185,80,245,30,110,88,1,79,49,232,64,181,70,95,157,75,76,0,133,192,69\")),bytes32(stringToBytes32(\"116,111,224,168,126,170,123,183,6,158,14,238,209,156,26,71,134,217,230,204,44,162,178,92,203,0,81,144,44,213,109,91\")),bytes32(stringToBytes32(\"143,82,197,67,183,181,208,160,234,132,222,31,148,231,78,196,212,233,210,139,15,24,188,211,250,5,218,77,175,198,167,180\")),bytes32(stringToBytes32(\"52,104,210,66,83,0,255,114,205,159,165,161,228,8,210,19,223,42,77,132,27,188,234,129,106,135,228,59,189,212,194,31\")),bytes32(stringToBytes32(\"210,244,121,226,82,54,78,99,163,106,109,114,206,242,202,219,138,72,216,189,253,72,251,211,246,245,109,199,154,253,48,22\")),bytes32(stringToBytes32(\"191,82,229,72,150,30,82,215,124,31,6,254,45,98,253,10,230,15,170,138,43,164,198,132,103,120,227,106,67,47,107,206\")),bytes32(stringToBytes32(\"217,19,80,124,30,241,89,203,47,97,123,158,32,174,221,215,152,128,48,36,40,249,79,181,213,231,127,94,78,31,240,104\")),bytes32(stringToBytes32(\"152,170,40,161,225,134,69,112,26,79,208,223,34,106,12,140,110,155,89,116,199,165,74,101,240,84,84,13,120,81,120,26\")),bytes32(stringToBytes32(\"66,81,24,152,50,242,146,196,108,240,140,99,194,51,234,144,235,190,195,76,173,88,203,17,21,157,35,244,110,59,75,230\")),bytes32(stringToBytes32(\"167,100,108,137,221,193,14,197,111,0,10,27,90,133,73,237,19,199,39,20,145,214,37,81,156,168,74,22,36,161,219,149\")),bytes32(stringToBytes32(\"208,82,62,63,245,43,207,162,167,220,36,216,96,68,255,154,17,40,245,113,32,24,135,251,180,226,162,171,52,57,240,235\")),bytes32(stringToBytes32(\"134,84,242,53,37,202,131,41,244,34,191,212,153,92,234,186,21,52,248,65,126,28,31,139,244,51,218,26,38,149,52,243\")),bytes32(stringToBytes32(\"255,196,25,175,98,155,54,2,38,106,84,225,60,43,54,102,2,129,11,56,178,64,250,33,10,78,199,48,231,100,61,135\")),bytes32(stringToBytes32(\"120,206,227,117,160,215,211,189,142,173,136,101,120,58,107,60,115,170,7,115,121,91,181,199,52,25,194,226,29,17,157,225\")),bytes32(stringToBytes32(\"239,71,198,21,238,20,233,223,30,147,37,33,77,10,57,101,208,216,177,101,81,117,211,119,7,184,151,92,124,140,164,215\")),bytes32(stringToBytes32(\"185,122,136,227,47,228,94,104,85,218,52,99,26,58,67,23,195,30,87,69,112,60,67,56,4,194,37,128,143,177,162,5\")),bytes32(stringToBytes32(\"142,249,37,142,168,98,232,251,153,29,2,122,99,173,46,74,172,228,9,235,122,160,190,94,63,213,215,232,63,76,179,98\")),bytes32(stringToBytes32(\"230,95,209,12,84,42,190,21,117,122,241,170,54,214,42,191,231,94,15,220,176,12,233,240,212,152,91,131,188,249,9,212\")),bytes32(stringToBytes32(\"134,3,166,151,43,143,67,178,23,104,237,232,211,122,180,128,61,57,115,177,74,77,154,177,154,109,60,76,35,142,76,156\")),bytes32(stringToBytes32(\"219,65,148,246,252,130,217,48,103,114,49,196,119,102,12,156,68,97,132,242,201,228,113,184,52,12,75,61,184,200,84,183\")),bytes32(stringToBytes32(\"19,0,242,170,130,169,75,138,67,11,157,22,33,104,107,8,172,233,223,84,222,226,32,184,106,152,41,53,131,235,85,138\")),bytes32(stringToBytes32(\"120,255,183,152,63,249,189,17,75,168,226,212,91,198,164,56,92,152,232,34,112,132,254,167,188,4,68,65,212,227,25,160\")),bytes32(stringToBytes32(\"25,6,96,128,146,171,53,64,163,201,59,246,150,238,227,225,35,53,140,24,48,153,129,186,42,139,83,65,119,63,7,216\")),bytes32(stringToBytes32(\"62,195,173,148,141,43,235,38,2,221,238,180,35,96,196,36,183,80,93,212,130,27,114,217,139,172,78,74,183,249,17,210\")),bytes32(stringToBytes32(\"167,81,169,242,101,230,67,65,170,228,222,103,133,2,207,232,245,212,44,142,86,76,112,124,156,26,80,139,26,215,135,22\"))]"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[6,29,27,2014223716,27,255,66,3,2014223716,64,1532892063,257,97,9999,5,4,1336,9999,10000,1532892062,1532892062,255,27,96,5,3,29]",
                "sol": "[uint256(6),uint256(29),uint256(27),uint256(2014223716),uint256(27),uint256(255),uint256(66),uint256(3),uint256(2014223716),uint256(64),uint256(1532892063),uint256(257),uint256(97),uint256(9999),uint256(5),uint256(4),uint256(1336),uint256(9999),uint256(10000),uint256(1532892062),uint256(1532892062),uint256(255),uint256(27),uint256(96),uint256(5),uint256(3),uint256(29)]"
              },
              {
                "js": "[1532892062,1,66,4,2014223714,28,0,10001,65,0,2014223715,1532892063,10001,64,64,255,64,6,66,1338,257,256,10001,64,256,27,95]",
                "sol": "[uint256(1532892062),uint256(1),uint256(66),uint256(4),uint256(2014223714),uint256(28),uint256(0),uint256(10001),uint256(65),uint256(0),uint256(2014223715),uint256(1532892063),uint256(10001),uint256(64),uint256(64),uint256(255),uint256(64),uint256(6),uint256(66),uint256(1338),uint256(257),uint256(256),uint256(10001),uint256(64),uint256(256),uint256(27),uint256(95)]"
              },
              {
                "js": "[[255,254,20,106,100,203,209,34,16,167,121,1,169,63,154,21,97,252,52,212,108,159,76,40,6,12,228,226,92,184,40,173],[78,249,19,56,44,208,27,82,136,45,63,102,129,99,154,33,171,19,106,14,96,31,170,135,190,236,198,53,69,135,127,52],[165,78,214,117,44,112,202,39,129,254,90,185,80,245,30,110,88,1,79,49,232,64,181,70,95,157,75,76,0,133,192,69],[116,111,224,168,126,170,123,183,6,158,14,238,209,156,26,71,134,217,230,204,44,162,178,92,203,0,81,144,44,213,109,91],[143,82,197,67,183,181,208,160,234,132,222,31,148,231,78,196,212,233,210,139,15,24,188,211,250,5,218,77,175,198,167,180],[52,104,210,66,83,0,255,114,205,159,165,161,228,8,210,19,223,42,77,132,27,188,234,129,106,135,228,59,189,212,194,31],[210,244,121,226,82,54,78,99,163,106,109,114,206,242,202,219,138,72,216,189,253,72,251,211,246,245,109,199,154,253,48,22],[191,82,229,72,150,30,82,215,124,31,6,254,45,98,253,10,230,15,170,138,43,164,198,132,103,120,227,106,67,47,107,206],[217,19,80,124,30,241,89,203,47,97,123,158,32,174,221,215,152,128,48,36,40,249,79,181,213,231,127,94,78,31,240,104],[152,170,40,161,225,134,69,112,26,79,208,223,34,106,12,140,110,155,89,116,199,165,74,101,240,84,84,13,120,81,120,26],[66,81,24,152,50,242,146,196,108,240,140,99,194,51,234,144,235,190,195,76,173,88,203,17,21,157,35,244,110,59,75,230],[167,100,108,137,221,193,14,197,111,0,10,27,90,133,73,237,19,199,39,20,145,214,37,81,156,168,74,22,36,161,219,149],[208,82,62,63,245,43,207,162,167,220,36,216,96,68,255,154,17,40,245,113,32,24,135,251,180,226,162,171,52,57,240,235],[134,84,242,53,37,202,131,41,244,34,191,212,153,92,234,186,21,52,248,65,126,28,31,139,244,51,218,26,38,149,52,243],[255,196,25,175,98,155,54,2,38,106,84,225,60,43,54,102,2,129,11,56,178,64,250,33,10,78,199,48,231,100,61,135],[120,206,227,117,160,215,211,189,142,173,136,101,120,58,107,60,115,170,7,115,121,91,181,199,52,25,194,226,29,17,157,225],[239,71,198,21,238,20,233,223,30,147,37,33,77,10,57,101,208,216,177,101,81,117,211,119,7,184,151,92,124,140,164,215],[185,122,136,227,47,228,94,104,85,218,52,99,26,58,67,23,195,30,87,69,112,60,67,56,4,194,37,128,143,177,162,5],[142,249,37,142,168,98,232,251,153,29,2,122,99,173,46,74,172,228,9,235,122,160,190,94,63,213,215,232,63,76,179,98],[230,95,209,12,84,42,190,21,117,122,241,170,54,214,42,191,231,94,15,220,176,12,233,240,212,152,91,131,188,249,9,212],[134,3,166,151,43,143,67,178,23,104,237,232,211,122,180,128,61,57,115,177,74,77,154,177,154,109,60,76,35,142,76,156],[219,65,148,246,252,130,217,48,103,114,49,196,119,102,12,156,68,97,132,242,201,228,113,184,52,12,75,61,184,200,84,183],[19,0,242,170,130,169,75,138,67,11,157,22,33,104,107,8,172,233,223,84,222,226,32,184,106,152,41,53,131,235,85,138],[120,255,183,152,63,249,189,17,75,168,226,212,91,198,164,56,92,152,232,34,112,132,254,167,188,4,68,65,212,227,25,160],[25,6,96,128,146,171,53,64,163,201,59,246,150,238,227,225,35,53,140,24,48,153,129,186,42,139,83,65,119,63,7,216],[62,195,173,148,141,43,235,38,2,221,238,180,35,96,196,36,183,80,93,212,130,27,114,217,139,172,78,74,183,249,17,210],[167,81,169,242,101,230,67,65,170,228,222,103,133,2,207,232,245,212,44,142,86,76,112,124,156,26,80,139,26,215,135,22]]",
                "sol": "[bytes32(stringToBytes32(\"255,254,20,106,100,203,209,34,16,167,121,1,169,63,154,21,97,252,52,212,108,159,76,40,6,12,228,226,92,184,40,173\")),bytes32(stringToBytes32(\"78,249,19,56,44,208,27,82,136,45,63,102,129,99,154,33,171,19,106,14,96,31,170,135,190,236,198,53,69,135,127,52\")),bytes32(stringToBytes32(\"165,78,214,117,44,112,202,39,129,254,90,185,80,245,30,110,88,1,79,49,232,64,181,70,95,157,75,76,0,133,192,69\")),bytes32(stringToBytes32(\"116,111,224,168,126,170,123,183,6,158,14,238,209,156,26,71,134,217,230,204,44,162,178,92,203,0,81,144,44,213,109,91\")),bytes32(stringToBytes32(\"143,82,197,67,183,181,208,160,234,132,222,31,148,231,78,196,212,233,210,139,15,24,188,211,250,5,218,77,175,198,167,180\")),bytes32(stringToBytes32(\"52,104,210,66,83,0,255,114,205,159,165,161,228,8,210,19,223,42,77,132,27,188,234,129,106,135,228,59,189,212,194,31\")),bytes32(stringToBytes32(\"210,244,121,226,82,54,78,99,163,106,109,114,206,242,202,219,138,72,216,189,253,72,251,211,246,245,109,199,154,253,48,22\")),bytes32(stringToBytes32(\"191,82,229,72,150,30,82,215,124,31,6,254,45,98,253,10,230,15,170,138,43,164,198,132,103,120,227,106,67,47,107,206\")),bytes32(stringToBytes32(\"217,19,80,124,30,241,89,203,47,97,123,158,32,174,221,215,152,128,48,36,40,249,79,181,213,231,127,94,78,31,240,104\")),bytes32(stringToBytes32(\"152,170,40,161,225,134,69,112,26,79,208,223,34,106,12,140,110,155,89,116,199,165,74,101,240,84,84,13,120,81,120,26\")),bytes32(stringToBytes32(\"66,81,24,152,50,242,146,196,108,240,140,99,194,51,234,144,235,190,195,76,173,88,203,17,21,157,35,244,110,59,75,230\")),bytes32(stringToBytes32(\"167,100,108,137,221,193,14,197,111,0,10,27,90,133,73,237,19,199,39,20,145,214,37,81,156,168,74,22,36,161,219,149\")),bytes32(stringToBytes32(\"208,82,62,63,245,43,207,162,167,220,36,216,96,68,255,154,17,40,245,113,32,24,135,251,180,226,162,171,52,57,240,235\")),bytes32(stringToBytes32(\"134,84,242,53,37,202,131,41,244,34,191,212,153,92,234,186,21,52,248,65,126,28,31,139,244,51,218,26,38,149,52,243\")),bytes32(stringToBytes32(\"255,196,25,175,98,155,54,2,38,106,84,225,60,43,54,102,2,129,11,56,178,64,250,33,10,78,199,48,231,100,61,135\")),bytes32(stringToBytes32(\"120,206,227,117,160,215,211,189,142,173,136,101,120,58,107,60,115,170,7,115,121,91,181,199,52,25,194,226,29,17,157,225\")),bytes32(stringToBytes32(\"239,71,198,21,238,20,233,223,30,147,37,33,77,10,57,101,208,216,177,101,81,117,211,119,7,184,151,92,124,140,164,215\")),bytes32(stringToBytes32(\"185,122,136,227,47,228,94,104,85,218,52,99,26,58,67,23,195,30,87,69,112,60,67,56,4,194,37,128,143,177,162,5\")),bytes32(stringToBytes32(\"142,249,37,142,168,98,232,251,153,29,2,122,99,173,46,74,172,228,9,235,122,160,190,94,63,213,215,232,63,76,179,98\")),bytes32(stringToBytes32(\"230,95,209,12,84,42,190,21,117,122,241,170,54,214,42,191,231,94,15,220,176,12,233,240,212,152,91,131,188,249,9,212\")),bytes32(stringToBytes32(\"134,3,166,151,43,143,67,178,23,104,237,232,211,122,180,128,61,57,115,177,74,77,154,177,154,109,60,76,35,142,76,156\")),bytes32(stringToBytes32(\"219,65,148,246,252,130,217,48,103,114,49,196,119,102,12,156,68,97,132,242,201,228,113,184,52,12,75,61,184,200,84,183\")),bytes32(stringToBytes32(\"19,0,242,170,130,169,75,138,67,11,157,22,33,104,107,8,172,233,223,84,222,226,32,184,106,152,41,53,131,235,85,138\")),bytes32(stringToBytes32(\"120,255,183,152,63,249,189,17,75,168,226,212,91,198,164,56,92,152,232,34,112,132,254,167,188,4,68,65,212,227,25,160\")),bytes32(stringToBytes32(\"25,6,96,128,146,171,53,64,163,201,59,246,150,238,227,225,35,53,140,24,48,153,129,186,42,139,83,65,119,63,7,216\")),bytes32(stringToBytes32(\"62,195,173,148,141,43,235,38,2,221,238,180,35,96,196,36,183,80,93,212,130,27,114,217,139,172,78,74,183,249,17,210\")),bytes32(stringToBytes32(\"167,81,169,242,101,230,67,65,170,228,222,103,133,2,207,232,245,212,44,142,86,76,112,124,156,26,80,139,26,215,135,22\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[3],accounts[8],accounts[5],accounts[2],accounts[4],accounts[9],accounts[9],accounts[0],accounts[9],accounts[2],accounts[0],accounts[9],accounts[0],accounts[0],accounts[0],accounts[9],accounts[9],accounts[7],accounts[1],accounts[2],accounts[6],accounts[1],accounts[7],accounts[1],accounts[5],accounts[5],accounts[3],accounts[2]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[6,29,27,2014223716,27,255,66,3,2014223716,64,1532892063,257,97,9999,5,4,1336,9999,10000,1532892062,1532892062,255,27,96,5,3,29]",
                "sol": "[uint256(6),uint256(29),uint256(27),uint256(2014223716),uint256(27),uint256(255),uint256(66),uint256(3),uint256(2014223716),uint256(64),uint256(1532892063),uint256(257),uint256(97),uint256(9999),uint256(5),uint256(4),uint256(1336),uint256(9999),uint256(10000),uint256(1532892062),uint256(1532892062),uint256(255),uint256(27),uint256(96),uint256(5),uint256(3),uint256(29)]"
              },
              {
                "js": "[1532892062,1,66,4,2014223714,28,0,10001,65,0,2014223715,1532892063,10001,64,64,255,64,6,66,1338,257,256,10001,64,256,27,95]",
                "sol": "[uint256(1532892062),uint256(1),uint256(66),uint256(4),uint256(2014223714),uint256(28),uint256(0),uint256(10001),uint256(65),uint256(0),uint256(2014223715),uint256(1532892063),uint256(10001),uint256(64),uint256(64),uint256(255),uint256(64),uint256(6),uint256(66),uint256(1338),uint256(257),uint256(256),uint256(10001),uint256(64),uint256(256),uint256(27),uint256(95)]"
              },
              {
                "js": "[[255,254,20,106,100,203,209,34,16,167,121,1,169,63,154,21,97,252,52,212,108,159,76,40,6,12,228,226,92,184,40,173],[78,249,19,56,44,208,27,82,136,45,63,102,129,99,154,33,171,19,106,14,96,31,170,135,190,236,198,53,69,135,127,52],[165,78,214,117,44,112,202,39,129,254,90,185,80,245,30,110,88,1,79,49,232,64,181,70,95,157,75,76,0,133,192,69],[116,111,224,168,126,170,123,183,6,158,14,238,209,156,26,71,134,217,230,204,44,162,178,92,203,0,81,144,44,213,109,91],[143,82,197,67,183,181,208,160,234,132,222,31,148,231,78,196,212,233,210,139,15,24,188,211,250,5,218,77,175,198,167,180],[52,104,210,66,83,0,255,114,205,159,165,161,228,8,210,19,223,42,77,132,27,188,234,129,106,135,228,59,189,212,194,31],[210,244,121,226,82,54,78,99,163,106,109,114,206,242,202,219,138,72,216,189,253,72,251,211,246,245,109,199,154,253,48,22],[191,82,229,72,150,30,82,215,124,31,6,254,45,98,253,10,230,15,170,138,43,164,198,132,103,120,227,106,67,47,107,206],[217,19,80,124,30,241,89,203,47,97,123,158,32,174,221,215,152,128,48,36,40,249,79,181,213,231,127,94,78,31,240,104],[152,170,40,161,225,134,69,112,26,79,208,223,34,106,12,140,110,155,89,116,199,165,74,101,240,84,84,13,120,81,120,26],[66,81,24,152,50,242,146,196,108,240,140,99,194,51,234,144,235,190,195,76,173,88,203,17,21,157,35,244,110,59,75,230],[167,100,108,137,221,193,14,197,111,0,10,27,90,133,73,237,19,199,39,20,145,214,37,81,156,168,74,22,36,161,219,149],[208,82,62,63,245,43,207,162,167,220,36,216,96,68,255,154,17,40,245,113,32,24,135,251,180,226,162,171,52,57,240,235],[134,84,242,53,37,202,131,41,244,34,191,212,153,92,234,186,21,52,248,65,126,28,31,139,244,51,218,26,38,149,52,243],[255,196,25,175,98,155,54,2,38,106,84,225,60,43,54,102,2,129,11,56,178,64,250,33,10,78,199,48,231,100,61,135],[120,206,227,117,160,215,211,189,142,173,136,101,120,58,107,60,115,170,7,115,121,91,181,199,52,25,194,226,29,17,157,225],[239,71,198,21,238,20,233,223,30,147,37,33,77,10,57,101,208,216,177,101,81,117,211,119,7,184,151,92,124,140,164,215],[185,122,136,227,47,228,94,104,85,218,52,99,26,58,67,23,195,30,87,69,112,60,67,56,4,194,37,128,143,177,162,5],[142,249,37,142,168,98,232,251,153,29,2,122,99,173,46,74,172,228,9,235,122,160,190,94,63,213,215,232,63,76,179,98],[230,95,209,12,84,42,190,21,117,122,241,170,54,214,42,191,231,94,15,220,176,12,233,240,212,152,91,131,188,249,9,212],[134,3,166,151,43,143,67,178,23,104,237,232,211,122,180,128,61,57,115,177,74,77,154,177,154,109,60,76,35,142,76,156],[219,65,148,246,252,130,217,48,103,114,49,196,119,102,12,156,68,97,132,242,201,228,113,184,52,12,75,61,184,200,84,183],[19,0,242,170,130,169,75,138,67,11,157,22,33,104,107,8,172,233,223,84,222,226,32,184,106,152,41,53,131,235,85,138],[120,255,183,152,63,249,189,17,75,168,226,212,91,198,164,56,92,152,232,34,112,132,254,167,188,4,68,65,212,227,25,160],[25,6,96,128,146,171,53,64,163,201,59,246,150,238,227,225,35,53,140,24,48,153,129,186,42,139,83,65,119,63,7,216],[62,195,173,148,141,43,235,38,2,221,238,180,35,96,196,36,183,80,93,212,130,27,114,217,139,172,78,74,183,249,17,210],[167,81,169,242,101,230,67,65,170,228,222,103,133,2,207,232,245,212,44,142,86,76,112,124,156,26,80,139,26,215,135,22]]",
                "sol": "[bytes32(stringToBytes32(\"255,254,20,106,100,203,209,34,16,167,121,1,169,63,154,21,97,252,52,212,108,159,76,40,6,12,228,226,92,184,40,173\")),bytes32(stringToBytes32(\"78,249,19,56,44,208,27,82,136,45,63,102,129,99,154,33,171,19,106,14,96,31,170,135,190,236,198,53,69,135,127,52\")),bytes32(stringToBytes32(\"165,78,214,117,44,112,202,39,129,254,90,185,80,245,30,110,88,1,79,49,232,64,181,70,95,157,75,76,0,133,192,69\")),bytes32(stringToBytes32(\"116,111,224,168,126,170,123,183,6,158,14,238,209,156,26,71,134,217,230,204,44,162,178,92,203,0,81,144,44,213,109,91\")),bytes32(stringToBytes32(\"143,82,197,67,183,181,208,160,234,132,222,31,148,231,78,196,212,233,210,139,15,24,188,211,250,5,218,77,175,198,167,180\")),bytes32(stringToBytes32(\"52,104,210,66,83,0,255,114,205,159,165,161,228,8,210,19,223,42,77,132,27,188,234,129,106,135,228,59,189,212,194,31\")),bytes32(stringToBytes32(\"210,244,121,226,82,54,78,99,163,106,109,114,206,242,202,219,138,72,216,189,253,72,251,211,246,245,109,199,154,253,48,22\")),bytes32(stringToBytes32(\"191,82,229,72,150,30,82,215,124,31,6,254,45,98,253,10,230,15,170,138,43,164,198,132,103,120,227,106,67,47,107,206\")),bytes32(stringToBytes32(\"217,19,80,124,30,241,89,203,47,97,123,158,32,174,221,215,152,128,48,36,40,249,79,181,213,231,127,94,78,31,240,104\")),bytes32(stringToBytes32(\"152,170,40,161,225,134,69,112,26,79,208,223,34,106,12,140,110,155,89,116,199,165,74,101,240,84,84,13,120,81,120,26\")),bytes32(stringToBytes32(\"66,81,24,152,50,242,146,196,108,240,140,99,194,51,234,144,235,190,195,76,173,88,203,17,21,157,35,244,110,59,75,230\")),bytes32(stringToBytes32(\"167,100,108,137,221,193,14,197,111,0,10,27,90,133,73,237,19,199,39,20,145,214,37,81,156,168,74,22,36,161,219,149\")),bytes32(stringToBytes32(\"208,82,62,63,245,43,207,162,167,220,36,216,96,68,255,154,17,40,245,113,32,24,135,251,180,226,162,171,52,57,240,235\")),bytes32(stringToBytes32(\"134,84,242,53,37,202,131,41,244,34,191,212,153,92,234,186,21,52,248,65,126,28,31,139,244,51,218,26,38,149,52,243\")),bytes32(stringToBytes32(\"255,196,25,175,98,155,54,2,38,106,84,225,60,43,54,102,2,129,11,56,178,64,250,33,10,78,199,48,231,100,61,135\")),bytes32(stringToBytes32(\"120,206,227,117,160,215,211,189,142,173,136,101,120,58,107,60,115,170,7,115,121,91,181,199,52,25,194,226,29,17,157,225\")),bytes32(stringToBytes32(\"239,71,198,21,238,20,233,223,30,147,37,33,77,10,57,101,208,216,177,101,81,117,211,119,7,184,151,92,124,140,164,215\")),bytes32(stringToBytes32(\"185,122,136,227,47,228,94,104,85,218,52,99,26,58,67,23,195,30,87,69,112,60,67,56,4,194,37,128,143,177,162,5\")),bytes32(stringToBytes32(\"142,249,37,142,168,98,232,251,153,29,2,122,99,173,46,74,172,228,9,235,122,160,190,94,63,213,215,232,63,76,179,98\")),bytes32(stringToBytes32(\"230,95,209,12,84,42,190,21,117,122,241,170,54,214,42,191,231,94,15,220,176,12,233,240,212,152,91,131,188,249,9,212\")),bytes32(stringToBytes32(\"134,3,166,151,43,143,67,178,23,104,237,232,211,122,180,128,61,57,115,177,74,77,154,177,154,109,60,76,35,142,76,156\")),bytes32(stringToBytes32(\"219,65,148,246,252,130,217,48,103,114,49,196,119,102,12,156,68,97,132,242,201,228,113,184,52,12,75,61,184,200,84,183\")),bytes32(stringToBytes32(\"19,0,242,170,130,169,75,138,67,11,157,22,33,104,107,8,172,233,223,84,222,226,32,184,106,152,41,53,131,235,85,138\")),bytes32(stringToBytes32(\"120,255,183,152,63,249,189,17,75,168,226,212,91,198,164,56,92,152,232,34,112,132,254,167,188,4,68,65,212,227,25,160\")),bytes32(stringToBytes32(\"25,6,96,128,146,171,53,64,163,201,59,246,150,238,227,225,35,53,140,24,48,153,129,186,42,139,83,65,119,63,7,216\")),bytes32(stringToBytes32(\"62,195,173,148,141,43,235,38,2,221,238,180,35,96,196,36,183,80,93,212,130,27,114,217,139,172,78,74,183,249,17,210\")),bytes32(stringToBytes32(\"167,81,169,242,101,230,67,65,170,228,222,103,133,2,207,232,245,212,44,142,86,76,112,124,156,26,80,139,26,215,135,22\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[0],accounts[7],accounts[7],accounts[5],accounts[1],accounts[0],accounts[1],accounts[0],accounts[3],accounts[7],accounts[2],accounts[7],accounts[6],accounts[5],accounts[0],accounts[0],accounts[1],accounts[0],accounts[5],accounts[4],accounts[5],accounts[0],accounts[0],accounts[2],accounts[8],accounts[1],accounts[2],accounts[0]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[6,29,27,2014223716,27,255,66,3,2014223716,64,1532892063,257,97,9999,5,4,1336,9999,10000,1532892062,1532892062,255,27,96,5,3,29]",
                "sol": "[uint256(6),uint256(29),uint256(27),uint256(2014223716),uint256(27),uint256(255),uint256(66),uint256(3),uint256(2014223716),uint256(64),uint256(1532892063),uint256(257),uint256(97),uint256(9999),uint256(5),uint256(4),uint256(1336),uint256(9999),uint256(10000),uint256(1532892062),uint256(1532892062),uint256(255),uint256(27),uint256(96),uint256(5),uint256(3),uint256(29)]"
              },
              {
                "js": "[1532892062,1,66,4,2014223714,28,0,10001,65,0,2014223715,1532892063,10001,64,64,255,64,6,66,1338,257,256,10001,64,256,27,95]",
                "sol": "[uint256(1532892062),uint256(1),uint256(66),uint256(4),uint256(2014223714),uint256(28),uint256(0),uint256(10001),uint256(65),uint256(0),uint256(2014223715),uint256(1532892063),uint256(10001),uint256(64),uint256(64),uint256(255),uint256(64),uint256(6),uint256(66),uint256(1338),uint256(257),uint256(256),uint256(10001),uint256(64),uint256(256),uint256(27),uint256(95)]"
              },
              {
                "js": "[[255,254,20,106,100,203,209,34,16,167,121,1,169,63,154,21,97,252,52,212,108,159,76,40,6,12,228,226,92,184,40,173],[78,249,19,56,44,208,27,82,136,45,63,102,129,99,154,33,171,19,106,14,96,31,170,135,190,236,198,53,69,135,127,52],[165,78,214,117,44,112,202,39,129,254,90,185,80,245,30,110,88,1,79,49,232,64,181,70,95,157,75,76,0,133,192,69],[116,111,224,168,126,170,123,183,6,158,14,238,209,156,26,71,134,217,230,204,44,162,178,92,203,0,81,144,44,213,109,91],[143,82,197,67,183,181,208,160,234,132,222,31,148,231,78,196,212,233,210,139,15,24,188,211,250,5,218,77,175,198,167,180],[52,104,210,66,83,0,255,114,205,159,165,161,228,8,210,19,223,42,77,132,27,188,234,129,106,135,228,59,189,212,194,31],[210,244,121,226,82,54,78,99,163,106,109,114,206,242,202,219,138,72,216,189,253,72,251,211,246,245,109,199,154,253,48,22],[191,82,229,72,150,30,82,215,124,31,6,254,45,98,253,10,230,15,170,138,43,164,198,132,103,120,227,106,67,47,107,206],[217,19,80,124,30,241,89,203,47,97,123,158,32,174,221,215,152,128,48,36,40,249,79,181,213,231,127,94,78,31,240,104],[152,170,40,161,225,134,69,112,26,79,208,223,34,106,12,140,110,155,89,116,199,165,74,101,240,84,84,13,120,81,120,26],[66,81,24,152,50,242,146,196,108,240,140,99,194,51,234,144,235,190,195,76,173,88,203,17,21,157,35,244,110,59,75,230],[167,100,108,137,221,193,14,197,111,0,10,27,90,133,73,237,19,199,39,20,145,214,37,81,156,168,74,22,36,161,219,149],[208,82,62,63,245,43,207,162,167,220,36,216,96,68,255,154,17,40,245,113,32,24,135,251,180,226,162,171,52,57,240,235],[134,84,242,53,37,202,131,41,244,34,191,212,153,92,234,186,21,52,248,65,126,28,31,139,244,51,218,26,38,149,52,243],[255,196,25,175,98,155,54,2,38,106,84,225,60,43,54,102,2,129,11,56,178,64,250,33,10,78,199,48,231,100,61,135],[120,206,227,117,160,215,211,189,142,173,136,101,120,58,107,60,115,170,7,115,121,91,181,199,52,25,194,226,29,17,157,225],[239,71,198,21,238,20,233,223,30,147,37,33,77,10,57,101,208,216,177,101,81,117,211,119,7,184,151,92,124,140,164,215],[185,122,136,227,47,228,94,104,85,218,52,99,26,58,67,23,195,30,87,69,112,60,67,56,4,194,37,128,143,177,162,5],[142,249,37,142,168,98,232,251,153,29,2,122,99,173,46,74,172,228,9,235,122,160,190,94,63,213,215,232,63,76,179,98],[230,95,209,12,84,42,190,21,117,122,241,170,54,214,42,191,231,94,15,220,176,12,233,240,212,152,91,131,188,249,9,212],[134,3,166,151,43,143,67,178,23,104,237,232,211,122,180,128,61,57,115,177,74,77,154,177,154,109,60,76,35,142,76,156],[219,65,148,246,252,130,217,48,103,114,49,196,119,102,12,156,68,97,132,242,201,228,113,184,52,12,75,61,184,200,84,183],[19,0,242,170,130,169,75,138,67,11,157,22,33,104,107,8,172,233,223,84,222,226,32,184,106,152,41,53,131,235,85,138],[120,255,183,152,63,249,189,17,75,168,226,212,91,198,164,56,92,152,232,34,112,132,254,167,188,4,68,65,212,227,25,160],[25,6,96,128,146,171,53,64,163,201,59,246,150,238,227,225,35,53,140,24,48,153,129,186,42,139,83,65,119,63,7,216],[62,195,173,148,141,43,235,38,2,221,238,180,35,96,196,36,183,80,93,212,130,27,114,217,139,172,78,74,183,249,17,210],[167,81,169,242,101,230,67,65,170,228,222,103,133,2,207,232,245,212,44,142,86,76,112,124,156,26,80,139,26,215,135,22]]",
                "sol": "[bytes32(stringToBytes32(\"255,254,20,106,100,203,209,34,16,167,121,1,169,63,154,21,97,252,52,212,108,159,76,40,6,12,228,226,92,184,40,173\")),bytes32(stringToBytes32(\"78,249,19,56,44,208,27,82,136,45,63,102,129,99,154,33,171,19,106,14,96,31,170,135,190,236,198,53,69,135,127,52\")),bytes32(stringToBytes32(\"165,78,214,117,44,112,202,39,129,254,90,185,80,245,30,110,88,1,79,49,232,64,181,70,95,157,75,76,0,133,192,69\")),bytes32(stringToBytes32(\"116,111,224,168,126,170,123,183,6,158,14,238,209,156,26,71,134,217,230,204,44,162,178,92,203,0,81,144,44,213,109,91\")),bytes32(stringToBytes32(\"143,82,197,67,183,181,208,160,234,132,222,31,148,231,78,196,212,233,210,139,15,24,188,211,250,5,218,77,175,198,167,180\")),bytes32(stringToBytes32(\"52,104,210,66,83,0,255,114,205,159,165,161,228,8,210,19,223,42,77,132,27,188,234,129,106,135,228,59,189,212,194,31\")),bytes32(stringToBytes32(\"210,244,121,226,82,54,78,99,163,106,109,114,206,242,202,219,138,72,216,189,253,72,251,211,246,245,109,199,154,253,48,22\")),bytes32(stringToBytes32(\"191,82,229,72,150,30,82,215,124,31,6,254,45,98,253,10,230,15,170,138,43,164,198,132,103,120,227,106,67,47,107,206\")),bytes32(stringToBytes32(\"217,19,80,124,30,241,89,203,47,97,123,158,32,174,221,215,152,128,48,36,40,249,79,181,213,231,127,94,78,31,240,104\")),bytes32(stringToBytes32(\"152,170,40,161,225,134,69,112,26,79,208,223,34,106,12,140,110,155,89,116,199,165,74,101,240,84,84,13,120,81,120,26\")),bytes32(stringToBytes32(\"66,81,24,152,50,242,146,196,108,240,140,99,194,51,234,144,235,190,195,76,173,88,203,17,21,157,35,244,110,59,75,230\")),bytes32(stringToBytes32(\"167,100,108,137,221,193,14,197,111,0,10,27,90,133,73,237,19,199,39,20,145,214,37,81,156,168,74,22,36,161,219,149\")),bytes32(stringToBytes32(\"208,82,62,63,245,43,207,162,167,220,36,216,96,68,255,154,17,40,245,113,32,24,135,251,180,226,162,171,52,57,240,235\")),bytes32(stringToBytes32(\"134,84,242,53,37,202,131,41,244,34,191,212,153,92,234,186,21,52,248,65,126,28,31,139,244,51,218,26,38,149,52,243\")),bytes32(stringToBytes32(\"255,196,25,175,98,155,54,2,38,106,84,225,60,43,54,102,2,129,11,56,178,64,250,33,10,78,199,48,231,100,61,135\")),bytes32(stringToBytes32(\"120,206,227,117,160,215,211,189,142,173,136,101,120,58,107,60,115,170,7,115,121,91,181,199,52,25,194,226,29,17,157,225\")),bytes32(stringToBytes32(\"239,71,198,21,238,20,233,223,30,147,37,33,77,10,57,101,208,216,177,101,81,117,211,119,7,184,151,92,124,140,164,215\")),bytes32(stringToBytes32(\"185,122,136,227,47,228,94,104,85,218,52,99,26,58,67,23,195,30,87,69,112,60,67,56,4,194,37,128,143,177,162,5\")),bytes32(stringToBytes32(\"142,249,37,142,168,98,232,251,153,29,2,122,99,173,46,74,172,228,9,235,122,160,190,94,63,213,215,232,63,76,179,98\")),bytes32(stringToBytes32(\"230,95,209,12,84,42,190,21,117,122,241,170,54,214,42,191,231,94,15,220,176,12,233,240,212,152,91,131,188,249,9,212\")),bytes32(stringToBytes32(\"134,3,166,151,43,143,67,178,23,104,237,232,211,122,180,128,61,57,115,177,74,77,154,177,154,109,60,76,35,142,76,156\")),bytes32(stringToBytes32(\"219,65,148,246,252,130,217,48,103,114,49,196,119,102,12,156,68,97,132,242,201,228,113,184,52,12,75,61,184,200,84,183\")),bytes32(stringToBytes32(\"19,0,242,170,130,169,75,138,67,11,157,22,33,104,107,8,172,233,223,84,222,226,32,184,106,152,41,53,131,235,85,138\")),bytes32(stringToBytes32(\"120,255,183,152,63,249,189,17,75,168,226,212,91,198,164,56,92,152,232,34,112,132,254,167,188,4,68,65,212,227,25,160\")),bytes32(stringToBytes32(\"25,6,96,128,146,171,53,64,163,201,59,246,150,238,227,225,35,53,140,24,48,153,129,186,42,139,83,65,119,63,7,216\")),bytes32(stringToBytes32(\"62,195,173,148,141,43,235,38,2,221,238,180,35,96,196,36,183,80,93,212,130,27,114,217,139,172,78,74,183,249,17,210\")),bytes32(stringToBytes32(\"167,81,169,242,101,230,67,65,170,228,222,103,133,2,207,232,245,212,44,142,86,76,112,124,156,26,80,139,26,215,135,22\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[7],accounts[7],accounts[7],accounts[6],accounts[4],accounts[0],accounts[6],accounts[9],accounts[0],accounts[3],accounts[6],accounts[6],accounts[7],accounts[5],accounts[4],accounts[2],accounts[7],accounts[5],accounts[2],accounts[2],accounts[7],accounts[6],accounts[9],accounts[2],accounts[6],accounts[9],accounts[8],accounts[5]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[6,29,27,2014223716,27,255,66,3,2014223716,64,1532892063,257,97,9999,5,4,1336,9999,10000,1532892062,1532892062,255,27,96,5,3,29]",
                "sol": "[uint256(6),uint256(29),uint256(27),uint256(2014223716),uint256(27),uint256(255),uint256(66),uint256(3),uint256(2014223716),uint256(64),uint256(1532892063),uint256(257),uint256(97),uint256(9999),uint256(5),uint256(4),uint256(1336),uint256(9999),uint256(10000),uint256(1532892062),uint256(1532892062),uint256(255),uint256(27),uint256(96),uint256(5),uint256(3),uint256(29)]"
              },
              {
                "js": "[1532892062,1,66,4,2014223714,28,0,10001,65,0,2014223715,1532892063,10001,64,64,255,64,6,66,1338,257,256,10001,64,256,27,95]",
                "sol": "[uint256(1532892062),uint256(1),uint256(66),uint256(4),uint256(2014223714),uint256(28),uint256(0),uint256(10001),uint256(65),uint256(0),uint256(2014223715),uint256(1532892063),uint256(10001),uint256(64),uint256(64),uint256(255),uint256(64),uint256(6),uint256(66),uint256(1338),uint256(257),uint256(256),uint256(10001),uint256(64),uint256(256),uint256(27),uint256(95)]"
              },
              {
                "js": "[[255,254,20,106,100,203,209,34,16,167,121,1,169,63,154,21,97,252,52,212,108,159,76,40,6,12,228,226,92,184,40,173],[78,249,19,56,44,208,27,82,136,45,63,102,129,99,154,33,171,19,106,14,96,31,170,135,190,236,198,53,69,135,127,52],[165,78,214,117,44,112,202,39,129,254,90,185,80,245,30,110,88,1,79,49,232,64,181,70,95,157,75,76,0,133,192,69],[116,111,224,168,126,170,123,183,6,158,14,238,209,156,26,71,134,217,230,204,44,162,178,92,203,0,81,144,44,213,109,91],[143,82,197,67,183,181,208,160,234,132,222,31,148,231,78,196,212,233,210,139,15,24,188,211,250,5,218,77,175,198,167,180],[52,104,210,66,83,0,255,114,205,159,165,161,228,8,210,19,223,42,77,132,27,188,234,129,106,135,228,59,189,212,194,31],[210,244,121,226,82,54,78,99,163,106,109,114,206,242,202,219,138,72,216,189,253,72,251,211,246,245,109,199,154,253,48,22],[191,82,229,72,150,30,82,215,124,31,6,254,45,98,253,10,230,15,170,138,43,164,198,132,103,120,227,106,67,47,107,206],[217,19,80,124,30,241,89,203,47,97,123,158,32,174,221,215,152,128,48,36,40,249,79,181,213,231,127,94,78,31,240,104],[152,170,40,161,225,134,69,112,26,79,208,223,34,106,12,140,110,155,89,116,199,165,74,101,240,84,84,13,120,81,120,26],[66,81,24,152,50,242,146,196,108,240,140,99,194,51,234,144,235,190,195,76,173,88,203,17,21,157,35,244,110,59,75,230],[167,100,108,137,221,193,14,197,111,0,10,27,90,133,73,237,19,199,39,20,145,214,37,81,156,168,74,22,36,161,219,149],[208,82,62,63,245,43,207,162,167,220,36,216,96,68,255,154,17,40,245,113,32,24,135,251,180,226,162,171,52,57,240,235],[134,84,242,53,37,202,131,41,244,34,191,212,153,92,234,186,21,52,248,65,126,28,31,139,244,51,218,26,38,149,52,243],[255,196,25,175,98,155,54,2,38,106,84,225,60,43,54,102,2,129,11,56,178,64,250,33,10,78,199,48,231,100,61,135],[120,206,227,117,160,215,211,189,142,173,136,101,120,58,107,60,115,170,7,115,121,91,181,199,52,25,194,226,29,17,157,225],[239,71,198,21,238,20,233,223,30,147,37,33,77,10,57,101,208,216,177,101,81,117,211,119,7,184,151,92,124,140,164,215],[185,122,136,227,47,228,94,104,85,218,52,99,26,58,67,23,195,30,87,69,112,60,67,56,4,194,37,128,143,177,162,5],[142,249,37,142,168,98,232,251,153,29,2,122,99,173,46,74,172,228,9,235,122,160,190,94,63,213,215,232,63,76,179,98],[230,95,209,12,84,42,190,21,117,122,241,170,54,214,42,191,231,94,15,220,176,12,233,240,212,152,91,131,188,249,9,212],[134,3,166,151,43,143,67,178,23,104,237,232,211,122,180,128,61,57,115,177,74,77,154,177,154,109,60,76,35,142,76,156],[219,65,148,246,252,130,217,48,103,114,49,196,119,102,12,156,68,97,132,242,201,228,113,184,52,12,75,61,184,200,84,183],[19,0,242,170,130,169,75,138,67,11,157,22,33,104,107,8,172,233,223,84,222,226,32,184,106,152,41,53,131,235,85,138],[120,255,183,152,63,249,189,17,75,168,226,212,91,198,164,56,92,152,232,34,112,132,254,167,188,4,68,65,212,227,25,160],[25,6,96,128,146,171,53,64,163,201,59,246,150,238,227,225,35,53,140,24,48,153,129,186,42,139,83,65,119,63,7,216],[62,195,173,148,141,43,235,38,2,221,238,180,35,96,196,36,183,80,93,212,130,27,114,217,139,172,78,74,183,249,17,210],[167,81,169,242,101,230,67,65,170,228,222,103,133,2,207,232,245,212,44,142,86,76,112,124,156,26,80,139,26,215,135,22]]",
                "sol": "[bytes32(stringToBytes32(\"255,254,20,106,100,203,209,34,16,167,121,1,169,63,154,21,97,252,52,212,108,159,76,40,6,12,228,226,92,184,40,173\")),bytes32(stringToBytes32(\"78,249,19,56,44,208,27,82,136,45,63,102,129,99,154,33,171,19,106,14,96,31,170,135,190,236,198,53,69,135,127,52\")),bytes32(stringToBytes32(\"165,78,214,117,44,112,202,39,129,254,90,185,80,245,30,110,88,1,79,49,232,64,181,70,95,157,75,76,0,133,192,69\")),bytes32(stringToBytes32(\"116,111,224,168,126,170,123,183,6,158,14,238,209,156,26,71,134,217,230,204,44,162,178,92,203,0,81,144,44,213,109,91\")),bytes32(stringToBytes32(\"143,82,197,67,183,181,208,160,234,132,222,31,148,231,78,196,212,233,210,139,15,24,188,211,250,5,218,77,175,198,167,180\")),bytes32(stringToBytes32(\"52,104,210,66,83,0,255,114,205,159,165,161,228,8,210,19,223,42,77,132,27,188,234,129,106,135,228,59,189,212,194,31\")),bytes32(stringToBytes32(\"210,244,121,226,82,54,78,99,163,106,109,114,206,242,202,219,138,72,216,189,253,72,251,211,246,245,109,199,154,253,48,22\")),bytes32(stringToBytes32(\"191,82,229,72,150,30,82,215,124,31,6,254,45,98,253,10,230,15,170,138,43,164,198,132,103,120,227,106,67,47,107,206\")),bytes32(stringToBytes32(\"217,19,80,124,30,241,89,203,47,97,123,158,32,174,221,215,152,128,48,36,40,249,79,181,213,231,127,94,78,31,240,104\")),bytes32(stringToBytes32(\"152,170,40,161,225,134,69,112,26,79,208,223,34,106,12,140,110,155,89,116,199,165,74,101,240,84,84,13,120,81,120,26\")),bytes32(stringToBytes32(\"66,81,24,152,50,242,146,196,108,240,140,99,194,51,234,144,235,190,195,76,173,88,203,17,21,157,35,244,110,59,75,230\")),bytes32(stringToBytes32(\"167,100,108,137,221,193,14,197,111,0,10,27,90,133,73,237,19,199,39,20,145,214,37,81,156,168,74,22,36,161,219,149\")),bytes32(stringToBytes32(\"208,82,62,63,245,43,207,162,167,220,36,216,96,68,255,154,17,40,245,113,32,24,135,251,180,226,162,171,52,57,240,235\")),bytes32(stringToBytes32(\"134,84,242,53,37,202,131,41,244,34,191,212,153,92,234,186,21,52,248,65,126,28,31,139,244,51,218,26,38,149,52,243\")),bytes32(stringToBytes32(\"255,196,25,175,98,155,54,2,38,106,84,225,60,43,54,102,2,129,11,56,178,64,250,33,10,78,199,48,231,100,61,135\")),bytes32(stringToBytes32(\"120,206,227,117,160,215,211,189,142,173,136,101,120,58,107,60,115,170,7,115,121,91,181,199,52,25,194,226,29,17,157,225\")),bytes32(stringToBytes32(\"239,71,198,21,238,20,233,223,30,147,37,33,77,10,57,101,208,216,177,101,81,117,211,119,7,184,151,92,124,140,164,215\")),bytes32(stringToBytes32(\"185,122,136,227,47,228,94,104,85,218,52,99,26,58,67,23,195,30,87,69,112,60,67,56,4,194,37,128,143,177,162,5\")),bytes32(stringToBytes32(\"142,249,37,142,168,98,232,251,153,29,2,122,99,173,46,74,172,228,9,235,122,160,190,94,63,213,215,232,63,76,179,98\")),bytes32(stringToBytes32(\"230,95,209,12,84,42,190,21,117,122,241,170,54,214,42,191,231,94,15,220,176,12,233,240,212,152,91,131,188,249,9,212\")),bytes32(stringToBytes32(\"134,3,166,151,43,143,67,178,23,104,237,232,211,122,180,128,61,57,115,177,74,77,154,177,154,109,60,76,35,142,76,156\")),bytes32(stringToBytes32(\"219,65,148,246,252,130,217,48,103,114,49,196,119,102,12,156,68,97,132,242,201,228,113,184,52,12,75,61,184,200,84,183\")),bytes32(stringToBytes32(\"19,0,242,170,130,169,75,138,67,11,157,22,33,104,107,8,172,233,223,84,222,226,32,184,106,152,41,53,131,235,85,138\")),bytes32(stringToBytes32(\"120,255,183,152,63,249,189,17,75,168,226,212,91,198,164,56,92,152,232,34,112,132,254,167,188,4,68,65,212,227,25,160\")),bytes32(stringToBytes32(\"25,6,96,128,146,171,53,64,163,201,59,246,150,238,227,225,35,53,140,24,48,153,129,186,42,139,83,65,119,63,7,216\")),bytes32(stringToBytes32(\"62,195,173,148,141,43,235,38,2,221,238,180,35,96,196,36,183,80,93,212,130,27,114,217,139,172,78,74,183,249,17,210\")),bytes32(stringToBytes32(\"167,81,169,242,101,230,67,65,170,228,222,103,133,2,207,232,245,212,44,142,86,76,112,124,156,26,80,139,26,215,135,22\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.233ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[221,182,55,44,134,53,229,103,250,254,87,45,99,101,32,195,122,147,191,83,180,177,240,1,248,238,109,102,13,48,139,210]",
              "sol": "stringToBytes32(\"221,182,55,44,134,53,229,103,250,254,87,45,99,101,32,195,122,147,191,83,180,177,240,1,248,238,109,102,13,48,139,210\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[221,182,55,44,134,53,229,103,250,254,87,45,99,101,32,195,122,147,191,83,180,177,240,1,248,238,109,102,13,48,139,210]",
                "sol": "stringToBytes32(\"221,182,55,44,134,53,229,103,250,254,87,45,99,101,32,195,122,147,191,83,180,177,240,1,248,238,109,102,13,48,139,210\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.235ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:12:39.235ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "[22,125,206,17,134,171,122,188,29,7,192,188,176,30,144,187,197,109,15,114,73,208,89,132,28,173,123,84,126,175,194,28]",
              "sol": "stringToBytes32(\"22,125,206,17,134,171,122,188,29,7,192,188,176,30,144,187,197,109,15,114,73,208,89,132,28,173,123,84,126,175,194,28\")"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "[22,125,206,17,134,171,122,188,29,7,192,188,176,30,144,187,197,109,15,114,73,208,89,132,28,173,123,84,126,175,194,28]",
                "sol": "stringToBytes32(\"22,125,206,17,134,171,122,188,29,7,192,188,176,30,144,187,197,109,15,114,73,208,89,132,28,173,123,84,126,175,194,28\")"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[22,125,206,17,134,171,122,188,29,7,192,188,176,30,144,187,197,109,15,114,73,208,89,132,28,173,123,84,126,175,194,28]",
                "sol": "stringToBytes32(\"22,125,206,17,134,171,122,188,29,7,192,188,176,30,144,187,197,109,15,114,73,208,89,132,28,173,123,84,126,175,194,28\")"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "[201,88,61,135,93,195,234,41,142,225,178,8,252,2,110,208,192,180,143,209,71,23,5,174,90,72,178,232,57,69,29,243]",
              "sol": "stringToBytes32(\"201,88,61,135,93,195,234,41,142,225,178,8,252,2,110,208,192,180,143,209,71,23,5,174,90,72,178,232,57,69,29,243\")"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "[201,88,61,135,93,195,234,41,142,225,178,8,252,2,110,208,192,180,143,209,71,23,5,174,90,72,178,232,57,69,29,243]",
                "sol": "stringToBytes32(\"201,88,61,135,93,195,234,41,142,225,178,8,252,2,110,208,192,180,143,209,71,23,5,174,90,72,178,232,57,69,29,243\")"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[201,88,61,135,93,195,234,41,142,225,178,8,252,2,110,208,192,180,143,209,71,23,5,174,90,72,178,232,57,69,29,243]",
                "sol": "stringToBytes32(\"201,88,61,135,93,195,234,41,142,225,178,8,252,2,110,208,192,180,143,209,71,23,5,174,90,72,178,232,57,69,29,243\")"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.238ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:12:39.238ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[226,144,80,160,225,76,252,208,37,134,181,103,25,47,178,131,140,255,169,11,58,247,233,18,90,155,103,130,153,101,149,73],[195,29,202,251,125,239,39,109,226,254,225,219,209,170,204,34,80,19,186,109,149,222,137,42,77,1,35,21,129,246,147,7],[180,175,4,28,162,185,52,222,86,90,136,183,65,13,214,172,157,208,50,252,130,84,143,135,127,130,223,173,103,137,22,26],[57,180,194,122,137,200,151,152,4,142,57,166,100,83,170,165,85,216,159,136,208,53,232,92,22,94,241,13,250,150,133,178],[205,63,180,222,122,115,159,74,188,13,151,30,70,201,181,118,80,63,159,164,74,174,113,102,74,185,158,99,220,184,187,244],[171,145,151,89,242,255,166,181,33,13,27,128,220,38,173,181,43,159,11,205,181,239,82,8,125,113,149,127,157,213,64,179]]",
              "sol": "[bytes32(stringToBytes32(\"226,144,80,160,225,76,252,208,37,134,181,103,25,47,178,131,140,255,169,11,58,247,233,18,90,155,103,130,153,101,149,73\")),bytes32(stringToBytes32(\"195,29,202,251,125,239,39,109,226,254,225,219,209,170,204,34,80,19,186,109,149,222,137,42,77,1,35,21,129,246,147,7\")),bytes32(stringToBytes32(\"180,175,4,28,162,185,52,222,86,90,136,183,65,13,214,172,157,208,50,252,130,84,143,135,127,130,223,173,103,137,22,26\")),bytes32(stringToBytes32(\"57,180,194,122,137,200,151,152,4,142,57,166,100,83,170,165,85,216,159,136,208,53,232,92,22,94,241,13,250,150,133,178\")),bytes32(stringToBytes32(\"205,63,180,222,122,115,159,74,188,13,151,30,70,201,181,118,80,63,159,164,74,174,113,102,74,185,158,99,220,184,187,244\")),bytes32(stringToBytes32(\"171,145,151,89,242,255,166,181,33,13,27,128,220,38,173,181,43,159,11,205,181,239,82,8,125,113,149,127,157,213,64,179\"))]"
            },
            {
              "js": "[[25,26,25,135,239,123,94,114,33,67,41,52,42,180,122,247,125,213,71,19,59,91,132,204,222,27,25,138,170,99,41,59],[40,19,20,72,155,218,145,153,71,56,58,190,78,212,91,12,2,208,113,41,163,139,238,25,237,120,221,156,65,6,66,221],[21,178,168,96,0,175,37,182,195,92,8,156,126,186,247,100,8,22,166,55,83,226,241,134,32,246,134,54,115,24,151,100],[169,183,71,120,126,66,241,216,206,212,11,174,108,102,148,77,126,69,34,31,97,228,253,187,97,30,59,196,43,21,132,39],[233,145,184,95,193,134,33,69,164,43,118,159,161,59,172,143,128,21,19,255,145,111,51,117,199,255,224,51,175,151,116,193],[244,142,67,3,33,50,58,11,191,224,172,232,253,135,25,99,82,27,159,196,189,109,154,94,77,252,82,21,245,68,100,211]]",
              "sol": "[bytes32(stringToBytes32(\"25,26,25,135,239,123,94,114,33,67,41,52,42,180,122,247,125,213,71,19,59,91,132,204,222,27,25,138,170,99,41,59\")),bytes32(stringToBytes32(\"40,19,20,72,155,218,145,153,71,56,58,190,78,212,91,12,2,208,113,41,163,139,238,25,237,120,221,156,65,6,66,221\")),bytes32(stringToBytes32(\"21,178,168,96,0,175,37,182,195,92,8,156,126,186,247,100,8,22,166,55,83,226,241,134,32,246,134,54,115,24,151,100\")),bytes32(stringToBytes32(\"169,183,71,120,126,66,241,216,206,212,11,174,108,102,148,77,126,69,34,31,97,228,253,187,97,30,59,196,43,21,132,39\")),bytes32(stringToBytes32(\"233,145,184,95,193,134,33,69,164,43,118,159,161,59,172,143,128,21,19,255,145,111,51,117,199,255,224,51,175,151,116,193\")),bytes32(stringToBytes32(\"244,142,67,3,33,50,58,11,191,224,172,232,253,135,25,99,82,27,159,196,189,109,154,94,77,252,82,21,245,68,100,211\"))]"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[226,144,80,160,225,76,252,208,37,134,181,103,25,47,178,131,140,255,169,11,58,247,233,18,90,155,103,130,153,101,149,73],[195,29,202,251,125,239,39,109,226,254,225,219,209,170,204,34,80,19,186,109,149,222,137,42,77,1,35,21,129,246,147,7],[180,175,4,28,162,185,52,222,86,90,136,183,65,13,214,172,157,208,50,252,130,84,143,135,127,130,223,173,103,137,22,26],[57,180,194,122,137,200,151,152,4,142,57,166,100,83,170,165,85,216,159,136,208,53,232,92,22,94,241,13,250,150,133,178],[205,63,180,222,122,115,159,74,188,13,151,30,70,201,181,118,80,63,159,164,74,174,113,102,74,185,158,99,220,184,187,244],[171,145,151,89,242,255,166,181,33,13,27,128,220,38,173,181,43,159,11,205,181,239,82,8,125,113,149,127,157,213,64,179]]",
                "sol": "[bytes32(stringToBytes32(\"226,144,80,160,225,76,252,208,37,134,181,103,25,47,178,131,140,255,169,11,58,247,233,18,90,155,103,130,153,101,149,73\")),bytes32(stringToBytes32(\"195,29,202,251,125,239,39,109,226,254,225,219,209,170,204,34,80,19,186,109,149,222,137,42,77,1,35,21,129,246,147,7\")),bytes32(stringToBytes32(\"180,175,4,28,162,185,52,222,86,90,136,183,65,13,214,172,157,208,50,252,130,84,143,135,127,130,223,173,103,137,22,26\")),bytes32(stringToBytes32(\"57,180,194,122,137,200,151,152,4,142,57,166,100,83,170,165,85,216,159,136,208,53,232,92,22,94,241,13,250,150,133,178\")),bytes32(stringToBytes32(\"205,63,180,222,122,115,159,74,188,13,151,30,70,201,181,118,80,63,159,164,74,174,113,102,74,185,158,99,220,184,187,244\")),bytes32(stringToBytes32(\"171,145,151,89,242,255,166,181,33,13,27,128,220,38,173,181,43,159,11,205,181,239,82,8,125,113,149,127,157,213,64,179\"))]"
              },
              {
                "js": "[[25,26,25,135,239,123,94,114,33,67,41,52,42,180,122,247,125,213,71,19,59,91,132,204,222,27,25,138,170,99,41,59],[40,19,20,72,155,218,145,153,71,56,58,190,78,212,91,12,2,208,113,41,163,139,238,25,237,120,221,156,65,6,66,221],[21,178,168,96,0,175,37,182,195,92,8,156,126,186,247,100,8,22,166,55,83,226,241,134,32,246,134,54,115,24,151,100],[169,183,71,120,126,66,241,216,206,212,11,174,108,102,148,77,126,69,34,31,97,228,253,187,97,30,59,196,43,21,132,39],[233,145,184,95,193,134,33,69,164,43,118,159,161,59,172,143,128,21,19,255,145,111,51,117,199,255,224,51,175,151,116,193],[244,142,67,3,33,50,58,11,191,224,172,232,253,135,25,99,82,27,159,196,189,109,154,94,77,252,82,21,245,68,100,211]]",
                "sol": "[bytes32(stringToBytes32(\"25,26,25,135,239,123,94,114,33,67,41,52,42,180,122,247,125,213,71,19,59,91,132,204,222,27,25,138,170,99,41,59\")),bytes32(stringToBytes32(\"40,19,20,72,155,218,145,153,71,56,58,190,78,212,91,12,2,208,113,41,163,139,238,25,237,120,221,156,65,6,66,221\")),bytes32(stringToBytes32(\"21,178,168,96,0,175,37,182,195,92,8,156,126,186,247,100,8,22,166,55,83,226,241,134,32,246,134,54,115,24,151,100\")),bytes32(stringToBytes32(\"169,183,71,120,126,66,241,216,206,212,11,174,108,102,148,77,126,69,34,31,97,228,253,187,97,30,59,196,43,21,132,39\")),bytes32(stringToBytes32(\"233,145,184,95,193,134,33,69,164,43,118,159,161,59,172,143,128,21,19,255,145,111,51,117,199,255,224,51,175,151,116,193\")),bytes32(stringToBytes32(\"244,142,67,3,33,50,58,11,191,224,172,232,253,135,25,99,82,27,159,196,189,109,154,94,77,252,82,21,245,68,100,211\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[108,90,35,99,29,215,74,237,171,62,225,216,202,90,103,177,56,0,204,127,169,182,125,30,62,110,156,85,161,29,205,233],[46,7,180,178,244,72,10,2,74,123,58,153,225,225,200,10,237,43,119,5,191,107,129,20,36,29,35,128,152,137,87,180],[188,163,124,231,37,12,144,122,29,153,87,3,216,35,104,183,157,12,196,203,223,177,57,186,224,135,7,247,33,17,120,180],[187,80,146,146,113,180,199,182,12,20,25,217,169,229,172,100,54,196,237,68,119,40,31,198,248,91,112,188,214,178,90,235],[81,218,91,191,61,20,68,214,252,159,173,50,28,202,95,242,165,130,236,102,154,209,92,123,185,8,32,46,202,151,243,103],[243,96,145,162,33,92,167,63,171,108,184,47,76,118,194,116,130,164,65,211,3,157,81,178,151,146,38,193,242,102,86,85],[32,239,70,82,247,208,196,237,235,247,251,179,10,218,33,49,226,40,215,178,83,163,77,134,206,114,151,171,185,107,115,35]]",
                "sol": "[stringToBytes32(\"168,122,112,121,168,87,216,35,46,118,77,147,146,6,109,29,28,15,223,43,22,57,92,135,182,168,180,224,145,57,38,253\"),stringToBytes32(\"62,107,43,217,116,44,208,132,229,230,169,164,190,41,193,114,245,108,145,16,143,206,84,246,10,215,243,58,228,16,102,138\"),stringToBytes32(\"140,175,61,244,180,255,193,62,77,170,255,156,87,180,116,212,72,231,235,19,175,239,65,37,101,241,19,183,204,203,179,122\"),stringToBytes32(\"168,222,213,187,255,126,87,20,239,128,227,225,138,204,249,115,115,237,249,143,82,230,18,242,10,182,77,246,72,244,198,156\"),stringToBytes32(\"112,220,107,229,0,101,91,248,118,129,86,24,223,11,19,2,239,155,60,116,58,11,174,68,86,96,82,118,23,185,247,144\"),stringToBytes32(\"14,78,53,177,177,41,27,69,69,122,111,101,192,188,194,209,112,151,136,201,236,58,40,197,0,121,50,102,137,7,163,56\"),stringToBytes32(\"39,203,219,221,199,142,138,143,155,131,142,63,221,46,66,67,128,235,52,222,127,36,105,146,232,66,20,36,226,83,8,147\")]"
              },
              {
                "js": "[[25,26,25,135,239,123,94,114,33,67,41,52,42,180,122,247,125,213,71,19,59,91,132,204,222,27,25,138,170,99,41,59],[40,19,20,72,155,218,145,153,71,56,58,190,78,212,91,12,2,208,113,41,163,139,238,25,237,120,221,156,65,6,66,221],[21,178,168,96,0,175,37,182,195,92,8,156,126,186,247,100,8,22,166,55,83,226,241,134,32,246,134,54,115,24,151,100],[169,183,71,120,126,66,241,216,206,212,11,174,108,102,148,77,126,69,34,31,97,228,253,187,97,30,59,196,43,21,132,39],[233,145,184,95,193,134,33,69,164,43,118,159,161,59,172,143,128,21,19,255,145,111,51,117,199,255,224,51,175,151,116,193],[244,142,67,3,33,50,58,11,191,224,172,232,253,135,25,99,82,27,159,196,189,109,154,94,77,252,82,21,245,68,100,211]]",
                "sol": "[bytes32(stringToBytes32(\"25,26,25,135,239,123,94,114,33,67,41,52,42,180,122,247,125,213,71,19,59,91,132,204,222,27,25,138,170,99,41,59\")),bytes32(stringToBytes32(\"40,19,20,72,155,218,145,153,71,56,58,190,78,212,91,12,2,208,113,41,163,139,238,25,237,120,221,156,65,6,66,221\")),bytes32(stringToBytes32(\"21,178,168,96,0,175,37,182,195,92,8,156,126,186,247,100,8,22,166,55,83,226,241,134,32,246,134,54,115,24,151,100\")),bytes32(stringToBytes32(\"169,183,71,120,126,66,241,216,206,212,11,174,108,102,148,77,126,69,34,31,97,228,253,187,97,30,59,196,43,21,132,39\")),bytes32(stringToBytes32(\"233,145,184,95,193,134,33,69,164,43,118,159,161,59,172,143,128,21,19,255,145,111,51,117,199,255,224,51,175,151,116,193\")),bytes32(stringToBytes32(\"244,142,67,3,33,50,58,11,191,224,172,232,253,135,25,99,82,27,159,196,189,109,154,94,77,252,82,21,245,68,100,211\"))]"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[25,26,25,135,239,123,94,114,33,67,41,52,42,180,122,247,125,213,71,19,59,91,132,204,222,27,25,138,170,99,41,59],[40,19,20,72,155,218,145,153,71,56,58,190,78,212,91,12,2,208,113,41,163,139,238,25,237,120,221,156,65,6,66,221],[21,178,168,96,0,175,37,182,195,92,8,156,126,186,247,100,8,22,166,55,83,226,241,134,32,246,134,54,115,24,151,100],[169,183,71,120,126,66,241,216,206,212,11,174,108,102,148,77,126,69,34,31,97,228,253,187,97,30,59,196,43,21,132,39],[233,145,184,95,193,134,33,69,164,43,118,159,161,59,172,143,128,21,19,255,145,111,51,117,199,255,224,51,175,151,116,193],[244,142,67,3,33,50,58,11,191,224,172,232,253,135,25,99,82,27,159,196,189,109,154,94,77,252,82,21,245,68,100,211]]",
                "sol": "[bytes32(stringToBytes32(\"25,26,25,135,239,123,94,114,33,67,41,52,42,180,122,247,125,213,71,19,59,91,132,204,222,27,25,138,170,99,41,59\")),bytes32(stringToBytes32(\"40,19,20,72,155,218,145,153,71,56,58,190,78,212,91,12,2,208,113,41,163,139,238,25,237,120,221,156,65,6,66,221\")),bytes32(stringToBytes32(\"21,178,168,96,0,175,37,182,195,92,8,156,126,186,247,100,8,22,166,55,83,226,241,134,32,246,134,54,115,24,151,100\")),bytes32(stringToBytes32(\"169,183,71,120,126,66,241,216,206,212,11,174,108,102,148,77,126,69,34,31,97,228,253,187,97,30,59,196,43,21,132,39\")),bytes32(stringToBytes32(\"233,145,184,95,193,134,33,69,164,43,118,159,161,59,172,143,128,21,19,255,145,111,51,117,199,255,224,51,175,151,116,193\")),bytes32(stringToBytes32(\"244,142,67,3,33,50,58,11,191,224,172,232,253,135,25,99,82,27,159,196,189,109,154,94,77,252,82,21,245,68,100,211\"))]"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.246ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"IsLibrary\"",
                "sol": "\"IsLibrary\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.251ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[1]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[95]",
              "sol": "[uint256(95)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[1]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[95]",
                "sol": "[uint256(95)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[8],accounts[0]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[95]",
                "sol": "[uint256(95)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[95]",
                "sol": "[uint256(95)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.253ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:12:39.254ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[8],accounts[8],accounts[7],accounts[7],accounts[3],accounts[4],accounts[0],accounts[9],accounts[2],accounts[3],accounts[1],accounts[6],accounts[0],accounts[1],accounts[7],accounts[7],accounts[0],accounts[0],accounts[2],accounts[6],accounts[3],accounts[8],accounts[3],accounts[9],accounts[9],accounts[5],accounts[4],accounts[0],accounts[0],accounts[6],accounts[4],accounts[0],accounts[7],accounts[3],accounts[4],accounts[5],accounts[1],accounts[1],accounts[7],accounts[6],accounts[7],accounts[0],accounts[9],accounts[4],accounts[5],accounts[3],accounts[4],accounts[7],accounts[6],accounts[4],accounts[1],accounts[6],accounts[3],accounts[4],accounts[1],accounts[3],accounts[5],accounts[5],accounts[7],accounts[6],accounts[5],accounts[5],accounts[5],accounts[3],accounts[7],accounts[7]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[8],accounts[8],accounts[7],accounts[7],accounts[3],accounts[4],accounts[0],accounts[9],accounts[2],accounts[3],accounts[1],accounts[6],accounts[0],accounts[1],accounts[7],accounts[7],accounts[0],accounts[0],accounts[2],accounts[6],accounts[3],accounts[8],accounts[3],accounts[9],accounts[9],accounts[5],accounts[4],accounts[0],accounts[0],accounts[6],accounts[4],accounts[0],accounts[7],accounts[3],accounts[4],accounts[5],accounts[1],accounts[1],accounts[7],accounts[6],accounts[7],accounts[0],accounts[9],accounts[4],accounts[5],accounts[3],accounts[4],accounts[7],accounts[6],accounts[4],accounts[1],accounts[6],accounts[3],accounts[4],accounts[1],accounts[3],accounts[5],accounts[5],accounts[7],accounts[6],accounts[5],accounts[5],accounts[5],accounts[3],accounts[7],accounts[7]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[8],accounts[8],accounts[7],accounts[7],accounts[3],accounts[4],accounts[0],accounts[9],accounts[2],accounts[3],accounts[1],accounts[6],accounts[0],accounts[1],accounts[7],accounts[7],accounts[0],accounts[0],accounts[2],accounts[6],accounts[3],accounts[8],accounts[3],accounts[9],accounts[9],accounts[5],accounts[4],accounts[0],accounts[0],accounts[6],accounts[4],accounts[0],accounts[7],accounts[3],accounts[4],accounts[5],accounts[1],accounts[1],accounts[7],accounts[6],accounts[7],accounts[0],accounts[9],accounts[4],accounts[5],accounts[3],accounts[4],accounts[7],accounts[6],accounts[4],accounts[1],accounts[6],accounts[3],accounts[4],accounts[1],accounts[3],accounts[5],accounts[5],accounts[7],accounts[6],accounts[5],accounts[5],accounts[5],accounts[3],accounts[7],accounts[7]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.258ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:12:39.258ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+973",
              "sol": "block.timestamp+973"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+973",
                "sol": "block.timestamp+973"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.263ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.268ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.272ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.279ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.283ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.286ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:12:39.287ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:12:39.288ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[1],accounts[0],accounts[6],accounts[7],accounts[4],accounts[7],accounts[5],accounts[6],accounts[5],accounts[7],accounts[8],accounts[0],accounts[2],accounts[6],accounts[0],accounts[3],accounts[9],accounts[9],accounts[3],accounts[2],accounts[3],accounts[8],accounts[3],accounts[3],accounts[0],accounts[8],accounts[3],accounts[0],accounts[2],accounts[6],accounts[3],accounts[7],accounts[6],accounts[8],accounts[3],accounts[5],accounts[0],accounts[3],accounts[2],accounts[0],accounts[9],accounts[3],accounts[1],accounts[3],accounts[4],accounts[0],accounts[2],accounts[7],accounts[8],accounts[2],accounts[3],accounts[7],accounts[0],accounts[2],accounts[8],accounts[6],accounts[2],accounts[4],accounts[3],accounts[2],accounts[3],accounts[8],accounts[9],accounts[1],accounts[5],accounts[1]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[1],accounts[0],accounts[6],accounts[7],accounts[4],accounts[7],accounts[5],accounts[6],accounts[5],accounts[7],accounts[8],accounts[0],accounts[2],accounts[6],accounts[0],accounts[3],accounts[9],accounts[9],accounts[3],accounts[2],accounts[3],accounts[8],accounts[3],accounts[3],accounts[0],accounts[8],accounts[3],accounts[0],accounts[2],accounts[6],accounts[3],accounts[7],accounts[6],accounts[8],accounts[3],accounts[5],accounts[0],accounts[3],accounts[2],accounts[0],accounts[9],accounts[3],accounts[1],accounts[3],accounts[4],accounts[0],accounts[2],accounts[7],accounts[8],accounts[2],accounts[3],accounts[7],accounts[0],accounts[2],accounts[8],accounts[6],accounts[2],accounts[4],accounts[3],accounts[2],accounts[3],accounts[8],accounts[9],accounts[1],accounts[5],accounts[1]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[1],accounts[0],accounts[6],accounts[7],accounts[4],accounts[7],accounts[5],accounts[6],accounts[5],accounts[7],accounts[8],accounts[0],accounts[2],accounts[6],accounts[0],accounts[3],accounts[9],accounts[9],accounts[3],accounts[2],accounts[3],accounts[8],accounts[3],accounts[3],accounts[0],accounts[8],accounts[3],accounts[0],accounts[2],accounts[6],accounts[3],accounts[7],accounts[6],accounts[8],accounts[3],accounts[5],accounts[0],accounts[3],accounts[2],accounts[0],accounts[9],accounts[3],accounts[1],accounts[3],accounts[4],accounts[0],accounts[2],accounts[7],accounts[8],accounts[2],accounts[3],accounts[7],accounts[0],accounts[2],accounts[8],accounts[6],accounts[2],accounts[4],accounts[3],accounts[2],accounts[3],accounts[8],accounts[9],accounts[1],accounts[5],accounts[1]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.290ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T20:12:39.291ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T20:12:39.291ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}