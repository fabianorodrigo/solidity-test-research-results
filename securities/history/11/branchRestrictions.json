,{
  "2020-11-11T04:21:32.580ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:21:39.014ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:21:45.559ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:21:52.030ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:21:58.551ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:05.173ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:11.890ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:18.703ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+690",
              "sol": "block.timestamp+690"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+690",
                "sol": "block.timestamp+690"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+690",
                "sol": "block.timestamp+690"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+690",
                "sol": "block.timestamp+690"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.609ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.610ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.612ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.616ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[5],accounts[2],accounts[6],accounts[4],accounts[3],accounts[5],accounts[6],accounts[8],accounts[0],accounts[4],accounts[4],accounts[9],accounts[6],accounts[5],accounts[9],accounts[9],accounts[7],accounts[8],accounts[0],accounts[3],accounts[5],accounts[3],accounts[5],accounts[4],accounts[0],accounts[0],accounts[0],accounts[3],accounts[6],accounts[1],accounts[4],accounts[9],accounts[5],accounts[9],accounts[1],accounts[2],accounts[3],accounts[5],accounts[1],accounts[0],accounts[0],accounts[5],accounts[3],accounts[3],accounts[8],accounts[5],accounts[5],accounts[6],accounts[9],accounts[4],accounts[5],accounts[5],accounts[0],accounts[4],accounts[7],accounts[7],accounts[9],accounts[5],accounts[7],accounts[9],accounts[8],accounts[4],accounts[3],accounts[3]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[2014223714,4,6,2,255,2,28,257,96,2014223714,9999,0,27,64,2,66,96,6,1338,95,254,1338,64,1532892063,64,28,1337,10001,1532892062,4,254,64,1532892062,64,2,0,28,6,64,1532892063,1337,3,29,1338,2014223715,1532892064,256,256,1,1532892062,9999,2014223715,27,1,65,66,28,9999,65,1,10000,64,97,4]",
              "sol": "[uint256(2014223714),uint256(4),uint256(6),uint256(2),uint256(255),uint256(2),uint256(28),uint256(257),uint256(96),uint256(2014223714),uint256(9999),uint256(0),uint256(27),uint256(64),uint256(2),uint256(66),uint256(96),uint256(6),uint256(1338),uint256(95),uint256(254),uint256(1338),uint256(64),uint256(1532892063),uint256(64),uint256(28),uint256(1337),uint256(10001),uint256(1532892062),uint256(4),uint256(254),uint256(64),uint256(1532892062),uint256(64),uint256(2),uint256(0),uint256(28),uint256(6),uint256(64),uint256(1532892063),uint256(1337),uint256(3),uint256(29),uint256(1338),uint256(2014223715),uint256(1532892064),uint256(256),uint256(256),uint256(1),uint256(1532892062),uint256(9999),uint256(2014223715),uint256(27),uint256(1),uint256(65),uint256(66),uint256(28),uint256(9999),uint256(65),uint256(1),uint256(10000),uint256(64),uint256(97),uint256(4)]"
            },
            {
              "js": "[3,97,2014223715,2014223714,254,1338,5,64,1532892063,1,26,27,1532892064,96,2,29,29,256,1336,3,64,29,1532892063,64,5,64,1336,9999,5,257,0,0,6,5,2014223714,28,10000,0,0,64,2014223714,254,256,97,66,4,65,29,29,1338,1338,29,1532892062,95,1338,254,10000,64,255,2014223714,1336,66,1532892064,1]",
              "sol": "[uint256(3),uint256(97),uint256(2014223715),uint256(2014223714),uint256(254),uint256(1338),uint256(5),uint256(64),uint256(1532892063),uint256(1),uint256(26),uint256(27),uint256(1532892064),uint256(96),uint256(2),uint256(29),uint256(29),uint256(256),uint256(1336),uint256(3),uint256(64),uint256(29),uint256(1532892063),uint256(64),uint256(5),uint256(64),uint256(1336),uint256(9999),uint256(5),uint256(257),uint256(0),uint256(0),uint256(6),uint256(5),uint256(2014223714),uint256(28),uint256(10000),uint256(0),uint256(0),uint256(64),uint256(2014223714),uint256(254),uint256(256),uint256(97),uint256(66),uint256(4),uint256(65),uint256(29),uint256(29),uint256(1338),uint256(1338),uint256(29),uint256(1532892062),uint256(95),uint256(1338),uint256(254),uint256(10000),uint256(64),uint256(255),uint256(2014223714),uint256(1336),uint256(66),uint256(1532892064),uint256(1)]"
            },
            {
              "js": "[[126,209,144,9,5,184,7,171,15,176,123,229,225,225,118,102,191,28,161,106,12,33,130,18,230,51,128,128,175,10,57,32],[44,238,81,108,87,2,167,141,210,163,111,92,4,160,110,219,83,60,119,246,225,42,100,186,50,209,192,254,104,84,167,98],[77,38,232,141,57,156,32,45,108,1,101,170,55,52,216,226,102,123,88,37,142,62,0,154,248,176,254,201,192,233,120,119],[47,153,131,189,76,55,184,117,138,138,25,177,171,70,100,92,70,189,138,212,54,110,148,129,72,43,15,127,4,195,222,211],[125,16,84,85,238,29,208,167,159,175,82,232,224,55,31,223,163,14,196,17,78,107,124,166,93,207,5,52,220,202,127,120],[103,219,247,109,148,34,143,203,175,208,59,50,157,8,179,165,237,228,29,140,209,89,108,241,134,182,104,91,188,30,237,1],[194,243,217,34,46,227,89,216,226,25,42,254,41,200,7,39,207,194,151,233,29,14,136,105,169,54,73,24,21,77,1,230],[16,183,138,155,126,185,32,150,10,114,254,102,173,181,131,213,22,88,222,96,128,211,15,48,160,217,5,148,25,77,106,235],[69,214,194,48,138,211,188,108,98,132,139,100,183,143,19,188,245,34,166,213,212,0,183,14,141,198,64,184,32,141,222,107],[117,52,90,132,103,107,175,35,197,10,31,154,6,140,104,75,85,7,66,33,32,228,37,202,194,176,208,192,188,3,29,168],[145,251,163,78,32,216,106,164,119,24,57,56,137,58,8,164,236,61,215,197,64,142,207,81,11,94,231,96,237,63,113,122],[215,171,81,218,105,72,230,130,72,160,10,227,240,115,26,112,250,134,209,175,8,169,93,153,17,219,80,186,82,140,249,185],[81,235,24,127,49,42,97,215,2,140,140,127,171,94,212,181,127,109,62,98,90,122,40,27,147,45,225,103,231,96,100,170],[89,147,36,55,39,52,40,34,239,45,149,82,15,121,170,108,134,231,101,247,123,146,108,109,86,122,128,248,216,145,239,112],[226,161,228,32,109,225,194,119,218,67,250,98,172,24,78,224,47,80,68,178,211,246,64,65,130,255,56,59,111,2,132,109],[190,225,80,175,91,119,155,26,153,227,139,16,87,62,5,79,150,82,121,87,248,22,21,29,60,204,162,176,140,159,227,177],[113,64,197,253,54,165,131,175,125,127,111,47,72,232,202,82,193,203,33,63,98,50,4,37,111,225,194,176,101,229,81,194],[66,53,196,205,41,103,235,223,246,180,248,102,190,157,85,121,255,236,251,173,109,51,163,169,231,241,78,49,239,81,150,211],[36,124,184,188,184,8,124,30,250,48,223,141,208,152,96,194,240,234,142,246,95,84,66,57,164,143,8,218,74,41,16,41],[110,63,195,57,105,219,16,166,175,49,179,241,114,24,200,17,10,222,210,65,165,42,172,41,182,75,178,142,171,233,241,186],[201,242,53,83,149,118,221,211,33,78,73,185,76,219,131,135,147,210,104,241,67,22,223,252,240,182,51,116,11,225,230,247],[83,139,201,255,129,95,0,240,216,4,49,3,226,207,62,250,159,159,9,131,38,132,120,198,56,241,122,78,36,210,253,204],[6,255,82,76,128,74,38,223,196,194,30,227,124,68,137,216,212,217,10,58,232,29,92,39,160,14,90,20,224,45,187,187],[107,15,109,220,98,245,214,145,41,227,186,210,124,238,24,244,117,173,101,47,94,139,126,73,162,32,45,239,222,79,249,165],[150,131,252,101,107,184,213,58,126,9,5,93,22,17,1,15,85,45,141,114,2,157,101,12,171,207,27,216,134,98,8,161],[53,13,10,236,80,67,28,227,255,63,164,34,29,142,156,224,61,80,45,37,99,127,243,183,181,63,68,118,157,65,219,52],[16,99,42,187,116,24,1,216,5,233,195,220,60,39,172,149,64,238,46,181,58,50,4,68,179,64,58,204,173,204,133,125],[251,173,4,39,186,131,63,212,218,42,58,52,97,190,122,214,145,11,219,71,245,41,41,89,183,82,126,175,130,81,219,72],[241,51,235,176,5,199,78,209,116,114,141,119,141,167,228,159,238,234,251,109,239,96,176,237,127,157,193,220,221,57,96,239],[139,152,121,241,2,44,91,94,82,219,44,218,106,240,174,141,103,26,102,132,132,139,98,138,143,181,126,226,141,206,15,97],[255,252,251,240,85,249,74,95,241,153,150,63,38,251,120,11,243,112,16,124,76,94,112,140,142,140,231,131,137,22,131,47],[172,106,38,5,229,72,193,163,205,189,117,140,14,79,10,221,215,240,139,74,193,69,114,79,167,130,112,233,60,74,21,96],[237,115,97,245,60,201,20,235,94,31,128,215,44,117,149,202,168,10,235,69,99,78,73,241,213,69,180,144,101,220,128,68],[103,101,209,133,173,65,92,163,253,205,48,60,58,188,231,228,255,140,27,69,131,129,208,94,188,197,232,174,21,89,93,181],[201,121,6,109,5,201,218,14,171,40,173,61,135,82,213,1,105,198,110,35,137,130,145,76,150,54,31,154,116,246,124,235],[243,3,255,86,180,229,241,229,0,151,119,35,99,144,178,86,239,228,243,69,75,200,47,136,171,216,188,38,154,250,240,56],[249,160,103,3,44,182,167,78,151,36,154,109,10,164,207,67,70,219,14,151,111,141,16,160,124,216,205,118,197,232,67,223],[41,174,23,116,34,222,87,0,155,123,204,167,158,15,43,244,198,234,195,175,250,144,143,7,107,88,222,192,30,39,81,188],[255,175,136,116,131,50,202,132,182,120,214,122,148,22,143,25,75,5,118,136,55,13,144,38,101,30,103,19,65,171,102,33],[216,5,38,128,16,234,64,229,249,186,20,66,106,129,193,26,6,231,209,139,107,58,16,216,179,88,139,29,225,211,90,14],[112,126,242,149,185,56,75,125,109,237,55,86,237,32,179,92,230,238,14,202,190,14,194,128,246,52,107,56,249,149,245,58],[156,91,121,158,228,3,196,74,176,199,14,225,168,242,186,114,114,144,89,20,22,94,99,85,247,209,23,100,237,72,55,75],[191,192,56,24,221,14,108,88,116,123,145,29,114,51,125,33,184,178,206,157,171,76,197,162,206,116,12,189,231,194,131,213],[125,155,30,193,135,50,231,248,6,51,56,16,168,204,204,89,212,132,101,121,85,89,224,97,93,141,112,60,36,61,7,193],[62,124,8,141,217,63,237,85,236,186,58,248,142,173,24,180,2,254,131,218,170,30,1,227,175,209,73,126,63,145,226,189],[232,84,253,228,193,237,179,73,49,129,71,150,183,52,117,192,143,112,245,106,245,220,4,224,130,48,53,175,84,11,57,166],[106,172,243,3,37,15,235,112,239,243,56,37,13,17,237,205,161,111,251,230,213,194,103,205,52,92,157,201,54,88,116,24],[222,207,161,181,47,28,223,91,72,182,146,64,12,93,103,99,190,11,53,103,92,62,62,55,37,62,84,235,2,228,46,120],[190,111,167,215,185,240,230,64,217,50,140,20,2,154,208,186,192,220,153,98,230,242,216,242,35,112,70,54,157,174,207,173],[243,195,209,172,23,52,136,250,232,132,194,74,46,251,98,95,46,145,42,87,121,97,20,131,253,242,244,63,214,57,216,208],[200,214,160,122,24,179,46,32,235,208,88,128,6,95,183,6,200,183,226,141,210,66,163,221,174,242,193,60,208,223,168,154],[11,206,252,104,102,21,223,38,216,100,187,149,167,54,130,212,244,55,115,229,84,128,95,80,6,203,14,120,112,109,62,127],[108,8,186,118,66,77,172,100,60,30,222,188,132,124,40,162,42,254,60,202,210,180,188,145,21,119,246,61,162,50,241,15],[208,52,62,26,124,173,241,190,195,91,102,130,183,153,137,134,239,173,215,8,52,133,126,235,204,240,134,197,61,210,13,19],[158,38,53,167,217,40,133,150,32,117,182,220,127,125,167,142,44,125,144,108,187,13,55,153,252,225,89,158,201,25,5,177],[75,249,53,120,104,194,173,56,6,151,58,55,118,99,243,79,64,216,212,68,251,97,4,173,82,64,210,174,49,15,103,185],[22,63,43,156,64,148,17,122,38,111,204,144,61,162,237,221,249,194,149,153,71,155,84,153,230,224,67,26,72,200,209,32],[34,224,29,56,233,48,155,37,254,131,79,232,132,174,242,91,247,228,240,246,193,29,92,144,82,21,136,202,4,51,62,209],[39,208,66,222,123,192,185,177,97,39,2,61,184,204,166,121,176,232,30,179,165,69,99,235,50,248,186,29,40,169,207,193],[101,63,240,52,33,215,136,212,250,111,252,93,94,170,244,77,46,243,212,232,210,102,133,147,95,168,142,29,115,172,71,153],[184,70,96,41,118,165,175,138,169,56,77,1,198,193,38,224,79,220,41,225,135,48,78,145,240,179,218,77,181,171,113,241],[183,155,137,80,232,156,0,117,46,65,117,76,74,25,215,90,118,119,155,28,128,72,119,23,167,194,51,220,239,41,39,19],[82,35,23,102,162,38,184,28,189,170,118,216,171,151,70,99,28,233,89,126,255,254,147,198,73,27,108,1,36,205,216,200],[38,163,78,34,146,171,65,122,160,4,205,156,205,155,142,250,81,243,134,132,6,69,43,186,190,230,208,181,88,116,156,184]]",
              "sol": "[bytes32(stringToBytes32(\"126,209,144,9,5,184,7,171,15,176,123,229,225,225,118,102,191,28,161,106,12,33,130,18,230,51,128,128,175,10,57,32\")),bytes32(stringToBytes32(\"44,238,81,108,87,2,167,141,210,163,111,92,4,160,110,219,83,60,119,246,225,42,100,186,50,209,192,254,104,84,167,98\")),bytes32(stringToBytes32(\"77,38,232,141,57,156,32,45,108,1,101,170,55,52,216,226,102,123,88,37,142,62,0,154,248,176,254,201,192,233,120,119\")),bytes32(stringToBytes32(\"47,153,131,189,76,55,184,117,138,138,25,177,171,70,100,92,70,189,138,212,54,110,148,129,72,43,15,127,4,195,222,211\")),bytes32(stringToBytes32(\"125,16,84,85,238,29,208,167,159,175,82,232,224,55,31,223,163,14,196,17,78,107,124,166,93,207,5,52,220,202,127,120\")),bytes32(stringToBytes32(\"103,219,247,109,148,34,143,203,175,208,59,50,157,8,179,165,237,228,29,140,209,89,108,241,134,182,104,91,188,30,237,1\")),bytes32(stringToBytes32(\"194,243,217,34,46,227,89,216,226,25,42,254,41,200,7,39,207,194,151,233,29,14,136,105,169,54,73,24,21,77,1,230\")),bytes32(stringToBytes32(\"16,183,138,155,126,185,32,150,10,114,254,102,173,181,131,213,22,88,222,96,128,211,15,48,160,217,5,148,25,77,106,235\")),bytes32(stringToBytes32(\"69,214,194,48,138,211,188,108,98,132,139,100,183,143,19,188,245,34,166,213,212,0,183,14,141,198,64,184,32,141,222,107\")),bytes32(stringToBytes32(\"117,52,90,132,103,107,175,35,197,10,31,154,6,140,104,75,85,7,66,33,32,228,37,202,194,176,208,192,188,3,29,168\")),bytes32(stringToBytes32(\"145,251,163,78,32,216,106,164,119,24,57,56,137,58,8,164,236,61,215,197,64,142,207,81,11,94,231,96,237,63,113,122\")),bytes32(stringToBytes32(\"215,171,81,218,105,72,230,130,72,160,10,227,240,115,26,112,250,134,209,175,8,169,93,153,17,219,80,186,82,140,249,185\")),bytes32(stringToBytes32(\"81,235,24,127,49,42,97,215,2,140,140,127,171,94,212,181,127,109,62,98,90,122,40,27,147,45,225,103,231,96,100,170\")),bytes32(stringToBytes32(\"89,147,36,55,39,52,40,34,239,45,149,82,15,121,170,108,134,231,101,247,123,146,108,109,86,122,128,248,216,145,239,112\")),bytes32(stringToBytes32(\"226,161,228,32,109,225,194,119,218,67,250,98,172,24,78,224,47,80,68,178,211,246,64,65,130,255,56,59,111,2,132,109\")),bytes32(stringToBytes32(\"190,225,80,175,91,119,155,26,153,227,139,16,87,62,5,79,150,82,121,87,248,22,21,29,60,204,162,176,140,159,227,177\")),bytes32(stringToBytes32(\"113,64,197,253,54,165,131,175,125,127,111,47,72,232,202,82,193,203,33,63,98,50,4,37,111,225,194,176,101,229,81,194\")),bytes32(stringToBytes32(\"66,53,196,205,41,103,235,223,246,180,248,102,190,157,85,121,255,236,251,173,109,51,163,169,231,241,78,49,239,81,150,211\")),bytes32(stringToBytes32(\"36,124,184,188,184,8,124,30,250,48,223,141,208,152,96,194,240,234,142,246,95,84,66,57,164,143,8,218,74,41,16,41\")),bytes32(stringToBytes32(\"110,63,195,57,105,219,16,166,175,49,179,241,114,24,200,17,10,222,210,65,165,42,172,41,182,75,178,142,171,233,241,186\")),bytes32(stringToBytes32(\"201,242,53,83,149,118,221,211,33,78,73,185,76,219,131,135,147,210,104,241,67,22,223,252,240,182,51,116,11,225,230,247\")),bytes32(stringToBytes32(\"83,139,201,255,129,95,0,240,216,4,49,3,226,207,62,250,159,159,9,131,38,132,120,198,56,241,122,78,36,210,253,204\")),bytes32(stringToBytes32(\"6,255,82,76,128,74,38,223,196,194,30,227,124,68,137,216,212,217,10,58,232,29,92,39,160,14,90,20,224,45,187,187\")),bytes32(stringToBytes32(\"107,15,109,220,98,245,214,145,41,227,186,210,124,238,24,244,117,173,101,47,94,139,126,73,162,32,45,239,222,79,249,165\")),bytes32(stringToBytes32(\"150,131,252,101,107,184,213,58,126,9,5,93,22,17,1,15,85,45,141,114,2,157,101,12,171,207,27,216,134,98,8,161\")),bytes32(stringToBytes32(\"53,13,10,236,80,67,28,227,255,63,164,34,29,142,156,224,61,80,45,37,99,127,243,183,181,63,68,118,157,65,219,52\")),bytes32(stringToBytes32(\"16,99,42,187,116,24,1,216,5,233,195,220,60,39,172,149,64,238,46,181,58,50,4,68,179,64,58,204,173,204,133,125\")),bytes32(stringToBytes32(\"251,173,4,39,186,131,63,212,218,42,58,52,97,190,122,214,145,11,219,71,245,41,41,89,183,82,126,175,130,81,219,72\")),bytes32(stringToBytes32(\"241,51,235,176,5,199,78,209,116,114,141,119,141,167,228,159,238,234,251,109,239,96,176,237,127,157,193,220,221,57,96,239\")),bytes32(stringToBytes32(\"139,152,121,241,2,44,91,94,82,219,44,218,106,240,174,141,103,26,102,132,132,139,98,138,143,181,126,226,141,206,15,97\")),bytes32(stringToBytes32(\"255,252,251,240,85,249,74,95,241,153,150,63,38,251,120,11,243,112,16,124,76,94,112,140,142,140,231,131,137,22,131,47\")),bytes32(stringToBytes32(\"172,106,38,5,229,72,193,163,205,189,117,140,14,79,10,221,215,240,139,74,193,69,114,79,167,130,112,233,60,74,21,96\")),bytes32(stringToBytes32(\"237,115,97,245,60,201,20,235,94,31,128,215,44,117,149,202,168,10,235,69,99,78,73,241,213,69,180,144,101,220,128,68\")),bytes32(stringToBytes32(\"103,101,209,133,173,65,92,163,253,205,48,60,58,188,231,228,255,140,27,69,131,129,208,94,188,197,232,174,21,89,93,181\")),bytes32(stringToBytes32(\"201,121,6,109,5,201,218,14,171,40,173,61,135,82,213,1,105,198,110,35,137,130,145,76,150,54,31,154,116,246,124,235\")),bytes32(stringToBytes32(\"243,3,255,86,180,229,241,229,0,151,119,35,99,144,178,86,239,228,243,69,75,200,47,136,171,216,188,38,154,250,240,56\")),bytes32(stringToBytes32(\"249,160,103,3,44,182,167,78,151,36,154,109,10,164,207,67,70,219,14,151,111,141,16,160,124,216,205,118,197,232,67,223\")),bytes32(stringToBytes32(\"41,174,23,116,34,222,87,0,155,123,204,167,158,15,43,244,198,234,195,175,250,144,143,7,107,88,222,192,30,39,81,188\")),bytes32(stringToBytes32(\"255,175,136,116,131,50,202,132,182,120,214,122,148,22,143,25,75,5,118,136,55,13,144,38,101,30,103,19,65,171,102,33\")),bytes32(stringToBytes32(\"216,5,38,128,16,234,64,229,249,186,20,66,106,129,193,26,6,231,209,139,107,58,16,216,179,88,139,29,225,211,90,14\")),bytes32(stringToBytes32(\"112,126,242,149,185,56,75,125,109,237,55,86,237,32,179,92,230,238,14,202,190,14,194,128,246,52,107,56,249,149,245,58\")),bytes32(stringToBytes32(\"156,91,121,158,228,3,196,74,176,199,14,225,168,242,186,114,114,144,89,20,22,94,99,85,247,209,23,100,237,72,55,75\")),bytes32(stringToBytes32(\"191,192,56,24,221,14,108,88,116,123,145,29,114,51,125,33,184,178,206,157,171,76,197,162,206,116,12,189,231,194,131,213\")),bytes32(stringToBytes32(\"125,155,30,193,135,50,231,248,6,51,56,16,168,204,204,89,212,132,101,121,85,89,224,97,93,141,112,60,36,61,7,193\")),bytes32(stringToBytes32(\"62,124,8,141,217,63,237,85,236,186,58,248,142,173,24,180,2,254,131,218,170,30,1,227,175,209,73,126,63,145,226,189\")),bytes32(stringToBytes32(\"232,84,253,228,193,237,179,73,49,129,71,150,183,52,117,192,143,112,245,106,245,220,4,224,130,48,53,175,84,11,57,166\")),bytes32(stringToBytes32(\"106,172,243,3,37,15,235,112,239,243,56,37,13,17,237,205,161,111,251,230,213,194,103,205,52,92,157,201,54,88,116,24\")),bytes32(stringToBytes32(\"222,207,161,181,47,28,223,91,72,182,146,64,12,93,103,99,190,11,53,103,92,62,62,55,37,62,84,235,2,228,46,120\")),bytes32(stringToBytes32(\"190,111,167,215,185,240,230,64,217,50,140,20,2,154,208,186,192,220,153,98,230,242,216,242,35,112,70,54,157,174,207,173\")),bytes32(stringToBytes32(\"243,195,209,172,23,52,136,250,232,132,194,74,46,251,98,95,46,145,42,87,121,97,20,131,253,242,244,63,214,57,216,208\")),bytes32(stringToBytes32(\"200,214,160,122,24,179,46,32,235,208,88,128,6,95,183,6,200,183,226,141,210,66,163,221,174,242,193,60,208,223,168,154\")),bytes32(stringToBytes32(\"11,206,252,104,102,21,223,38,216,100,187,149,167,54,130,212,244,55,115,229,84,128,95,80,6,203,14,120,112,109,62,127\")),bytes32(stringToBytes32(\"108,8,186,118,66,77,172,100,60,30,222,188,132,124,40,162,42,254,60,202,210,180,188,145,21,119,246,61,162,50,241,15\")),bytes32(stringToBytes32(\"208,52,62,26,124,173,241,190,195,91,102,130,183,153,137,134,239,173,215,8,52,133,126,235,204,240,134,197,61,210,13,19\")),bytes32(stringToBytes32(\"158,38,53,167,217,40,133,150,32,117,182,220,127,125,167,142,44,125,144,108,187,13,55,153,252,225,89,158,201,25,5,177\")),bytes32(stringToBytes32(\"75,249,53,120,104,194,173,56,6,151,58,55,118,99,243,79,64,216,212,68,251,97,4,173,82,64,210,174,49,15,103,185\")),bytes32(stringToBytes32(\"22,63,43,156,64,148,17,122,38,111,204,144,61,162,237,221,249,194,149,153,71,155,84,153,230,224,67,26,72,200,209,32\")),bytes32(stringToBytes32(\"34,224,29,56,233,48,155,37,254,131,79,232,132,174,242,91,247,228,240,246,193,29,92,144,82,21,136,202,4,51,62,209\")),bytes32(stringToBytes32(\"39,208,66,222,123,192,185,177,97,39,2,61,184,204,166,121,176,232,30,179,165,69,99,235,50,248,186,29,40,169,207,193\")),bytes32(stringToBytes32(\"101,63,240,52,33,215,136,212,250,111,252,93,94,170,244,77,46,243,212,232,210,102,133,147,95,168,142,29,115,172,71,153\")),bytes32(stringToBytes32(\"184,70,96,41,118,165,175,138,169,56,77,1,198,193,38,224,79,220,41,225,135,48,78,145,240,179,218,77,181,171,113,241\")),bytes32(stringToBytes32(\"183,155,137,80,232,156,0,117,46,65,117,76,74,25,215,90,118,119,155,28,128,72,119,23,167,194,51,220,239,41,39,19\")),bytes32(stringToBytes32(\"82,35,23,102,162,38,184,28,189,170,118,216,171,151,70,99,28,233,89,126,255,254,147,198,73,27,108,1,36,205,216,200\")),bytes32(stringToBytes32(\"38,163,78,34,146,171,65,122,160,4,205,156,205,155,142,250,81,243,134,132,6,69,43,186,190,230,208,181,88,116,156,184\"))]"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[5],accounts[2],accounts[6],accounts[4],accounts[3],accounts[5],accounts[6],accounts[8],accounts[0],accounts[4],accounts[4],accounts[9],accounts[6],accounts[5],accounts[9],accounts[9],accounts[7],accounts[8],accounts[0],accounts[3],accounts[5],accounts[3],accounts[5],accounts[4],accounts[0],accounts[0],accounts[0],accounts[3],accounts[6],accounts[1],accounts[4],accounts[9],accounts[5],accounts[9],accounts[1],accounts[2],accounts[3],accounts[5],accounts[1],accounts[0],accounts[0],accounts[5],accounts[3],accounts[3],accounts[8],accounts[5],accounts[5],accounts[6],accounts[9],accounts[4],accounts[5],accounts[5],accounts[0],accounts[4],accounts[7],accounts[7],accounts[9],accounts[5],accounts[7],accounts[9],accounts[8],accounts[4],accounts[3],accounts[3]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[2014223714,4,6,2,255,2,28,257,96,2014223714,9999,0,27,64,2,66,96,6,1338,95,254,1338,64,1532892063,64,28,1337,10001,1532892062,4,254,64,1532892062,64,2,0,28,6,64,1532892063,1337,3,29,1338,2014223715,1532892064,256,256,1,1532892062,9999,2014223715,27,1,65,66,28,9999,65,1,10000,64,97,4]",
                "sol": "[uint256(2014223714),uint256(4),uint256(6),uint256(2),uint256(255),uint256(2),uint256(28),uint256(257),uint256(96),uint256(2014223714),uint256(9999),uint256(0),uint256(27),uint256(64),uint256(2),uint256(66),uint256(96),uint256(6),uint256(1338),uint256(95),uint256(254),uint256(1338),uint256(64),uint256(1532892063),uint256(64),uint256(28),uint256(1337),uint256(10001),uint256(1532892062),uint256(4),uint256(254),uint256(64),uint256(1532892062),uint256(64),uint256(2),uint256(0),uint256(28),uint256(6),uint256(64),uint256(1532892063),uint256(1337),uint256(3),uint256(29),uint256(1338),uint256(2014223715),uint256(1532892064),uint256(256),uint256(256),uint256(1),uint256(1532892062),uint256(9999),uint256(2014223715),uint256(27),uint256(1),uint256(65),uint256(66),uint256(28),uint256(9999),uint256(65),uint256(1),uint256(10000),uint256(64),uint256(97),uint256(4)]"
              },
              {
                "js": "[3,97,2014223715,2014223714,254,1338,5,64,1532892063,1,26,27,1532892064,96,2,29,29,256,1336,3,64,29,1532892063,64,5,64,1336,9999,5,257,0,0,6,5,2014223714,28,10000,0,0,64,2014223714,254,256,97,66,4,65,29,29,1338,1338,29,1532892062,95,1338,254,10000,64,255,2014223714,1336,66,1532892064,1]",
                "sol": "[uint256(3),uint256(97),uint256(2014223715),uint256(2014223714),uint256(254),uint256(1338),uint256(5),uint256(64),uint256(1532892063),uint256(1),uint256(26),uint256(27),uint256(1532892064),uint256(96),uint256(2),uint256(29),uint256(29),uint256(256),uint256(1336),uint256(3),uint256(64),uint256(29),uint256(1532892063),uint256(64),uint256(5),uint256(64),uint256(1336),uint256(9999),uint256(5),uint256(257),uint256(0),uint256(0),uint256(6),uint256(5),uint256(2014223714),uint256(28),uint256(10000),uint256(0),uint256(0),uint256(64),uint256(2014223714),uint256(254),uint256(256),uint256(97),uint256(66),uint256(4),uint256(65),uint256(29),uint256(29),uint256(1338),uint256(1338),uint256(29),uint256(1532892062),uint256(95),uint256(1338),uint256(254),uint256(10000),uint256(64),uint256(255),uint256(2014223714),uint256(1336),uint256(66),uint256(1532892064),uint256(1)]"
              },
              {
                "js": "[[126,209,144,9,5,184,7,171,15,176,123,229,225,225,118,102,191,28,161,106,12,33,130,18,230,51,128,128,175,10,57,32],[44,238,81,108,87,2,167,141,210,163,111,92,4,160,110,219,83,60,119,246,225,42,100,186,50,209,192,254,104,84,167,98],[77,38,232,141,57,156,32,45,108,1,101,170,55,52,216,226,102,123,88,37,142,62,0,154,248,176,254,201,192,233,120,119],[47,153,131,189,76,55,184,117,138,138,25,177,171,70,100,92,70,189,138,212,54,110,148,129,72,43,15,127,4,195,222,211],[125,16,84,85,238,29,208,167,159,175,82,232,224,55,31,223,163,14,196,17,78,107,124,166,93,207,5,52,220,202,127,120],[103,219,247,109,148,34,143,203,175,208,59,50,157,8,179,165,237,228,29,140,209,89,108,241,134,182,104,91,188,30,237,1],[194,243,217,34,46,227,89,216,226,25,42,254,41,200,7,39,207,194,151,233,29,14,136,105,169,54,73,24,21,77,1,230],[16,183,138,155,126,185,32,150,10,114,254,102,173,181,131,213,22,88,222,96,128,211,15,48,160,217,5,148,25,77,106,235],[69,214,194,48,138,211,188,108,98,132,139,100,183,143,19,188,245,34,166,213,212,0,183,14,141,198,64,184,32,141,222,107],[117,52,90,132,103,107,175,35,197,10,31,154,6,140,104,75,85,7,66,33,32,228,37,202,194,176,208,192,188,3,29,168],[145,251,163,78,32,216,106,164,119,24,57,56,137,58,8,164,236,61,215,197,64,142,207,81,11,94,231,96,237,63,113,122],[215,171,81,218,105,72,230,130,72,160,10,227,240,115,26,112,250,134,209,175,8,169,93,153,17,219,80,186,82,140,249,185],[81,235,24,127,49,42,97,215,2,140,140,127,171,94,212,181,127,109,62,98,90,122,40,27,147,45,225,103,231,96,100,170],[89,147,36,55,39,52,40,34,239,45,149,82,15,121,170,108,134,231,101,247,123,146,108,109,86,122,128,248,216,145,239,112],[226,161,228,32,109,225,194,119,218,67,250,98,172,24,78,224,47,80,68,178,211,246,64,65,130,255,56,59,111,2,132,109],[190,225,80,175,91,119,155,26,153,227,139,16,87,62,5,79,150,82,121,87,248,22,21,29,60,204,162,176,140,159,227,177],[113,64,197,253,54,165,131,175,125,127,111,47,72,232,202,82,193,203,33,63,98,50,4,37,111,225,194,176,101,229,81,194],[66,53,196,205,41,103,235,223,246,180,248,102,190,157,85,121,255,236,251,173,109,51,163,169,231,241,78,49,239,81,150,211],[36,124,184,188,184,8,124,30,250,48,223,141,208,152,96,194,240,234,142,246,95,84,66,57,164,143,8,218,74,41,16,41],[110,63,195,57,105,219,16,166,175,49,179,241,114,24,200,17,10,222,210,65,165,42,172,41,182,75,178,142,171,233,241,186],[201,242,53,83,149,118,221,211,33,78,73,185,76,219,131,135,147,210,104,241,67,22,223,252,240,182,51,116,11,225,230,247],[83,139,201,255,129,95,0,240,216,4,49,3,226,207,62,250,159,159,9,131,38,132,120,198,56,241,122,78,36,210,253,204],[6,255,82,76,128,74,38,223,196,194,30,227,124,68,137,216,212,217,10,58,232,29,92,39,160,14,90,20,224,45,187,187],[107,15,109,220,98,245,214,145,41,227,186,210,124,238,24,244,117,173,101,47,94,139,126,73,162,32,45,239,222,79,249,165],[150,131,252,101,107,184,213,58,126,9,5,93,22,17,1,15,85,45,141,114,2,157,101,12,171,207,27,216,134,98,8,161],[53,13,10,236,80,67,28,227,255,63,164,34,29,142,156,224,61,80,45,37,99,127,243,183,181,63,68,118,157,65,219,52],[16,99,42,187,116,24,1,216,5,233,195,220,60,39,172,149,64,238,46,181,58,50,4,68,179,64,58,204,173,204,133,125],[251,173,4,39,186,131,63,212,218,42,58,52,97,190,122,214,145,11,219,71,245,41,41,89,183,82,126,175,130,81,219,72],[241,51,235,176,5,199,78,209,116,114,141,119,141,167,228,159,238,234,251,109,239,96,176,237,127,157,193,220,221,57,96,239],[139,152,121,241,2,44,91,94,82,219,44,218,106,240,174,141,103,26,102,132,132,139,98,138,143,181,126,226,141,206,15,97],[255,252,251,240,85,249,74,95,241,153,150,63,38,251,120,11,243,112,16,124,76,94,112,140,142,140,231,131,137,22,131,47],[172,106,38,5,229,72,193,163,205,189,117,140,14,79,10,221,215,240,139,74,193,69,114,79,167,130,112,233,60,74,21,96],[237,115,97,245,60,201,20,235,94,31,128,215,44,117,149,202,168,10,235,69,99,78,73,241,213,69,180,144,101,220,128,68],[103,101,209,133,173,65,92,163,253,205,48,60,58,188,231,228,255,140,27,69,131,129,208,94,188,197,232,174,21,89,93,181],[201,121,6,109,5,201,218,14,171,40,173,61,135,82,213,1,105,198,110,35,137,130,145,76,150,54,31,154,116,246,124,235],[243,3,255,86,180,229,241,229,0,151,119,35,99,144,178,86,239,228,243,69,75,200,47,136,171,216,188,38,154,250,240,56],[249,160,103,3,44,182,167,78,151,36,154,109,10,164,207,67,70,219,14,151,111,141,16,160,124,216,205,118,197,232,67,223],[41,174,23,116,34,222,87,0,155,123,204,167,158,15,43,244,198,234,195,175,250,144,143,7,107,88,222,192,30,39,81,188],[255,175,136,116,131,50,202,132,182,120,214,122,148,22,143,25,75,5,118,136,55,13,144,38,101,30,103,19,65,171,102,33],[216,5,38,128,16,234,64,229,249,186,20,66,106,129,193,26,6,231,209,139,107,58,16,216,179,88,139,29,225,211,90,14],[112,126,242,149,185,56,75,125,109,237,55,86,237,32,179,92,230,238,14,202,190,14,194,128,246,52,107,56,249,149,245,58],[156,91,121,158,228,3,196,74,176,199,14,225,168,242,186,114,114,144,89,20,22,94,99,85,247,209,23,100,237,72,55,75],[191,192,56,24,221,14,108,88,116,123,145,29,114,51,125,33,184,178,206,157,171,76,197,162,206,116,12,189,231,194,131,213],[125,155,30,193,135,50,231,248,6,51,56,16,168,204,204,89,212,132,101,121,85,89,224,97,93,141,112,60,36,61,7,193],[62,124,8,141,217,63,237,85,236,186,58,248,142,173,24,180,2,254,131,218,170,30,1,227,175,209,73,126,63,145,226,189],[232,84,253,228,193,237,179,73,49,129,71,150,183,52,117,192,143,112,245,106,245,220,4,224,130,48,53,175,84,11,57,166],[106,172,243,3,37,15,235,112,239,243,56,37,13,17,237,205,161,111,251,230,213,194,103,205,52,92,157,201,54,88,116,24],[222,207,161,181,47,28,223,91,72,182,146,64,12,93,103,99,190,11,53,103,92,62,62,55,37,62,84,235,2,228,46,120],[190,111,167,215,185,240,230,64,217,50,140,20,2,154,208,186,192,220,153,98,230,242,216,242,35,112,70,54,157,174,207,173],[243,195,209,172,23,52,136,250,232,132,194,74,46,251,98,95,46,145,42,87,121,97,20,131,253,242,244,63,214,57,216,208],[200,214,160,122,24,179,46,32,235,208,88,128,6,95,183,6,200,183,226,141,210,66,163,221,174,242,193,60,208,223,168,154],[11,206,252,104,102,21,223,38,216,100,187,149,167,54,130,212,244,55,115,229,84,128,95,80,6,203,14,120,112,109,62,127],[108,8,186,118,66,77,172,100,60,30,222,188,132,124,40,162,42,254,60,202,210,180,188,145,21,119,246,61,162,50,241,15],[208,52,62,26,124,173,241,190,195,91,102,130,183,153,137,134,239,173,215,8,52,133,126,235,204,240,134,197,61,210,13,19],[158,38,53,167,217,40,133,150,32,117,182,220,127,125,167,142,44,125,144,108,187,13,55,153,252,225,89,158,201,25,5,177],[75,249,53,120,104,194,173,56,6,151,58,55,118,99,243,79,64,216,212,68,251,97,4,173,82,64,210,174,49,15,103,185],[22,63,43,156,64,148,17,122,38,111,204,144,61,162,237,221,249,194,149,153,71,155,84,153,230,224,67,26,72,200,209,32],[34,224,29,56,233,48,155,37,254,131,79,232,132,174,242,91,247,228,240,246,193,29,92,144,82,21,136,202,4,51,62,209],[39,208,66,222,123,192,185,177,97,39,2,61,184,204,166,121,176,232,30,179,165,69,99,235,50,248,186,29,40,169,207,193],[101,63,240,52,33,215,136,212,250,111,252,93,94,170,244,77,46,243,212,232,210,102,133,147,95,168,142,29,115,172,71,153],[184,70,96,41,118,165,175,138,169,56,77,1,198,193,38,224,79,220,41,225,135,48,78,145,240,179,218,77,181,171,113,241],[183,155,137,80,232,156,0,117,46,65,117,76,74,25,215,90,118,119,155,28,128,72,119,23,167,194,51,220,239,41,39,19],[82,35,23,102,162,38,184,28,189,170,118,216,171,151,70,99,28,233,89,126,255,254,147,198,73,27,108,1,36,205,216,200],[38,163,78,34,146,171,65,122,160,4,205,156,205,155,142,250,81,243,134,132,6,69,43,186,190,230,208,181,88,116,156,184]]",
                "sol": "[bytes32(stringToBytes32(\"126,209,144,9,5,184,7,171,15,176,123,229,225,225,118,102,191,28,161,106,12,33,130,18,230,51,128,128,175,10,57,32\")),bytes32(stringToBytes32(\"44,238,81,108,87,2,167,141,210,163,111,92,4,160,110,219,83,60,119,246,225,42,100,186,50,209,192,254,104,84,167,98\")),bytes32(stringToBytes32(\"77,38,232,141,57,156,32,45,108,1,101,170,55,52,216,226,102,123,88,37,142,62,0,154,248,176,254,201,192,233,120,119\")),bytes32(stringToBytes32(\"47,153,131,189,76,55,184,117,138,138,25,177,171,70,100,92,70,189,138,212,54,110,148,129,72,43,15,127,4,195,222,211\")),bytes32(stringToBytes32(\"125,16,84,85,238,29,208,167,159,175,82,232,224,55,31,223,163,14,196,17,78,107,124,166,93,207,5,52,220,202,127,120\")),bytes32(stringToBytes32(\"103,219,247,109,148,34,143,203,175,208,59,50,157,8,179,165,237,228,29,140,209,89,108,241,134,182,104,91,188,30,237,1\")),bytes32(stringToBytes32(\"194,243,217,34,46,227,89,216,226,25,42,254,41,200,7,39,207,194,151,233,29,14,136,105,169,54,73,24,21,77,1,230\")),bytes32(stringToBytes32(\"16,183,138,155,126,185,32,150,10,114,254,102,173,181,131,213,22,88,222,96,128,211,15,48,160,217,5,148,25,77,106,235\")),bytes32(stringToBytes32(\"69,214,194,48,138,211,188,108,98,132,139,100,183,143,19,188,245,34,166,213,212,0,183,14,141,198,64,184,32,141,222,107\")),bytes32(stringToBytes32(\"117,52,90,132,103,107,175,35,197,10,31,154,6,140,104,75,85,7,66,33,32,228,37,202,194,176,208,192,188,3,29,168\")),bytes32(stringToBytes32(\"145,251,163,78,32,216,106,164,119,24,57,56,137,58,8,164,236,61,215,197,64,142,207,81,11,94,231,96,237,63,113,122\")),bytes32(stringToBytes32(\"215,171,81,218,105,72,230,130,72,160,10,227,240,115,26,112,250,134,209,175,8,169,93,153,17,219,80,186,82,140,249,185\")),bytes32(stringToBytes32(\"81,235,24,127,49,42,97,215,2,140,140,127,171,94,212,181,127,109,62,98,90,122,40,27,147,45,225,103,231,96,100,170\")),bytes32(stringToBytes32(\"89,147,36,55,39,52,40,34,239,45,149,82,15,121,170,108,134,231,101,247,123,146,108,109,86,122,128,248,216,145,239,112\")),bytes32(stringToBytes32(\"226,161,228,32,109,225,194,119,218,67,250,98,172,24,78,224,47,80,68,178,211,246,64,65,130,255,56,59,111,2,132,109\")),bytes32(stringToBytes32(\"190,225,80,175,91,119,155,26,153,227,139,16,87,62,5,79,150,82,121,87,248,22,21,29,60,204,162,176,140,159,227,177\")),bytes32(stringToBytes32(\"113,64,197,253,54,165,131,175,125,127,111,47,72,232,202,82,193,203,33,63,98,50,4,37,111,225,194,176,101,229,81,194\")),bytes32(stringToBytes32(\"66,53,196,205,41,103,235,223,246,180,248,102,190,157,85,121,255,236,251,173,109,51,163,169,231,241,78,49,239,81,150,211\")),bytes32(stringToBytes32(\"36,124,184,188,184,8,124,30,250,48,223,141,208,152,96,194,240,234,142,246,95,84,66,57,164,143,8,218,74,41,16,41\")),bytes32(stringToBytes32(\"110,63,195,57,105,219,16,166,175,49,179,241,114,24,200,17,10,222,210,65,165,42,172,41,182,75,178,142,171,233,241,186\")),bytes32(stringToBytes32(\"201,242,53,83,149,118,221,211,33,78,73,185,76,219,131,135,147,210,104,241,67,22,223,252,240,182,51,116,11,225,230,247\")),bytes32(stringToBytes32(\"83,139,201,255,129,95,0,240,216,4,49,3,226,207,62,250,159,159,9,131,38,132,120,198,56,241,122,78,36,210,253,204\")),bytes32(stringToBytes32(\"6,255,82,76,128,74,38,223,196,194,30,227,124,68,137,216,212,217,10,58,232,29,92,39,160,14,90,20,224,45,187,187\")),bytes32(stringToBytes32(\"107,15,109,220,98,245,214,145,41,227,186,210,124,238,24,244,117,173,101,47,94,139,126,73,162,32,45,239,222,79,249,165\")),bytes32(stringToBytes32(\"150,131,252,101,107,184,213,58,126,9,5,93,22,17,1,15,85,45,141,114,2,157,101,12,171,207,27,216,134,98,8,161\")),bytes32(stringToBytes32(\"53,13,10,236,80,67,28,227,255,63,164,34,29,142,156,224,61,80,45,37,99,127,243,183,181,63,68,118,157,65,219,52\")),bytes32(stringToBytes32(\"16,99,42,187,116,24,1,216,5,233,195,220,60,39,172,149,64,238,46,181,58,50,4,68,179,64,58,204,173,204,133,125\")),bytes32(stringToBytes32(\"251,173,4,39,186,131,63,212,218,42,58,52,97,190,122,214,145,11,219,71,245,41,41,89,183,82,126,175,130,81,219,72\")),bytes32(stringToBytes32(\"241,51,235,176,5,199,78,209,116,114,141,119,141,167,228,159,238,234,251,109,239,96,176,237,127,157,193,220,221,57,96,239\")),bytes32(stringToBytes32(\"139,152,121,241,2,44,91,94,82,219,44,218,106,240,174,141,103,26,102,132,132,139,98,138,143,181,126,226,141,206,15,97\")),bytes32(stringToBytes32(\"255,252,251,240,85,249,74,95,241,153,150,63,38,251,120,11,243,112,16,124,76,94,112,140,142,140,231,131,137,22,131,47\")),bytes32(stringToBytes32(\"172,106,38,5,229,72,193,163,205,189,117,140,14,79,10,221,215,240,139,74,193,69,114,79,167,130,112,233,60,74,21,96\")),bytes32(stringToBytes32(\"237,115,97,245,60,201,20,235,94,31,128,215,44,117,149,202,168,10,235,69,99,78,73,241,213,69,180,144,101,220,128,68\")),bytes32(stringToBytes32(\"103,101,209,133,173,65,92,163,253,205,48,60,58,188,231,228,255,140,27,69,131,129,208,94,188,197,232,174,21,89,93,181\")),bytes32(stringToBytes32(\"201,121,6,109,5,201,218,14,171,40,173,61,135,82,213,1,105,198,110,35,137,130,145,76,150,54,31,154,116,246,124,235\")),bytes32(stringToBytes32(\"243,3,255,86,180,229,241,229,0,151,119,35,99,144,178,86,239,228,243,69,75,200,47,136,171,216,188,38,154,250,240,56\")),bytes32(stringToBytes32(\"249,160,103,3,44,182,167,78,151,36,154,109,10,164,207,67,70,219,14,151,111,141,16,160,124,216,205,118,197,232,67,223\")),bytes32(stringToBytes32(\"41,174,23,116,34,222,87,0,155,123,204,167,158,15,43,244,198,234,195,175,250,144,143,7,107,88,222,192,30,39,81,188\")),bytes32(stringToBytes32(\"255,175,136,116,131,50,202,132,182,120,214,122,148,22,143,25,75,5,118,136,55,13,144,38,101,30,103,19,65,171,102,33\")),bytes32(stringToBytes32(\"216,5,38,128,16,234,64,229,249,186,20,66,106,129,193,26,6,231,209,139,107,58,16,216,179,88,139,29,225,211,90,14\")),bytes32(stringToBytes32(\"112,126,242,149,185,56,75,125,109,237,55,86,237,32,179,92,230,238,14,202,190,14,194,128,246,52,107,56,249,149,245,58\")),bytes32(stringToBytes32(\"156,91,121,158,228,3,196,74,176,199,14,225,168,242,186,114,114,144,89,20,22,94,99,85,247,209,23,100,237,72,55,75\")),bytes32(stringToBytes32(\"191,192,56,24,221,14,108,88,116,123,145,29,114,51,125,33,184,178,206,157,171,76,197,162,206,116,12,189,231,194,131,213\")),bytes32(stringToBytes32(\"125,155,30,193,135,50,231,248,6,51,56,16,168,204,204,89,212,132,101,121,85,89,224,97,93,141,112,60,36,61,7,193\")),bytes32(stringToBytes32(\"62,124,8,141,217,63,237,85,236,186,58,248,142,173,24,180,2,254,131,218,170,30,1,227,175,209,73,126,63,145,226,189\")),bytes32(stringToBytes32(\"232,84,253,228,193,237,179,73,49,129,71,150,183,52,117,192,143,112,245,106,245,220,4,224,130,48,53,175,84,11,57,166\")),bytes32(stringToBytes32(\"106,172,243,3,37,15,235,112,239,243,56,37,13,17,237,205,161,111,251,230,213,194,103,205,52,92,157,201,54,88,116,24\")),bytes32(stringToBytes32(\"222,207,161,181,47,28,223,91,72,182,146,64,12,93,103,99,190,11,53,103,92,62,62,55,37,62,84,235,2,228,46,120\")),bytes32(stringToBytes32(\"190,111,167,215,185,240,230,64,217,50,140,20,2,154,208,186,192,220,153,98,230,242,216,242,35,112,70,54,157,174,207,173\")),bytes32(stringToBytes32(\"243,195,209,172,23,52,136,250,232,132,194,74,46,251,98,95,46,145,42,87,121,97,20,131,253,242,244,63,214,57,216,208\")),bytes32(stringToBytes32(\"200,214,160,122,24,179,46,32,235,208,88,128,6,95,183,6,200,183,226,141,210,66,163,221,174,242,193,60,208,223,168,154\")),bytes32(stringToBytes32(\"11,206,252,104,102,21,223,38,216,100,187,149,167,54,130,212,244,55,115,229,84,128,95,80,6,203,14,120,112,109,62,127\")),bytes32(stringToBytes32(\"108,8,186,118,66,77,172,100,60,30,222,188,132,124,40,162,42,254,60,202,210,180,188,145,21,119,246,61,162,50,241,15\")),bytes32(stringToBytes32(\"208,52,62,26,124,173,241,190,195,91,102,130,183,153,137,134,239,173,215,8,52,133,126,235,204,240,134,197,61,210,13,19\")),bytes32(stringToBytes32(\"158,38,53,167,217,40,133,150,32,117,182,220,127,125,167,142,44,125,144,108,187,13,55,153,252,225,89,158,201,25,5,177\")),bytes32(stringToBytes32(\"75,249,53,120,104,194,173,56,6,151,58,55,118,99,243,79,64,216,212,68,251,97,4,173,82,64,210,174,49,15,103,185\")),bytes32(stringToBytes32(\"22,63,43,156,64,148,17,122,38,111,204,144,61,162,237,221,249,194,149,153,71,155,84,153,230,224,67,26,72,200,209,32\")),bytes32(stringToBytes32(\"34,224,29,56,233,48,155,37,254,131,79,232,132,174,242,91,247,228,240,246,193,29,92,144,82,21,136,202,4,51,62,209\")),bytes32(stringToBytes32(\"39,208,66,222,123,192,185,177,97,39,2,61,184,204,166,121,176,232,30,179,165,69,99,235,50,248,186,29,40,169,207,193\")),bytes32(stringToBytes32(\"101,63,240,52,33,215,136,212,250,111,252,93,94,170,244,77,46,243,212,232,210,102,133,147,95,168,142,29,115,172,71,153\")),bytes32(stringToBytes32(\"184,70,96,41,118,165,175,138,169,56,77,1,198,193,38,224,79,220,41,225,135,48,78,145,240,179,218,77,181,171,113,241\")),bytes32(stringToBytes32(\"183,155,137,80,232,156,0,117,46,65,117,76,74,25,215,90,118,119,155,28,128,72,119,23,167,194,51,220,239,41,39,19\")),bytes32(stringToBytes32(\"82,35,23,102,162,38,184,28,189,170,118,216,171,151,70,99,28,233,89,126,255,254,147,198,73,27,108,1,36,205,216,200\")),bytes32(stringToBytes32(\"38,163,78,34,146,171,65,122,160,4,205,156,205,155,142,250,81,243,134,132,6,69,43,186,190,230,208,181,88,116,156,184\"))]"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[2014223714,4,6,2,255,2,28,257,96,2014223714,9999,0,27,64,2,66,96,6,1338,95,254,1338,64,1532892063,64,28,1337,10001,1532892062,4,254,64,1532892062,64,2,0,28,6,64,1532892063,1337,3,29,1338,2014223715,1532892064,256,256,1,1532892062,9999,2014223715,27,1,65,66,28,9999,65,1,10000,64,97,4]",
                "sol": "[uint256(2014223714),uint256(4),uint256(6),uint256(2),uint256(255),uint256(2),uint256(28),uint256(257),uint256(96),uint256(2014223714),uint256(9999),uint256(0),uint256(27),uint256(64),uint256(2),uint256(66),uint256(96),uint256(6),uint256(1338),uint256(95),uint256(254),uint256(1338),uint256(64),uint256(1532892063),uint256(64),uint256(28),uint256(1337),uint256(10001),uint256(1532892062),uint256(4),uint256(254),uint256(64),uint256(1532892062),uint256(64),uint256(2),uint256(0),uint256(28),uint256(6),uint256(64),uint256(1532892063),uint256(1337),uint256(3),uint256(29),uint256(1338),uint256(2014223715),uint256(1532892064),uint256(256),uint256(256),uint256(1),uint256(1532892062),uint256(9999),uint256(2014223715),uint256(27),uint256(1),uint256(65),uint256(66),uint256(28),uint256(9999),uint256(65),uint256(1),uint256(10000),uint256(64),uint256(97),uint256(4)]"
              },
              {
                "js": "[3,97,2014223715,2014223714,254,1338,5,64,1532892063,1,26,27,1532892064,96,2,29,29,256,1336,3,64,29,1532892063,64,5,64,1336,9999,5,257,0,0,6,5,2014223714,28,10000,0,0,64,2014223714,254,256,97,66,4,65,29,29,1338,1338,29,1532892062,95,1338,254,10000,64,255,2014223714,1336,66,1532892064,1]",
                "sol": "[uint256(3),uint256(97),uint256(2014223715),uint256(2014223714),uint256(254),uint256(1338),uint256(5),uint256(64),uint256(1532892063),uint256(1),uint256(26),uint256(27),uint256(1532892064),uint256(96),uint256(2),uint256(29),uint256(29),uint256(256),uint256(1336),uint256(3),uint256(64),uint256(29),uint256(1532892063),uint256(64),uint256(5),uint256(64),uint256(1336),uint256(9999),uint256(5),uint256(257),uint256(0),uint256(0),uint256(6),uint256(5),uint256(2014223714),uint256(28),uint256(10000),uint256(0),uint256(0),uint256(64),uint256(2014223714),uint256(254),uint256(256),uint256(97),uint256(66),uint256(4),uint256(65),uint256(29),uint256(29),uint256(1338),uint256(1338),uint256(29),uint256(1532892062),uint256(95),uint256(1338),uint256(254),uint256(10000),uint256(64),uint256(255),uint256(2014223714),uint256(1336),uint256(66),uint256(1532892064),uint256(1)]"
              },
              {
                "js": "[[126,209,144,9,5,184,7,171,15,176,123,229,225,225,118,102,191,28,161,106,12,33,130,18,230,51,128,128,175,10,57,32],[44,238,81,108,87,2,167,141,210,163,111,92,4,160,110,219,83,60,119,246,225,42,100,186,50,209,192,254,104,84,167,98],[77,38,232,141,57,156,32,45,108,1,101,170,55,52,216,226,102,123,88,37,142,62,0,154,248,176,254,201,192,233,120,119],[47,153,131,189,76,55,184,117,138,138,25,177,171,70,100,92,70,189,138,212,54,110,148,129,72,43,15,127,4,195,222,211],[125,16,84,85,238,29,208,167,159,175,82,232,224,55,31,223,163,14,196,17,78,107,124,166,93,207,5,52,220,202,127,120],[103,219,247,109,148,34,143,203,175,208,59,50,157,8,179,165,237,228,29,140,209,89,108,241,134,182,104,91,188,30,237,1],[194,243,217,34,46,227,89,216,226,25,42,254,41,200,7,39,207,194,151,233,29,14,136,105,169,54,73,24,21,77,1,230],[16,183,138,155,126,185,32,150,10,114,254,102,173,181,131,213,22,88,222,96,128,211,15,48,160,217,5,148,25,77,106,235],[69,214,194,48,138,211,188,108,98,132,139,100,183,143,19,188,245,34,166,213,212,0,183,14,141,198,64,184,32,141,222,107],[117,52,90,132,103,107,175,35,197,10,31,154,6,140,104,75,85,7,66,33,32,228,37,202,194,176,208,192,188,3,29,168],[145,251,163,78,32,216,106,164,119,24,57,56,137,58,8,164,236,61,215,197,64,142,207,81,11,94,231,96,237,63,113,122],[215,171,81,218,105,72,230,130,72,160,10,227,240,115,26,112,250,134,209,175,8,169,93,153,17,219,80,186,82,140,249,185],[81,235,24,127,49,42,97,215,2,140,140,127,171,94,212,181,127,109,62,98,90,122,40,27,147,45,225,103,231,96,100,170],[89,147,36,55,39,52,40,34,239,45,149,82,15,121,170,108,134,231,101,247,123,146,108,109,86,122,128,248,216,145,239,112],[226,161,228,32,109,225,194,119,218,67,250,98,172,24,78,224,47,80,68,178,211,246,64,65,130,255,56,59,111,2,132,109],[190,225,80,175,91,119,155,26,153,227,139,16,87,62,5,79,150,82,121,87,248,22,21,29,60,204,162,176,140,159,227,177],[113,64,197,253,54,165,131,175,125,127,111,47,72,232,202,82,193,203,33,63,98,50,4,37,111,225,194,176,101,229,81,194],[66,53,196,205,41,103,235,223,246,180,248,102,190,157,85,121,255,236,251,173,109,51,163,169,231,241,78,49,239,81,150,211],[36,124,184,188,184,8,124,30,250,48,223,141,208,152,96,194,240,234,142,246,95,84,66,57,164,143,8,218,74,41,16,41],[110,63,195,57,105,219,16,166,175,49,179,241,114,24,200,17,10,222,210,65,165,42,172,41,182,75,178,142,171,233,241,186],[201,242,53,83,149,118,221,211,33,78,73,185,76,219,131,135,147,210,104,241,67,22,223,252,240,182,51,116,11,225,230,247],[83,139,201,255,129,95,0,240,216,4,49,3,226,207,62,250,159,159,9,131,38,132,120,198,56,241,122,78,36,210,253,204],[6,255,82,76,128,74,38,223,196,194,30,227,124,68,137,216,212,217,10,58,232,29,92,39,160,14,90,20,224,45,187,187],[107,15,109,220,98,245,214,145,41,227,186,210,124,238,24,244,117,173,101,47,94,139,126,73,162,32,45,239,222,79,249,165],[150,131,252,101,107,184,213,58,126,9,5,93,22,17,1,15,85,45,141,114,2,157,101,12,171,207,27,216,134,98,8,161],[53,13,10,236,80,67,28,227,255,63,164,34,29,142,156,224,61,80,45,37,99,127,243,183,181,63,68,118,157,65,219,52],[16,99,42,187,116,24,1,216,5,233,195,220,60,39,172,149,64,238,46,181,58,50,4,68,179,64,58,204,173,204,133,125],[251,173,4,39,186,131,63,212,218,42,58,52,97,190,122,214,145,11,219,71,245,41,41,89,183,82,126,175,130,81,219,72],[241,51,235,176,5,199,78,209,116,114,141,119,141,167,228,159,238,234,251,109,239,96,176,237,127,157,193,220,221,57,96,239],[139,152,121,241,2,44,91,94,82,219,44,218,106,240,174,141,103,26,102,132,132,139,98,138,143,181,126,226,141,206,15,97],[255,252,251,240,85,249,74,95,241,153,150,63,38,251,120,11,243,112,16,124,76,94,112,140,142,140,231,131,137,22,131,47],[172,106,38,5,229,72,193,163,205,189,117,140,14,79,10,221,215,240,139,74,193,69,114,79,167,130,112,233,60,74,21,96],[237,115,97,245,60,201,20,235,94,31,128,215,44,117,149,202,168,10,235,69,99,78,73,241,213,69,180,144,101,220,128,68],[103,101,209,133,173,65,92,163,253,205,48,60,58,188,231,228,255,140,27,69,131,129,208,94,188,197,232,174,21,89,93,181],[201,121,6,109,5,201,218,14,171,40,173,61,135,82,213,1,105,198,110,35,137,130,145,76,150,54,31,154,116,246,124,235],[243,3,255,86,180,229,241,229,0,151,119,35,99,144,178,86,239,228,243,69,75,200,47,136,171,216,188,38,154,250,240,56],[249,160,103,3,44,182,167,78,151,36,154,109,10,164,207,67,70,219,14,151,111,141,16,160,124,216,205,118,197,232,67,223],[41,174,23,116,34,222,87,0,155,123,204,167,158,15,43,244,198,234,195,175,250,144,143,7,107,88,222,192,30,39,81,188],[255,175,136,116,131,50,202,132,182,120,214,122,148,22,143,25,75,5,118,136,55,13,144,38,101,30,103,19,65,171,102,33],[216,5,38,128,16,234,64,229,249,186,20,66,106,129,193,26,6,231,209,139,107,58,16,216,179,88,139,29,225,211,90,14],[112,126,242,149,185,56,75,125,109,237,55,86,237,32,179,92,230,238,14,202,190,14,194,128,246,52,107,56,249,149,245,58],[156,91,121,158,228,3,196,74,176,199,14,225,168,242,186,114,114,144,89,20,22,94,99,85,247,209,23,100,237,72,55,75],[191,192,56,24,221,14,108,88,116,123,145,29,114,51,125,33,184,178,206,157,171,76,197,162,206,116,12,189,231,194,131,213],[125,155,30,193,135,50,231,248,6,51,56,16,168,204,204,89,212,132,101,121,85,89,224,97,93,141,112,60,36,61,7,193],[62,124,8,141,217,63,237,85,236,186,58,248,142,173,24,180,2,254,131,218,170,30,1,227,175,209,73,126,63,145,226,189],[232,84,253,228,193,237,179,73,49,129,71,150,183,52,117,192,143,112,245,106,245,220,4,224,130,48,53,175,84,11,57,166],[106,172,243,3,37,15,235,112,239,243,56,37,13,17,237,205,161,111,251,230,213,194,103,205,52,92,157,201,54,88,116,24],[222,207,161,181,47,28,223,91,72,182,146,64,12,93,103,99,190,11,53,103,92,62,62,55,37,62,84,235,2,228,46,120],[190,111,167,215,185,240,230,64,217,50,140,20,2,154,208,186,192,220,153,98,230,242,216,242,35,112,70,54,157,174,207,173],[243,195,209,172,23,52,136,250,232,132,194,74,46,251,98,95,46,145,42,87,121,97,20,131,253,242,244,63,214,57,216,208],[200,214,160,122,24,179,46,32,235,208,88,128,6,95,183,6,200,183,226,141,210,66,163,221,174,242,193,60,208,223,168,154],[11,206,252,104,102,21,223,38,216,100,187,149,167,54,130,212,244,55,115,229,84,128,95,80,6,203,14,120,112,109,62,127],[108,8,186,118,66,77,172,100,60,30,222,188,132,124,40,162,42,254,60,202,210,180,188,145,21,119,246,61,162,50,241,15],[208,52,62,26,124,173,241,190,195,91,102,130,183,153,137,134,239,173,215,8,52,133,126,235,204,240,134,197,61,210,13,19],[158,38,53,167,217,40,133,150,32,117,182,220,127,125,167,142,44,125,144,108,187,13,55,153,252,225,89,158,201,25,5,177],[75,249,53,120,104,194,173,56,6,151,58,55,118,99,243,79,64,216,212,68,251,97,4,173,82,64,210,174,49,15,103,185],[22,63,43,156,64,148,17,122,38,111,204,144,61,162,237,221,249,194,149,153,71,155,84,153,230,224,67,26,72,200,209,32],[34,224,29,56,233,48,155,37,254,131,79,232,132,174,242,91,247,228,240,246,193,29,92,144,82,21,136,202,4,51,62,209],[39,208,66,222,123,192,185,177,97,39,2,61,184,204,166,121,176,232,30,179,165,69,99,235,50,248,186,29,40,169,207,193],[101,63,240,52,33,215,136,212,250,111,252,93,94,170,244,77,46,243,212,232,210,102,133,147,95,168,142,29,115,172,71,153],[184,70,96,41,118,165,175,138,169,56,77,1,198,193,38,224,79,220,41,225,135,48,78,145,240,179,218,77,181,171,113,241],[183,155,137,80,232,156,0,117,46,65,117,76,74,25,215,90,118,119,155,28,128,72,119,23,167,194,51,220,239,41,39,19],[82,35,23,102,162,38,184,28,189,170,118,216,171,151,70,99,28,233,89,126,255,254,147,198,73,27,108,1,36,205,216,200],[38,163,78,34,146,171,65,122,160,4,205,156,205,155,142,250,81,243,134,132,6,69,43,186,190,230,208,181,88,116,156,184]]",
                "sol": "[bytes32(stringToBytes32(\"126,209,144,9,5,184,7,171,15,176,123,229,225,225,118,102,191,28,161,106,12,33,130,18,230,51,128,128,175,10,57,32\")),bytes32(stringToBytes32(\"44,238,81,108,87,2,167,141,210,163,111,92,4,160,110,219,83,60,119,246,225,42,100,186,50,209,192,254,104,84,167,98\")),bytes32(stringToBytes32(\"77,38,232,141,57,156,32,45,108,1,101,170,55,52,216,226,102,123,88,37,142,62,0,154,248,176,254,201,192,233,120,119\")),bytes32(stringToBytes32(\"47,153,131,189,76,55,184,117,138,138,25,177,171,70,100,92,70,189,138,212,54,110,148,129,72,43,15,127,4,195,222,211\")),bytes32(stringToBytes32(\"125,16,84,85,238,29,208,167,159,175,82,232,224,55,31,223,163,14,196,17,78,107,124,166,93,207,5,52,220,202,127,120\")),bytes32(stringToBytes32(\"103,219,247,109,148,34,143,203,175,208,59,50,157,8,179,165,237,228,29,140,209,89,108,241,134,182,104,91,188,30,237,1\")),bytes32(stringToBytes32(\"194,243,217,34,46,227,89,216,226,25,42,254,41,200,7,39,207,194,151,233,29,14,136,105,169,54,73,24,21,77,1,230\")),bytes32(stringToBytes32(\"16,183,138,155,126,185,32,150,10,114,254,102,173,181,131,213,22,88,222,96,128,211,15,48,160,217,5,148,25,77,106,235\")),bytes32(stringToBytes32(\"69,214,194,48,138,211,188,108,98,132,139,100,183,143,19,188,245,34,166,213,212,0,183,14,141,198,64,184,32,141,222,107\")),bytes32(stringToBytes32(\"117,52,90,132,103,107,175,35,197,10,31,154,6,140,104,75,85,7,66,33,32,228,37,202,194,176,208,192,188,3,29,168\")),bytes32(stringToBytes32(\"145,251,163,78,32,216,106,164,119,24,57,56,137,58,8,164,236,61,215,197,64,142,207,81,11,94,231,96,237,63,113,122\")),bytes32(stringToBytes32(\"215,171,81,218,105,72,230,130,72,160,10,227,240,115,26,112,250,134,209,175,8,169,93,153,17,219,80,186,82,140,249,185\")),bytes32(stringToBytes32(\"81,235,24,127,49,42,97,215,2,140,140,127,171,94,212,181,127,109,62,98,90,122,40,27,147,45,225,103,231,96,100,170\")),bytes32(stringToBytes32(\"89,147,36,55,39,52,40,34,239,45,149,82,15,121,170,108,134,231,101,247,123,146,108,109,86,122,128,248,216,145,239,112\")),bytes32(stringToBytes32(\"226,161,228,32,109,225,194,119,218,67,250,98,172,24,78,224,47,80,68,178,211,246,64,65,130,255,56,59,111,2,132,109\")),bytes32(stringToBytes32(\"190,225,80,175,91,119,155,26,153,227,139,16,87,62,5,79,150,82,121,87,248,22,21,29,60,204,162,176,140,159,227,177\")),bytes32(stringToBytes32(\"113,64,197,253,54,165,131,175,125,127,111,47,72,232,202,82,193,203,33,63,98,50,4,37,111,225,194,176,101,229,81,194\")),bytes32(stringToBytes32(\"66,53,196,205,41,103,235,223,246,180,248,102,190,157,85,121,255,236,251,173,109,51,163,169,231,241,78,49,239,81,150,211\")),bytes32(stringToBytes32(\"36,124,184,188,184,8,124,30,250,48,223,141,208,152,96,194,240,234,142,246,95,84,66,57,164,143,8,218,74,41,16,41\")),bytes32(stringToBytes32(\"110,63,195,57,105,219,16,166,175,49,179,241,114,24,200,17,10,222,210,65,165,42,172,41,182,75,178,142,171,233,241,186\")),bytes32(stringToBytes32(\"201,242,53,83,149,118,221,211,33,78,73,185,76,219,131,135,147,210,104,241,67,22,223,252,240,182,51,116,11,225,230,247\")),bytes32(stringToBytes32(\"83,139,201,255,129,95,0,240,216,4,49,3,226,207,62,250,159,159,9,131,38,132,120,198,56,241,122,78,36,210,253,204\")),bytes32(stringToBytes32(\"6,255,82,76,128,74,38,223,196,194,30,227,124,68,137,216,212,217,10,58,232,29,92,39,160,14,90,20,224,45,187,187\")),bytes32(stringToBytes32(\"107,15,109,220,98,245,214,145,41,227,186,210,124,238,24,244,117,173,101,47,94,139,126,73,162,32,45,239,222,79,249,165\")),bytes32(stringToBytes32(\"150,131,252,101,107,184,213,58,126,9,5,93,22,17,1,15,85,45,141,114,2,157,101,12,171,207,27,216,134,98,8,161\")),bytes32(stringToBytes32(\"53,13,10,236,80,67,28,227,255,63,164,34,29,142,156,224,61,80,45,37,99,127,243,183,181,63,68,118,157,65,219,52\")),bytes32(stringToBytes32(\"16,99,42,187,116,24,1,216,5,233,195,220,60,39,172,149,64,238,46,181,58,50,4,68,179,64,58,204,173,204,133,125\")),bytes32(stringToBytes32(\"251,173,4,39,186,131,63,212,218,42,58,52,97,190,122,214,145,11,219,71,245,41,41,89,183,82,126,175,130,81,219,72\")),bytes32(stringToBytes32(\"241,51,235,176,5,199,78,209,116,114,141,119,141,167,228,159,238,234,251,109,239,96,176,237,127,157,193,220,221,57,96,239\")),bytes32(stringToBytes32(\"139,152,121,241,2,44,91,94,82,219,44,218,106,240,174,141,103,26,102,132,132,139,98,138,143,181,126,226,141,206,15,97\")),bytes32(stringToBytes32(\"255,252,251,240,85,249,74,95,241,153,150,63,38,251,120,11,243,112,16,124,76,94,112,140,142,140,231,131,137,22,131,47\")),bytes32(stringToBytes32(\"172,106,38,5,229,72,193,163,205,189,117,140,14,79,10,221,215,240,139,74,193,69,114,79,167,130,112,233,60,74,21,96\")),bytes32(stringToBytes32(\"237,115,97,245,60,201,20,235,94,31,128,215,44,117,149,202,168,10,235,69,99,78,73,241,213,69,180,144,101,220,128,68\")),bytes32(stringToBytes32(\"103,101,209,133,173,65,92,163,253,205,48,60,58,188,231,228,255,140,27,69,131,129,208,94,188,197,232,174,21,89,93,181\")),bytes32(stringToBytes32(\"201,121,6,109,5,201,218,14,171,40,173,61,135,82,213,1,105,198,110,35,137,130,145,76,150,54,31,154,116,246,124,235\")),bytes32(stringToBytes32(\"243,3,255,86,180,229,241,229,0,151,119,35,99,144,178,86,239,228,243,69,75,200,47,136,171,216,188,38,154,250,240,56\")),bytes32(stringToBytes32(\"249,160,103,3,44,182,167,78,151,36,154,109,10,164,207,67,70,219,14,151,111,141,16,160,124,216,205,118,197,232,67,223\")),bytes32(stringToBytes32(\"41,174,23,116,34,222,87,0,155,123,204,167,158,15,43,244,198,234,195,175,250,144,143,7,107,88,222,192,30,39,81,188\")),bytes32(stringToBytes32(\"255,175,136,116,131,50,202,132,182,120,214,122,148,22,143,25,75,5,118,136,55,13,144,38,101,30,103,19,65,171,102,33\")),bytes32(stringToBytes32(\"216,5,38,128,16,234,64,229,249,186,20,66,106,129,193,26,6,231,209,139,107,58,16,216,179,88,139,29,225,211,90,14\")),bytes32(stringToBytes32(\"112,126,242,149,185,56,75,125,109,237,55,86,237,32,179,92,230,238,14,202,190,14,194,128,246,52,107,56,249,149,245,58\")),bytes32(stringToBytes32(\"156,91,121,158,228,3,196,74,176,199,14,225,168,242,186,114,114,144,89,20,22,94,99,85,247,209,23,100,237,72,55,75\")),bytes32(stringToBytes32(\"191,192,56,24,221,14,108,88,116,123,145,29,114,51,125,33,184,178,206,157,171,76,197,162,206,116,12,189,231,194,131,213\")),bytes32(stringToBytes32(\"125,155,30,193,135,50,231,248,6,51,56,16,168,204,204,89,212,132,101,121,85,89,224,97,93,141,112,60,36,61,7,193\")),bytes32(stringToBytes32(\"62,124,8,141,217,63,237,85,236,186,58,248,142,173,24,180,2,254,131,218,170,30,1,227,175,209,73,126,63,145,226,189\")),bytes32(stringToBytes32(\"232,84,253,228,193,237,179,73,49,129,71,150,183,52,117,192,143,112,245,106,245,220,4,224,130,48,53,175,84,11,57,166\")),bytes32(stringToBytes32(\"106,172,243,3,37,15,235,112,239,243,56,37,13,17,237,205,161,111,251,230,213,194,103,205,52,92,157,201,54,88,116,24\")),bytes32(stringToBytes32(\"222,207,161,181,47,28,223,91,72,182,146,64,12,93,103,99,190,11,53,103,92,62,62,55,37,62,84,235,2,228,46,120\")),bytes32(stringToBytes32(\"190,111,167,215,185,240,230,64,217,50,140,20,2,154,208,186,192,220,153,98,230,242,216,242,35,112,70,54,157,174,207,173\")),bytes32(stringToBytes32(\"243,195,209,172,23,52,136,250,232,132,194,74,46,251,98,95,46,145,42,87,121,97,20,131,253,242,244,63,214,57,216,208\")),bytes32(stringToBytes32(\"200,214,160,122,24,179,46,32,235,208,88,128,6,95,183,6,200,183,226,141,210,66,163,221,174,242,193,60,208,223,168,154\")),bytes32(stringToBytes32(\"11,206,252,104,102,21,223,38,216,100,187,149,167,54,130,212,244,55,115,229,84,128,95,80,6,203,14,120,112,109,62,127\")),bytes32(stringToBytes32(\"108,8,186,118,66,77,172,100,60,30,222,188,132,124,40,162,42,254,60,202,210,180,188,145,21,119,246,61,162,50,241,15\")),bytes32(stringToBytes32(\"208,52,62,26,124,173,241,190,195,91,102,130,183,153,137,134,239,173,215,8,52,133,126,235,204,240,134,197,61,210,13,19\")),bytes32(stringToBytes32(\"158,38,53,167,217,40,133,150,32,117,182,220,127,125,167,142,44,125,144,108,187,13,55,153,252,225,89,158,201,25,5,177\")),bytes32(stringToBytes32(\"75,249,53,120,104,194,173,56,6,151,58,55,118,99,243,79,64,216,212,68,251,97,4,173,82,64,210,174,49,15,103,185\")),bytes32(stringToBytes32(\"22,63,43,156,64,148,17,122,38,111,204,144,61,162,237,221,249,194,149,153,71,155,84,153,230,224,67,26,72,200,209,32\")),bytes32(stringToBytes32(\"34,224,29,56,233,48,155,37,254,131,79,232,132,174,242,91,247,228,240,246,193,29,92,144,82,21,136,202,4,51,62,209\")),bytes32(stringToBytes32(\"39,208,66,222,123,192,185,177,97,39,2,61,184,204,166,121,176,232,30,179,165,69,99,235,50,248,186,29,40,169,207,193\")),bytes32(stringToBytes32(\"101,63,240,52,33,215,136,212,250,111,252,93,94,170,244,77,46,243,212,232,210,102,133,147,95,168,142,29,115,172,71,153\")),bytes32(stringToBytes32(\"184,70,96,41,118,165,175,138,169,56,77,1,198,193,38,224,79,220,41,225,135,48,78,145,240,179,218,77,181,171,113,241\")),bytes32(stringToBytes32(\"183,155,137,80,232,156,0,117,46,65,117,76,74,25,215,90,118,119,155,28,128,72,119,23,167,194,51,220,239,41,39,19\")),bytes32(stringToBytes32(\"82,35,23,102,162,38,184,28,189,170,118,216,171,151,70,99,28,233,89,126,255,254,147,198,73,27,108,1,36,205,216,200\")),bytes32(stringToBytes32(\"38,163,78,34,146,171,65,122,160,4,205,156,205,155,142,250,81,243,134,132,6,69,43,186,190,230,208,181,88,116,156,184\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[9],accounts[0],accounts[2],accounts[0],accounts[2],accounts[1],accounts[1],accounts[1],accounts[7],accounts[7],accounts[7],accounts[3],accounts[2],accounts[7],accounts[9],accounts[8],accounts[7],accounts[4],accounts[9],accounts[2],accounts[2],accounts[4],accounts[5],accounts[5],accounts[2],accounts[1],accounts[5],accounts[9],accounts[8],accounts[4],accounts[4],accounts[7],accounts[8],accounts[1],accounts[1],accounts[9],accounts[7],accounts[6],accounts[3],accounts[5],accounts[9],accounts[6],accounts[8],accounts[8],accounts[7],accounts[5],accounts[2],accounts[0],accounts[6],accounts[9],accounts[6],accounts[3],accounts[2],accounts[8],accounts[8],accounts[6],accounts[8],accounts[7],accounts[8],accounts[8],accounts[5],accounts[2],accounts[3],accounts[2],accounts[5]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[2014223714,4,6,2,255,2,28,257,96,2014223714,9999,0,27,64,2,66,96,6,1338,95,254,1338,64,1532892063,64,28,1337,10001,1532892062,4,254,64,1532892062,64,2,0,28,6,64,1532892063,1337,3,29,1338,2014223715,1532892064,256,256,1,1532892062,9999,2014223715,27,1,65,66,28,9999,65,1,10000,64,97,4]",
                "sol": "[uint256(2014223714),uint256(4),uint256(6),uint256(2),uint256(255),uint256(2),uint256(28),uint256(257),uint256(96),uint256(2014223714),uint256(9999),uint256(0),uint256(27),uint256(64),uint256(2),uint256(66),uint256(96),uint256(6),uint256(1338),uint256(95),uint256(254),uint256(1338),uint256(64),uint256(1532892063),uint256(64),uint256(28),uint256(1337),uint256(10001),uint256(1532892062),uint256(4),uint256(254),uint256(64),uint256(1532892062),uint256(64),uint256(2),uint256(0),uint256(28),uint256(6),uint256(64),uint256(1532892063),uint256(1337),uint256(3),uint256(29),uint256(1338),uint256(2014223715),uint256(1532892064),uint256(256),uint256(256),uint256(1),uint256(1532892062),uint256(9999),uint256(2014223715),uint256(27),uint256(1),uint256(65),uint256(66),uint256(28),uint256(9999),uint256(65),uint256(1),uint256(10000),uint256(64),uint256(97),uint256(4)]"
              },
              {
                "js": "[3,97,2014223715,2014223714,254,1338,5,64,1532892063,1,26,27,1532892064,96,2,29,29,256,1336,3,64,29,1532892063,64,5,64,1336,9999,5,257,0,0,6,5,2014223714,28,10000,0,0,64,2014223714,254,256,97,66,4,65,29,29,1338,1338,29,1532892062,95,1338,254,10000,64,255,2014223714,1336,66,1532892064,1]",
                "sol": "[uint256(3),uint256(97),uint256(2014223715),uint256(2014223714),uint256(254),uint256(1338),uint256(5),uint256(64),uint256(1532892063),uint256(1),uint256(26),uint256(27),uint256(1532892064),uint256(96),uint256(2),uint256(29),uint256(29),uint256(256),uint256(1336),uint256(3),uint256(64),uint256(29),uint256(1532892063),uint256(64),uint256(5),uint256(64),uint256(1336),uint256(9999),uint256(5),uint256(257),uint256(0),uint256(0),uint256(6),uint256(5),uint256(2014223714),uint256(28),uint256(10000),uint256(0),uint256(0),uint256(64),uint256(2014223714),uint256(254),uint256(256),uint256(97),uint256(66),uint256(4),uint256(65),uint256(29),uint256(29),uint256(1338),uint256(1338),uint256(29),uint256(1532892062),uint256(95),uint256(1338),uint256(254),uint256(10000),uint256(64),uint256(255),uint256(2014223714),uint256(1336),uint256(66),uint256(1532892064),uint256(1)]"
              },
              {
                "js": "[[126,209,144,9,5,184,7,171,15,176,123,229,225,225,118,102,191,28,161,106,12,33,130,18,230,51,128,128,175,10,57,32],[44,238,81,108,87,2,167,141,210,163,111,92,4,160,110,219,83,60,119,246,225,42,100,186,50,209,192,254,104,84,167,98],[77,38,232,141,57,156,32,45,108,1,101,170,55,52,216,226,102,123,88,37,142,62,0,154,248,176,254,201,192,233,120,119],[47,153,131,189,76,55,184,117,138,138,25,177,171,70,100,92,70,189,138,212,54,110,148,129,72,43,15,127,4,195,222,211],[125,16,84,85,238,29,208,167,159,175,82,232,224,55,31,223,163,14,196,17,78,107,124,166,93,207,5,52,220,202,127,120],[103,219,247,109,148,34,143,203,175,208,59,50,157,8,179,165,237,228,29,140,209,89,108,241,134,182,104,91,188,30,237,1],[194,243,217,34,46,227,89,216,226,25,42,254,41,200,7,39,207,194,151,233,29,14,136,105,169,54,73,24,21,77,1,230],[16,183,138,155,126,185,32,150,10,114,254,102,173,181,131,213,22,88,222,96,128,211,15,48,160,217,5,148,25,77,106,235],[69,214,194,48,138,211,188,108,98,132,139,100,183,143,19,188,245,34,166,213,212,0,183,14,141,198,64,184,32,141,222,107],[117,52,90,132,103,107,175,35,197,10,31,154,6,140,104,75,85,7,66,33,32,228,37,202,194,176,208,192,188,3,29,168],[145,251,163,78,32,216,106,164,119,24,57,56,137,58,8,164,236,61,215,197,64,142,207,81,11,94,231,96,237,63,113,122],[215,171,81,218,105,72,230,130,72,160,10,227,240,115,26,112,250,134,209,175,8,169,93,153,17,219,80,186,82,140,249,185],[81,235,24,127,49,42,97,215,2,140,140,127,171,94,212,181,127,109,62,98,90,122,40,27,147,45,225,103,231,96,100,170],[89,147,36,55,39,52,40,34,239,45,149,82,15,121,170,108,134,231,101,247,123,146,108,109,86,122,128,248,216,145,239,112],[226,161,228,32,109,225,194,119,218,67,250,98,172,24,78,224,47,80,68,178,211,246,64,65,130,255,56,59,111,2,132,109],[190,225,80,175,91,119,155,26,153,227,139,16,87,62,5,79,150,82,121,87,248,22,21,29,60,204,162,176,140,159,227,177],[113,64,197,253,54,165,131,175,125,127,111,47,72,232,202,82,193,203,33,63,98,50,4,37,111,225,194,176,101,229,81,194],[66,53,196,205,41,103,235,223,246,180,248,102,190,157,85,121,255,236,251,173,109,51,163,169,231,241,78,49,239,81,150,211],[36,124,184,188,184,8,124,30,250,48,223,141,208,152,96,194,240,234,142,246,95,84,66,57,164,143,8,218,74,41,16,41],[110,63,195,57,105,219,16,166,175,49,179,241,114,24,200,17,10,222,210,65,165,42,172,41,182,75,178,142,171,233,241,186],[201,242,53,83,149,118,221,211,33,78,73,185,76,219,131,135,147,210,104,241,67,22,223,252,240,182,51,116,11,225,230,247],[83,139,201,255,129,95,0,240,216,4,49,3,226,207,62,250,159,159,9,131,38,132,120,198,56,241,122,78,36,210,253,204],[6,255,82,76,128,74,38,223,196,194,30,227,124,68,137,216,212,217,10,58,232,29,92,39,160,14,90,20,224,45,187,187],[107,15,109,220,98,245,214,145,41,227,186,210,124,238,24,244,117,173,101,47,94,139,126,73,162,32,45,239,222,79,249,165],[150,131,252,101,107,184,213,58,126,9,5,93,22,17,1,15,85,45,141,114,2,157,101,12,171,207,27,216,134,98,8,161],[53,13,10,236,80,67,28,227,255,63,164,34,29,142,156,224,61,80,45,37,99,127,243,183,181,63,68,118,157,65,219,52],[16,99,42,187,116,24,1,216,5,233,195,220,60,39,172,149,64,238,46,181,58,50,4,68,179,64,58,204,173,204,133,125],[251,173,4,39,186,131,63,212,218,42,58,52,97,190,122,214,145,11,219,71,245,41,41,89,183,82,126,175,130,81,219,72],[241,51,235,176,5,199,78,209,116,114,141,119,141,167,228,159,238,234,251,109,239,96,176,237,127,157,193,220,221,57,96,239],[139,152,121,241,2,44,91,94,82,219,44,218,106,240,174,141,103,26,102,132,132,139,98,138,143,181,126,226,141,206,15,97],[255,252,251,240,85,249,74,95,241,153,150,63,38,251,120,11,243,112,16,124,76,94,112,140,142,140,231,131,137,22,131,47],[172,106,38,5,229,72,193,163,205,189,117,140,14,79,10,221,215,240,139,74,193,69,114,79,167,130,112,233,60,74,21,96],[237,115,97,245,60,201,20,235,94,31,128,215,44,117,149,202,168,10,235,69,99,78,73,241,213,69,180,144,101,220,128,68],[103,101,209,133,173,65,92,163,253,205,48,60,58,188,231,228,255,140,27,69,131,129,208,94,188,197,232,174,21,89,93,181],[201,121,6,109,5,201,218,14,171,40,173,61,135,82,213,1,105,198,110,35,137,130,145,76,150,54,31,154,116,246,124,235],[243,3,255,86,180,229,241,229,0,151,119,35,99,144,178,86,239,228,243,69,75,200,47,136,171,216,188,38,154,250,240,56],[249,160,103,3,44,182,167,78,151,36,154,109,10,164,207,67,70,219,14,151,111,141,16,160,124,216,205,118,197,232,67,223],[41,174,23,116,34,222,87,0,155,123,204,167,158,15,43,244,198,234,195,175,250,144,143,7,107,88,222,192,30,39,81,188],[255,175,136,116,131,50,202,132,182,120,214,122,148,22,143,25,75,5,118,136,55,13,144,38,101,30,103,19,65,171,102,33],[216,5,38,128,16,234,64,229,249,186,20,66,106,129,193,26,6,231,209,139,107,58,16,216,179,88,139,29,225,211,90,14],[112,126,242,149,185,56,75,125,109,237,55,86,237,32,179,92,230,238,14,202,190,14,194,128,246,52,107,56,249,149,245,58],[156,91,121,158,228,3,196,74,176,199,14,225,168,242,186,114,114,144,89,20,22,94,99,85,247,209,23,100,237,72,55,75],[191,192,56,24,221,14,108,88,116,123,145,29,114,51,125,33,184,178,206,157,171,76,197,162,206,116,12,189,231,194,131,213],[125,155,30,193,135,50,231,248,6,51,56,16,168,204,204,89,212,132,101,121,85,89,224,97,93,141,112,60,36,61,7,193],[62,124,8,141,217,63,237,85,236,186,58,248,142,173,24,180,2,254,131,218,170,30,1,227,175,209,73,126,63,145,226,189],[232,84,253,228,193,237,179,73,49,129,71,150,183,52,117,192,143,112,245,106,245,220,4,224,130,48,53,175,84,11,57,166],[106,172,243,3,37,15,235,112,239,243,56,37,13,17,237,205,161,111,251,230,213,194,103,205,52,92,157,201,54,88,116,24],[222,207,161,181,47,28,223,91,72,182,146,64,12,93,103,99,190,11,53,103,92,62,62,55,37,62,84,235,2,228,46,120],[190,111,167,215,185,240,230,64,217,50,140,20,2,154,208,186,192,220,153,98,230,242,216,242,35,112,70,54,157,174,207,173],[243,195,209,172,23,52,136,250,232,132,194,74,46,251,98,95,46,145,42,87,121,97,20,131,253,242,244,63,214,57,216,208],[200,214,160,122,24,179,46,32,235,208,88,128,6,95,183,6,200,183,226,141,210,66,163,221,174,242,193,60,208,223,168,154],[11,206,252,104,102,21,223,38,216,100,187,149,167,54,130,212,244,55,115,229,84,128,95,80,6,203,14,120,112,109,62,127],[108,8,186,118,66,77,172,100,60,30,222,188,132,124,40,162,42,254,60,202,210,180,188,145,21,119,246,61,162,50,241,15],[208,52,62,26,124,173,241,190,195,91,102,130,183,153,137,134,239,173,215,8,52,133,126,235,204,240,134,197,61,210,13,19],[158,38,53,167,217,40,133,150,32,117,182,220,127,125,167,142,44,125,144,108,187,13,55,153,252,225,89,158,201,25,5,177],[75,249,53,120,104,194,173,56,6,151,58,55,118,99,243,79,64,216,212,68,251,97,4,173,82,64,210,174,49,15,103,185],[22,63,43,156,64,148,17,122,38,111,204,144,61,162,237,221,249,194,149,153,71,155,84,153,230,224,67,26,72,200,209,32],[34,224,29,56,233,48,155,37,254,131,79,232,132,174,242,91,247,228,240,246,193,29,92,144,82,21,136,202,4,51,62,209],[39,208,66,222,123,192,185,177,97,39,2,61,184,204,166,121,176,232,30,179,165,69,99,235,50,248,186,29,40,169,207,193],[101,63,240,52,33,215,136,212,250,111,252,93,94,170,244,77,46,243,212,232,210,102,133,147,95,168,142,29,115,172,71,153],[184,70,96,41,118,165,175,138,169,56,77,1,198,193,38,224,79,220,41,225,135,48,78,145,240,179,218,77,181,171,113,241],[183,155,137,80,232,156,0,117,46,65,117,76,74,25,215,90,118,119,155,28,128,72,119,23,167,194,51,220,239,41,39,19],[82,35,23,102,162,38,184,28,189,170,118,216,171,151,70,99,28,233,89,126,255,254,147,198,73,27,108,1,36,205,216,200],[38,163,78,34,146,171,65,122,160,4,205,156,205,155,142,250,81,243,134,132,6,69,43,186,190,230,208,181,88,116,156,184]]",
                "sol": "[bytes32(stringToBytes32(\"126,209,144,9,5,184,7,171,15,176,123,229,225,225,118,102,191,28,161,106,12,33,130,18,230,51,128,128,175,10,57,32\")),bytes32(stringToBytes32(\"44,238,81,108,87,2,167,141,210,163,111,92,4,160,110,219,83,60,119,246,225,42,100,186,50,209,192,254,104,84,167,98\")),bytes32(stringToBytes32(\"77,38,232,141,57,156,32,45,108,1,101,170,55,52,216,226,102,123,88,37,142,62,0,154,248,176,254,201,192,233,120,119\")),bytes32(stringToBytes32(\"47,153,131,189,76,55,184,117,138,138,25,177,171,70,100,92,70,189,138,212,54,110,148,129,72,43,15,127,4,195,222,211\")),bytes32(stringToBytes32(\"125,16,84,85,238,29,208,167,159,175,82,232,224,55,31,223,163,14,196,17,78,107,124,166,93,207,5,52,220,202,127,120\")),bytes32(stringToBytes32(\"103,219,247,109,148,34,143,203,175,208,59,50,157,8,179,165,237,228,29,140,209,89,108,241,134,182,104,91,188,30,237,1\")),bytes32(stringToBytes32(\"194,243,217,34,46,227,89,216,226,25,42,254,41,200,7,39,207,194,151,233,29,14,136,105,169,54,73,24,21,77,1,230\")),bytes32(stringToBytes32(\"16,183,138,155,126,185,32,150,10,114,254,102,173,181,131,213,22,88,222,96,128,211,15,48,160,217,5,148,25,77,106,235\")),bytes32(stringToBytes32(\"69,214,194,48,138,211,188,108,98,132,139,100,183,143,19,188,245,34,166,213,212,0,183,14,141,198,64,184,32,141,222,107\")),bytes32(stringToBytes32(\"117,52,90,132,103,107,175,35,197,10,31,154,6,140,104,75,85,7,66,33,32,228,37,202,194,176,208,192,188,3,29,168\")),bytes32(stringToBytes32(\"145,251,163,78,32,216,106,164,119,24,57,56,137,58,8,164,236,61,215,197,64,142,207,81,11,94,231,96,237,63,113,122\")),bytes32(stringToBytes32(\"215,171,81,218,105,72,230,130,72,160,10,227,240,115,26,112,250,134,209,175,8,169,93,153,17,219,80,186,82,140,249,185\")),bytes32(stringToBytes32(\"81,235,24,127,49,42,97,215,2,140,140,127,171,94,212,181,127,109,62,98,90,122,40,27,147,45,225,103,231,96,100,170\")),bytes32(stringToBytes32(\"89,147,36,55,39,52,40,34,239,45,149,82,15,121,170,108,134,231,101,247,123,146,108,109,86,122,128,248,216,145,239,112\")),bytes32(stringToBytes32(\"226,161,228,32,109,225,194,119,218,67,250,98,172,24,78,224,47,80,68,178,211,246,64,65,130,255,56,59,111,2,132,109\")),bytes32(stringToBytes32(\"190,225,80,175,91,119,155,26,153,227,139,16,87,62,5,79,150,82,121,87,248,22,21,29,60,204,162,176,140,159,227,177\")),bytes32(stringToBytes32(\"113,64,197,253,54,165,131,175,125,127,111,47,72,232,202,82,193,203,33,63,98,50,4,37,111,225,194,176,101,229,81,194\")),bytes32(stringToBytes32(\"66,53,196,205,41,103,235,223,246,180,248,102,190,157,85,121,255,236,251,173,109,51,163,169,231,241,78,49,239,81,150,211\")),bytes32(stringToBytes32(\"36,124,184,188,184,8,124,30,250,48,223,141,208,152,96,194,240,234,142,246,95,84,66,57,164,143,8,218,74,41,16,41\")),bytes32(stringToBytes32(\"110,63,195,57,105,219,16,166,175,49,179,241,114,24,200,17,10,222,210,65,165,42,172,41,182,75,178,142,171,233,241,186\")),bytes32(stringToBytes32(\"201,242,53,83,149,118,221,211,33,78,73,185,76,219,131,135,147,210,104,241,67,22,223,252,240,182,51,116,11,225,230,247\")),bytes32(stringToBytes32(\"83,139,201,255,129,95,0,240,216,4,49,3,226,207,62,250,159,159,9,131,38,132,120,198,56,241,122,78,36,210,253,204\")),bytes32(stringToBytes32(\"6,255,82,76,128,74,38,223,196,194,30,227,124,68,137,216,212,217,10,58,232,29,92,39,160,14,90,20,224,45,187,187\")),bytes32(stringToBytes32(\"107,15,109,220,98,245,214,145,41,227,186,210,124,238,24,244,117,173,101,47,94,139,126,73,162,32,45,239,222,79,249,165\")),bytes32(stringToBytes32(\"150,131,252,101,107,184,213,58,126,9,5,93,22,17,1,15,85,45,141,114,2,157,101,12,171,207,27,216,134,98,8,161\")),bytes32(stringToBytes32(\"53,13,10,236,80,67,28,227,255,63,164,34,29,142,156,224,61,80,45,37,99,127,243,183,181,63,68,118,157,65,219,52\")),bytes32(stringToBytes32(\"16,99,42,187,116,24,1,216,5,233,195,220,60,39,172,149,64,238,46,181,58,50,4,68,179,64,58,204,173,204,133,125\")),bytes32(stringToBytes32(\"251,173,4,39,186,131,63,212,218,42,58,52,97,190,122,214,145,11,219,71,245,41,41,89,183,82,126,175,130,81,219,72\")),bytes32(stringToBytes32(\"241,51,235,176,5,199,78,209,116,114,141,119,141,167,228,159,238,234,251,109,239,96,176,237,127,157,193,220,221,57,96,239\")),bytes32(stringToBytes32(\"139,152,121,241,2,44,91,94,82,219,44,218,106,240,174,141,103,26,102,132,132,139,98,138,143,181,126,226,141,206,15,97\")),bytes32(stringToBytes32(\"255,252,251,240,85,249,74,95,241,153,150,63,38,251,120,11,243,112,16,124,76,94,112,140,142,140,231,131,137,22,131,47\")),bytes32(stringToBytes32(\"172,106,38,5,229,72,193,163,205,189,117,140,14,79,10,221,215,240,139,74,193,69,114,79,167,130,112,233,60,74,21,96\")),bytes32(stringToBytes32(\"237,115,97,245,60,201,20,235,94,31,128,215,44,117,149,202,168,10,235,69,99,78,73,241,213,69,180,144,101,220,128,68\")),bytes32(stringToBytes32(\"103,101,209,133,173,65,92,163,253,205,48,60,58,188,231,228,255,140,27,69,131,129,208,94,188,197,232,174,21,89,93,181\")),bytes32(stringToBytes32(\"201,121,6,109,5,201,218,14,171,40,173,61,135,82,213,1,105,198,110,35,137,130,145,76,150,54,31,154,116,246,124,235\")),bytes32(stringToBytes32(\"243,3,255,86,180,229,241,229,0,151,119,35,99,144,178,86,239,228,243,69,75,200,47,136,171,216,188,38,154,250,240,56\")),bytes32(stringToBytes32(\"249,160,103,3,44,182,167,78,151,36,154,109,10,164,207,67,70,219,14,151,111,141,16,160,124,216,205,118,197,232,67,223\")),bytes32(stringToBytes32(\"41,174,23,116,34,222,87,0,155,123,204,167,158,15,43,244,198,234,195,175,250,144,143,7,107,88,222,192,30,39,81,188\")),bytes32(stringToBytes32(\"255,175,136,116,131,50,202,132,182,120,214,122,148,22,143,25,75,5,118,136,55,13,144,38,101,30,103,19,65,171,102,33\")),bytes32(stringToBytes32(\"216,5,38,128,16,234,64,229,249,186,20,66,106,129,193,26,6,231,209,139,107,58,16,216,179,88,139,29,225,211,90,14\")),bytes32(stringToBytes32(\"112,126,242,149,185,56,75,125,109,237,55,86,237,32,179,92,230,238,14,202,190,14,194,128,246,52,107,56,249,149,245,58\")),bytes32(stringToBytes32(\"156,91,121,158,228,3,196,74,176,199,14,225,168,242,186,114,114,144,89,20,22,94,99,85,247,209,23,100,237,72,55,75\")),bytes32(stringToBytes32(\"191,192,56,24,221,14,108,88,116,123,145,29,114,51,125,33,184,178,206,157,171,76,197,162,206,116,12,189,231,194,131,213\")),bytes32(stringToBytes32(\"125,155,30,193,135,50,231,248,6,51,56,16,168,204,204,89,212,132,101,121,85,89,224,97,93,141,112,60,36,61,7,193\")),bytes32(stringToBytes32(\"62,124,8,141,217,63,237,85,236,186,58,248,142,173,24,180,2,254,131,218,170,30,1,227,175,209,73,126,63,145,226,189\")),bytes32(stringToBytes32(\"232,84,253,228,193,237,179,73,49,129,71,150,183,52,117,192,143,112,245,106,245,220,4,224,130,48,53,175,84,11,57,166\")),bytes32(stringToBytes32(\"106,172,243,3,37,15,235,112,239,243,56,37,13,17,237,205,161,111,251,230,213,194,103,205,52,92,157,201,54,88,116,24\")),bytes32(stringToBytes32(\"222,207,161,181,47,28,223,91,72,182,146,64,12,93,103,99,190,11,53,103,92,62,62,55,37,62,84,235,2,228,46,120\")),bytes32(stringToBytes32(\"190,111,167,215,185,240,230,64,217,50,140,20,2,154,208,186,192,220,153,98,230,242,216,242,35,112,70,54,157,174,207,173\")),bytes32(stringToBytes32(\"243,195,209,172,23,52,136,250,232,132,194,74,46,251,98,95,46,145,42,87,121,97,20,131,253,242,244,63,214,57,216,208\")),bytes32(stringToBytes32(\"200,214,160,122,24,179,46,32,235,208,88,128,6,95,183,6,200,183,226,141,210,66,163,221,174,242,193,60,208,223,168,154\")),bytes32(stringToBytes32(\"11,206,252,104,102,21,223,38,216,100,187,149,167,54,130,212,244,55,115,229,84,128,95,80,6,203,14,120,112,109,62,127\")),bytes32(stringToBytes32(\"108,8,186,118,66,77,172,100,60,30,222,188,132,124,40,162,42,254,60,202,210,180,188,145,21,119,246,61,162,50,241,15\")),bytes32(stringToBytes32(\"208,52,62,26,124,173,241,190,195,91,102,130,183,153,137,134,239,173,215,8,52,133,126,235,204,240,134,197,61,210,13,19\")),bytes32(stringToBytes32(\"158,38,53,167,217,40,133,150,32,117,182,220,127,125,167,142,44,125,144,108,187,13,55,153,252,225,89,158,201,25,5,177\")),bytes32(stringToBytes32(\"75,249,53,120,104,194,173,56,6,151,58,55,118,99,243,79,64,216,212,68,251,97,4,173,82,64,210,174,49,15,103,185\")),bytes32(stringToBytes32(\"22,63,43,156,64,148,17,122,38,111,204,144,61,162,237,221,249,194,149,153,71,155,84,153,230,224,67,26,72,200,209,32\")),bytes32(stringToBytes32(\"34,224,29,56,233,48,155,37,254,131,79,232,132,174,242,91,247,228,240,246,193,29,92,144,82,21,136,202,4,51,62,209\")),bytes32(stringToBytes32(\"39,208,66,222,123,192,185,177,97,39,2,61,184,204,166,121,176,232,30,179,165,69,99,235,50,248,186,29,40,169,207,193\")),bytes32(stringToBytes32(\"101,63,240,52,33,215,136,212,250,111,252,93,94,170,244,77,46,243,212,232,210,102,133,147,95,168,142,29,115,172,71,153\")),bytes32(stringToBytes32(\"184,70,96,41,118,165,175,138,169,56,77,1,198,193,38,224,79,220,41,225,135,48,78,145,240,179,218,77,181,171,113,241\")),bytes32(stringToBytes32(\"183,155,137,80,232,156,0,117,46,65,117,76,74,25,215,90,118,119,155,28,128,72,119,23,167,194,51,220,239,41,39,19\")),bytes32(stringToBytes32(\"82,35,23,102,162,38,184,28,189,170,118,216,171,151,70,99,28,233,89,126,255,254,147,198,73,27,108,1,36,205,216,200\")),bytes32(stringToBytes32(\"38,163,78,34,146,171,65,122,160,4,205,156,205,155,142,250,81,243,134,132,6,69,43,186,190,230,208,181,88,116,156,184\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[1],accounts[0],accounts[7],accounts[0],accounts[8],accounts[4],accounts[4],accounts[2],accounts[4],accounts[0],accounts[7],accounts[6],accounts[0],accounts[9],accounts[6],accounts[4],accounts[3],accounts[5],accounts[9],accounts[1],accounts[7],accounts[5],accounts[2],accounts[3],accounts[1],accounts[2],accounts[9],accounts[8],accounts[0],accounts[7],accounts[5],accounts[6],accounts[0],accounts[2],accounts[0],accounts[4],accounts[7],accounts[7],accounts[9],accounts[8],accounts[2],accounts[8],accounts[3],accounts[0],accounts[6],accounts[3],accounts[1],accounts[6],accounts[5],accounts[6],accounts[4],accounts[3],accounts[2],accounts[2],accounts[5],accounts[9],accounts[7],accounts[1],accounts[0],accounts[1],accounts[7],accounts[5],accounts[2],accounts[9],accounts[9]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[2014223714,4,6,2,255,2,28,257,96,2014223714,9999,0,27,64,2,66,96,6,1338,95,254,1338,64,1532892063,64,28,1337,10001,1532892062,4,254,64,1532892062,64,2,0,28,6,64,1532892063,1337,3,29,1338,2014223715,1532892064,256,256,1,1532892062,9999,2014223715,27,1,65,66,28,9999,65,1,10000,64,97,4]",
                "sol": "[uint256(2014223714),uint256(4),uint256(6),uint256(2),uint256(255),uint256(2),uint256(28),uint256(257),uint256(96),uint256(2014223714),uint256(9999),uint256(0),uint256(27),uint256(64),uint256(2),uint256(66),uint256(96),uint256(6),uint256(1338),uint256(95),uint256(254),uint256(1338),uint256(64),uint256(1532892063),uint256(64),uint256(28),uint256(1337),uint256(10001),uint256(1532892062),uint256(4),uint256(254),uint256(64),uint256(1532892062),uint256(64),uint256(2),uint256(0),uint256(28),uint256(6),uint256(64),uint256(1532892063),uint256(1337),uint256(3),uint256(29),uint256(1338),uint256(2014223715),uint256(1532892064),uint256(256),uint256(256),uint256(1),uint256(1532892062),uint256(9999),uint256(2014223715),uint256(27),uint256(1),uint256(65),uint256(66),uint256(28),uint256(9999),uint256(65),uint256(1),uint256(10000),uint256(64),uint256(97),uint256(4)]"
              },
              {
                "js": "[3,97,2014223715,2014223714,254,1338,5,64,1532892063,1,26,27,1532892064,96,2,29,29,256,1336,3,64,29,1532892063,64,5,64,1336,9999,5,257,0,0,6,5,2014223714,28,10000,0,0,64,2014223714,254,256,97,66,4,65,29,29,1338,1338,29,1532892062,95,1338,254,10000,64,255,2014223714,1336,66,1532892064,1]",
                "sol": "[uint256(3),uint256(97),uint256(2014223715),uint256(2014223714),uint256(254),uint256(1338),uint256(5),uint256(64),uint256(1532892063),uint256(1),uint256(26),uint256(27),uint256(1532892064),uint256(96),uint256(2),uint256(29),uint256(29),uint256(256),uint256(1336),uint256(3),uint256(64),uint256(29),uint256(1532892063),uint256(64),uint256(5),uint256(64),uint256(1336),uint256(9999),uint256(5),uint256(257),uint256(0),uint256(0),uint256(6),uint256(5),uint256(2014223714),uint256(28),uint256(10000),uint256(0),uint256(0),uint256(64),uint256(2014223714),uint256(254),uint256(256),uint256(97),uint256(66),uint256(4),uint256(65),uint256(29),uint256(29),uint256(1338),uint256(1338),uint256(29),uint256(1532892062),uint256(95),uint256(1338),uint256(254),uint256(10000),uint256(64),uint256(255),uint256(2014223714),uint256(1336),uint256(66),uint256(1532892064),uint256(1)]"
              },
              {
                "js": "[[126,209,144,9,5,184,7,171,15,176,123,229,225,225,118,102,191,28,161,106,12,33,130,18,230,51,128,128,175,10,57,32],[44,238,81,108,87,2,167,141,210,163,111,92,4,160,110,219,83,60,119,246,225,42,100,186,50,209,192,254,104,84,167,98],[77,38,232,141,57,156,32,45,108,1,101,170,55,52,216,226,102,123,88,37,142,62,0,154,248,176,254,201,192,233,120,119],[47,153,131,189,76,55,184,117,138,138,25,177,171,70,100,92,70,189,138,212,54,110,148,129,72,43,15,127,4,195,222,211],[125,16,84,85,238,29,208,167,159,175,82,232,224,55,31,223,163,14,196,17,78,107,124,166,93,207,5,52,220,202,127,120],[103,219,247,109,148,34,143,203,175,208,59,50,157,8,179,165,237,228,29,140,209,89,108,241,134,182,104,91,188,30,237,1],[194,243,217,34,46,227,89,216,226,25,42,254,41,200,7,39,207,194,151,233,29,14,136,105,169,54,73,24,21,77,1,230],[16,183,138,155,126,185,32,150,10,114,254,102,173,181,131,213,22,88,222,96,128,211,15,48,160,217,5,148,25,77,106,235],[69,214,194,48,138,211,188,108,98,132,139,100,183,143,19,188,245,34,166,213,212,0,183,14,141,198,64,184,32,141,222,107],[117,52,90,132,103,107,175,35,197,10,31,154,6,140,104,75,85,7,66,33,32,228,37,202,194,176,208,192,188,3,29,168],[145,251,163,78,32,216,106,164,119,24,57,56,137,58,8,164,236,61,215,197,64,142,207,81,11,94,231,96,237,63,113,122],[215,171,81,218,105,72,230,130,72,160,10,227,240,115,26,112,250,134,209,175,8,169,93,153,17,219,80,186,82,140,249,185],[81,235,24,127,49,42,97,215,2,140,140,127,171,94,212,181,127,109,62,98,90,122,40,27,147,45,225,103,231,96,100,170],[89,147,36,55,39,52,40,34,239,45,149,82,15,121,170,108,134,231,101,247,123,146,108,109,86,122,128,248,216,145,239,112],[226,161,228,32,109,225,194,119,218,67,250,98,172,24,78,224,47,80,68,178,211,246,64,65,130,255,56,59,111,2,132,109],[190,225,80,175,91,119,155,26,153,227,139,16,87,62,5,79,150,82,121,87,248,22,21,29,60,204,162,176,140,159,227,177],[113,64,197,253,54,165,131,175,125,127,111,47,72,232,202,82,193,203,33,63,98,50,4,37,111,225,194,176,101,229,81,194],[66,53,196,205,41,103,235,223,246,180,248,102,190,157,85,121,255,236,251,173,109,51,163,169,231,241,78,49,239,81,150,211],[36,124,184,188,184,8,124,30,250,48,223,141,208,152,96,194,240,234,142,246,95,84,66,57,164,143,8,218,74,41,16,41],[110,63,195,57,105,219,16,166,175,49,179,241,114,24,200,17,10,222,210,65,165,42,172,41,182,75,178,142,171,233,241,186],[201,242,53,83,149,118,221,211,33,78,73,185,76,219,131,135,147,210,104,241,67,22,223,252,240,182,51,116,11,225,230,247],[83,139,201,255,129,95,0,240,216,4,49,3,226,207,62,250,159,159,9,131,38,132,120,198,56,241,122,78,36,210,253,204],[6,255,82,76,128,74,38,223,196,194,30,227,124,68,137,216,212,217,10,58,232,29,92,39,160,14,90,20,224,45,187,187],[107,15,109,220,98,245,214,145,41,227,186,210,124,238,24,244,117,173,101,47,94,139,126,73,162,32,45,239,222,79,249,165],[150,131,252,101,107,184,213,58,126,9,5,93,22,17,1,15,85,45,141,114,2,157,101,12,171,207,27,216,134,98,8,161],[53,13,10,236,80,67,28,227,255,63,164,34,29,142,156,224,61,80,45,37,99,127,243,183,181,63,68,118,157,65,219,52],[16,99,42,187,116,24,1,216,5,233,195,220,60,39,172,149,64,238,46,181,58,50,4,68,179,64,58,204,173,204,133,125],[251,173,4,39,186,131,63,212,218,42,58,52,97,190,122,214,145,11,219,71,245,41,41,89,183,82,126,175,130,81,219,72],[241,51,235,176,5,199,78,209,116,114,141,119,141,167,228,159,238,234,251,109,239,96,176,237,127,157,193,220,221,57,96,239],[139,152,121,241,2,44,91,94,82,219,44,218,106,240,174,141,103,26,102,132,132,139,98,138,143,181,126,226,141,206,15,97],[255,252,251,240,85,249,74,95,241,153,150,63,38,251,120,11,243,112,16,124,76,94,112,140,142,140,231,131,137,22,131,47],[172,106,38,5,229,72,193,163,205,189,117,140,14,79,10,221,215,240,139,74,193,69,114,79,167,130,112,233,60,74,21,96],[237,115,97,245,60,201,20,235,94,31,128,215,44,117,149,202,168,10,235,69,99,78,73,241,213,69,180,144,101,220,128,68],[103,101,209,133,173,65,92,163,253,205,48,60,58,188,231,228,255,140,27,69,131,129,208,94,188,197,232,174,21,89,93,181],[201,121,6,109,5,201,218,14,171,40,173,61,135,82,213,1,105,198,110,35,137,130,145,76,150,54,31,154,116,246,124,235],[243,3,255,86,180,229,241,229,0,151,119,35,99,144,178,86,239,228,243,69,75,200,47,136,171,216,188,38,154,250,240,56],[249,160,103,3,44,182,167,78,151,36,154,109,10,164,207,67,70,219,14,151,111,141,16,160,124,216,205,118,197,232,67,223],[41,174,23,116,34,222,87,0,155,123,204,167,158,15,43,244,198,234,195,175,250,144,143,7,107,88,222,192,30,39,81,188],[255,175,136,116,131,50,202,132,182,120,214,122,148,22,143,25,75,5,118,136,55,13,144,38,101,30,103,19,65,171,102,33],[216,5,38,128,16,234,64,229,249,186,20,66,106,129,193,26,6,231,209,139,107,58,16,216,179,88,139,29,225,211,90,14],[112,126,242,149,185,56,75,125,109,237,55,86,237,32,179,92,230,238,14,202,190,14,194,128,246,52,107,56,249,149,245,58],[156,91,121,158,228,3,196,74,176,199,14,225,168,242,186,114,114,144,89,20,22,94,99,85,247,209,23,100,237,72,55,75],[191,192,56,24,221,14,108,88,116,123,145,29,114,51,125,33,184,178,206,157,171,76,197,162,206,116,12,189,231,194,131,213],[125,155,30,193,135,50,231,248,6,51,56,16,168,204,204,89,212,132,101,121,85,89,224,97,93,141,112,60,36,61,7,193],[62,124,8,141,217,63,237,85,236,186,58,248,142,173,24,180,2,254,131,218,170,30,1,227,175,209,73,126,63,145,226,189],[232,84,253,228,193,237,179,73,49,129,71,150,183,52,117,192,143,112,245,106,245,220,4,224,130,48,53,175,84,11,57,166],[106,172,243,3,37,15,235,112,239,243,56,37,13,17,237,205,161,111,251,230,213,194,103,205,52,92,157,201,54,88,116,24],[222,207,161,181,47,28,223,91,72,182,146,64,12,93,103,99,190,11,53,103,92,62,62,55,37,62,84,235,2,228,46,120],[190,111,167,215,185,240,230,64,217,50,140,20,2,154,208,186,192,220,153,98,230,242,216,242,35,112,70,54,157,174,207,173],[243,195,209,172,23,52,136,250,232,132,194,74,46,251,98,95,46,145,42,87,121,97,20,131,253,242,244,63,214,57,216,208],[200,214,160,122,24,179,46,32,235,208,88,128,6,95,183,6,200,183,226,141,210,66,163,221,174,242,193,60,208,223,168,154],[11,206,252,104,102,21,223,38,216,100,187,149,167,54,130,212,244,55,115,229,84,128,95,80,6,203,14,120,112,109,62,127],[108,8,186,118,66,77,172,100,60,30,222,188,132,124,40,162,42,254,60,202,210,180,188,145,21,119,246,61,162,50,241,15],[208,52,62,26,124,173,241,190,195,91,102,130,183,153,137,134,239,173,215,8,52,133,126,235,204,240,134,197,61,210,13,19],[158,38,53,167,217,40,133,150,32,117,182,220,127,125,167,142,44,125,144,108,187,13,55,153,252,225,89,158,201,25,5,177],[75,249,53,120,104,194,173,56,6,151,58,55,118,99,243,79,64,216,212,68,251,97,4,173,82,64,210,174,49,15,103,185],[22,63,43,156,64,148,17,122,38,111,204,144,61,162,237,221,249,194,149,153,71,155,84,153,230,224,67,26,72,200,209,32],[34,224,29,56,233,48,155,37,254,131,79,232,132,174,242,91,247,228,240,246,193,29,92,144,82,21,136,202,4,51,62,209],[39,208,66,222,123,192,185,177,97,39,2,61,184,204,166,121,176,232,30,179,165,69,99,235,50,248,186,29,40,169,207,193],[101,63,240,52,33,215,136,212,250,111,252,93,94,170,244,77,46,243,212,232,210,102,133,147,95,168,142,29,115,172,71,153],[184,70,96,41,118,165,175,138,169,56,77,1,198,193,38,224,79,220,41,225,135,48,78,145,240,179,218,77,181,171,113,241],[183,155,137,80,232,156,0,117,46,65,117,76,74,25,215,90,118,119,155,28,128,72,119,23,167,194,51,220,239,41,39,19],[82,35,23,102,162,38,184,28,189,170,118,216,171,151,70,99,28,233,89,126,255,254,147,198,73,27,108,1,36,205,216,200],[38,163,78,34,146,171,65,122,160,4,205,156,205,155,142,250,81,243,134,132,6,69,43,186,190,230,208,181,88,116,156,184]]",
                "sol": "[bytes32(stringToBytes32(\"126,209,144,9,5,184,7,171,15,176,123,229,225,225,118,102,191,28,161,106,12,33,130,18,230,51,128,128,175,10,57,32\")),bytes32(stringToBytes32(\"44,238,81,108,87,2,167,141,210,163,111,92,4,160,110,219,83,60,119,246,225,42,100,186,50,209,192,254,104,84,167,98\")),bytes32(stringToBytes32(\"77,38,232,141,57,156,32,45,108,1,101,170,55,52,216,226,102,123,88,37,142,62,0,154,248,176,254,201,192,233,120,119\")),bytes32(stringToBytes32(\"47,153,131,189,76,55,184,117,138,138,25,177,171,70,100,92,70,189,138,212,54,110,148,129,72,43,15,127,4,195,222,211\")),bytes32(stringToBytes32(\"125,16,84,85,238,29,208,167,159,175,82,232,224,55,31,223,163,14,196,17,78,107,124,166,93,207,5,52,220,202,127,120\")),bytes32(stringToBytes32(\"103,219,247,109,148,34,143,203,175,208,59,50,157,8,179,165,237,228,29,140,209,89,108,241,134,182,104,91,188,30,237,1\")),bytes32(stringToBytes32(\"194,243,217,34,46,227,89,216,226,25,42,254,41,200,7,39,207,194,151,233,29,14,136,105,169,54,73,24,21,77,1,230\")),bytes32(stringToBytes32(\"16,183,138,155,126,185,32,150,10,114,254,102,173,181,131,213,22,88,222,96,128,211,15,48,160,217,5,148,25,77,106,235\")),bytes32(stringToBytes32(\"69,214,194,48,138,211,188,108,98,132,139,100,183,143,19,188,245,34,166,213,212,0,183,14,141,198,64,184,32,141,222,107\")),bytes32(stringToBytes32(\"117,52,90,132,103,107,175,35,197,10,31,154,6,140,104,75,85,7,66,33,32,228,37,202,194,176,208,192,188,3,29,168\")),bytes32(stringToBytes32(\"145,251,163,78,32,216,106,164,119,24,57,56,137,58,8,164,236,61,215,197,64,142,207,81,11,94,231,96,237,63,113,122\")),bytes32(stringToBytes32(\"215,171,81,218,105,72,230,130,72,160,10,227,240,115,26,112,250,134,209,175,8,169,93,153,17,219,80,186,82,140,249,185\")),bytes32(stringToBytes32(\"81,235,24,127,49,42,97,215,2,140,140,127,171,94,212,181,127,109,62,98,90,122,40,27,147,45,225,103,231,96,100,170\")),bytes32(stringToBytes32(\"89,147,36,55,39,52,40,34,239,45,149,82,15,121,170,108,134,231,101,247,123,146,108,109,86,122,128,248,216,145,239,112\")),bytes32(stringToBytes32(\"226,161,228,32,109,225,194,119,218,67,250,98,172,24,78,224,47,80,68,178,211,246,64,65,130,255,56,59,111,2,132,109\")),bytes32(stringToBytes32(\"190,225,80,175,91,119,155,26,153,227,139,16,87,62,5,79,150,82,121,87,248,22,21,29,60,204,162,176,140,159,227,177\")),bytes32(stringToBytes32(\"113,64,197,253,54,165,131,175,125,127,111,47,72,232,202,82,193,203,33,63,98,50,4,37,111,225,194,176,101,229,81,194\")),bytes32(stringToBytes32(\"66,53,196,205,41,103,235,223,246,180,248,102,190,157,85,121,255,236,251,173,109,51,163,169,231,241,78,49,239,81,150,211\")),bytes32(stringToBytes32(\"36,124,184,188,184,8,124,30,250,48,223,141,208,152,96,194,240,234,142,246,95,84,66,57,164,143,8,218,74,41,16,41\")),bytes32(stringToBytes32(\"110,63,195,57,105,219,16,166,175,49,179,241,114,24,200,17,10,222,210,65,165,42,172,41,182,75,178,142,171,233,241,186\")),bytes32(stringToBytes32(\"201,242,53,83,149,118,221,211,33,78,73,185,76,219,131,135,147,210,104,241,67,22,223,252,240,182,51,116,11,225,230,247\")),bytes32(stringToBytes32(\"83,139,201,255,129,95,0,240,216,4,49,3,226,207,62,250,159,159,9,131,38,132,120,198,56,241,122,78,36,210,253,204\")),bytes32(stringToBytes32(\"6,255,82,76,128,74,38,223,196,194,30,227,124,68,137,216,212,217,10,58,232,29,92,39,160,14,90,20,224,45,187,187\")),bytes32(stringToBytes32(\"107,15,109,220,98,245,214,145,41,227,186,210,124,238,24,244,117,173,101,47,94,139,126,73,162,32,45,239,222,79,249,165\")),bytes32(stringToBytes32(\"150,131,252,101,107,184,213,58,126,9,5,93,22,17,1,15,85,45,141,114,2,157,101,12,171,207,27,216,134,98,8,161\")),bytes32(stringToBytes32(\"53,13,10,236,80,67,28,227,255,63,164,34,29,142,156,224,61,80,45,37,99,127,243,183,181,63,68,118,157,65,219,52\")),bytes32(stringToBytes32(\"16,99,42,187,116,24,1,216,5,233,195,220,60,39,172,149,64,238,46,181,58,50,4,68,179,64,58,204,173,204,133,125\")),bytes32(stringToBytes32(\"251,173,4,39,186,131,63,212,218,42,58,52,97,190,122,214,145,11,219,71,245,41,41,89,183,82,126,175,130,81,219,72\")),bytes32(stringToBytes32(\"241,51,235,176,5,199,78,209,116,114,141,119,141,167,228,159,238,234,251,109,239,96,176,237,127,157,193,220,221,57,96,239\")),bytes32(stringToBytes32(\"139,152,121,241,2,44,91,94,82,219,44,218,106,240,174,141,103,26,102,132,132,139,98,138,143,181,126,226,141,206,15,97\")),bytes32(stringToBytes32(\"255,252,251,240,85,249,74,95,241,153,150,63,38,251,120,11,243,112,16,124,76,94,112,140,142,140,231,131,137,22,131,47\")),bytes32(stringToBytes32(\"172,106,38,5,229,72,193,163,205,189,117,140,14,79,10,221,215,240,139,74,193,69,114,79,167,130,112,233,60,74,21,96\")),bytes32(stringToBytes32(\"237,115,97,245,60,201,20,235,94,31,128,215,44,117,149,202,168,10,235,69,99,78,73,241,213,69,180,144,101,220,128,68\")),bytes32(stringToBytes32(\"103,101,209,133,173,65,92,163,253,205,48,60,58,188,231,228,255,140,27,69,131,129,208,94,188,197,232,174,21,89,93,181\")),bytes32(stringToBytes32(\"201,121,6,109,5,201,218,14,171,40,173,61,135,82,213,1,105,198,110,35,137,130,145,76,150,54,31,154,116,246,124,235\")),bytes32(stringToBytes32(\"243,3,255,86,180,229,241,229,0,151,119,35,99,144,178,86,239,228,243,69,75,200,47,136,171,216,188,38,154,250,240,56\")),bytes32(stringToBytes32(\"249,160,103,3,44,182,167,78,151,36,154,109,10,164,207,67,70,219,14,151,111,141,16,160,124,216,205,118,197,232,67,223\")),bytes32(stringToBytes32(\"41,174,23,116,34,222,87,0,155,123,204,167,158,15,43,244,198,234,195,175,250,144,143,7,107,88,222,192,30,39,81,188\")),bytes32(stringToBytes32(\"255,175,136,116,131,50,202,132,182,120,214,122,148,22,143,25,75,5,118,136,55,13,144,38,101,30,103,19,65,171,102,33\")),bytes32(stringToBytes32(\"216,5,38,128,16,234,64,229,249,186,20,66,106,129,193,26,6,231,209,139,107,58,16,216,179,88,139,29,225,211,90,14\")),bytes32(stringToBytes32(\"112,126,242,149,185,56,75,125,109,237,55,86,237,32,179,92,230,238,14,202,190,14,194,128,246,52,107,56,249,149,245,58\")),bytes32(stringToBytes32(\"156,91,121,158,228,3,196,74,176,199,14,225,168,242,186,114,114,144,89,20,22,94,99,85,247,209,23,100,237,72,55,75\")),bytes32(stringToBytes32(\"191,192,56,24,221,14,108,88,116,123,145,29,114,51,125,33,184,178,206,157,171,76,197,162,206,116,12,189,231,194,131,213\")),bytes32(stringToBytes32(\"125,155,30,193,135,50,231,248,6,51,56,16,168,204,204,89,212,132,101,121,85,89,224,97,93,141,112,60,36,61,7,193\")),bytes32(stringToBytes32(\"62,124,8,141,217,63,237,85,236,186,58,248,142,173,24,180,2,254,131,218,170,30,1,227,175,209,73,126,63,145,226,189\")),bytes32(stringToBytes32(\"232,84,253,228,193,237,179,73,49,129,71,150,183,52,117,192,143,112,245,106,245,220,4,224,130,48,53,175,84,11,57,166\")),bytes32(stringToBytes32(\"106,172,243,3,37,15,235,112,239,243,56,37,13,17,237,205,161,111,251,230,213,194,103,205,52,92,157,201,54,88,116,24\")),bytes32(stringToBytes32(\"222,207,161,181,47,28,223,91,72,182,146,64,12,93,103,99,190,11,53,103,92,62,62,55,37,62,84,235,2,228,46,120\")),bytes32(stringToBytes32(\"190,111,167,215,185,240,230,64,217,50,140,20,2,154,208,186,192,220,153,98,230,242,216,242,35,112,70,54,157,174,207,173\")),bytes32(stringToBytes32(\"243,195,209,172,23,52,136,250,232,132,194,74,46,251,98,95,46,145,42,87,121,97,20,131,253,242,244,63,214,57,216,208\")),bytes32(stringToBytes32(\"200,214,160,122,24,179,46,32,235,208,88,128,6,95,183,6,200,183,226,141,210,66,163,221,174,242,193,60,208,223,168,154\")),bytes32(stringToBytes32(\"11,206,252,104,102,21,223,38,216,100,187,149,167,54,130,212,244,55,115,229,84,128,95,80,6,203,14,120,112,109,62,127\")),bytes32(stringToBytes32(\"108,8,186,118,66,77,172,100,60,30,222,188,132,124,40,162,42,254,60,202,210,180,188,145,21,119,246,61,162,50,241,15\")),bytes32(stringToBytes32(\"208,52,62,26,124,173,241,190,195,91,102,130,183,153,137,134,239,173,215,8,52,133,126,235,204,240,134,197,61,210,13,19\")),bytes32(stringToBytes32(\"158,38,53,167,217,40,133,150,32,117,182,220,127,125,167,142,44,125,144,108,187,13,55,153,252,225,89,158,201,25,5,177\")),bytes32(stringToBytes32(\"75,249,53,120,104,194,173,56,6,151,58,55,118,99,243,79,64,216,212,68,251,97,4,173,82,64,210,174,49,15,103,185\")),bytes32(stringToBytes32(\"22,63,43,156,64,148,17,122,38,111,204,144,61,162,237,221,249,194,149,153,71,155,84,153,230,224,67,26,72,200,209,32\")),bytes32(stringToBytes32(\"34,224,29,56,233,48,155,37,254,131,79,232,132,174,242,91,247,228,240,246,193,29,92,144,82,21,136,202,4,51,62,209\")),bytes32(stringToBytes32(\"39,208,66,222,123,192,185,177,97,39,2,61,184,204,166,121,176,232,30,179,165,69,99,235,50,248,186,29,40,169,207,193\")),bytes32(stringToBytes32(\"101,63,240,52,33,215,136,212,250,111,252,93,94,170,244,77,46,243,212,232,210,102,133,147,95,168,142,29,115,172,71,153\")),bytes32(stringToBytes32(\"184,70,96,41,118,165,175,138,169,56,77,1,198,193,38,224,79,220,41,225,135,48,78,145,240,179,218,77,181,171,113,241\")),bytes32(stringToBytes32(\"183,155,137,80,232,156,0,117,46,65,117,76,74,25,215,90,118,119,155,28,128,72,119,23,167,194,51,220,239,41,39,19\")),bytes32(stringToBytes32(\"82,35,23,102,162,38,184,28,189,170,118,216,171,151,70,99,28,233,89,126,255,254,147,198,73,27,108,1,36,205,216,200\")),bytes32(stringToBytes32(\"38,163,78,34,146,171,65,122,160,4,205,156,205,155,142,250,81,243,134,132,6,69,43,186,190,230,208,181,88,116,156,184\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[0],accounts[8],accounts[8],accounts[5],accounts[8],accounts[0],accounts[3],accounts[8],accounts[4],accounts[6],accounts[4],accounts[8],accounts[4],accounts[3],accounts[9],accounts[6],accounts[5],accounts[2],accounts[4],accounts[4],accounts[6],accounts[7],accounts[5],accounts[2],accounts[5],accounts[8],accounts[6],accounts[3],accounts[1],accounts[7],accounts[6],accounts[9],accounts[9],accounts[3],accounts[6],accounts[0],accounts[8],accounts[7],accounts[1],accounts[3],accounts[9],accounts[8],accounts[3],accounts[0],accounts[2],accounts[7],accounts[2],accounts[2],accounts[9],accounts[9],accounts[7],accounts[5],accounts[7],accounts[9],accounts[1],accounts[7],accounts[0],accounts[5],accounts[0],accounts[2],accounts[3],accounts[9],accounts[9],accounts[5],accounts[2]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[2014223714,4,6,2,255,2,28,257,96,2014223714,9999,0,27,64,2,66,96,6,1338,95,254,1338,64,1532892063,64,28,1337,10001,1532892062,4,254,64,1532892062,64,2,0,28,6,64,1532892063,1337,3,29,1338,2014223715,1532892064,256,256,1,1532892062,9999,2014223715,27,1,65,66,28,9999,65,1,10000,64,97,4]",
                "sol": "[uint256(2014223714),uint256(4),uint256(6),uint256(2),uint256(255),uint256(2),uint256(28),uint256(257),uint256(96),uint256(2014223714),uint256(9999),uint256(0),uint256(27),uint256(64),uint256(2),uint256(66),uint256(96),uint256(6),uint256(1338),uint256(95),uint256(254),uint256(1338),uint256(64),uint256(1532892063),uint256(64),uint256(28),uint256(1337),uint256(10001),uint256(1532892062),uint256(4),uint256(254),uint256(64),uint256(1532892062),uint256(64),uint256(2),uint256(0),uint256(28),uint256(6),uint256(64),uint256(1532892063),uint256(1337),uint256(3),uint256(29),uint256(1338),uint256(2014223715),uint256(1532892064),uint256(256),uint256(256),uint256(1),uint256(1532892062),uint256(9999),uint256(2014223715),uint256(27),uint256(1),uint256(65),uint256(66),uint256(28),uint256(9999),uint256(65),uint256(1),uint256(10000),uint256(64),uint256(97),uint256(4)]"
              },
              {
                "js": "[3,97,2014223715,2014223714,254,1338,5,64,1532892063,1,26,27,1532892064,96,2,29,29,256,1336,3,64,29,1532892063,64,5,64,1336,9999,5,257,0,0,6,5,2014223714,28,10000,0,0,64,2014223714,254,256,97,66,4,65,29,29,1338,1338,29,1532892062,95,1338,254,10000,64,255,2014223714,1336,66,1532892064,1]",
                "sol": "[uint256(3),uint256(97),uint256(2014223715),uint256(2014223714),uint256(254),uint256(1338),uint256(5),uint256(64),uint256(1532892063),uint256(1),uint256(26),uint256(27),uint256(1532892064),uint256(96),uint256(2),uint256(29),uint256(29),uint256(256),uint256(1336),uint256(3),uint256(64),uint256(29),uint256(1532892063),uint256(64),uint256(5),uint256(64),uint256(1336),uint256(9999),uint256(5),uint256(257),uint256(0),uint256(0),uint256(6),uint256(5),uint256(2014223714),uint256(28),uint256(10000),uint256(0),uint256(0),uint256(64),uint256(2014223714),uint256(254),uint256(256),uint256(97),uint256(66),uint256(4),uint256(65),uint256(29),uint256(29),uint256(1338),uint256(1338),uint256(29),uint256(1532892062),uint256(95),uint256(1338),uint256(254),uint256(10000),uint256(64),uint256(255),uint256(2014223714),uint256(1336),uint256(66),uint256(1532892064),uint256(1)]"
              },
              {
                "js": "[[126,209,144,9,5,184,7,171,15,176,123,229,225,225,118,102,191,28,161,106,12,33,130,18,230,51,128,128,175,10,57,32],[44,238,81,108,87,2,167,141,210,163,111,92,4,160,110,219,83,60,119,246,225,42,100,186,50,209,192,254,104,84,167,98],[77,38,232,141,57,156,32,45,108,1,101,170,55,52,216,226,102,123,88,37,142,62,0,154,248,176,254,201,192,233,120,119],[47,153,131,189,76,55,184,117,138,138,25,177,171,70,100,92,70,189,138,212,54,110,148,129,72,43,15,127,4,195,222,211],[125,16,84,85,238,29,208,167,159,175,82,232,224,55,31,223,163,14,196,17,78,107,124,166,93,207,5,52,220,202,127,120],[103,219,247,109,148,34,143,203,175,208,59,50,157,8,179,165,237,228,29,140,209,89,108,241,134,182,104,91,188,30,237,1],[194,243,217,34,46,227,89,216,226,25,42,254,41,200,7,39,207,194,151,233,29,14,136,105,169,54,73,24,21,77,1,230],[16,183,138,155,126,185,32,150,10,114,254,102,173,181,131,213,22,88,222,96,128,211,15,48,160,217,5,148,25,77,106,235],[69,214,194,48,138,211,188,108,98,132,139,100,183,143,19,188,245,34,166,213,212,0,183,14,141,198,64,184,32,141,222,107],[117,52,90,132,103,107,175,35,197,10,31,154,6,140,104,75,85,7,66,33,32,228,37,202,194,176,208,192,188,3,29,168],[145,251,163,78,32,216,106,164,119,24,57,56,137,58,8,164,236,61,215,197,64,142,207,81,11,94,231,96,237,63,113,122],[215,171,81,218,105,72,230,130,72,160,10,227,240,115,26,112,250,134,209,175,8,169,93,153,17,219,80,186,82,140,249,185],[81,235,24,127,49,42,97,215,2,140,140,127,171,94,212,181,127,109,62,98,90,122,40,27,147,45,225,103,231,96,100,170],[89,147,36,55,39,52,40,34,239,45,149,82,15,121,170,108,134,231,101,247,123,146,108,109,86,122,128,248,216,145,239,112],[226,161,228,32,109,225,194,119,218,67,250,98,172,24,78,224,47,80,68,178,211,246,64,65,130,255,56,59,111,2,132,109],[190,225,80,175,91,119,155,26,153,227,139,16,87,62,5,79,150,82,121,87,248,22,21,29,60,204,162,176,140,159,227,177],[113,64,197,253,54,165,131,175,125,127,111,47,72,232,202,82,193,203,33,63,98,50,4,37,111,225,194,176,101,229,81,194],[66,53,196,205,41,103,235,223,246,180,248,102,190,157,85,121,255,236,251,173,109,51,163,169,231,241,78,49,239,81,150,211],[36,124,184,188,184,8,124,30,250,48,223,141,208,152,96,194,240,234,142,246,95,84,66,57,164,143,8,218,74,41,16,41],[110,63,195,57,105,219,16,166,175,49,179,241,114,24,200,17,10,222,210,65,165,42,172,41,182,75,178,142,171,233,241,186],[201,242,53,83,149,118,221,211,33,78,73,185,76,219,131,135,147,210,104,241,67,22,223,252,240,182,51,116,11,225,230,247],[83,139,201,255,129,95,0,240,216,4,49,3,226,207,62,250,159,159,9,131,38,132,120,198,56,241,122,78,36,210,253,204],[6,255,82,76,128,74,38,223,196,194,30,227,124,68,137,216,212,217,10,58,232,29,92,39,160,14,90,20,224,45,187,187],[107,15,109,220,98,245,214,145,41,227,186,210,124,238,24,244,117,173,101,47,94,139,126,73,162,32,45,239,222,79,249,165],[150,131,252,101,107,184,213,58,126,9,5,93,22,17,1,15,85,45,141,114,2,157,101,12,171,207,27,216,134,98,8,161],[53,13,10,236,80,67,28,227,255,63,164,34,29,142,156,224,61,80,45,37,99,127,243,183,181,63,68,118,157,65,219,52],[16,99,42,187,116,24,1,216,5,233,195,220,60,39,172,149,64,238,46,181,58,50,4,68,179,64,58,204,173,204,133,125],[251,173,4,39,186,131,63,212,218,42,58,52,97,190,122,214,145,11,219,71,245,41,41,89,183,82,126,175,130,81,219,72],[241,51,235,176,5,199,78,209,116,114,141,119,141,167,228,159,238,234,251,109,239,96,176,237,127,157,193,220,221,57,96,239],[139,152,121,241,2,44,91,94,82,219,44,218,106,240,174,141,103,26,102,132,132,139,98,138,143,181,126,226,141,206,15,97],[255,252,251,240,85,249,74,95,241,153,150,63,38,251,120,11,243,112,16,124,76,94,112,140,142,140,231,131,137,22,131,47],[172,106,38,5,229,72,193,163,205,189,117,140,14,79,10,221,215,240,139,74,193,69,114,79,167,130,112,233,60,74,21,96],[237,115,97,245,60,201,20,235,94,31,128,215,44,117,149,202,168,10,235,69,99,78,73,241,213,69,180,144,101,220,128,68],[103,101,209,133,173,65,92,163,253,205,48,60,58,188,231,228,255,140,27,69,131,129,208,94,188,197,232,174,21,89,93,181],[201,121,6,109,5,201,218,14,171,40,173,61,135,82,213,1,105,198,110,35,137,130,145,76,150,54,31,154,116,246,124,235],[243,3,255,86,180,229,241,229,0,151,119,35,99,144,178,86,239,228,243,69,75,200,47,136,171,216,188,38,154,250,240,56],[249,160,103,3,44,182,167,78,151,36,154,109,10,164,207,67,70,219,14,151,111,141,16,160,124,216,205,118,197,232,67,223],[41,174,23,116,34,222,87,0,155,123,204,167,158,15,43,244,198,234,195,175,250,144,143,7,107,88,222,192,30,39,81,188],[255,175,136,116,131,50,202,132,182,120,214,122,148,22,143,25,75,5,118,136,55,13,144,38,101,30,103,19,65,171,102,33],[216,5,38,128,16,234,64,229,249,186,20,66,106,129,193,26,6,231,209,139,107,58,16,216,179,88,139,29,225,211,90,14],[112,126,242,149,185,56,75,125,109,237,55,86,237,32,179,92,230,238,14,202,190,14,194,128,246,52,107,56,249,149,245,58],[156,91,121,158,228,3,196,74,176,199,14,225,168,242,186,114,114,144,89,20,22,94,99,85,247,209,23,100,237,72,55,75],[191,192,56,24,221,14,108,88,116,123,145,29,114,51,125,33,184,178,206,157,171,76,197,162,206,116,12,189,231,194,131,213],[125,155,30,193,135,50,231,248,6,51,56,16,168,204,204,89,212,132,101,121,85,89,224,97,93,141,112,60,36,61,7,193],[62,124,8,141,217,63,237,85,236,186,58,248,142,173,24,180,2,254,131,218,170,30,1,227,175,209,73,126,63,145,226,189],[232,84,253,228,193,237,179,73,49,129,71,150,183,52,117,192,143,112,245,106,245,220,4,224,130,48,53,175,84,11,57,166],[106,172,243,3,37,15,235,112,239,243,56,37,13,17,237,205,161,111,251,230,213,194,103,205,52,92,157,201,54,88,116,24],[222,207,161,181,47,28,223,91,72,182,146,64,12,93,103,99,190,11,53,103,92,62,62,55,37,62,84,235,2,228,46,120],[190,111,167,215,185,240,230,64,217,50,140,20,2,154,208,186,192,220,153,98,230,242,216,242,35,112,70,54,157,174,207,173],[243,195,209,172,23,52,136,250,232,132,194,74,46,251,98,95,46,145,42,87,121,97,20,131,253,242,244,63,214,57,216,208],[200,214,160,122,24,179,46,32,235,208,88,128,6,95,183,6,200,183,226,141,210,66,163,221,174,242,193,60,208,223,168,154],[11,206,252,104,102,21,223,38,216,100,187,149,167,54,130,212,244,55,115,229,84,128,95,80,6,203,14,120,112,109,62,127],[108,8,186,118,66,77,172,100,60,30,222,188,132,124,40,162,42,254,60,202,210,180,188,145,21,119,246,61,162,50,241,15],[208,52,62,26,124,173,241,190,195,91,102,130,183,153,137,134,239,173,215,8,52,133,126,235,204,240,134,197,61,210,13,19],[158,38,53,167,217,40,133,150,32,117,182,220,127,125,167,142,44,125,144,108,187,13,55,153,252,225,89,158,201,25,5,177],[75,249,53,120,104,194,173,56,6,151,58,55,118,99,243,79,64,216,212,68,251,97,4,173,82,64,210,174,49,15,103,185],[22,63,43,156,64,148,17,122,38,111,204,144,61,162,237,221,249,194,149,153,71,155,84,153,230,224,67,26,72,200,209,32],[34,224,29,56,233,48,155,37,254,131,79,232,132,174,242,91,247,228,240,246,193,29,92,144,82,21,136,202,4,51,62,209],[39,208,66,222,123,192,185,177,97,39,2,61,184,204,166,121,176,232,30,179,165,69,99,235,50,248,186,29,40,169,207,193],[101,63,240,52,33,215,136,212,250,111,252,93,94,170,244,77,46,243,212,232,210,102,133,147,95,168,142,29,115,172,71,153],[184,70,96,41,118,165,175,138,169,56,77,1,198,193,38,224,79,220,41,225,135,48,78,145,240,179,218,77,181,171,113,241],[183,155,137,80,232,156,0,117,46,65,117,76,74,25,215,90,118,119,155,28,128,72,119,23,167,194,51,220,239,41,39,19],[82,35,23,102,162,38,184,28,189,170,118,216,171,151,70,99,28,233,89,126,255,254,147,198,73,27,108,1,36,205,216,200],[38,163,78,34,146,171,65,122,160,4,205,156,205,155,142,250,81,243,134,132,6,69,43,186,190,230,208,181,88,116,156,184]]",
                "sol": "[bytes32(stringToBytes32(\"126,209,144,9,5,184,7,171,15,176,123,229,225,225,118,102,191,28,161,106,12,33,130,18,230,51,128,128,175,10,57,32\")),bytes32(stringToBytes32(\"44,238,81,108,87,2,167,141,210,163,111,92,4,160,110,219,83,60,119,246,225,42,100,186,50,209,192,254,104,84,167,98\")),bytes32(stringToBytes32(\"77,38,232,141,57,156,32,45,108,1,101,170,55,52,216,226,102,123,88,37,142,62,0,154,248,176,254,201,192,233,120,119\")),bytes32(stringToBytes32(\"47,153,131,189,76,55,184,117,138,138,25,177,171,70,100,92,70,189,138,212,54,110,148,129,72,43,15,127,4,195,222,211\")),bytes32(stringToBytes32(\"125,16,84,85,238,29,208,167,159,175,82,232,224,55,31,223,163,14,196,17,78,107,124,166,93,207,5,52,220,202,127,120\")),bytes32(stringToBytes32(\"103,219,247,109,148,34,143,203,175,208,59,50,157,8,179,165,237,228,29,140,209,89,108,241,134,182,104,91,188,30,237,1\")),bytes32(stringToBytes32(\"194,243,217,34,46,227,89,216,226,25,42,254,41,200,7,39,207,194,151,233,29,14,136,105,169,54,73,24,21,77,1,230\")),bytes32(stringToBytes32(\"16,183,138,155,126,185,32,150,10,114,254,102,173,181,131,213,22,88,222,96,128,211,15,48,160,217,5,148,25,77,106,235\")),bytes32(stringToBytes32(\"69,214,194,48,138,211,188,108,98,132,139,100,183,143,19,188,245,34,166,213,212,0,183,14,141,198,64,184,32,141,222,107\")),bytes32(stringToBytes32(\"117,52,90,132,103,107,175,35,197,10,31,154,6,140,104,75,85,7,66,33,32,228,37,202,194,176,208,192,188,3,29,168\")),bytes32(stringToBytes32(\"145,251,163,78,32,216,106,164,119,24,57,56,137,58,8,164,236,61,215,197,64,142,207,81,11,94,231,96,237,63,113,122\")),bytes32(stringToBytes32(\"215,171,81,218,105,72,230,130,72,160,10,227,240,115,26,112,250,134,209,175,8,169,93,153,17,219,80,186,82,140,249,185\")),bytes32(stringToBytes32(\"81,235,24,127,49,42,97,215,2,140,140,127,171,94,212,181,127,109,62,98,90,122,40,27,147,45,225,103,231,96,100,170\")),bytes32(stringToBytes32(\"89,147,36,55,39,52,40,34,239,45,149,82,15,121,170,108,134,231,101,247,123,146,108,109,86,122,128,248,216,145,239,112\")),bytes32(stringToBytes32(\"226,161,228,32,109,225,194,119,218,67,250,98,172,24,78,224,47,80,68,178,211,246,64,65,130,255,56,59,111,2,132,109\")),bytes32(stringToBytes32(\"190,225,80,175,91,119,155,26,153,227,139,16,87,62,5,79,150,82,121,87,248,22,21,29,60,204,162,176,140,159,227,177\")),bytes32(stringToBytes32(\"113,64,197,253,54,165,131,175,125,127,111,47,72,232,202,82,193,203,33,63,98,50,4,37,111,225,194,176,101,229,81,194\")),bytes32(stringToBytes32(\"66,53,196,205,41,103,235,223,246,180,248,102,190,157,85,121,255,236,251,173,109,51,163,169,231,241,78,49,239,81,150,211\")),bytes32(stringToBytes32(\"36,124,184,188,184,8,124,30,250,48,223,141,208,152,96,194,240,234,142,246,95,84,66,57,164,143,8,218,74,41,16,41\")),bytes32(stringToBytes32(\"110,63,195,57,105,219,16,166,175,49,179,241,114,24,200,17,10,222,210,65,165,42,172,41,182,75,178,142,171,233,241,186\")),bytes32(stringToBytes32(\"201,242,53,83,149,118,221,211,33,78,73,185,76,219,131,135,147,210,104,241,67,22,223,252,240,182,51,116,11,225,230,247\")),bytes32(stringToBytes32(\"83,139,201,255,129,95,0,240,216,4,49,3,226,207,62,250,159,159,9,131,38,132,120,198,56,241,122,78,36,210,253,204\")),bytes32(stringToBytes32(\"6,255,82,76,128,74,38,223,196,194,30,227,124,68,137,216,212,217,10,58,232,29,92,39,160,14,90,20,224,45,187,187\")),bytes32(stringToBytes32(\"107,15,109,220,98,245,214,145,41,227,186,210,124,238,24,244,117,173,101,47,94,139,126,73,162,32,45,239,222,79,249,165\")),bytes32(stringToBytes32(\"150,131,252,101,107,184,213,58,126,9,5,93,22,17,1,15,85,45,141,114,2,157,101,12,171,207,27,216,134,98,8,161\")),bytes32(stringToBytes32(\"53,13,10,236,80,67,28,227,255,63,164,34,29,142,156,224,61,80,45,37,99,127,243,183,181,63,68,118,157,65,219,52\")),bytes32(stringToBytes32(\"16,99,42,187,116,24,1,216,5,233,195,220,60,39,172,149,64,238,46,181,58,50,4,68,179,64,58,204,173,204,133,125\")),bytes32(stringToBytes32(\"251,173,4,39,186,131,63,212,218,42,58,52,97,190,122,214,145,11,219,71,245,41,41,89,183,82,126,175,130,81,219,72\")),bytes32(stringToBytes32(\"241,51,235,176,5,199,78,209,116,114,141,119,141,167,228,159,238,234,251,109,239,96,176,237,127,157,193,220,221,57,96,239\")),bytes32(stringToBytes32(\"139,152,121,241,2,44,91,94,82,219,44,218,106,240,174,141,103,26,102,132,132,139,98,138,143,181,126,226,141,206,15,97\")),bytes32(stringToBytes32(\"255,252,251,240,85,249,74,95,241,153,150,63,38,251,120,11,243,112,16,124,76,94,112,140,142,140,231,131,137,22,131,47\")),bytes32(stringToBytes32(\"172,106,38,5,229,72,193,163,205,189,117,140,14,79,10,221,215,240,139,74,193,69,114,79,167,130,112,233,60,74,21,96\")),bytes32(stringToBytes32(\"237,115,97,245,60,201,20,235,94,31,128,215,44,117,149,202,168,10,235,69,99,78,73,241,213,69,180,144,101,220,128,68\")),bytes32(stringToBytes32(\"103,101,209,133,173,65,92,163,253,205,48,60,58,188,231,228,255,140,27,69,131,129,208,94,188,197,232,174,21,89,93,181\")),bytes32(stringToBytes32(\"201,121,6,109,5,201,218,14,171,40,173,61,135,82,213,1,105,198,110,35,137,130,145,76,150,54,31,154,116,246,124,235\")),bytes32(stringToBytes32(\"243,3,255,86,180,229,241,229,0,151,119,35,99,144,178,86,239,228,243,69,75,200,47,136,171,216,188,38,154,250,240,56\")),bytes32(stringToBytes32(\"249,160,103,3,44,182,167,78,151,36,154,109,10,164,207,67,70,219,14,151,111,141,16,160,124,216,205,118,197,232,67,223\")),bytes32(stringToBytes32(\"41,174,23,116,34,222,87,0,155,123,204,167,158,15,43,244,198,234,195,175,250,144,143,7,107,88,222,192,30,39,81,188\")),bytes32(stringToBytes32(\"255,175,136,116,131,50,202,132,182,120,214,122,148,22,143,25,75,5,118,136,55,13,144,38,101,30,103,19,65,171,102,33\")),bytes32(stringToBytes32(\"216,5,38,128,16,234,64,229,249,186,20,66,106,129,193,26,6,231,209,139,107,58,16,216,179,88,139,29,225,211,90,14\")),bytes32(stringToBytes32(\"112,126,242,149,185,56,75,125,109,237,55,86,237,32,179,92,230,238,14,202,190,14,194,128,246,52,107,56,249,149,245,58\")),bytes32(stringToBytes32(\"156,91,121,158,228,3,196,74,176,199,14,225,168,242,186,114,114,144,89,20,22,94,99,85,247,209,23,100,237,72,55,75\")),bytes32(stringToBytes32(\"191,192,56,24,221,14,108,88,116,123,145,29,114,51,125,33,184,178,206,157,171,76,197,162,206,116,12,189,231,194,131,213\")),bytes32(stringToBytes32(\"125,155,30,193,135,50,231,248,6,51,56,16,168,204,204,89,212,132,101,121,85,89,224,97,93,141,112,60,36,61,7,193\")),bytes32(stringToBytes32(\"62,124,8,141,217,63,237,85,236,186,58,248,142,173,24,180,2,254,131,218,170,30,1,227,175,209,73,126,63,145,226,189\")),bytes32(stringToBytes32(\"232,84,253,228,193,237,179,73,49,129,71,150,183,52,117,192,143,112,245,106,245,220,4,224,130,48,53,175,84,11,57,166\")),bytes32(stringToBytes32(\"106,172,243,3,37,15,235,112,239,243,56,37,13,17,237,205,161,111,251,230,213,194,103,205,52,92,157,201,54,88,116,24\")),bytes32(stringToBytes32(\"222,207,161,181,47,28,223,91,72,182,146,64,12,93,103,99,190,11,53,103,92,62,62,55,37,62,84,235,2,228,46,120\")),bytes32(stringToBytes32(\"190,111,167,215,185,240,230,64,217,50,140,20,2,154,208,186,192,220,153,98,230,242,216,242,35,112,70,54,157,174,207,173\")),bytes32(stringToBytes32(\"243,195,209,172,23,52,136,250,232,132,194,74,46,251,98,95,46,145,42,87,121,97,20,131,253,242,244,63,214,57,216,208\")),bytes32(stringToBytes32(\"200,214,160,122,24,179,46,32,235,208,88,128,6,95,183,6,200,183,226,141,210,66,163,221,174,242,193,60,208,223,168,154\")),bytes32(stringToBytes32(\"11,206,252,104,102,21,223,38,216,100,187,149,167,54,130,212,244,55,115,229,84,128,95,80,6,203,14,120,112,109,62,127\")),bytes32(stringToBytes32(\"108,8,186,118,66,77,172,100,60,30,222,188,132,124,40,162,42,254,60,202,210,180,188,145,21,119,246,61,162,50,241,15\")),bytes32(stringToBytes32(\"208,52,62,26,124,173,241,190,195,91,102,130,183,153,137,134,239,173,215,8,52,133,126,235,204,240,134,197,61,210,13,19\")),bytes32(stringToBytes32(\"158,38,53,167,217,40,133,150,32,117,182,220,127,125,167,142,44,125,144,108,187,13,55,153,252,225,89,158,201,25,5,177\")),bytes32(stringToBytes32(\"75,249,53,120,104,194,173,56,6,151,58,55,118,99,243,79,64,216,212,68,251,97,4,173,82,64,210,174,49,15,103,185\")),bytes32(stringToBytes32(\"22,63,43,156,64,148,17,122,38,111,204,144,61,162,237,221,249,194,149,153,71,155,84,153,230,224,67,26,72,200,209,32\")),bytes32(stringToBytes32(\"34,224,29,56,233,48,155,37,254,131,79,232,132,174,242,91,247,228,240,246,193,29,92,144,82,21,136,202,4,51,62,209\")),bytes32(stringToBytes32(\"39,208,66,222,123,192,185,177,97,39,2,61,184,204,166,121,176,232,30,179,165,69,99,235,50,248,186,29,40,169,207,193\")),bytes32(stringToBytes32(\"101,63,240,52,33,215,136,212,250,111,252,93,94,170,244,77,46,243,212,232,210,102,133,147,95,168,142,29,115,172,71,153\")),bytes32(stringToBytes32(\"184,70,96,41,118,165,175,138,169,56,77,1,198,193,38,224,79,220,41,225,135,48,78,145,240,179,218,77,181,171,113,241\")),bytes32(stringToBytes32(\"183,155,137,80,232,156,0,117,46,65,117,76,74,25,215,90,118,119,155,28,128,72,119,23,167,194,51,220,239,41,39,19\")),bytes32(stringToBytes32(\"82,35,23,102,162,38,184,28,189,170,118,216,171,151,70,99,28,233,89,126,255,254,147,198,73,27,108,1,36,205,216,200\")),bytes32(stringToBytes32(\"38,163,78,34,146,171,65,122,160,4,205,156,205,155,142,250,81,243,134,132,6,69,43,186,190,230,208,181,88,116,156,184\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.632ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[177,211,179,158,107,182,79,95,121,180,197,202,129,98,20,71,208,235,136,140,21,194,234,18,67,126,200,112,248,219,61,245]",
              "sol": "stringToBytes32(\"177,211,179,158,107,182,79,95,121,180,197,202,129,98,20,71,208,235,136,140,21,194,234,18,67,126,200,112,248,219,61,245\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[177,211,179,158,107,182,79,95,121,180,197,202,129,98,20,71,208,235,136,140,21,194,234,18,67,126,200,112,248,219,61,245]",
                "sol": "stringToBytes32(\"177,211,179,158,107,182,79,95,121,180,197,202,129,98,20,71,208,235,136,140,21,194,234,18,67,126,200,112,248,219,61,245\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.633ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T04:22:25.633ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "[244,100,159,51,194,102,199,90,178,204,111,41,236,80,144,57,156,153,147,97,203,88,172,13,105,160,236,225,159,203,112,241]",
              "sol": "stringToBytes32(\"244,100,159,51,194,102,199,90,178,204,111,41,236,80,144,57,156,153,147,97,203,88,172,13,105,160,236,225,159,203,112,241\")"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "[244,100,159,51,194,102,199,90,178,204,111,41,236,80,144,57,156,153,147,97,203,88,172,13,105,160,236,225,159,203,112,241]",
                "sol": "stringToBytes32(\"244,100,159,51,194,102,199,90,178,204,111,41,236,80,144,57,156,153,147,97,203,88,172,13,105,160,236,225,159,203,112,241\")"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[244,100,159,51,194,102,199,90,178,204,111,41,236,80,144,57,156,153,147,97,203,88,172,13,105,160,236,225,159,203,112,241]",
                "sol": "stringToBytes32(\"244,100,159,51,194,102,199,90,178,204,111,41,236,80,144,57,156,153,147,97,203,88,172,13,105,160,236,225,159,203,112,241\")"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "[101,106,204,197,16,49,13,40,90,85,181,255,246,220,75,238,50,139,160,86,50,170,43,154,111,236,207,219,96,134,38,28]",
              "sol": "stringToBytes32(\"101,106,204,197,16,49,13,40,90,85,181,255,246,220,75,238,50,139,160,86,50,170,43,154,111,236,207,219,96,134,38,28\")"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "[101,106,204,197,16,49,13,40,90,85,181,255,246,220,75,238,50,139,160,86,50,170,43,154,111,236,207,219,96,134,38,28]",
                "sol": "stringToBytes32(\"101,106,204,197,16,49,13,40,90,85,181,255,246,220,75,238,50,139,160,86,50,170,43,154,111,236,207,219,96,134,38,28\")"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[101,106,204,197,16,49,13,40,90,85,181,255,246,220,75,238,50,139,160,86,50,170,43,154,111,236,207,219,96,134,38,28]",
                "sol": "stringToBytes32(\"101,106,204,197,16,49,13,40,90,85,181,255,246,220,75,238,50,139,160,86,50,170,43,154,111,236,207,219,96,134,38,28\")"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.636ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T04:22:25.637ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[190,93,186,156,42,81,120,81,122,18,223,138,185,105,141,28,176,239,68,44,208,240,89,124,142,136,13,14,159,125,81,45],[129,105,184,9,93,116,114,124,211,238,96,238,10,119,199,34,64,194,19,41,110,210,210,183,83,48,114,124,248,64,240,184],[41,47,25,102,160,11,6,70,214,54,26,142,192,123,228,163,9,118,240,226,225,64,255,217,50,210,80,111,195,225,253,11],[5,217,23,42,216,251,142,63,186,37,25,126,13,80,9,49,66,122,107,63,64,49,168,115,245,49,215,9,11,108,13,41],[13,0,38,92,245,33,68,38,178,206,150,62,92,135,126,199,177,208,124,129,207,216,155,209,29,136,85,197,68,135,238,169],[168,154,143,174,46,73,213,242,128,44,146,117,44,80,161,152,170,225,125,27,71,205,214,15,186,3,17,76,6,106,104,23],[201,14,38,76,182,93,217,225,67,45,69,119,70,213,183,20,13,160,155,184,248,44,112,131,211,97,11,78,134,52,90,170],[243,125,180,205,82,165,9,86,144,210,241,168,89,174,87,201,64,215,168,249,109,196,48,100,80,237,91,177,103,35,4,216],[6,215,99,14,108,148,249,253,113,133,237,143,90,73,70,165,11,34,34,159,16,217,149,249,68,23,68,242,29,233,136,59],[248,106,1,234,188,130,169,246,152,115,127,38,99,85,44,37,217,86,141,52,221,42,206,255,132,183,180,89,0,76,96,112],[97,106,170,119,221,203,152,191,69,71,189,66,195,58,50,20,250,112,246,1,170,41,76,227,190,15,236,230,16,9,245,236],[168,61,70,203,39,136,37,81,62,129,200,141,124,19,251,18,235,59,35,36,127,164,145,20,6,123,95,255,193,137,139,231],[52,143,142,62,144,250,229,253,227,32,234,175,55,2,66,201,228,238,63,209,14,208,39,158,191,181,37,240,184,29,230,132],[174,208,21,143,213,189,65,212,164,118,152,246,204,249,76,51,159,143,61,111,171,211,11,163,118,0,149,246,7,80,168,246],[94,251,109,217,172,142,131,188,151,144,19,128,55,160,101,218,227,213,248,74,221,84,49,128,174,248,100,139,36,82,246,135],[27,102,207,179,216,179,22,73,71,215,128,93,209,231,118,251,14,6,4,69,38,214,172,82,21,46,210,0,151,169,103,63],[49,161,113,136,54,42,31,224,10,27,63,213,125,52,48,2,197,24,220,209,128,20,76,118,129,254,244,236,9,124,159,129],[206,56,37,102,207,9,76,30,17,243,19,92,174,126,18,62,255,104,91,218,151,138,117,122,95,210,234,67,146,56,177,47],[195,184,179,83,122,128,248,70,181,120,50,70,168,16,221,19,56,4,123,181,107,61,169,113,50,72,141,217,24,182,62,31],[171,178,99,134,142,118,101,0,63,50,95,39,82,90,67,218,163,174,167,170,39,206,2,39,100,218,46,56,28,235,4,97],[250,61,245,58,76,79,84,176,94,215,179,249,241,236,98,39,210,233,102,129,198,80,200,10,112,169,179,15,136,100,207,56],[181,118,34,249,174,142,212,253,219,98,237,118,183,237,64,244,72,203,50,30,165,57,227,118,122,181,24,43,204,178,44,239],[105,219,175,168,216,223,116,211,174,199,10,233,131,31,172,202,68,200,44,32,210,96,54,55,252,92,37,37,185,36,30,141],[47,112,83,43,233,163,83,217,168,104,201,162,24,230,167,243,26,25,196,99,208,4,200,93,207,179,98,247,125,204,133,27],[244,159,177,78,12,211,181,13,21,158,120,86,88,131,134,236,30,154,3,84,157,182,25,153,42,162,23,138,8,245,247,90],[219,185,229,145,202,39,232,226,88,203,61,52,242,114,159,136,174,117,160,33,215,230,42,225,157,127,143,1,58,109,213,181]]",
              "sol": "[bytes32(stringToBytes32(\"190,93,186,156,42,81,120,81,122,18,223,138,185,105,141,28,176,239,68,44,208,240,89,124,142,136,13,14,159,125,81,45\")),bytes32(stringToBytes32(\"129,105,184,9,93,116,114,124,211,238,96,238,10,119,199,34,64,194,19,41,110,210,210,183,83,48,114,124,248,64,240,184\")),bytes32(stringToBytes32(\"41,47,25,102,160,11,6,70,214,54,26,142,192,123,228,163,9,118,240,226,225,64,255,217,50,210,80,111,195,225,253,11\")),bytes32(stringToBytes32(\"5,217,23,42,216,251,142,63,186,37,25,126,13,80,9,49,66,122,107,63,64,49,168,115,245,49,215,9,11,108,13,41\")),bytes32(stringToBytes32(\"13,0,38,92,245,33,68,38,178,206,150,62,92,135,126,199,177,208,124,129,207,216,155,209,29,136,85,197,68,135,238,169\")),bytes32(stringToBytes32(\"168,154,143,174,46,73,213,242,128,44,146,117,44,80,161,152,170,225,125,27,71,205,214,15,186,3,17,76,6,106,104,23\")),bytes32(stringToBytes32(\"201,14,38,76,182,93,217,225,67,45,69,119,70,213,183,20,13,160,155,184,248,44,112,131,211,97,11,78,134,52,90,170\")),bytes32(stringToBytes32(\"243,125,180,205,82,165,9,86,144,210,241,168,89,174,87,201,64,215,168,249,109,196,48,100,80,237,91,177,103,35,4,216\")),bytes32(stringToBytes32(\"6,215,99,14,108,148,249,253,113,133,237,143,90,73,70,165,11,34,34,159,16,217,149,249,68,23,68,242,29,233,136,59\")),bytes32(stringToBytes32(\"248,106,1,234,188,130,169,246,152,115,127,38,99,85,44,37,217,86,141,52,221,42,206,255,132,183,180,89,0,76,96,112\")),bytes32(stringToBytes32(\"97,106,170,119,221,203,152,191,69,71,189,66,195,58,50,20,250,112,246,1,170,41,76,227,190,15,236,230,16,9,245,236\")),bytes32(stringToBytes32(\"168,61,70,203,39,136,37,81,62,129,200,141,124,19,251,18,235,59,35,36,127,164,145,20,6,123,95,255,193,137,139,231\")),bytes32(stringToBytes32(\"52,143,142,62,144,250,229,253,227,32,234,175,55,2,66,201,228,238,63,209,14,208,39,158,191,181,37,240,184,29,230,132\")),bytes32(stringToBytes32(\"174,208,21,143,213,189,65,212,164,118,152,246,204,249,76,51,159,143,61,111,171,211,11,163,118,0,149,246,7,80,168,246\")),bytes32(stringToBytes32(\"94,251,109,217,172,142,131,188,151,144,19,128,55,160,101,218,227,213,248,74,221,84,49,128,174,248,100,139,36,82,246,135\")),bytes32(stringToBytes32(\"27,102,207,179,216,179,22,73,71,215,128,93,209,231,118,251,14,6,4,69,38,214,172,82,21,46,210,0,151,169,103,63\")),bytes32(stringToBytes32(\"49,161,113,136,54,42,31,224,10,27,63,213,125,52,48,2,197,24,220,209,128,20,76,118,129,254,244,236,9,124,159,129\")),bytes32(stringToBytes32(\"206,56,37,102,207,9,76,30,17,243,19,92,174,126,18,62,255,104,91,218,151,138,117,122,95,210,234,67,146,56,177,47\")),bytes32(stringToBytes32(\"195,184,179,83,122,128,248,70,181,120,50,70,168,16,221,19,56,4,123,181,107,61,169,113,50,72,141,217,24,182,62,31\")),bytes32(stringToBytes32(\"171,178,99,134,142,118,101,0,63,50,95,39,82,90,67,218,163,174,167,170,39,206,2,39,100,218,46,56,28,235,4,97\")),bytes32(stringToBytes32(\"250,61,245,58,76,79,84,176,94,215,179,249,241,236,98,39,210,233,102,129,198,80,200,10,112,169,179,15,136,100,207,56\")),bytes32(stringToBytes32(\"181,118,34,249,174,142,212,253,219,98,237,118,183,237,64,244,72,203,50,30,165,57,227,118,122,181,24,43,204,178,44,239\")),bytes32(stringToBytes32(\"105,219,175,168,216,223,116,211,174,199,10,233,131,31,172,202,68,200,44,32,210,96,54,55,252,92,37,37,185,36,30,141\")),bytes32(stringToBytes32(\"47,112,83,43,233,163,83,217,168,104,201,162,24,230,167,243,26,25,196,99,208,4,200,93,207,179,98,247,125,204,133,27\")),bytes32(stringToBytes32(\"244,159,177,78,12,211,181,13,21,158,120,86,88,131,134,236,30,154,3,84,157,182,25,153,42,162,23,138,8,245,247,90\")),bytes32(stringToBytes32(\"219,185,229,145,202,39,232,226,88,203,61,52,242,114,159,136,174,117,160,33,215,230,42,225,157,127,143,1,58,109,213,181\"))]"
            },
            {
              "js": "[[59,144,167,216,78,103,69,173,27,44,163,204,96,226,69,127,238,157,242,172,132,236,135,114,12,74,49,142,130,69,229,211],[34,63,104,247,118,253,18,114,56,119,81,110,27,159,114,214,116,247,226,16,127,119,15,118,92,126,153,191,157,108,238,97],[40,86,128,108,199,206,88,46,148,120,116,111,244,254,72,220,75,221,23,39,252,8,180,168,30,29,181,232,32,115,90,138],[178,3,53,18,46,112,222,23,99,42,112,245,251,242,97,228,53,65,79,65,188,201,200,123,237,247,69,169,69,130,145,86],[145,49,125,32,61,138,28,160,18,80,12,30,101,237,57,25,229,220,221,59,160,73,78,20,92,251,51,234,76,113,46,1],[183,46,248,81,40,245,170,36,129,46,36,144,168,145,159,2,11,158,194,39,54,157,4,50,173,196,103,94,41,151,236,190],[240,215,200,103,171,194,63,121,33,196,6,19,41,25,119,210,70,172,134,81,104,99,20,39,0,246,12,195,115,93,181,16],[63,102,50,70,205,11,198,253,193,161,180,251,68,22,237,148,85,136,70,35,217,121,164,163,222,52,62,179,20,144,138,60],[169,83,139,94,11,10,29,20,69,3,103,7,174,156,110,238,180,176,253,22,82,218,117,147,44,86,116,50,172,250,240,167],[221,15,198,241,168,219,53,196,92,255,175,144,189,102,208,139,190,35,220,228,162,82,173,236,107,47,71,119,165,130,56,196],[175,232,164,94,159,57,131,96,24,7,83,228,24,15,172,65,8,204,234,83,83,124,244,199,195,235,233,231,217,66,232,230],[174,232,62,116,161,71,183,40,163,253,98,103,128,100,39,77,107,156,253,161,214,101,131,95,166,142,54,78,46,210,70,5],[126,131,16,91,209,67,198,219,210,138,170,163,23,193,125,184,39,22,111,214,1,198,106,94,255,43,132,12,155,8,98,90],[198,213,225,6,175,233,253,246,183,82,51,22,149,80,243,125,114,153,51,170,55,33,119,235,175,209,169,108,34,249,198,114],[141,18,44,40,54,124,12,53,96,67,19,1,88,58,130,11,1,222,14,252,120,24,161,172,80,182,142,195,26,7,34,228],[198,146,249,135,194,156,233,192,210,134,15,104,19,98,35,186,192,209,182,178,9,115,3,183,42,65,209,16,17,17,85,102],[56,53,47,163,203,39,205,242,142,214,207,44,116,148,97,142,105,134,68,47,10,165,132,129,105,12,226,28,200,17,183,22],[221,56,178,82,23,49,4,129,40,121,89,249,197,94,35,234,211,48,72,43,66,31,170,173,233,241,14,229,223,137,108,204],[221,147,174,62,153,181,110,91,183,89,147,149,236,60,193,238,221,54,99,224,229,126,225,130,120,220,223,73,36,72,246,238],[214,190,228,82,200,58,174,151,133,129,70,17,164,44,173,51,25,70,132,90,105,33,199,44,142,51,235,170,37,241,220,58],[132,132,3,160,145,102,230,188,138,110,194,43,84,202,225,223,160,12,199,157,185,33,162,95,45,172,74,255,9,221,117,3],[204,164,35,117,36,195,127,84,254,235,123,82,11,141,101,236,251,107,136,83,196,89,206,22,86,213,222,242,103,78,10,244],[62,73,176,39,135,180,63,157,3,134,212,50,148,193,218,147,29,46,167,33,54,242,182,8,70,255,102,41,30,121,87,179],[194,155,59,229,226,33,205,9,13,144,194,46,208,84,236,250,34,124,229,213,27,152,136,91,194,77,36,17,233,222,84,15],[204,172,176,175,112,115,225,128,155,237,249,206,67,2,100,138,231,84,107,252,196,231,70,77,24,34,241,142,212,123,31,12],[189,66,221,201,154,104,225,118,23,30,195,149,94,145,198,255,18,200,24,233,17,170,137,238,148,21,210,39,144,19,171,148]]",
              "sol": "[bytes32(stringToBytes32(\"59,144,167,216,78,103,69,173,27,44,163,204,96,226,69,127,238,157,242,172,132,236,135,114,12,74,49,142,130,69,229,211\")),bytes32(stringToBytes32(\"34,63,104,247,118,253,18,114,56,119,81,110,27,159,114,214,116,247,226,16,127,119,15,118,92,126,153,191,157,108,238,97\")),bytes32(stringToBytes32(\"40,86,128,108,199,206,88,46,148,120,116,111,244,254,72,220,75,221,23,39,252,8,180,168,30,29,181,232,32,115,90,138\")),bytes32(stringToBytes32(\"178,3,53,18,46,112,222,23,99,42,112,245,251,242,97,228,53,65,79,65,188,201,200,123,237,247,69,169,69,130,145,86\")),bytes32(stringToBytes32(\"145,49,125,32,61,138,28,160,18,80,12,30,101,237,57,25,229,220,221,59,160,73,78,20,92,251,51,234,76,113,46,1\")),bytes32(stringToBytes32(\"183,46,248,81,40,245,170,36,129,46,36,144,168,145,159,2,11,158,194,39,54,157,4,50,173,196,103,94,41,151,236,190\")),bytes32(stringToBytes32(\"240,215,200,103,171,194,63,121,33,196,6,19,41,25,119,210,70,172,134,81,104,99,20,39,0,246,12,195,115,93,181,16\")),bytes32(stringToBytes32(\"63,102,50,70,205,11,198,253,193,161,180,251,68,22,237,148,85,136,70,35,217,121,164,163,222,52,62,179,20,144,138,60\")),bytes32(stringToBytes32(\"169,83,139,94,11,10,29,20,69,3,103,7,174,156,110,238,180,176,253,22,82,218,117,147,44,86,116,50,172,250,240,167\")),bytes32(stringToBytes32(\"221,15,198,241,168,219,53,196,92,255,175,144,189,102,208,139,190,35,220,228,162,82,173,236,107,47,71,119,165,130,56,196\")),bytes32(stringToBytes32(\"175,232,164,94,159,57,131,96,24,7,83,228,24,15,172,65,8,204,234,83,83,124,244,199,195,235,233,231,217,66,232,230\")),bytes32(stringToBytes32(\"174,232,62,116,161,71,183,40,163,253,98,103,128,100,39,77,107,156,253,161,214,101,131,95,166,142,54,78,46,210,70,5\")),bytes32(stringToBytes32(\"126,131,16,91,209,67,198,219,210,138,170,163,23,193,125,184,39,22,111,214,1,198,106,94,255,43,132,12,155,8,98,90\")),bytes32(stringToBytes32(\"198,213,225,6,175,233,253,246,183,82,51,22,149,80,243,125,114,153,51,170,55,33,119,235,175,209,169,108,34,249,198,114\")),bytes32(stringToBytes32(\"141,18,44,40,54,124,12,53,96,67,19,1,88,58,130,11,1,222,14,252,120,24,161,172,80,182,142,195,26,7,34,228\")),bytes32(stringToBytes32(\"198,146,249,135,194,156,233,192,210,134,15,104,19,98,35,186,192,209,182,178,9,115,3,183,42,65,209,16,17,17,85,102\")),bytes32(stringToBytes32(\"56,53,47,163,203,39,205,242,142,214,207,44,116,148,97,142,105,134,68,47,10,165,132,129,105,12,226,28,200,17,183,22\")),bytes32(stringToBytes32(\"221,56,178,82,23,49,4,129,40,121,89,249,197,94,35,234,211,48,72,43,66,31,170,173,233,241,14,229,223,137,108,204\")),bytes32(stringToBytes32(\"221,147,174,62,153,181,110,91,183,89,147,149,236,60,193,238,221,54,99,224,229,126,225,130,120,220,223,73,36,72,246,238\")),bytes32(stringToBytes32(\"214,190,228,82,200,58,174,151,133,129,70,17,164,44,173,51,25,70,132,90,105,33,199,44,142,51,235,170,37,241,220,58\")),bytes32(stringToBytes32(\"132,132,3,160,145,102,230,188,138,110,194,43,84,202,225,223,160,12,199,157,185,33,162,95,45,172,74,255,9,221,117,3\")),bytes32(stringToBytes32(\"204,164,35,117,36,195,127,84,254,235,123,82,11,141,101,236,251,107,136,83,196,89,206,22,86,213,222,242,103,78,10,244\")),bytes32(stringToBytes32(\"62,73,176,39,135,180,63,157,3,134,212,50,148,193,218,147,29,46,167,33,54,242,182,8,70,255,102,41,30,121,87,179\")),bytes32(stringToBytes32(\"194,155,59,229,226,33,205,9,13,144,194,46,208,84,236,250,34,124,229,213,27,152,136,91,194,77,36,17,233,222,84,15\")),bytes32(stringToBytes32(\"204,172,176,175,112,115,225,128,155,237,249,206,67,2,100,138,231,84,107,252,196,231,70,77,24,34,241,142,212,123,31,12\")),bytes32(stringToBytes32(\"189,66,221,201,154,104,225,118,23,30,195,149,94,145,198,255,18,200,24,233,17,170,137,238,148,21,210,39,144,19,171,148\"))]"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[190,93,186,156,42,81,120,81,122,18,223,138,185,105,141,28,176,239,68,44,208,240,89,124,142,136,13,14,159,125,81,45],[129,105,184,9,93,116,114,124,211,238,96,238,10,119,199,34,64,194,19,41,110,210,210,183,83,48,114,124,248,64,240,184],[41,47,25,102,160,11,6,70,214,54,26,142,192,123,228,163,9,118,240,226,225,64,255,217,50,210,80,111,195,225,253,11],[5,217,23,42,216,251,142,63,186,37,25,126,13,80,9,49,66,122,107,63,64,49,168,115,245,49,215,9,11,108,13,41],[13,0,38,92,245,33,68,38,178,206,150,62,92,135,126,199,177,208,124,129,207,216,155,209,29,136,85,197,68,135,238,169],[168,154,143,174,46,73,213,242,128,44,146,117,44,80,161,152,170,225,125,27,71,205,214,15,186,3,17,76,6,106,104,23],[201,14,38,76,182,93,217,225,67,45,69,119,70,213,183,20,13,160,155,184,248,44,112,131,211,97,11,78,134,52,90,170],[243,125,180,205,82,165,9,86,144,210,241,168,89,174,87,201,64,215,168,249,109,196,48,100,80,237,91,177,103,35,4,216],[6,215,99,14,108,148,249,253,113,133,237,143,90,73,70,165,11,34,34,159,16,217,149,249,68,23,68,242,29,233,136,59],[248,106,1,234,188,130,169,246,152,115,127,38,99,85,44,37,217,86,141,52,221,42,206,255,132,183,180,89,0,76,96,112],[97,106,170,119,221,203,152,191,69,71,189,66,195,58,50,20,250,112,246,1,170,41,76,227,190,15,236,230,16,9,245,236],[168,61,70,203,39,136,37,81,62,129,200,141,124,19,251,18,235,59,35,36,127,164,145,20,6,123,95,255,193,137,139,231],[52,143,142,62,144,250,229,253,227,32,234,175,55,2,66,201,228,238,63,209,14,208,39,158,191,181,37,240,184,29,230,132],[174,208,21,143,213,189,65,212,164,118,152,246,204,249,76,51,159,143,61,111,171,211,11,163,118,0,149,246,7,80,168,246],[94,251,109,217,172,142,131,188,151,144,19,128,55,160,101,218,227,213,248,74,221,84,49,128,174,248,100,139,36,82,246,135],[27,102,207,179,216,179,22,73,71,215,128,93,209,231,118,251,14,6,4,69,38,214,172,82,21,46,210,0,151,169,103,63],[49,161,113,136,54,42,31,224,10,27,63,213,125,52,48,2,197,24,220,209,128,20,76,118,129,254,244,236,9,124,159,129],[206,56,37,102,207,9,76,30,17,243,19,92,174,126,18,62,255,104,91,218,151,138,117,122,95,210,234,67,146,56,177,47],[195,184,179,83,122,128,248,70,181,120,50,70,168,16,221,19,56,4,123,181,107,61,169,113,50,72,141,217,24,182,62,31],[171,178,99,134,142,118,101,0,63,50,95,39,82,90,67,218,163,174,167,170,39,206,2,39,100,218,46,56,28,235,4,97],[250,61,245,58,76,79,84,176,94,215,179,249,241,236,98,39,210,233,102,129,198,80,200,10,112,169,179,15,136,100,207,56],[181,118,34,249,174,142,212,253,219,98,237,118,183,237,64,244,72,203,50,30,165,57,227,118,122,181,24,43,204,178,44,239],[105,219,175,168,216,223,116,211,174,199,10,233,131,31,172,202,68,200,44,32,210,96,54,55,252,92,37,37,185,36,30,141],[47,112,83,43,233,163,83,217,168,104,201,162,24,230,167,243,26,25,196,99,208,4,200,93,207,179,98,247,125,204,133,27],[244,159,177,78,12,211,181,13,21,158,120,86,88,131,134,236,30,154,3,84,157,182,25,153,42,162,23,138,8,245,247,90],[219,185,229,145,202,39,232,226,88,203,61,52,242,114,159,136,174,117,160,33,215,230,42,225,157,127,143,1,58,109,213,181]]",
                "sol": "[bytes32(stringToBytes32(\"190,93,186,156,42,81,120,81,122,18,223,138,185,105,141,28,176,239,68,44,208,240,89,124,142,136,13,14,159,125,81,45\")),bytes32(stringToBytes32(\"129,105,184,9,93,116,114,124,211,238,96,238,10,119,199,34,64,194,19,41,110,210,210,183,83,48,114,124,248,64,240,184\")),bytes32(stringToBytes32(\"41,47,25,102,160,11,6,70,214,54,26,142,192,123,228,163,9,118,240,226,225,64,255,217,50,210,80,111,195,225,253,11\")),bytes32(stringToBytes32(\"5,217,23,42,216,251,142,63,186,37,25,126,13,80,9,49,66,122,107,63,64,49,168,115,245,49,215,9,11,108,13,41\")),bytes32(stringToBytes32(\"13,0,38,92,245,33,68,38,178,206,150,62,92,135,126,199,177,208,124,129,207,216,155,209,29,136,85,197,68,135,238,169\")),bytes32(stringToBytes32(\"168,154,143,174,46,73,213,242,128,44,146,117,44,80,161,152,170,225,125,27,71,205,214,15,186,3,17,76,6,106,104,23\")),bytes32(stringToBytes32(\"201,14,38,76,182,93,217,225,67,45,69,119,70,213,183,20,13,160,155,184,248,44,112,131,211,97,11,78,134,52,90,170\")),bytes32(stringToBytes32(\"243,125,180,205,82,165,9,86,144,210,241,168,89,174,87,201,64,215,168,249,109,196,48,100,80,237,91,177,103,35,4,216\")),bytes32(stringToBytes32(\"6,215,99,14,108,148,249,253,113,133,237,143,90,73,70,165,11,34,34,159,16,217,149,249,68,23,68,242,29,233,136,59\")),bytes32(stringToBytes32(\"248,106,1,234,188,130,169,246,152,115,127,38,99,85,44,37,217,86,141,52,221,42,206,255,132,183,180,89,0,76,96,112\")),bytes32(stringToBytes32(\"97,106,170,119,221,203,152,191,69,71,189,66,195,58,50,20,250,112,246,1,170,41,76,227,190,15,236,230,16,9,245,236\")),bytes32(stringToBytes32(\"168,61,70,203,39,136,37,81,62,129,200,141,124,19,251,18,235,59,35,36,127,164,145,20,6,123,95,255,193,137,139,231\")),bytes32(stringToBytes32(\"52,143,142,62,144,250,229,253,227,32,234,175,55,2,66,201,228,238,63,209,14,208,39,158,191,181,37,240,184,29,230,132\")),bytes32(stringToBytes32(\"174,208,21,143,213,189,65,212,164,118,152,246,204,249,76,51,159,143,61,111,171,211,11,163,118,0,149,246,7,80,168,246\")),bytes32(stringToBytes32(\"94,251,109,217,172,142,131,188,151,144,19,128,55,160,101,218,227,213,248,74,221,84,49,128,174,248,100,139,36,82,246,135\")),bytes32(stringToBytes32(\"27,102,207,179,216,179,22,73,71,215,128,93,209,231,118,251,14,6,4,69,38,214,172,82,21,46,210,0,151,169,103,63\")),bytes32(stringToBytes32(\"49,161,113,136,54,42,31,224,10,27,63,213,125,52,48,2,197,24,220,209,128,20,76,118,129,254,244,236,9,124,159,129\")),bytes32(stringToBytes32(\"206,56,37,102,207,9,76,30,17,243,19,92,174,126,18,62,255,104,91,218,151,138,117,122,95,210,234,67,146,56,177,47\")),bytes32(stringToBytes32(\"195,184,179,83,122,128,248,70,181,120,50,70,168,16,221,19,56,4,123,181,107,61,169,113,50,72,141,217,24,182,62,31\")),bytes32(stringToBytes32(\"171,178,99,134,142,118,101,0,63,50,95,39,82,90,67,218,163,174,167,170,39,206,2,39,100,218,46,56,28,235,4,97\")),bytes32(stringToBytes32(\"250,61,245,58,76,79,84,176,94,215,179,249,241,236,98,39,210,233,102,129,198,80,200,10,112,169,179,15,136,100,207,56\")),bytes32(stringToBytes32(\"181,118,34,249,174,142,212,253,219,98,237,118,183,237,64,244,72,203,50,30,165,57,227,118,122,181,24,43,204,178,44,239\")),bytes32(stringToBytes32(\"105,219,175,168,216,223,116,211,174,199,10,233,131,31,172,202,68,200,44,32,210,96,54,55,252,92,37,37,185,36,30,141\")),bytes32(stringToBytes32(\"47,112,83,43,233,163,83,217,168,104,201,162,24,230,167,243,26,25,196,99,208,4,200,93,207,179,98,247,125,204,133,27\")),bytes32(stringToBytes32(\"244,159,177,78,12,211,181,13,21,158,120,86,88,131,134,236,30,154,3,84,157,182,25,153,42,162,23,138,8,245,247,90\")),bytes32(stringToBytes32(\"219,185,229,145,202,39,232,226,88,203,61,52,242,114,159,136,174,117,160,33,215,230,42,225,157,127,143,1,58,109,213,181\"))]"
              },
              {
                "js": "[[59,144,167,216,78,103,69,173,27,44,163,204,96,226,69,127,238,157,242,172,132,236,135,114,12,74,49,142,130,69,229,211],[34,63,104,247,118,253,18,114,56,119,81,110,27,159,114,214,116,247,226,16,127,119,15,118,92,126,153,191,157,108,238,97],[40,86,128,108,199,206,88,46,148,120,116,111,244,254,72,220,75,221,23,39,252,8,180,168,30,29,181,232,32,115,90,138],[178,3,53,18,46,112,222,23,99,42,112,245,251,242,97,228,53,65,79,65,188,201,200,123,237,247,69,169,69,130,145,86],[145,49,125,32,61,138,28,160,18,80,12,30,101,237,57,25,229,220,221,59,160,73,78,20,92,251,51,234,76,113,46,1],[183,46,248,81,40,245,170,36,129,46,36,144,168,145,159,2,11,158,194,39,54,157,4,50,173,196,103,94,41,151,236,190],[240,215,200,103,171,194,63,121,33,196,6,19,41,25,119,210,70,172,134,81,104,99,20,39,0,246,12,195,115,93,181,16],[63,102,50,70,205,11,198,253,193,161,180,251,68,22,237,148,85,136,70,35,217,121,164,163,222,52,62,179,20,144,138,60],[169,83,139,94,11,10,29,20,69,3,103,7,174,156,110,238,180,176,253,22,82,218,117,147,44,86,116,50,172,250,240,167],[221,15,198,241,168,219,53,196,92,255,175,144,189,102,208,139,190,35,220,228,162,82,173,236,107,47,71,119,165,130,56,196],[175,232,164,94,159,57,131,96,24,7,83,228,24,15,172,65,8,204,234,83,83,124,244,199,195,235,233,231,217,66,232,230],[174,232,62,116,161,71,183,40,163,253,98,103,128,100,39,77,107,156,253,161,214,101,131,95,166,142,54,78,46,210,70,5],[126,131,16,91,209,67,198,219,210,138,170,163,23,193,125,184,39,22,111,214,1,198,106,94,255,43,132,12,155,8,98,90],[198,213,225,6,175,233,253,246,183,82,51,22,149,80,243,125,114,153,51,170,55,33,119,235,175,209,169,108,34,249,198,114],[141,18,44,40,54,124,12,53,96,67,19,1,88,58,130,11,1,222,14,252,120,24,161,172,80,182,142,195,26,7,34,228],[198,146,249,135,194,156,233,192,210,134,15,104,19,98,35,186,192,209,182,178,9,115,3,183,42,65,209,16,17,17,85,102],[56,53,47,163,203,39,205,242,142,214,207,44,116,148,97,142,105,134,68,47,10,165,132,129,105,12,226,28,200,17,183,22],[221,56,178,82,23,49,4,129,40,121,89,249,197,94,35,234,211,48,72,43,66,31,170,173,233,241,14,229,223,137,108,204],[221,147,174,62,153,181,110,91,183,89,147,149,236,60,193,238,221,54,99,224,229,126,225,130,120,220,223,73,36,72,246,238],[214,190,228,82,200,58,174,151,133,129,70,17,164,44,173,51,25,70,132,90,105,33,199,44,142,51,235,170,37,241,220,58],[132,132,3,160,145,102,230,188,138,110,194,43,84,202,225,223,160,12,199,157,185,33,162,95,45,172,74,255,9,221,117,3],[204,164,35,117,36,195,127,84,254,235,123,82,11,141,101,236,251,107,136,83,196,89,206,22,86,213,222,242,103,78,10,244],[62,73,176,39,135,180,63,157,3,134,212,50,148,193,218,147,29,46,167,33,54,242,182,8,70,255,102,41,30,121,87,179],[194,155,59,229,226,33,205,9,13,144,194,46,208,84,236,250,34,124,229,213,27,152,136,91,194,77,36,17,233,222,84,15],[204,172,176,175,112,115,225,128,155,237,249,206,67,2,100,138,231,84,107,252,196,231,70,77,24,34,241,142,212,123,31,12],[189,66,221,201,154,104,225,118,23,30,195,149,94,145,198,255,18,200,24,233,17,170,137,238,148,21,210,39,144,19,171,148]]",
                "sol": "[bytes32(stringToBytes32(\"59,144,167,216,78,103,69,173,27,44,163,204,96,226,69,127,238,157,242,172,132,236,135,114,12,74,49,142,130,69,229,211\")),bytes32(stringToBytes32(\"34,63,104,247,118,253,18,114,56,119,81,110,27,159,114,214,116,247,226,16,127,119,15,118,92,126,153,191,157,108,238,97\")),bytes32(stringToBytes32(\"40,86,128,108,199,206,88,46,148,120,116,111,244,254,72,220,75,221,23,39,252,8,180,168,30,29,181,232,32,115,90,138\")),bytes32(stringToBytes32(\"178,3,53,18,46,112,222,23,99,42,112,245,251,242,97,228,53,65,79,65,188,201,200,123,237,247,69,169,69,130,145,86\")),bytes32(stringToBytes32(\"145,49,125,32,61,138,28,160,18,80,12,30,101,237,57,25,229,220,221,59,160,73,78,20,92,251,51,234,76,113,46,1\")),bytes32(stringToBytes32(\"183,46,248,81,40,245,170,36,129,46,36,144,168,145,159,2,11,158,194,39,54,157,4,50,173,196,103,94,41,151,236,190\")),bytes32(stringToBytes32(\"240,215,200,103,171,194,63,121,33,196,6,19,41,25,119,210,70,172,134,81,104,99,20,39,0,246,12,195,115,93,181,16\")),bytes32(stringToBytes32(\"63,102,50,70,205,11,198,253,193,161,180,251,68,22,237,148,85,136,70,35,217,121,164,163,222,52,62,179,20,144,138,60\")),bytes32(stringToBytes32(\"169,83,139,94,11,10,29,20,69,3,103,7,174,156,110,238,180,176,253,22,82,218,117,147,44,86,116,50,172,250,240,167\")),bytes32(stringToBytes32(\"221,15,198,241,168,219,53,196,92,255,175,144,189,102,208,139,190,35,220,228,162,82,173,236,107,47,71,119,165,130,56,196\")),bytes32(stringToBytes32(\"175,232,164,94,159,57,131,96,24,7,83,228,24,15,172,65,8,204,234,83,83,124,244,199,195,235,233,231,217,66,232,230\")),bytes32(stringToBytes32(\"174,232,62,116,161,71,183,40,163,253,98,103,128,100,39,77,107,156,253,161,214,101,131,95,166,142,54,78,46,210,70,5\")),bytes32(stringToBytes32(\"126,131,16,91,209,67,198,219,210,138,170,163,23,193,125,184,39,22,111,214,1,198,106,94,255,43,132,12,155,8,98,90\")),bytes32(stringToBytes32(\"198,213,225,6,175,233,253,246,183,82,51,22,149,80,243,125,114,153,51,170,55,33,119,235,175,209,169,108,34,249,198,114\")),bytes32(stringToBytes32(\"141,18,44,40,54,124,12,53,96,67,19,1,88,58,130,11,1,222,14,252,120,24,161,172,80,182,142,195,26,7,34,228\")),bytes32(stringToBytes32(\"198,146,249,135,194,156,233,192,210,134,15,104,19,98,35,186,192,209,182,178,9,115,3,183,42,65,209,16,17,17,85,102\")),bytes32(stringToBytes32(\"56,53,47,163,203,39,205,242,142,214,207,44,116,148,97,142,105,134,68,47,10,165,132,129,105,12,226,28,200,17,183,22\")),bytes32(stringToBytes32(\"221,56,178,82,23,49,4,129,40,121,89,249,197,94,35,234,211,48,72,43,66,31,170,173,233,241,14,229,223,137,108,204\")),bytes32(stringToBytes32(\"221,147,174,62,153,181,110,91,183,89,147,149,236,60,193,238,221,54,99,224,229,126,225,130,120,220,223,73,36,72,246,238\")),bytes32(stringToBytes32(\"214,190,228,82,200,58,174,151,133,129,70,17,164,44,173,51,25,70,132,90,105,33,199,44,142,51,235,170,37,241,220,58\")),bytes32(stringToBytes32(\"132,132,3,160,145,102,230,188,138,110,194,43,84,202,225,223,160,12,199,157,185,33,162,95,45,172,74,255,9,221,117,3\")),bytes32(stringToBytes32(\"204,164,35,117,36,195,127,84,254,235,123,82,11,141,101,236,251,107,136,83,196,89,206,22,86,213,222,242,103,78,10,244\")),bytes32(stringToBytes32(\"62,73,176,39,135,180,63,157,3,134,212,50,148,193,218,147,29,46,167,33,54,242,182,8,70,255,102,41,30,121,87,179\")),bytes32(stringToBytes32(\"194,155,59,229,226,33,205,9,13,144,194,46,208,84,236,250,34,124,229,213,27,152,136,91,194,77,36,17,233,222,84,15\")),bytes32(stringToBytes32(\"204,172,176,175,112,115,225,128,155,237,249,206,67,2,100,138,231,84,107,252,196,231,70,77,24,34,241,142,212,123,31,12\")),bytes32(stringToBytes32(\"189,66,221,201,154,104,225,118,23,30,195,149,94,145,198,255,18,200,24,233,17,170,137,238,148,21,210,39,144,19,171,148\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[156,217,165,109,44,82,78,92,91,252,214,121,11,20,221,136,227,212,141,190,173,189,126,175,20,17,111,140,0,102,114,206],[13,246,44,222,222,235,97,200,82,99,180,91,177,124,122,204,11,159,222,90,151,5,111,24,150,31,72,7,201,188,79,122],[96,158,203,182,195,112,6,246,50,153,219,214,125,249,31,49,133,95,16,73,93,145,226,202,155,55,182,143,255,25,18,26],[250,191,223,24,22,149,225,12,8,128,45,27,132,139,210,175,135,122,144,145,112,141,72,130,157,29,207,35,178,93,64,114],[25,244,50,192,248,152,175,107,159,117,236,165,13,169,70,101,172,0,47,52,78,7,238,219,80,116,96,75,68,94,41,228],[242,51,136,131,196,202,101,39,116,196,100,63,242,13,120,194,101,224,112,201,25,126,52,56,56,190,45,219,211,215,166,161],[148,58,227,222,47,245,43,192,0,67,86,222,52,132,23,238,109,211,17,106,255,192,8,125,126,82,244,6,133,197,86,18],[72,148,159,88,81,224,82,8,88,252,110,62,131,184,1,168,0,248,39,21,18,208,15,20,162,187,45,32,89,22,93,141],[147,118,163,111,125,35,33,99,143,89,2,96,212,46,28,183,113,251,50,80,107,43,195,63,56,217,134,136,71,99,19,139],[132,48,140,185,212,32,103,0,19,68,26,17,125,48,176,107,73,103,196,237,8,224,212,212,224,1,96,97,125,27,230,246],[145,121,67,231,227,170,111,134,235,9,7,68,145,73,122,121,238,186,24,121,43,113,115,229,62,1,105,209,203,114,142,181],[225,179,115,102,127,30,92,137,146,158,234,91,222,242,199,165,37,67,126,238,18,127,65,106,8,240,21,64,51,120,44,98],[134,198,72,76,44,108,250,155,106,207,188,38,182,71,159,123,133,207,71,127,121,195,227,230,209,249,248,137,192,4,29,132],[91,165,242,153,9,91,166,253,249,28,221,252,204,14,116,48,90,159,26,122,93,20,115,115,175,30,36,148,246,210,238,253],[31,40,244,208,184,149,216,235,132,21,78,75,235,5,186,86,236,113,96,160,211,85,44,155,216,1,166,211,3,24,167,82],[247,22,141,143,69,66,213,182,214,246,27,151,90,82,50,44,241,124,166,153,224,67,253,56,79,229,9,238,76,17,26,52],[205,171,239,173,173,88,68,206,152,169,226,109,185,236,163,209,128,150,48,192,119,62,255,124,66,138,96,143,199,2,213,2],[67,255,127,166,4,236,193,157,142,241,18,34,127,125,155,220,240,3,179,93,214,239,123,240,166,243,105,139,52,234,188,61],[61,223,243,144,231,231,250,227,203,1,154,204,176,160,74,106,179,179,114,200,205,243,75,49,37,214,34,144,7,140,221,241],[80,222,211,145,142,149,153,214,187,9,96,199,192,176,133,1,21,89,232,135,121,178,58,66,26,228,178,137,191,12,200,160],[25,26,170,224,44,117,205,169,54,14,4,185,134,96,142,73,16,102,171,167,151,140,242,46,9,209,21,32,236,107,40,102],[182,48,50,219,60,8,108,149,68,110,42,173,143,38,3,164,155,118,199,123,174,185,59,247,142,170,173,135,143,209,38,19],[181,18,29,229,177,176,145,166,124,160,30,196,28,68,25,69,248,163,100,120,254,206,154,18,59,207,227,28,72,5,184,60],[66,219,3,5,200,255,167,160,30,253,45,160,160,175,111,4,192,16,31,124,177,191,102,108,112,35,75,247,75,104,130,174],[129,0,232,145,131,212,45,245,247,77,37,38,216,173,75,151,158,21,208,195,82,24,161,41,23,242,93,119,251,100,49,16],[136,112,103,130,225,199,21,238,88,65,109,237,187,92,206,67,74,221,19,140,140,150,187,226,95,246,161,251,217,229,24,2],[120,13,91,120,177,103,84,127,168,51,146,57,85,180,56,192,104,245,122,50,251,236,224,225,73,225,87,193,78,217,212,86]]",
                "sol": "[stringToBytes32(\"11,169,82,200,191,128,224,202,160,128,169,43,115,128,129,38,99,184,52,226,56,70,136,130,114,116,90,232,87,221,151,38\"),stringToBytes32(\"53,108,97,170,204,147,119,204,190,212,80,25,217,69,52,34,136,180,200,208,80,159,251,196,35,244,29,230,171,171,7,35\"),stringToBytes32(\"224,226,182,221,140,40,47,87,127,121,210,55,23,43,100,110,204,33,182,16,10,196,74,27,248,155,31,25,49,240,17,151\"),stringToBytes32(\"49,120,124,9,9,211,129,243,53,48,83,13,85,28,114,186,127,204,105,155,188,12,171,71,63,202,36,35,79,26,165,122\"),stringToBytes32(\"131,36,22,138,93,15,249,182,4,236,169,199,131,147,6,197,145,183,230,54,187,175,143,117,46,176,115,47,0,77,186,104\"),stringToBytes32(\"1,122,81,135,63,138,221,174,64,176,224,97,178,164,171,70,95,254,136,19,44,87,158,216,17,134,194,75,199,189,113,118\"),stringToBytes32(\"215,101,198,78,15,190,87,136,167,114,12,35,8,158,192,191,19,81,85,129,181,220,118,14,109,240,129,120,3,157,56,212\"),stringToBytes32(\"51,84,177,14,237,85,251,163,250,212,19,214,5,209,20,28,106,44,245,141,241,8,195,203,55,17,63,180,143,151,72,197\"),stringToBytes32(\"133,137,49,54,166,78,154,88,130,8,10,148,112,97,36,80,86,63,63,182,226,201,227,78,70,37,247,85,24,146,240,61\"),stringToBytes32(\"70,91,31,58,132,43,213,219,193,150,49,175,120,160,115,253,39,32,99,242,48,139,97,134,119,139,129,121,166,24,83,47\"),stringToBytes32(\"190,104,17,123,174,224,6,131,120,63,114,161,252,69,28,39,244,242,198,36,18,242,227,181,124,161,39,66,114,30,187,104\"),stringToBytes32(\"202,25,195,204,184,187,157,30,145,44,68,59,209,59,252,241,164,219,209,158,186,109,229,33,112,123,25,218,207,120,119,150\"),stringToBytes32(\"217,215,236,91,59,125,216,250,41,226,206,192,121,247,126,5,47,119,112,130,20,84,131,55,153,87,239,107,136,139,165,78\"),stringToBytes32(\"144,31,77,252,97,149,53,96,151,210,148,115,123,8,63,158,157,246,226,88,31,64,18,71,224,44,9,82,87,59,91,161\"),stringToBytes32(\"106,142,201,169,56,241,104,93,157,11,162,132,57,254,179,40,174,98,203,198,73,198,89,224,66,22,38,11,26,14,212,179\"),stringToBytes32(\"188,231,116,223,108,43,11,142,49,207,6,230,34,92,27,204,172,149,254,203,15,59,249,140,54,213,187,178,10,183,249,217\"),stringToBytes32(\"248,40,109,16,100,184,108,238,251,33,115,150,159,31,204,137,169,118,66,47,111,35,225,91,198,229,221,86,133,13,88,222\"),stringToBytes32(\"131,130,48,63,16,85,82,199,14,197,213,89,135,180,79,46,213,154,232,65,89,179,7,233,19,204,133,166,38,11,62,122\"),stringToBytes32(\"212,170,93,68,44,238,14,192,104,219,75,76,201,113,126,128,82,122,247,186,134,67,186,9,21,103,86,192,39,205,130,148\"),stringToBytes32(\"97,98,58,71,6,27,28,99,75,17,53,19,25,254,49,115,63,54,92,237,54,122,162,51,89,126,105,194,118,116,36,153\"),stringToBytes32(\"5,47,192,159,74,49,9,90,152,1,155,169,173,194,91,71,199,99,116,119,185,101,71,246,89,191,181,213,160,66,63,171\"),stringToBytes32(\"99,206,227,54,139,181,81,181,67,25,215,96,168,62,168,121,33,99,85,170,235,77,81,65,237,127,86,25,188,184,124,199\"),stringToBytes32(\"98,158,93,88,239,127,64,245,26,75,159,119,49,128,46,61,229,191,246,73,139,255,65,185,25,15,214,36,210,133,40,195\"),stringToBytes32(\"24,29,135,56,128,230,51,196,253,20,65,149,236,25,221,134,73,5,50,4,117,140,113,75,97,247,208,47,161,57,145,9\"),stringToBytes32(\"132,54,179,80,175,15,15,210,42,205,226,100,112,209,30,12,104,29,19,10,169,145,196,94,230,47,77,196,209,123,123,196\"),stringToBytes32(\"89,253,121,79,75,128,73,65,149,53,100,58,166,158,163,168,219,205,167,46,56,33,249,225,41,215,62,48,107,200,165,202\"),stringToBytes32(\"191,158,210,0,217,247,180,151,49,30,196,234,149,252,107,6,189,100,127,236,160,130,222,215,200,8,42,18,51,96,109,23\")]"
              },
              {
                "js": "[[59,144,167,216,78,103,69,173,27,44,163,204,96,226,69,127,238,157,242,172,132,236,135,114,12,74,49,142,130,69,229,211],[34,63,104,247,118,253,18,114,56,119,81,110,27,159,114,214,116,247,226,16,127,119,15,118,92,126,153,191,157,108,238,97],[40,86,128,108,199,206,88,46,148,120,116,111,244,254,72,220,75,221,23,39,252,8,180,168,30,29,181,232,32,115,90,138],[178,3,53,18,46,112,222,23,99,42,112,245,251,242,97,228,53,65,79,65,188,201,200,123,237,247,69,169,69,130,145,86],[145,49,125,32,61,138,28,160,18,80,12,30,101,237,57,25,229,220,221,59,160,73,78,20,92,251,51,234,76,113,46,1],[183,46,248,81,40,245,170,36,129,46,36,144,168,145,159,2,11,158,194,39,54,157,4,50,173,196,103,94,41,151,236,190],[240,215,200,103,171,194,63,121,33,196,6,19,41,25,119,210,70,172,134,81,104,99,20,39,0,246,12,195,115,93,181,16],[63,102,50,70,205,11,198,253,193,161,180,251,68,22,237,148,85,136,70,35,217,121,164,163,222,52,62,179,20,144,138,60],[169,83,139,94,11,10,29,20,69,3,103,7,174,156,110,238,180,176,253,22,82,218,117,147,44,86,116,50,172,250,240,167],[221,15,198,241,168,219,53,196,92,255,175,144,189,102,208,139,190,35,220,228,162,82,173,236,107,47,71,119,165,130,56,196],[175,232,164,94,159,57,131,96,24,7,83,228,24,15,172,65,8,204,234,83,83,124,244,199,195,235,233,231,217,66,232,230],[174,232,62,116,161,71,183,40,163,253,98,103,128,100,39,77,107,156,253,161,214,101,131,95,166,142,54,78,46,210,70,5],[126,131,16,91,209,67,198,219,210,138,170,163,23,193,125,184,39,22,111,214,1,198,106,94,255,43,132,12,155,8,98,90],[198,213,225,6,175,233,253,246,183,82,51,22,149,80,243,125,114,153,51,170,55,33,119,235,175,209,169,108,34,249,198,114],[141,18,44,40,54,124,12,53,96,67,19,1,88,58,130,11,1,222,14,252,120,24,161,172,80,182,142,195,26,7,34,228],[198,146,249,135,194,156,233,192,210,134,15,104,19,98,35,186,192,209,182,178,9,115,3,183,42,65,209,16,17,17,85,102],[56,53,47,163,203,39,205,242,142,214,207,44,116,148,97,142,105,134,68,47,10,165,132,129,105,12,226,28,200,17,183,22],[221,56,178,82,23,49,4,129,40,121,89,249,197,94,35,234,211,48,72,43,66,31,170,173,233,241,14,229,223,137,108,204],[221,147,174,62,153,181,110,91,183,89,147,149,236,60,193,238,221,54,99,224,229,126,225,130,120,220,223,73,36,72,246,238],[214,190,228,82,200,58,174,151,133,129,70,17,164,44,173,51,25,70,132,90,105,33,199,44,142,51,235,170,37,241,220,58],[132,132,3,160,145,102,230,188,138,110,194,43,84,202,225,223,160,12,199,157,185,33,162,95,45,172,74,255,9,221,117,3],[204,164,35,117,36,195,127,84,254,235,123,82,11,141,101,236,251,107,136,83,196,89,206,22,86,213,222,242,103,78,10,244],[62,73,176,39,135,180,63,157,3,134,212,50,148,193,218,147,29,46,167,33,54,242,182,8,70,255,102,41,30,121,87,179],[194,155,59,229,226,33,205,9,13,144,194,46,208,84,236,250,34,124,229,213,27,152,136,91,194,77,36,17,233,222,84,15],[204,172,176,175,112,115,225,128,155,237,249,206,67,2,100,138,231,84,107,252,196,231,70,77,24,34,241,142,212,123,31,12],[189,66,221,201,154,104,225,118,23,30,195,149,94,145,198,255,18,200,24,233,17,170,137,238,148,21,210,39,144,19,171,148]]",
                "sol": "[bytes32(stringToBytes32(\"59,144,167,216,78,103,69,173,27,44,163,204,96,226,69,127,238,157,242,172,132,236,135,114,12,74,49,142,130,69,229,211\")),bytes32(stringToBytes32(\"34,63,104,247,118,253,18,114,56,119,81,110,27,159,114,214,116,247,226,16,127,119,15,118,92,126,153,191,157,108,238,97\")),bytes32(stringToBytes32(\"40,86,128,108,199,206,88,46,148,120,116,111,244,254,72,220,75,221,23,39,252,8,180,168,30,29,181,232,32,115,90,138\")),bytes32(stringToBytes32(\"178,3,53,18,46,112,222,23,99,42,112,245,251,242,97,228,53,65,79,65,188,201,200,123,237,247,69,169,69,130,145,86\")),bytes32(stringToBytes32(\"145,49,125,32,61,138,28,160,18,80,12,30,101,237,57,25,229,220,221,59,160,73,78,20,92,251,51,234,76,113,46,1\")),bytes32(stringToBytes32(\"183,46,248,81,40,245,170,36,129,46,36,144,168,145,159,2,11,158,194,39,54,157,4,50,173,196,103,94,41,151,236,190\")),bytes32(stringToBytes32(\"240,215,200,103,171,194,63,121,33,196,6,19,41,25,119,210,70,172,134,81,104,99,20,39,0,246,12,195,115,93,181,16\")),bytes32(stringToBytes32(\"63,102,50,70,205,11,198,253,193,161,180,251,68,22,237,148,85,136,70,35,217,121,164,163,222,52,62,179,20,144,138,60\")),bytes32(stringToBytes32(\"169,83,139,94,11,10,29,20,69,3,103,7,174,156,110,238,180,176,253,22,82,218,117,147,44,86,116,50,172,250,240,167\")),bytes32(stringToBytes32(\"221,15,198,241,168,219,53,196,92,255,175,144,189,102,208,139,190,35,220,228,162,82,173,236,107,47,71,119,165,130,56,196\")),bytes32(stringToBytes32(\"175,232,164,94,159,57,131,96,24,7,83,228,24,15,172,65,8,204,234,83,83,124,244,199,195,235,233,231,217,66,232,230\")),bytes32(stringToBytes32(\"174,232,62,116,161,71,183,40,163,253,98,103,128,100,39,77,107,156,253,161,214,101,131,95,166,142,54,78,46,210,70,5\")),bytes32(stringToBytes32(\"126,131,16,91,209,67,198,219,210,138,170,163,23,193,125,184,39,22,111,214,1,198,106,94,255,43,132,12,155,8,98,90\")),bytes32(stringToBytes32(\"198,213,225,6,175,233,253,246,183,82,51,22,149,80,243,125,114,153,51,170,55,33,119,235,175,209,169,108,34,249,198,114\")),bytes32(stringToBytes32(\"141,18,44,40,54,124,12,53,96,67,19,1,88,58,130,11,1,222,14,252,120,24,161,172,80,182,142,195,26,7,34,228\")),bytes32(stringToBytes32(\"198,146,249,135,194,156,233,192,210,134,15,104,19,98,35,186,192,209,182,178,9,115,3,183,42,65,209,16,17,17,85,102\")),bytes32(stringToBytes32(\"56,53,47,163,203,39,205,242,142,214,207,44,116,148,97,142,105,134,68,47,10,165,132,129,105,12,226,28,200,17,183,22\")),bytes32(stringToBytes32(\"221,56,178,82,23,49,4,129,40,121,89,249,197,94,35,234,211,48,72,43,66,31,170,173,233,241,14,229,223,137,108,204\")),bytes32(stringToBytes32(\"221,147,174,62,153,181,110,91,183,89,147,149,236,60,193,238,221,54,99,224,229,126,225,130,120,220,223,73,36,72,246,238\")),bytes32(stringToBytes32(\"214,190,228,82,200,58,174,151,133,129,70,17,164,44,173,51,25,70,132,90,105,33,199,44,142,51,235,170,37,241,220,58\")),bytes32(stringToBytes32(\"132,132,3,160,145,102,230,188,138,110,194,43,84,202,225,223,160,12,199,157,185,33,162,95,45,172,74,255,9,221,117,3\")),bytes32(stringToBytes32(\"204,164,35,117,36,195,127,84,254,235,123,82,11,141,101,236,251,107,136,83,196,89,206,22,86,213,222,242,103,78,10,244\")),bytes32(stringToBytes32(\"62,73,176,39,135,180,63,157,3,134,212,50,148,193,218,147,29,46,167,33,54,242,182,8,70,255,102,41,30,121,87,179\")),bytes32(stringToBytes32(\"194,155,59,229,226,33,205,9,13,144,194,46,208,84,236,250,34,124,229,213,27,152,136,91,194,77,36,17,233,222,84,15\")),bytes32(stringToBytes32(\"204,172,176,175,112,115,225,128,155,237,249,206,67,2,100,138,231,84,107,252,196,231,70,77,24,34,241,142,212,123,31,12\")),bytes32(stringToBytes32(\"189,66,221,201,154,104,225,118,23,30,195,149,94,145,198,255,18,200,24,233,17,170,137,238,148,21,210,39,144,19,171,148\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[59,144,167,216,78,103,69,173,27,44,163,204,96,226,69,127,238,157,242,172,132,236,135,114,12,74,49,142,130,69,229,211],[34,63,104,247,118,253,18,114,56,119,81,110,27,159,114,214,116,247,226,16,127,119,15,118,92,126,153,191,157,108,238,97],[40,86,128,108,199,206,88,46,148,120,116,111,244,254,72,220,75,221,23,39,252,8,180,168,30,29,181,232,32,115,90,138],[178,3,53,18,46,112,222,23,99,42,112,245,251,242,97,228,53,65,79,65,188,201,200,123,237,247,69,169,69,130,145,86],[145,49,125,32,61,138,28,160,18,80,12,30,101,237,57,25,229,220,221,59,160,73,78,20,92,251,51,234,76,113,46,1],[183,46,248,81,40,245,170,36,129,46,36,144,168,145,159,2,11,158,194,39,54,157,4,50,173,196,103,94,41,151,236,190],[240,215,200,103,171,194,63,121,33,196,6,19,41,25,119,210,70,172,134,81,104,99,20,39,0,246,12,195,115,93,181,16],[63,102,50,70,205,11,198,253,193,161,180,251,68,22,237,148,85,136,70,35,217,121,164,163,222,52,62,179,20,144,138,60],[169,83,139,94,11,10,29,20,69,3,103,7,174,156,110,238,180,176,253,22,82,218,117,147,44,86,116,50,172,250,240,167],[221,15,198,241,168,219,53,196,92,255,175,144,189,102,208,139,190,35,220,228,162,82,173,236,107,47,71,119,165,130,56,196],[175,232,164,94,159,57,131,96,24,7,83,228,24,15,172,65,8,204,234,83,83,124,244,199,195,235,233,231,217,66,232,230],[174,232,62,116,161,71,183,40,163,253,98,103,128,100,39,77,107,156,253,161,214,101,131,95,166,142,54,78,46,210,70,5],[126,131,16,91,209,67,198,219,210,138,170,163,23,193,125,184,39,22,111,214,1,198,106,94,255,43,132,12,155,8,98,90],[198,213,225,6,175,233,253,246,183,82,51,22,149,80,243,125,114,153,51,170,55,33,119,235,175,209,169,108,34,249,198,114],[141,18,44,40,54,124,12,53,96,67,19,1,88,58,130,11,1,222,14,252,120,24,161,172,80,182,142,195,26,7,34,228],[198,146,249,135,194,156,233,192,210,134,15,104,19,98,35,186,192,209,182,178,9,115,3,183,42,65,209,16,17,17,85,102],[56,53,47,163,203,39,205,242,142,214,207,44,116,148,97,142,105,134,68,47,10,165,132,129,105,12,226,28,200,17,183,22],[221,56,178,82,23,49,4,129,40,121,89,249,197,94,35,234,211,48,72,43,66,31,170,173,233,241,14,229,223,137,108,204],[221,147,174,62,153,181,110,91,183,89,147,149,236,60,193,238,221,54,99,224,229,126,225,130,120,220,223,73,36,72,246,238],[214,190,228,82,200,58,174,151,133,129,70,17,164,44,173,51,25,70,132,90,105,33,199,44,142,51,235,170,37,241,220,58],[132,132,3,160,145,102,230,188,138,110,194,43,84,202,225,223,160,12,199,157,185,33,162,95,45,172,74,255,9,221,117,3],[204,164,35,117,36,195,127,84,254,235,123,82,11,141,101,236,251,107,136,83,196,89,206,22,86,213,222,242,103,78,10,244],[62,73,176,39,135,180,63,157,3,134,212,50,148,193,218,147,29,46,167,33,54,242,182,8,70,255,102,41,30,121,87,179],[194,155,59,229,226,33,205,9,13,144,194,46,208,84,236,250,34,124,229,213,27,152,136,91,194,77,36,17,233,222,84,15],[204,172,176,175,112,115,225,128,155,237,249,206,67,2,100,138,231,84,107,252,196,231,70,77,24,34,241,142,212,123,31,12],[189,66,221,201,154,104,225,118,23,30,195,149,94,145,198,255,18,200,24,233,17,170,137,238,148,21,210,39,144,19,171,148]]",
                "sol": "[bytes32(stringToBytes32(\"59,144,167,216,78,103,69,173,27,44,163,204,96,226,69,127,238,157,242,172,132,236,135,114,12,74,49,142,130,69,229,211\")),bytes32(stringToBytes32(\"34,63,104,247,118,253,18,114,56,119,81,110,27,159,114,214,116,247,226,16,127,119,15,118,92,126,153,191,157,108,238,97\")),bytes32(stringToBytes32(\"40,86,128,108,199,206,88,46,148,120,116,111,244,254,72,220,75,221,23,39,252,8,180,168,30,29,181,232,32,115,90,138\")),bytes32(stringToBytes32(\"178,3,53,18,46,112,222,23,99,42,112,245,251,242,97,228,53,65,79,65,188,201,200,123,237,247,69,169,69,130,145,86\")),bytes32(stringToBytes32(\"145,49,125,32,61,138,28,160,18,80,12,30,101,237,57,25,229,220,221,59,160,73,78,20,92,251,51,234,76,113,46,1\")),bytes32(stringToBytes32(\"183,46,248,81,40,245,170,36,129,46,36,144,168,145,159,2,11,158,194,39,54,157,4,50,173,196,103,94,41,151,236,190\")),bytes32(stringToBytes32(\"240,215,200,103,171,194,63,121,33,196,6,19,41,25,119,210,70,172,134,81,104,99,20,39,0,246,12,195,115,93,181,16\")),bytes32(stringToBytes32(\"63,102,50,70,205,11,198,253,193,161,180,251,68,22,237,148,85,136,70,35,217,121,164,163,222,52,62,179,20,144,138,60\")),bytes32(stringToBytes32(\"169,83,139,94,11,10,29,20,69,3,103,7,174,156,110,238,180,176,253,22,82,218,117,147,44,86,116,50,172,250,240,167\")),bytes32(stringToBytes32(\"221,15,198,241,168,219,53,196,92,255,175,144,189,102,208,139,190,35,220,228,162,82,173,236,107,47,71,119,165,130,56,196\")),bytes32(stringToBytes32(\"175,232,164,94,159,57,131,96,24,7,83,228,24,15,172,65,8,204,234,83,83,124,244,199,195,235,233,231,217,66,232,230\")),bytes32(stringToBytes32(\"174,232,62,116,161,71,183,40,163,253,98,103,128,100,39,77,107,156,253,161,214,101,131,95,166,142,54,78,46,210,70,5\")),bytes32(stringToBytes32(\"126,131,16,91,209,67,198,219,210,138,170,163,23,193,125,184,39,22,111,214,1,198,106,94,255,43,132,12,155,8,98,90\")),bytes32(stringToBytes32(\"198,213,225,6,175,233,253,246,183,82,51,22,149,80,243,125,114,153,51,170,55,33,119,235,175,209,169,108,34,249,198,114\")),bytes32(stringToBytes32(\"141,18,44,40,54,124,12,53,96,67,19,1,88,58,130,11,1,222,14,252,120,24,161,172,80,182,142,195,26,7,34,228\")),bytes32(stringToBytes32(\"198,146,249,135,194,156,233,192,210,134,15,104,19,98,35,186,192,209,182,178,9,115,3,183,42,65,209,16,17,17,85,102\")),bytes32(stringToBytes32(\"56,53,47,163,203,39,205,242,142,214,207,44,116,148,97,142,105,134,68,47,10,165,132,129,105,12,226,28,200,17,183,22\")),bytes32(stringToBytes32(\"221,56,178,82,23,49,4,129,40,121,89,249,197,94,35,234,211,48,72,43,66,31,170,173,233,241,14,229,223,137,108,204\")),bytes32(stringToBytes32(\"221,147,174,62,153,181,110,91,183,89,147,149,236,60,193,238,221,54,99,224,229,126,225,130,120,220,223,73,36,72,246,238\")),bytes32(stringToBytes32(\"214,190,228,82,200,58,174,151,133,129,70,17,164,44,173,51,25,70,132,90,105,33,199,44,142,51,235,170,37,241,220,58\")),bytes32(stringToBytes32(\"132,132,3,160,145,102,230,188,138,110,194,43,84,202,225,223,160,12,199,157,185,33,162,95,45,172,74,255,9,221,117,3\")),bytes32(stringToBytes32(\"204,164,35,117,36,195,127,84,254,235,123,82,11,141,101,236,251,107,136,83,196,89,206,22,86,213,222,242,103,78,10,244\")),bytes32(stringToBytes32(\"62,73,176,39,135,180,63,157,3,134,212,50,148,193,218,147,29,46,167,33,54,242,182,8,70,255,102,41,30,121,87,179\")),bytes32(stringToBytes32(\"194,155,59,229,226,33,205,9,13,144,194,46,208,84,236,250,34,124,229,213,27,152,136,91,194,77,36,17,233,222,84,15\")),bytes32(stringToBytes32(\"204,172,176,175,112,115,225,128,155,237,249,206,67,2,100,138,231,84,107,252,196,231,70,77,24,34,241,142,212,123,31,12\")),bytes32(stringToBytes32(\"189,66,221,201,154,104,225,118,23,30,195,149,94,145,198,255,18,200,24,233,17,170,137,238,148,21,210,39,144,19,171,148\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.649ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"Example\"",
                "sol": "\"Example\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.653ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[1],accounts[3],accounts[5],accounts[0],accounts[0],accounts[7],accounts[5],accounts[2],accounts[5],accounts[0],accounts[7],accounts[6],accounts[0],accounts[4],accounts[0],accounts[3],accounts[6],accounts[2],accounts[0],accounts[9],accounts[3],accounts[5],accounts[5],accounts[1],accounts[0],accounts[4],accounts[1],accounts[0],accounts[5],accounts[0],accounts[7],accounts[1],accounts[9],accounts[5],accounts[2],accounts[9],accounts[7],accounts[7],accounts[9],accounts[3],accounts[5],accounts[0],accounts[0],accounts[1],accounts[8],accounts[5],accounts[1],accounts[4],accounts[3],accounts[4],accounts[8],accounts[7],accounts[9],accounts[1],accounts[6],accounts[3],accounts[6],accounts[3],accounts[9],accounts[2],accounts[4],accounts[2],accounts[5],accounts[5]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[1532892063,97,3,65,6,0,64,1532892062,95,2014223715,1336,10001,1,66,1532892062,27,2014223715,2014223715,1,64,5,255,2,254,1,257,95,1532892062,255,1338,255,26,254,64,2,256,64,64,257,2014223716,10001,3,256,6,6,1336,28,257,1,257,27,1337,6,255,28,1338,95,10000,6,1532892062,0,6,2,1532892064]",
              "sol": "[uint256(1532892063),uint256(97),uint256(3),uint256(65),uint256(6),uint256(0),uint256(64),uint256(1532892062),uint256(95),uint256(2014223715),uint256(1336),uint256(10001),uint256(1),uint256(66),uint256(1532892062),uint256(27),uint256(2014223715),uint256(2014223715),uint256(1),uint256(64),uint256(5),uint256(255),uint256(2),uint256(254),uint256(1),uint256(257),uint256(95),uint256(1532892062),uint256(255),uint256(1338),uint256(255),uint256(26),uint256(254),uint256(64),uint256(2),uint256(256),uint256(64),uint256(64),uint256(257),uint256(2014223716),uint256(10001),uint256(3),uint256(256),uint256(6),uint256(6),uint256(1336),uint256(28),uint256(257),uint256(1),uint256(257),uint256(27),uint256(1337),uint256(6),uint256(255),uint256(28),uint256(1338),uint256(95),uint256(10000),uint256(6),uint256(1532892062),uint256(0),uint256(6),uint256(2),uint256(1532892064)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[1],accounts[3],accounts[5],accounts[0],accounts[0],accounts[7],accounts[5],accounts[2],accounts[5],accounts[0],accounts[7],accounts[6],accounts[0],accounts[4],accounts[0],accounts[3],accounts[6],accounts[2],accounts[0],accounts[9],accounts[3],accounts[5],accounts[5],accounts[1],accounts[0],accounts[4],accounts[1],accounts[0],accounts[5],accounts[0],accounts[7],accounts[1],accounts[9],accounts[5],accounts[2],accounts[9],accounts[7],accounts[7],accounts[9],accounts[3],accounts[5],accounts[0],accounts[0],accounts[1],accounts[8],accounts[5],accounts[1],accounts[4],accounts[3],accounts[4],accounts[8],accounts[7],accounts[9],accounts[1],accounts[6],accounts[3],accounts[6],accounts[3],accounts[9],accounts[2],accounts[4],accounts[2],accounts[5],accounts[5]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[1532892063,97,3,65,6,0,64,1532892062,95,2014223715,1336,10001,1,66,1532892062,27,2014223715,2014223715,1,64,5,255,2,254,1,257,95,1532892062,255,1338,255,26,254,64,2,256,64,64,257,2014223716,10001,3,256,6,6,1336,28,257,1,257,27,1337,6,255,28,1338,95,10000,6,1532892062,0,6,2,1532892064]",
                "sol": "[uint256(1532892063),uint256(97),uint256(3),uint256(65),uint256(6),uint256(0),uint256(64),uint256(1532892062),uint256(95),uint256(2014223715),uint256(1336),uint256(10001),uint256(1),uint256(66),uint256(1532892062),uint256(27),uint256(2014223715),uint256(2014223715),uint256(1),uint256(64),uint256(5),uint256(255),uint256(2),uint256(254),uint256(1),uint256(257),uint256(95),uint256(1532892062),uint256(255),uint256(1338),uint256(255),uint256(26),uint256(254),uint256(64),uint256(2),uint256(256),uint256(64),uint256(64),uint256(257),uint256(2014223716),uint256(10001),uint256(3),uint256(256),uint256(6),uint256(6),uint256(1336),uint256(28),uint256(257),uint256(1),uint256(257),uint256(27),uint256(1337),uint256(6),uint256(255),uint256(28),uint256(1338),uint256(95),uint256(10000),uint256(6),uint256(1532892062),uint256(0),uint256(6),uint256(2),uint256(1532892064)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[0],accounts[9],accounts[7],accounts[8],accounts[0],accounts[5],accounts[0],accounts[5],accounts[2],accounts[6],accounts[0],accounts[2],accounts[3],accounts[4],accounts[9],accounts[0],accounts[3],accounts[4],accounts[4],accounts[7],accounts[4],accounts[8],accounts[7],accounts[1],accounts[6],accounts[5],accounts[0],accounts[4],accounts[4],accounts[8],accounts[9],accounts[3],accounts[7],accounts[5],accounts[3],accounts[2],accounts[0],accounts[9],accounts[0],accounts[9],accounts[2],accounts[6],accounts[8],accounts[4],accounts[0],accounts[1],accounts[7],accounts[0],accounts[5],accounts[1],accounts[2],accounts[0],accounts[5],accounts[5],accounts[0],accounts[2],accounts[5],accounts[1],accounts[4],accounts[3],accounts[4],accounts[9],accounts[3],accounts[3],accounts[0]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1532892063,97,3,65,6,0,64,1532892062,95,2014223715,1336,10001,1,66,1532892062,27,2014223715,2014223715,1,64,5,255,2,254,1,257,95,1532892062,255,1338,255,26,254,64,2,256,64,64,257,2014223716,10001,3,256,6,6,1336,28,257,1,257,27,1337,6,255,28,1338,95,10000,6,1532892062,0,6,2,1532892064]",
                "sol": "[uint256(1532892063),uint256(97),uint256(3),uint256(65),uint256(6),uint256(0),uint256(64),uint256(1532892062),uint256(95),uint256(2014223715),uint256(1336),uint256(10001),uint256(1),uint256(66),uint256(1532892062),uint256(27),uint256(2014223715),uint256(2014223715),uint256(1),uint256(64),uint256(5),uint256(255),uint256(2),uint256(254),uint256(1),uint256(257),uint256(95),uint256(1532892062),uint256(255),uint256(1338),uint256(255),uint256(26),uint256(254),uint256(64),uint256(2),uint256(256),uint256(64),uint256(64),uint256(257),uint256(2014223716),uint256(10001),uint256(3),uint256(256),uint256(6),uint256(6),uint256(1336),uint256(28),uint256(257),uint256(1),uint256(257),uint256(27),uint256(1337),uint256(6),uint256(255),uint256(28),uint256(1338),uint256(95),uint256(10000),uint256(6),uint256(1532892062),uint256(0),uint256(6),uint256(2),uint256(1532892064)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[1532892063,97,3,65,6,0,64,1532892062,95,2014223715,1336,10001,1,66,1532892062,27,2014223715,2014223715,1,64,5,255,2,254,1,257,95,1532892062,255,1338,255,26,254,64,2,256,64,64,257,2014223716,10001,3,256,6,6,1336,28,257,1,257,27,1337,6,255,28,1338,95,10000,6,1532892062,0,6,2,1532892064]",
                "sol": "[uint256(1532892063),uint256(97),uint256(3),uint256(65),uint256(6),uint256(0),uint256(64),uint256(1532892062),uint256(95),uint256(2014223715),uint256(1336),uint256(10001),uint256(1),uint256(66),uint256(1532892062),uint256(27),uint256(2014223715),uint256(2014223715),uint256(1),uint256(64),uint256(5),uint256(255),uint256(2),uint256(254),uint256(1),uint256(257),uint256(95),uint256(1532892062),uint256(255),uint256(1338),uint256(255),uint256(26),uint256(254),uint256(64),uint256(2),uint256(256),uint256(64),uint256(64),uint256(257),uint256(2014223716),uint256(10001),uint256(3),uint256(256),uint256(6),uint256(6),uint256(1336),uint256(28),uint256(257),uint256(1),uint256(257),uint256(27),uint256(1337),uint256(6),uint256(255),uint256(28),uint256(1338),uint256(95),uint256(10000),uint256(6),uint256(1532892062),uint256(0),uint256(6),uint256(2),uint256(1532892064)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.657ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T04:22:25.657ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[8],accounts[3],accounts[4],accounts[8],accounts[0],accounts[1]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[8],accounts[3],accounts[4],accounts[8],accounts[0],accounts[1]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[8],accounts[3],accounts[4],accounts[8],accounts[0],accounts[1]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.661ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T04:22:25.662ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+164",
              "sol": "block.timestamp+164"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+164",
                "sol": "block.timestamp+164"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.666ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.672ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.678ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.683ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.687ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.691ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T04:22:25.692ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T04:22:25.693ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[7],accounts[6],accounts[3],accounts[9],accounts[8],accounts[7],accounts[6],accounts[2],accounts[9],accounts[1],accounts[7],accounts[5],accounts[0],accounts[0],accounts[0],accounts[0],accounts[5],accounts[0],accounts[1],accounts[2],accounts[7],accounts[2],accounts[4],accounts[1],accounts[1],accounts[4],accounts[1],accounts[0],accounts[1],accounts[2],accounts[3],accounts[1],accounts[8],accounts[8],accounts[5],accounts[2],accounts[0],accounts[4],accounts[0],accounts[6],accounts[2],accounts[8],accounts[3],accounts[0],accounts[2],accounts[9],accounts[4],accounts[3],accounts[4],accounts[9],accounts[0],accounts[5],accounts[0],accounts[1],accounts[9],accounts[9],accounts[4],accounts[5],accounts[1],accounts[9],accounts[4],accounts[5],accounts[0],accounts[7],accounts[0],accounts[2]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[7],accounts[6],accounts[3],accounts[9],accounts[8],accounts[7],accounts[6],accounts[2],accounts[9],accounts[1],accounts[7],accounts[5],accounts[0],accounts[0],accounts[0],accounts[0],accounts[5],accounts[0],accounts[1],accounts[2],accounts[7],accounts[2],accounts[4],accounts[1],accounts[1],accounts[4],accounts[1],accounts[0],accounts[1],accounts[2],accounts[3],accounts[1],accounts[8],accounts[8],accounts[5],accounts[2],accounts[0],accounts[4],accounts[0],accounts[6],accounts[2],accounts[8],accounts[3],accounts[0],accounts[2],accounts[9],accounts[4],accounts[3],accounts[4],accounts[9],accounts[0],accounts[5],accounts[0],accounts[1],accounts[9],accounts[9],accounts[4],accounts[5],accounts[1],accounts[9],accounts[4],accounts[5],accounts[0],accounts[7],accounts[0],accounts[2]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[7],accounts[6],accounts[3],accounts[9],accounts[8],accounts[7],accounts[6],accounts[2],accounts[9],accounts[1],accounts[7],accounts[5],accounts[0],accounts[0],accounts[0],accounts[0],accounts[5],accounts[0],accounts[1],accounts[2],accounts[7],accounts[2],accounts[4],accounts[1],accounts[1],accounts[4],accounts[1],accounts[0],accounts[1],accounts[2],accounts[3],accounts[1],accounts[8],accounts[8],accounts[5],accounts[2],accounts[0],accounts[4],accounts[0],accounts[6],accounts[2],accounts[8],accounts[3],accounts[0],accounts[2],accounts[9],accounts[4],accounts[3],accounts[4],accounts[9],accounts[0],accounts[5],accounts[0],accounts[1],accounts[9],accounts[9],accounts[4],accounts[5],accounts[1],accounts[9],accounts[4],accounts[5],accounts[0],accounts[7],accounts[0],accounts[2]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.695ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:22:25.696ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T04:22:25.697ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}