{"code":"  let trace = false;\n  let contractSafeMath = null;\n  let contractMath = null;\n  let contractECDSA = null;\n  let contractERC20 = null;\n  let contractRedeemableToken = null;\n  let contractPaymentTokenMock = null;\n  let contractRedeemableTokenMock = null;\n  let contractOffChainPayments = null;\n  let contractPartialRedemption = null;\n  let contractOnChainPayments = null;\n  let contractFixedPriceTender = null;\n  let contractFullRedemption = null;\n  let contractOnChainVoting = null;\n  beforeEach(async () => {\n    contractSafeMath = await SafeMath.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');\n    contractMath = await Math.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: Math.new({from: accounts[0]}');\n    contractECDSA = await ECDSA.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: ECDSA.new({from: accounts[0]}');\n    ERC20.link(\"SafeMath\",contractSafeMath.address);\n    contractERC20 = await ERC20.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: ERC20.new({from: accounts[0]}');\n    RedeemableToken.link(\"SafeMath\",contractSafeMath.address);\n    contractRedeemableToken = await RedeemableToken.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: RedeemableToken.new({from: accounts[0]}');\n    contractPaymentTokenMock = await PaymentTokenMock.new(accounts[6],10001,{from:accounts[0]});\n    if(trace) console.log('SUCESSO: PaymentTokenMock.new(accounts[6],10001,{from:accounts[0]}');\n    contractRedeemableTokenMock = await RedeemableTokenMock.new(accounts[5],29,{from:accounts[0]});\n    if(trace) console.log('SUCESSO: RedeemableTokenMock.new(accounts[5],29,{from:accounts[0]}');\n    OffChainPayments.link(\"SafeMath\",contractSafeMath.address);\n     OffChainPayments.link(\"ECDSA\",contractECDSA.address);\n    contractOffChainPayments = await OffChainPayments.new(accounts[4],{from:accounts[9]});\n    if(trace) console.log('SUCESSO: OffChainPayments.new(accounts[4],{from:accounts[9]}');\n    PartialRedemption.link(\"SafeMath\",contractSafeMath.address);\n    contractPartialRedemption = await PartialRedemption.new(contractPaymentTokenMock.address,contractRedeemableTokenMock.address,accounts[3],2014223716,{from:accounts[0]});\n    if(trace) console.log('SUCESSO: PartialRedemption.new(contractPaymentTokenMock.address,contractRedeemableTokenMock.address,accounts[3],2014223716,{from:accounts[0]}');\n    OnChainPayments.link(\"SafeMath\",contractSafeMath.address);\n     OnChainPayments.link(\"ECDSA\",contractECDSA.address);\n    contractOnChainPayments = await OnChainPayments.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[8],{from:accounts[4]});\n    if(trace) console.log('SUCESSO: OnChainPayments.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[8],{from:accounts[4]}');\n    FixedPriceTender.link(\"Math\",contractMath.address);\n     FixedPriceTender.link(\"SafeMath\",contractSafeMath.address);\n    contractFixedPriceTender = await FixedPriceTender.new(2014223715,contractPaymentTokenMock.address,contractPaymentTokenMock.address,accounts[9],256,1336,{from:accounts[7]});\n    if(trace) console.log('SUCESSO: FixedPriceTender.new(2014223715,contractPaymentTokenMock.address,contractPaymentTokenMock.address,accounts[9],256,1336,{from:accounts[7]}');\n    FullRedemption.link(\"SafeMath\",contractSafeMath.address);\n    contractFullRedemption = await FullRedemption.new(contractPaymentTokenMock.address,contractRedeemableToken.address,accounts[4],1532892064,{from:accounts[0]});\n    if(trace) console.log('SUCESSO: FullRedemption.new(contractPaymentTokenMock.address,contractRedeemableToken.address,accounts[4],1532892064,{from:accounts[0]}');\n    OnChainVoting.link(\"SafeMath\",contractSafeMath.address);\n    contractOnChainVoting = await OnChainVoting.new(contractRedeemableTokenMock.address,accounts[9],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+690,{from:accounts[1]});\n    if(trace) console.log('SUCESSO: OnChainVoting.new(contractRedeemableTokenMock.address,accounts[9],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+690,{from:accounts[1]}');\n  });\n","contractsDeployed":[{"contractName":"SafeMath","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"Math","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"ECDSA","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"ERC20","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"RedeemableToken","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"PaymentTokenMock","stringfieldParams":["accounts[6]","10001","{from:accounts[0]}"]},{"contractName":"RedeemableTokenMock","stringfieldParams":["accounts[5]","29","{from:accounts[0]}"]},{"contractName":"OffChainPayments","stringfieldParams":["accounts[4]","{from:accounts[9]}"]},{"contractName":"PartialRedemption","stringfieldParams":["contractPaymentTokenMock.address","contractRedeemableTokenMock.address","accounts[3]","2014223716","{from:accounts[0]}"]},{"contractName":"OnChainPayments","stringfieldParams":["contractRedeemableToken.address","contractRedeemableToken.address","accounts[8]","{from:accounts[4]}"]},{"contractName":"FixedPriceTender","stringfieldParams":["2014223715","contractPaymentTokenMock.address","contractPaymentTokenMock.address","accounts[9]","256","1336","{from:accounts[7]}"]},{"contractName":"FullRedemption","stringfieldParams":["contractPaymentTokenMock.address","contractRedeemableToken.address","accounts[4]","1532892064","{from:accounts[0]}"]},{"contractName":"OnChainVoting","stringfieldParams":["contractRedeemableTokenMock.address","accounts[9]","(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+690","{from:accounts[1]}"]}]}