,{
  "2020-11-13T03:28:08.820ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:28:15.212ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+159",
              "sol": "block.number+159"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+159+656",
              "sol": "block.number+159+656"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+159",
                "sol": "block.number+159"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+159+656",
                "sol": "block.number+159+656"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+159",
                "sol": "block.number+159"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+159+656",
                "sol": "block.number+159+656"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+159+656",
                "sol": "block.number+159+656"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+159",
                "sol": "block.number+159"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+159",
                "sol": "block.number+159"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:28:21.709ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:28:28.448ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:28:35.083ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBasicToken.address",
              "sol": "contractBasicToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:28:41.577ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:28:48.136ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractTokenProxy.address",
              "sol": "contractTokenProxy"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:28:54.796ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.493ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.495ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.495ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": 15,
                "sol": 15
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.496ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.498ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.499ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.500ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.500ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.501ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.502ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.502ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.502ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.503ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.505ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_value <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _value<=0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.506ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.506ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.506ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.508ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.510ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.511ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:999}",
              "sol": "{\"from\":\"0x0\",\"value\":\"999\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:999}",
                "sol": "{\"from\":\"0x0\",\"value\":\"999\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.516ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.517ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.522ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.522ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.522ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.523ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.523ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "[195,119,55,70,229,37,231,3,128,101,177,172,228,92,214,61,98,135,91,179,153,179,94,11,229,104,163,148,65,89,99,125]",
              "sol": "stringToBytes32(\"195,119,55,70,229,37,231,3,128,101,177,172,228,92,214,61,98,135,91,179,153,179,94,11,229,104,163,148,65,89,99,125\")"
            },
            {
              "js": "[70,45,175,86,118,102,88,239,168,157,143,40,163,213,119,224,244,124,78,200,255,114,185,80,76,138,19,168,170,113,221,133]",
              "sol": "stringToBytes32(\"70,45,175,86,118,102,88,239,168,157,143,40,163,213,119,224,244,124,78,200,255,114,185,80,76,138,19,168,170,113,221,133\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.524ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "[229,112,194,113,99,158,84,83,118,222,16,4,88,22,42,153,118,219,144,210]",
              "sol": "abi.encode(\"229,112,194,113,99,158,84,83,118,222,16,4,88,22,42,153,118,219,144,210\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "[169,27,210,234,189,54,41,37,219,156,5,23,149,70,7,192,132,33,159,118,53]",
                "sol": "bytes21(\"169,27,210,234,189,54,41,37,219,156,5,23,149,70,7,192,132,33,159,118,53\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.527ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "[66,219,31,191,3,135,202,140,188,123,186,195,225,87,30,225,47,153,143,3,77,186,38,57,159,152,26,205,52,233,173,241]",
              "sol": "stringToBytes32(\"66,219,31,191,3,135,202,140,188,123,186,195,225,87,30,225,47,153,143,3,77,186,38,57,159,152,26,205,52,233,173,241\")"
            },
            {
              "js": "[153,27,81,19,23,109,165,198,85,40,61,149,239,23,137,233,3,48,76,189,137,5,174,212,165,106,146,106,234,217,92,33]",
              "sol": "stringToBytes32(\"153,27,81,19,23,109,165,198,85,40,61,149,239,23,137,233,3,48,76,189,137,5,174,212,165,106,146,106,234,217,92,33\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.528ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.528ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.529ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.530ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.530ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.530ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.531ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.532ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.533ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.534ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[57,57,128,194,32,186,51,92,87,187,179,162,252,144,146,188,126,42,229,205,105,105,231,109,29,172,111,21,202,118,196,72],[24,161,138,5,150,42,213,58,252,34,117,180,108,124,212,78,167,169,185,91,166,34,101,175,251,123,6,109,130,166,253,68],[21,38,43,141,61,158,82,242,176,142,162,210,50,34,117,49,195,111,100,149,9,135,42,49,74,70,37,33,130,247,252,64],[92,70,193,93,139,111,210,147,45,38,37,172,229,183,248,238,70,98,114,56,108,119,223,107,24,241,197,248,160,186,118,3],[49,177,16,9,226,80,208,251,43,99,202,118,105,218,155,186,187,251,204,174,34,34,122,235,244,13,219,124,107,9,204,8],[23,213,248,145,234,115,48,183,14,21,97,77,141,189,34,247,106,13,156,189,1,214,211,29,110,18,98,231,112,137,113,71]]",
              "sol": "[bytes32(stringToBytes32(\"57,57,128,194,32,186,51,92,87,187,179,162,252,144,146,188,126,42,229,205,105,105,231,109,29,172,111,21,202,118,196,72\")),bytes32(stringToBytes32(\"24,161,138,5,150,42,213,58,252,34,117,180,108,124,212,78,167,169,185,91,166,34,101,175,251,123,6,109,130,166,253,68\")),bytes32(stringToBytes32(\"21,38,43,141,61,158,82,242,176,142,162,210,50,34,117,49,195,111,100,149,9,135,42,49,74,70,37,33,130,247,252,64\")),bytes32(stringToBytes32(\"92,70,193,93,139,111,210,147,45,38,37,172,229,183,248,238,70,98,114,56,108,119,223,107,24,241,197,248,160,186,118,3\")),bytes32(stringToBytes32(\"49,177,16,9,226,80,208,251,43,99,202,118,105,218,155,186,187,251,204,174,34,34,122,235,244,13,219,124,107,9,204,8\")),bytes32(stringToBytes32(\"23,213,248,145,234,115,48,183,14,21,97,77,141,189,34,247,106,13,156,189,1,214,211,29,110,18,98,231,112,137,113,71\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-750",
              "sol": "block.timestamp-750"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[57,57,128,194,32,186,51,92,87,187,179,162,252,144,146,188,126,42,229,205,105,105,231,109,29,172,111,21,202,118,196,72],[24,161,138,5,150,42,213,58,252,34,117,180,108,124,212,78,167,169,185,91,166,34,101,175,251,123,6,109,130,166,253,68],[21,38,43,141,61,158,82,242,176,142,162,210,50,34,117,49,195,111,100,149,9,135,42,49,74,70,37,33,130,247,252,64],[92,70,193,93,139,111,210,147,45,38,37,172,229,183,248,238,70,98,114,56,108,119,223,107,24,241,197,248,160,186,118,3],[49,177,16,9,226,80,208,251,43,99,202,118,105,218,155,186,187,251,204,174,34,34,122,235,244,13,219,124,107,9,204,8],[23,213,248,145,234,115,48,183,14,21,97,77,141,189,34,247,106,13,156,189,1,214,211,29,110,18,98,231,112,137,113,71]]",
                "sol": "[bytes32(stringToBytes32(\"57,57,128,194,32,186,51,92,87,187,179,162,252,144,146,188,126,42,229,205,105,105,231,109,29,172,111,21,202,118,196,72\")),bytes32(stringToBytes32(\"24,161,138,5,150,42,213,58,252,34,117,180,108,124,212,78,167,169,185,91,166,34,101,175,251,123,6,109,130,166,253,68\")),bytes32(stringToBytes32(\"21,38,43,141,61,158,82,242,176,142,162,210,50,34,117,49,195,111,100,149,9,135,42,49,74,70,37,33,130,247,252,64\")),bytes32(stringToBytes32(\"92,70,193,93,139,111,210,147,45,38,37,172,229,183,248,238,70,98,114,56,108,119,223,107,24,241,197,248,160,186,118,3\")),bytes32(stringToBytes32(\"49,177,16,9,226,80,208,251,43,99,202,118,105,218,155,186,187,251,204,174,34,34,122,235,244,13,219,124,107,9,204,8\")),bytes32(stringToBytes32(\"23,213,248,145,234,115,48,183,14,21,97,77,141,189,34,247,106,13,156,189,1,214,211,29,110,18,98,231,112,137,113,71\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.535ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "[70,126,195,170,61,253,108,77,206,238,20,215,128,64,16,58,18,19,35,140,89,54,202,114,94,221,33,206,55,130,244,147]",
              "sol": "abi.encode(\"70,126,195,170,61,253,108,77,206,238,20,215,128,64,16,58,18,19,35,140,89,54,202,114,94,221,33,206,55,130,244,147\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "[70,126,195,170,61,253,108,77,206,238,20,215,128,64,16,58,18,19,35,140,89,54,202,114,94,221,33,206,55,130,244,147]",
                "sol": "abi.encode(\"70,126,195,170,61,253,108,77,206,238,20,215,128,64,16,58,18,19,35,140,89,54,202,114,94,221,33,206,55,130,244,147\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.537ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.537ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.538ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.538ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.538ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.539ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.539ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.540ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.540ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.541ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.542ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.542ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.542ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.543ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "[25,156,181,14,32,147,26,91,246,115,66,100,109,9,144,21,179,87,139,238,143,49,112,214,40,234,227,35,78,169,151,229]",
              "sol": "abi.encode(\"25,156,181,14,32,147,26,91,246,115,66,100,109,9,144,21,179,87,139,238,143,49,112,214,40,234,227,35,78,169,151,229\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.543ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.544ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.545ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "[249,94,254,92,22,81,166,112,219,146,177,197,247,64,194,219,117,112,132,200,76,229,101,164,35,239,185,166,122,153,84,172]",
              "sol": "stringToBytes32(\"249,94,254,92,22,81,166,112,219,146,177,197,247,64,194,219,117,112,132,200,76,229,101,164,35,239,185,166,122,153,84,172\")"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "[214,218,82,103,165,248,94,184,217,152,164,31,47,127,216,214,7,42,195,86,32,214,230,168,49,85,87,50,25,106,162,252]",
              "sol": "stringToBytes32(\"214,218,82,103,165,248,94,184,217,152,164,31,47,127,216,214,7,42,195,86,32,214,230,168,49,85,87,50,25,106,162,252\")"
            },
            {
              "js": "[99,179,75,200,84,121,161,176,95,8,110,95,43,82,193,243,216,247,49,140,6,135,19,99,45,237,121,0,1,97,88,180]",
              "sol": "stringToBytes32(\"99,179,75,200,84,121,161,176,95,8,110,95,43,82,193,243,216,247,49,140,6,135,19,99,45,237,121,0,1,97,88,180\")"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "[249,94,254,92,22,81,166,112,219,146,177,197,247,64,194,219,117,112,132,200,76,229,101,164,35,239,185,166,122,153,84,172]",
                "sol": "stringToBytes32(\"249,94,254,92,22,81,166,112,219,146,177,197,247,64,194,219,117,112,132,200,76,229,101,164,35,239,185,166,122,153,84,172\")"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "[214,218,82,103,165,248,94,184,217,152,164,31,47,127,216,214,7,42,195,86,32,214,230,168,49,85,87,50,25,106,162,252]",
                "sol": "stringToBytes32(\"214,218,82,103,165,248,94,184,217,152,164,31,47,127,216,214,7,42,195,86,32,214,230,168,49,85,87,50,25,106,162,252\")"
              },
              {
                "js": "[99,179,75,200,84,121,161,176,95,8,110,95,43,82,193,243,216,247,49,140,6,135,19,99,45,237,121,0,1,97,88,180]",
                "sol": "stringToBytes32(\"99,179,75,200,84,121,161,176,95,8,110,95,43,82,193,243,216,247,49,140,6,135,19,99,45,237,121,0,1,97,88,180\")"
              },
              {
                "js": "82",
                "sol": "82"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "[249,94,254,92,22,81,166,112,219,146,177,197,247,64,194,219,117,112,132,200,76,229,101,164,35,239,185,166,122,153,84,172]",
                "sol": "stringToBytes32(\"249,94,254,92,22,81,166,112,219,146,177,197,247,64,194,219,117,112,132,200,76,229,101,164,35,239,185,166,122,153,84,172\")"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "[214,218,82,103,165,248,94,184,217,152,164,31,47,127,216,214,7,42,195,86,32,214,230,168,49,85,87,50,25,106,162,252]",
                "sol": "stringToBytes32(\"214,218,82,103,165,248,94,184,217,152,164,31,47,127,216,214,7,42,195,86,32,214,230,168,49,85,87,50,25,106,162,252\")"
              },
              {
                "js": "[99,179,75,200,84,121,161,176,95,8,110,95,43,82,193,243,216,247,49,140,6,135,19,99,45,237,121,0,1,97,88,180]",
                "sol": "stringToBytes32(\"99,179,75,200,84,121,161,176,95,8,110,95,43,82,193,243,216,247,49,140,6,135,19,99,45,237,121,0,1,97,88,180\")"
              },
              {
                "js": 257,
                "sol": 257
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.547ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[1336,99,160,2,1000,257,1337,11,6]",
              "sol": "[uint256(1336),uint256(99),uint256(160),uint256(2),uint256(1000),uint256(257),uint256(1337),uint256(11),uint256(6)]"
            },
            {
              "js": "[[254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89],[151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147],[238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25],[92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59],[33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51],[7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117],[142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167],[51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3],[191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224]]",
              "sol": "[bytes32(stringToBytes32(\"254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89\")),bytes32(stringToBytes32(\"151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147\")),bytes32(stringToBytes32(\"238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25\")),bytes32(stringToBytes32(\"92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59\")),bytes32(stringToBytes32(\"33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51\")),bytes32(stringToBytes32(\"7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117\")),bytes32(stringToBytes32(\"142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167\")),bytes32(stringToBytes32(\"51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3\")),bytes32(stringToBytes32(\"191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224\"))]"
            },
            {
              "js": "[16,20,10,9,255,10,2,159,82]",
              "sol": "[uint8(16),uint8(20),uint8(10),uint8(9),uint8(255),uint8(10),uint8(2),uint8(159),uint8(82)]"
            },
            {
              "js": "[[50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60],[114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171],[140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248],[61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42],[180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134],[187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193],[151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50],[131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86],[195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173]]",
              "sol": "[bytes32(stringToBytes32(\"50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60\")),bytes32(stringToBytes32(\"114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171\")),bytes32(stringToBytes32(\"140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248\")),bytes32(stringToBytes32(\"61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42\")),bytes32(stringToBytes32(\"180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134\")),bytes32(stringToBytes32(\"187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193\")),bytes32(stringToBytes32(\"151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50\")),bytes32(stringToBytes32(\"131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86\")),bytes32(stringToBytes32(\"195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173\"))]"
            },
            {
              "js": "[[30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125],[182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48],[184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249],[98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15],[33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176],[109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107],[6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184],[115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47],[248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162]]",
              "sol": "[bytes32(stringToBytes32(\"30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125\")),bytes32(stringToBytes32(\"182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48\")),bytes32(stringToBytes32(\"184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249\")),bytes32(stringToBytes32(\"98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15\")),bytes32(stringToBytes32(\"33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176\")),bytes32(stringToBytes32(\"109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107\")),bytes32(stringToBytes32(\"6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184\")),bytes32(stringToBytes32(\"115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47\")),bytes32(stringToBytes32(\"248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162\"))]"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1336,99,160,2,1000,257,1337,11,6]",
                "sol": "[uint256(1336),uint256(99),uint256(160),uint256(2),uint256(1000),uint256(257),uint256(1337),uint256(11),uint256(6)]"
              },
              {
                "js": "[[254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89],[151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147],[238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25],[92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59],[33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51],[7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117],[142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167],[51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3],[191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224]]",
                "sol": "[bytes32(stringToBytes32(\"254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89\")),bytes32(stringToBytes32(\"151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147\")),bytes32(stringToBytes32(\"238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25\")),bytes32(stringToBytes32(\"92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59\")),bytes32(stringToBytes32(\"33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51\")),bytes32(stringToBytes32(\"7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117\")),bytes32(stringToBytes32(\"142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167\")),bytes32(stringToBytes32(\"51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3\")),bytes32(stringToBytes32(\"191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224\"))]"
              },
              {
                "js": "[16,20,10,9,255,10,2,159,82]",
                "sol": "[uint8(16),uint8(20),uint8(10),uint8(9),uint8(255),uint8(10),uint8(2),uint8(159),uint8(82)]"
              },
              {
                "js": "[[50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60],[114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171],[140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248],[61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42],[180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134],[187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193],[151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50],[131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86],[195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173]]",
                "sol": "[bytes32(stringToBytes32(\"50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60\")),bytes32(stringToBytes32(\"114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171\")),bytes32(stringToBytes32(\"140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248\")),bytes32(stringToBytes32(\"61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42\")),bytes32(stringToBytes32(\"180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134\")),bytes32(stringToBytes32(\"187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193\")),bytes32(stringToBytes32(\"151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50\")),bytes32(stringToBytes32(\"131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86\")),bytes32(stringToBytes32(\"195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173\"))]"
              },
              {
                "js": "[[30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125],[182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48],[184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249],[98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15],[33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176],[109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107],[6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184],[115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47],[248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162]]",
                "sol": "[bytes32(stringToBytes32(\"30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125\")),bytes32(stringToBytes32(\"182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48\")),bytes32(stringToBytes32(\"184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249\")),bytes32(stringToBytes32(\"98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15\")),bytes32(stringToBytes32(\"33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176\")),bytes32(stringToBytes32(\"109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107\")),bytes32(stringToBytes32(\"6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184\")),bytes32(stringToBytes32(\"115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47\")),bytes32(stringToBytes32(\"248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162\"))]"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[101,18,9,161,9999,159,9999,15,1,21]",
                "sol": "[99,82,82,4,9,101,2,9,9999,999]"
              },
              {
                "js": "[[254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89],[151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147],[238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25],[92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59],[33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51],[7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117],[142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167],[51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3],[191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224]]",
                "sol": "[bytes32(stringToBytes32(\"254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89\")),bytes32(stringToBytes32(\"151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147\")),bytes32(stringToBytes32(\"238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25\")),bytes32(stringToBytes32(\"92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59\")),bytes32(stringToBytes32(\"33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51\")),bytes32(stringToBytes32(\"7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117\")),bytes32(stringToBytes32(\"142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167\")),bytes32(stringToBytes32(\"51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3\")),bytes32(stringToBytes32(\"191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224\"))]"
              },
              {
                "js": "[16,20,10,9,255,10,2,159,82]",
                "sol": "[uint8(16),uint8(20),uint8(10),uint8(9),uint8(255),uint8(10),uint8(2),uint8(159),uint8(82)]"
              },
              {
                "js": "[[50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60],[114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171],[140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248],[61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42],[180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134],[187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193],[151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50],[131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86],[195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173]]",
                "sol": "[bytes32(stringToBytes32(\"50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60\")),bytes32(stringToBytes32(\"114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171\")),bytes32(stringToBytes32(\"140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248\")),bytes32(stringToBytes32(\"61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42\")),bytes32(stringToBytes32(\"180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134\")),bytes32(stringToBytes32(\"187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193\")),bytes32(stringToBytes32(\"151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50\")),bytes32(stringToBytes32(\"131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86\")),bytes32(stringToBytes32(\"195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173\"))]"
              },
              {
                "js": "[[30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125],[182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48],[184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249],[98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15],[33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176],[109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107],[6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184],[115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47],[248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162]]",
                "sol": "[bytes32(stringToBytes32(\"30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125\")),bytes32(stringToBytes32(\"182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48\")),bytes32(stringToBytes32(\"184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249\")),bytes32(stringToBytes32(\"98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15\")),bytes32(stringToBytes32(\"33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176\")),bytes32(stringToBytes32(\"109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107\")),bytes32(stringToBytes32(\"6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184\")),bytes32(stringToBytes32(\"115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47\")),bytes32(stringToBytes32(\"248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162\"))]"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1000,2,1,4,16,10,100,14,21,3]",
                "sol": "[15,5,10000,256,1001,10000,1337,6,9,1000]"
              },
              {
                "js": "[[254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89],[151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147],[238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25],[92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59],[33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51],[7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117],[142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167],[51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3],[191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224]]",
                "sol": "[bytes32(stringToBytes32(\"254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89\")),bytes32(stringToBytes32(\"151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147\")),bytes32(stringToBytes32(\"238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25\")),bytes32(stringToBytes32(\"92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59\")),bytes32(stringToBytes32(\"33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51\")),bytes32(stringToBytes32(\"7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117\")),bytes32(stringToBytes32(\"142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167\")),bytes32(stringToBytes32(\"51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3\")),bytes32(stringToBytes32(\"191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224\"))]"
              },
              {
                "js": "[16,20,10,9,255,10,2,159,82]",
                "sol": "[uint8(16),uint8(20),uint8(10),uint8(9),uint8(255),uint8(10),uint8(2),uint8(159),uint8(82)]"
              },
              {
                "js": "[[50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60],[114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171],[140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248],[61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42],[180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134],[187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193],[151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50],[131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86],[195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173]]",
                "sol": "[bytes32(stringToBytes32(\"50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60\")),bytes32(stringToBytes32(\"114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171\")),bytes32(stringToBytes32(\"140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248\")),bytes32(stringToBytes32(\"61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42\")),bytes32(stringToBytes32(\"180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134\")),bytes32(stringToBytes32(\"187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193\")),bytes32(stringToBytes32(\"151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50\")),bytes32(stringToBytes32(\"131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86\")),bytes32(stringToBytes32(\"195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173\"))]"
              },
              {
                "js": "[[30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125],[182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48],[184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249],[98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15],[33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176],[109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107],[6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184],[115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47],[248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162]]",
                "sol": "[bytes32(stringToBytes32(\"30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125\")),bytes32(stringToBytes32(\"182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48\")),bytes32(stringToBytes32(\"184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249\")),bytes32(stringToBytes32(\"98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15\")),bytes32(stringToBytes32(\"33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176\")),bytes32(stringToBytes32(\"109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107\")),bytes32(stringToBytes32(\"6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184\")),bytes32(stringToBytes32(\"115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47\")),bytes32(stringToBytes32(\"248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162\"))]"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[16,5,11,161,100,82,19,9,10000,159]",
                "sol": "[101,9,257,83,1,81,20,1,15,2]"
              },
              {
                "js": "[[254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89],[151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147],[238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25],[92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59],[33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51],[7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117],[142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167],[51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3],[191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224]]",
                "sol": "[bytes32(stringToBytes32(\"254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89\")),bytes32(stringToBytes32(\"151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147\")),bytes32(stringToBytes32(\"238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25\")),bytes32(stringToBytes32(\"92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59\")),bytes32(stringToBytes32(\"33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51\")),bytes32(stringToBytes32(\"7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117\")),bytes32(stringToBytes32(\"142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167\")),bytes32(stringToBytes32(\"51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3\")),bytes32(stringToBytes32(\"191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224\"))]"
              },
              {
                "js": "[16,20,10,9,255,10,2,159,82]",
                "sol": "[uint8(16),uint8(20),uint8(10),uint8(9),uint8(255),uint8(10),uint8(2),uint8(159),uint8(82)]"
              },
              {
                "js": "[[50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60],[114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171],[140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248],[61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42],[180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134],[187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193],[151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50],[131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86],[195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173]]",
                "sol": "[bytes32(stringToBytes32(\"50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60\")),bytes32(stringToBytes32(\"114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171\")),bytes32(stringToBytes32(\"140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248\")),bytes32(stringToBytes32(\"61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42\")),bytes32(stringToBytes32(\"180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134\")),bytes32(stringToBytes32(\"187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193\")),bytes32(stringToBytes32(\"151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50\")),bytes32(stringToBytes32(\"131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86\")),bytes32(stringToBytes32(\"195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173\"))]"
              },
              {
                "js": "[[30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125],[182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48],[184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249],[98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15],[33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176],[109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107],[6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184],[115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47],[248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162]]",
                "sol": "[bytes32(stringToBytes32(\"30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125\")),bytes32(stringToBytes32(\"182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48\")),bytes32(stringToBytes32(\"184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249\")),bytes32(stringToBytes32(\"98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15\")),bytes32(stringToBytes32(\"33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176\")),bytes32(stringToBytes32(\"109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107\")),bytes32(stringToBytes32(\"6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184\")),bytes32(stringToBytes32(\"115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47\")),bytes32(stringToBytes32(\"248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162\"))]"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[161,9999,1000,83,14,10001,101,161,999,9]",
                "sol": "[82,159,18,161,81,82,9999,5,14,1336]"
              },
              {
                "js": "[[254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89],[151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147],[238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25],[92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59],[33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51],[7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117],[142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167],[51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3],[191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224]]",
                "sol": "[bytes32(stringToBytes32(\"254,97,118,214,36,0,185,165,185,250,226,253,116,0,195,146,147,154,204,152,241,120,128,8,150,129,50,47,234,217,101,89\")),bytes32(stringToBytes32(\"151,51,116,144,178,85,146,195,113,143,36,108,113,106,163,171,74,98,136,255,26,105,147,153,177,217,216,13,45,127,158,147\")),bytes32(stringToBytes32(\"238,16,229,227,250,210,152,173,183,224,164,78,194,11,201,103,81,130,108,38,241,149,153,126,128,184,60,230,37,248,120,25\")),bytes32(stringToBytes32(\"92,81,166,173,56,18,160,249,61,74,77,164,236,247,130,226,12,89,114,140,41,14,34,111,138,84,32,22,39,115,205,59\")),bytes32(stringToBytes32(\"33,120,222,220,237,5,158,99,8,101,249,143,1,162,146,92,193,157,216,198,248,227,187,70,246,59,4,150,77,116,25,51\")),bytes32(stringToBytes32(\"7,17,19,127,123,148,164,96,59,192,95,65,75,229,185,35,75,26,80,172,132,98,248,228,29,177,98,177,1,157,159,117\")),bytes32(stringToBytes32(\"142,61,206,236,193,36,250,6,95,81,161,140,171,203,47,45,36,143,116,213,122,186,93,186,94,139,133,126,36,130,55,167\")),bytes32(stringToBytes32(\"51,151,230,18,31,101,93,143,6,102,140,0,87,202,26,216,183,175,209,254,156,29,89,113,229,71,66,23,103,13,148,3\")),bytes32(stringToBytes32(\"191,6,62,81,160,162,182,17,237,139,37,157,198,126,127,61,48,185,175,56,151,23,130,28,81,90,76,15,85,144,161,224\"))]"
              },
              {
                "js": "[16,20,10,9,255,10,2,159,82]",
                "sol": "[uint8(16),uint8(20),uint8(10),uint8(9),uint8(255),uint8(10),uint8(2),uint8(159),uint8(82)]"
              },
              {
                "js": "[[50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60],[114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171],[140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248],[61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42],[180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134],[187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193],[151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50],[131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86],[195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173]]",
                "sol": "[bytes32(stringToBytes32(\"50,130,53,233,89,20,7,98,22,100,77,247,115,144,112,15,25,112,200,157,134,82,122,4,178,132,152,44,50,134,186,60\")),bytes32(stringToBytes32(\"114,153,255,1,254,9,194,241,5,241,83,196,26,217,7,55,69,99,25,36,171,74,174,168,223,24,127,51,167,125,87,171\")),bytes32(stringToBytes32(\"140,222,4,29,48,194,199,82,20,145,159,53,44,132,3,89,102,61,65,101,233,44,194,169,170,92,168,93,154,81,102,248\")),bytes32(stringToBytes32(\"61,36,233,166,136,156,53,222,143,107,224,65,155,222,218,241,248,83,147,131,3,28,56,199,80,130,51,157,187,228,10,42\")),bytes32(stringToBytes32(\"180,231,158,190,223,81,223,131,242,29,151,8,100,72,41,84,91,108,131,71,128,0,38,161,33,128,28,205,35,118,133,134\")),bytes32(stringToBytes32(\"187,67,234,193,134,204,210,231,193,71,231,153,222,222,54,243,201,252,66,126,116,16,77,140,60,4,60,122,254,118,235,193\")),bytes32(stringToBytes32(\"151,99,115,118,29,42,120,77,44,60,49,4,110,235,14,86,142,77,145,204,205,63,3,249,45,233,30,207,12,36,86,50\")),bytes32(stringToBytes32(\"131,231,249,76,149,127,173,46,158,147,145,61,106,86,74,41,249,78,138,57,154,181,230,172,22,211,76,201,198,66,252,86\")),bytes32(stringToBytes32(\"195,134,155,241,221,231,147,254,178,64,51,204,20,199,229,218,222,173,39,56,181,52,41,47,102,237,208,98,227,45,105,173\"))]"
              },
              {
                "js": "[[30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125],[182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48],[184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249],[98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15],[33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176],[109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107],[6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184],[115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47],[248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162]]",
                "sol": "[bytes32(stringToBytes32(\"30,8,230,240,56,87,219,230,216,31,82,244,31,214,101,171,21,148,218,254,242,38,213,4,94,223,58,29,13,176,201,125\")),bytes32(stringToBytes32(\"182,45,227,23,251,174,254,244,154,162,71,7,213,127,212,179,172,168,174,207,208,252,17,35,123,204,80,100,178,181,129,48\")),bytes32(stringToBytes32(\"184,242,40,96,135,244,221,94,63,254,183,48,108,34,81,91,23,154,22,18,33,59,146,237,169,51,7,217,196,57,31,249\")),bytes32(stringToBytes32(\"98,234,226,30,179,100,145,198,112,171,158,42,123,98,171,90,158,96,10,31,162,19,146,233,77,117,0,60,60,136,247,15\")),bytes32(stringToBytes32(\"33,66,29,18,106,39,1,247,116,63,53,60,125,170,210,54,15,170,240,42,202,182,224,136,238,21,102,173,168,193,35,176\")),bytes32(stringToBytes32(\"109,193,222,219,37,150,181,218,162,204,124,16,10,47,106,147,85,211,143,19,173,44,255,204,63,215,85,217,245,77,217,107\")),bytes32(stringToBytes32(\"6,131,235,1,213,5,66,38,169,92,29,121,73,33,156,106,162,153,243,7,126,63,100,4,223,184,83,1,149,124,148,184\")),bytes32(stringToBytes32(\"115,142,163,245,163,208,10,173,240,54,75,37,214,8,181,5,195,31,155,198,136,170,223,11,61,91,204,158,96,248,55,47\")),bytes32(stringToBytes32(\"248,138,37,251,196,75,50,221,202,230,119,113,81,16,116,168,254,55,2,28,220,98,231,110,157,135,89,149,240,11,85,162\"))]"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.556ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[60,143,31,60,90,55,22,166,233,237,187,38,242,115,224,255,81,48,242,251,101,22,140,229,44,20,99,84,217,111,211,96]",
              "sol": "stringToBytes32(\"60,143,31,60,90,55,22,166,233,237,187,38,242,115,224,255,81,48,242,251,101,22,140,229,44,20,99,84,217,111,211,96\")"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[177,210,4,158,129,240,91,237,146,109,95,186,55,218,114,38,243,30,191,173,226,191,51,173,196,223,254,241,156,162,16,200]",
              "sol": "stringToBytes32(\"177,210,4,158,129,240,91,237,146,109,95,186,55,218,114,38,243,30,191,173,226,191,51,173,196,223,254,241,156,162,16,200\")"
            },
            {
              "js": "[72,155,67,58,232,52,193,78,59,88,99,110,101,91,141,74,224,173,78,123,178,250,211,255,142,5,55,116,191,102,59,42]",
              "sol": "stringToBytes32(\"72,155,67,58,232,52,193,78,59,88,99,110,101,91,141,74,224,173,78,123,178,250,211,255,142,5,55,116,191,102,59,42\")"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[60,143,31,60,90,55,22,166,233,237,187,38,242,115,224,255,81,48,242,251,101,22,140,229,44,20,99,84,217,111,211,96]",
                "sol": "stringToBytes32(\"60,143,31,60,90,55,22,166,233,237,187,38,242,115,224,255,81,48,242,251,101,22,140,229,44,20,99,84,217,111,211,96\")"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[177,210,4,158,129,240,91,237,146,109,95,186,55,218,114,38,243,30,191,173,226,191,51,173,196,223,254,241,156,162,16,200]",
                "sol": "stringToBytes32(\"177,210,4,158,129,240,91,237,146,109,95,186,55,218,114,38,243,30,191,173,226,191,51,173,196,223,254,241,156,162,16,200\")"
              },
              {
                "js": "[72,155,67,58,232,52,193,78,59,88,99,110,101,91,141,74,224,173,78,123,178,250,211,255,142,5,55,116,191,102,59,42]",
                "sol": "stringToBytes32(\"72,155,67,58,232,52,193,78,59,88,99,110,101,91,141,74,224,173,78,123,178,250,211,255,142,5,55,116,191,102,59,42\")"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[60,143,31,60,90,55,22,166,233,237,187,38,242,115,224,255,81,48,242,251,101,22,140,229,44,20,99,84,217,111,211,96]",
                "sol": "stringToBytes32(\"60,143,31,60,90,55,22,166,233,237,187,38,242,115,224,255,81,48,242,251,101,22,140,229,44,20,99,84,217,111,211,96\")"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[177,210,4,158,129,240,91,237,146,109,95,186,55,218,114,38,243,30,191,173,226,191,51,173,196,223,254,241,156,162,16,200]",
                "sol": "stringToBytes32(\"177,210,4,158,129,240,91,237,146,109,95,186,55,218,114,38,243,30,191,173,226,191,51,173,196,223,254,241,156,162,16,200\")"
              },
              {
                "js": "[72,155,67,58,232,52,193,78,59,88,99,110,101,91,141,74,224,173,78,123,178,250,211,255,142,5,55,116,191,102,59,42]",
                "sol": "stringToBytes32(\"72,155,67,58,232,52,193,78,59,88,99,110,101,91,141,74,224,173,78,123,178,250,211,255,142,5,55,116,191,102,59,42\")"
              },
              {
                "js": 4,
                "sol": 4
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.558ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.559ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "[179,85,20,245,232,32,150,119,58,143,80,70,115,201,29,137,49,133,169,107,57,141,158,227,140,116,10,62,29,228,18,38]",
              "sol": "stringToBytes32(\"179,85,20,245,232,32,150,119,58,143,80,70,115,201,29,137,49,133,169,107,57,141,158,227,140,116,10,62,29,228,18,38\")"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "[2,19,101,51,87,251,153,25,242,187,203,127,22,254,37,218,122,157,88,137,71,252,130,16,156,97,115,129,194,116,195,89]",
              "sol": "stringToBytes32(\"2,19,101,51,87,251,153,25,242,187,203,127,22,254,37,218,122,157,88,137,71,252,130,16,156,97,115,129,194,116,195,89\")"
            },
            {
              "js": "[5,181,56,93,78,61,215,44,172,153,214,189,223,171,9,122,166,26,134,225,166,97,101,226,115,253,218,201,81,54,183,69]",
              "sol": "stringToBytes32(\"5,181,56,93,78,61,215,44,172,153,214,189,223,171,9,122,166,26,134,225,166,97,101,226,115,253,218,201,81,54,183,69\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.559ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.559ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:29:01.560ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:29:01.560ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}