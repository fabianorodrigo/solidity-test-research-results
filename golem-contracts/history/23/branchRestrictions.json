,{
  "2020-11-12T21:12:20.278ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:12:26.653ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+428",
              "sol": "block.number+428"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+428+665",
              "sol": "block.number+428+665"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+428",
                "sol": "block.number+428"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+428+665",
                "sol": "block.number+428+665"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+428",
                "sol": "block.number+428"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+428+665",
                "sol": "block.number+428+665"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+428+665",
                "sol": "block.number+428+665"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+428",
                "sol": "block.number+428"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+428",
                "sol": "block.number+428"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:12:33.141ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:12:39.514ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:12:46.111ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:12:46.111ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:12:59.215ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractBasicToken.address",
              "sol": "contractBasicToken"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:05.817ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.727ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.729ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.730ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": 21,
                "sol": 21
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.730ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.731ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.732ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.732ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.733ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.734ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.734ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.735ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.736ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.737ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.738ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "senderBalance < _value"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance<_value",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.739ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.739ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.739ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.741ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.742ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.743ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:256}",
              "sol": "{\"from\":\"0x0\",\"value\":\"256\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:256}",
                "sol": "{\"from\":\"0x0\",\"value\":\"256\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.749ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.750ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.755ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.755ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.756ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.756ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.756ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "[33,76,161,243,208,125,93,235,72,213,11,113,41,255,223,180,113,220,92,215,73,161,136,227,13,46,43,4,130,140,235,193]",
              "sol": "stringToBytes32(\"33,76,161,243,208,125,93,235,72,213,11,113,41,255,223,180,113,220,92,215,73,161,136,227,13,46,43,4,130,140,235,193\")"
            },
            {
              "js": "[169,49,207,103,175,227,59,27,202,241,225,75,236,33,79,224,126,223,155,156,155,119,69,40,187,198,83,253,61,98,233,78]",
              "sol": "stringToBytes32(\"169,49,207,103,175,227,59,27,202,241,225,75,236,33,79,224,126,223,155,156,155,119,69,40,187,198,83,253,61,98,233,78\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.756ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "[198,160,109,248,233,204,255,150,100,105,231,64,215,228,234,138,59,91,45,85]",
              "sol": "abi.encode(\"198,160,109,248,233,204,255,150,100,105,231,64,215,228,234,138,59,91,45,85\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "[169,143,14,65,162,193,132,42,157,178,46,5,52,162,30,244,21,179,90,166,122]",
                "sol": "bytes21(\"169,143,14,65,162,193,132,42,157,178,46,5,52,162,30,244,21,179,90,166,122\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.757ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "[244,213,226,19,200,72,24,248,25,23,82,122,221,51,55,171,34,193,185,106,206,31,185,141,78,125,114,120,233,41,176,254]",
              "sol": "stringToBytes32(\"244,213,226,19,200,72,24,248,25,23,82,122,221,51,55,171,34,193,185,106,206,31,185,141,78,125,114,120,233,41,176,254\")"
            },
            {
              "js": "[99,179,112,242,63,176,213,41,68,244,70,250,213,194,8,193,145,110,206,131,171,183,58,38,22,136,221,53,212,216,61,42]",
              "sol": "stringToBytes32(\"99,179,112,242,63,176,213,41,68,244,70,250,213,194,8,193,145,110,206,131,171,183,58,38,22,136,221,53,212,216,61,42\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.758ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.758ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.759ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.759ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.760ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.761ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.761ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.762ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.763ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.764ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[197,86,174,194,16,79,63,110,188,183,245,177,132,64,226,231,185,154,142,169,189,164,171,15,155,105,89,134,210,200,151,122],[169,69,176,211,22,141,5,226,75,222,236,144,145,51,92,251,177,194,25,83,30,93,56,192,213,220,184,152,222,37,43,97],[137,9,169,178,78,170,186,63,103,74,29,120,94,7,138,195,248,149,37,195,122,56,190,105,105,135,126,134,174,234,236,66]]",
              "sol": "[bytes32(stringToBytes32(\"197,86,174,194,16,79,63,110,188,183,245,177,132,64,226,231,185,154,142,169,189,164,171,15,155,105,89,134,210,200,151,122\")),bytes32(stringToBytes32(\"169,69,176,211,22,141,5,226,75,222,236,144,145,51,92,251,177,194,25,83,30,93,56,192,213,220,184,152,222,37,43,97\")),bytes32(stringToBytes32(\"137,9,169,178,78,170,186,63,103,74,29,120,94,7,138,195,248,149,37,195,122,56,190,105,105,135,126,134,174,234,236,66\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-46",
              "sol": "block.timestamp-46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[197,86,174,194,16,79,63,110,188,183,245,177,132,64,226,231,185,154,142,169,189,164,171,15,155,105,89,134,210,200,151,122],[169,69,176,211,22,141,5,226,75,222,236,144,145,51,92,251,177,194,25,83,30,93,56,192,213,220,184,152,222,37,43,97],[137,9,169,178,78,170,186,63,103,74,29,120,94,7,138,195,248,149,37,195,122,56,190,105,105,135,126,134,174,234,236,66]]",
                "sol": "[bytes32(stringToBytes32(\"197,86,174,194,16,79,63,110,188,183,245,177,132,64,226,231,185,154,142,169,189,164,171,15,155,105,89,134,210,200,151,122\")),bytes32(stringToBytes32(\"169,69,176,211,22,141,5,226,75,222,236,144,145,51,92,251,177,194,25,83,30,93,56,192,213,220,184,152,222,37,43,97\")),bytes32(stringToBytes32(\"137,9,169,178,78,170,186,63,103,74,29,120,94,7,138,195,248,149,37,195,122,56,190,105,105,135,126,134,174,234,236,66\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.765ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "[129,219,189,200,139,60,41,10,250,155,128,107,169,147,189,210,53,147,40,18,18,108,39,196,89,169,38,248,93,208,211,10]",
              "sol": "abi.encode(\"129,219,189,200,139,60,41,10,250,155,128,107,169,147,189,210,53,147,40,18,18,108,39,196,89,169,38,248,93,208,211,10\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "[129,219,189,200,139,60,41,10,250,155,128,107,169,147,189,210,53,147,40,18,18,108,39,196,89,169,38,248,93,208,211,10]",
                "sol": "abi.encode(\"129,219,189,200,139,60,41,10,250,155,128,107,169,147,189,210,53,147,40,18,18,108,39,196,89,169,38,248,93,208,211,10\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.766ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.767ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.767ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.767ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.768ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.768ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.768ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.770ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.770ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.771ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.771ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.772ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.772ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.772ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "[216,196,240,106,32,21,213,232,230,129,177,216,252,33,213,238,175,69,232,232,170,136,91,209,67,194,109,163,223,30,43,109]",
              "sol": "abi.encode(\"216,196,240,106,32,21,213,232,230,129,177,216,252,33,213,238,175,69,232,232,170,136,91,209,67,194,109,163,223,30,43,109\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.773ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.774ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.775ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "[122,60,100,199,117,64,104,202,206,252,205,170,246,130,102,118,71,224,136,241,218,173,72,39,10,240,145,21,105,57,238,114]",
              "sol": "stringToBytes32(\"122,60,100,199,117,64,104,202,206,252,205,170,246,130,102,118,71,224,136,241,218,173,72,39,10,240,145,21,105,57,238,114\")"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "[26,6,237,186,197,100,180,124,117,77,212,17,223,70,250,34,179,60,135,155,22,73,136,209,177,2,190,170,196,72,245,226]",
              "sol": "stringToBytes32(\"26,6,237,186,197,100,180,124,117,77,212,17,223,70,250,34,179,60,135,155,22,73,136,209,177,2,190,170,196,72,245,226\")"
            },
            {
              "js": "[177,53,143,205,227,161,162,124,98,155,16,219,241,95,1,10,221,155,13,78,148,193,235,228,29,101,36,32,29,163,210,83]",
              "sol": "stringToBytes32(\"177,53,143,205,227,161,162,124,98,155,16,219,241,95,1,10,221,155,13,78,148,193,235,228,29,101,36,32,29,163,210,83\")"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "[122,60,100,199,117,64,104,202,206,252,205,170,246,130,102,118,71,224,136,241,218,173,72,39,10,240,145,21,105,57,238,114]",
                "sol": "stringToBytes32(\"122,60,100,199,117,64,104,202,206,252,205,170,246,130,102,118,71,224,136,241,218,173,72,39,10,240,145,21,105,57,238,114\")"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "[26,6,237,186,197,100,180,124,117,77,212,17,223,70,250,34,179,60,135,155,22,73,136,209,177,2,190,170,196,72,245,226]",
                "sol": "stringToBytes32(\"26,6,237,186,197,100,180,124,117,77,212,17,223,70,250,34,179,60,135,155,22,73,136,209,177,2,190,170,196,72,245,226\")"
              },
              {
                "js": "[177,53,143,205,227,161,162,124,98,155,16,219,241,95,1,10,221,155,13,78,148,193,235,228,29,101,36,32,29,163,210,83]",
                "sol": "stringToBytes32(\"177,53,143,205,227,161,162,124,98,155,16,219,241,95,1,10,221,155,13,78,148,193,235,228,29,101,36,32,29,163,210,83\")"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "[122,60,100,199,117,64,104,202,206,252,205,170,246,130,102,118,71,224,136,241,218,173,72,39,10,240,145,21,105,57,238,114]",
                "sol": "stringToBytes32(\"122,60,100,199,117,64,104,202,206,252,205,170,246,130,102,118,71,224,136,241,218,173,72,39,10,240,145,21,105,57,238,114\")"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "[26,6,237,186,197,100,180,124,117,77,212,17,223,70,250,34,179,60,135,155,22,73,136,209,177,2,190,170,196,72,245,226]",
                "sol": "stringToBytes32(\"26,6,237,186,197,100,180,124,117,77,212,17,223,70,250,34,179,60,135,155,22,73,136,209,177,2,190,170,196,72,245,226\")"
              },
              {
                "js": "[177,53,143,205,227,161,162,124,98,155,16,219,241,95,1,10,221,155,13,78,148,193,235,228,29,101,36,32,29,163,210,83]",
                "sol": "stringToBytes32(\"177,53,143,205,227,161,162,124,98,155,16,219,241,95,1,10,221,155,13,78,148,193,235,228,29,101,36,32,29,163,210,83\")"
              },
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.777ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[21,4,1000,83,82,1001]",
              "sol": "[uint256(21),uint256(4),uint256(1000),uint256(83),uint256(82),uint256(1001)]"
            },
            {
              "js": "[[23,244,117,98,126,222,8,139,70,44,183,169,187,80,24,101,138,223,208,29,96,63,199,139,93,64,16,212,0,166,72,56],[230,103,148,88,58,83,237,192,170,70,119,191,247,221,41,102,251,228,26,229,119,46,101,205,56,103,181,65,44,161,152,141],[153,22,183,227,70,125,223,59,15,80,72,61,188,131,61,189,138,36,228,27,250,123,45,33,177,52,80,66,49,156,172,67],[4,212,123,216,53,113,248,103,175,60,194,28,44,247,43,31,250,63,91,45,187,55,0,249,171,73,72,230,201,232,215,112],[178,233,254,134,157,188,89,214,199,253,78,178,17,28,85,28,154,21,154,66,239,114,23,147,82,0,82,19,191,186,43,65],[111,255,84,241,212,129,133,44,67,18,49,164,71,65,244,62,94,101,105,49,191,94,45,62,235,131,99,218,77,169,110,130]]",
              "sol": "[bytes32(stringToBytes32(\"23,244,117,98,126,222,8,139,70,44,183,169,187,80,24,101,138,223,208,29,96,63,199,139,93,64,16,212,0,166,72,56\")),bytes32(stringToBytes32(\"230,103,148,88,58,83,237,192,170,70,119,191,247,221,41,102,251,228,26,229,119,46,101,205,56,103,181,65,44,161,152,141\")),bytes32(stringToBytes32(\"153,22,183,227,70,125,223,59,15,80,72,61,188,131,61,189,138,36,228,27,250,123,45,33,177,52,80,66,49,156,172,67\")),bytes32(stringToBytes32(\"4,212,123,216,53,113,248,103,175,60,194,28,44,247,43,31,250,63,91,45,187,55,0,249,171,73,72,230,201,232,215,112\")),bytes32(stringToBytes32(\"178,233,254,134,157,188,89,214,199,253,78,178,17,28,85,28,154,21,154,66,239,114,23,147,82,0,82,19,191,186,43,65\")),bytes32(stringToBytes32(\"111,255,84,241,212,129,133,44,67,18,49,164,71,65,244,62,94,101,105,49,191,94,45,62,235,131,99,218,77,169,110,130\"))]"
            },
            {
              "js": "[11,81,101,160,21,5]",
              "sol": "[uint8(11),uint8(81),uint8(101),uint8(160),uint8(21),uint8(5)]"
            },
            {
              "js": "[[8,19,240,67,249,30,98,78,164,88,191,78,104,37,66,236,29,249,238,133,215,175,78,166,110,137,177,57,248,235,1,124],[206,243,214,238,254,7,62,89,203,235,199,65,238,102,135,224,180,105,229,119,56,15,139,85,23,15,149,176,75,239,220,123],[197,69,189,252,18,136,67,142,70,131,234,19,103,61,123,1,226,68,107,254,37,240,95,108,100,244,206,13,116,172,25,104],[2,108,27,173,81,184,13,170,84,211,106,149,191,217,207,71,106,18,68,5,76,228,157,51,220,167,142,160,142,222,194,170],[198,133,118,220,66,55,21,20,66,165,210,207,206,16,150,27,202,124,1,59,25,36,103,174,241,228,190,20,129,48,142,117],[188,225,127,205,132,52,170,57,188,238,118,178,8,30,74,53,60,254,12,238,33,157,17,69,132,125,46,215,218,131,157,47]]",
              "sol": "[bytes32(stringToBytes32(\"8,19,240,67,249,30,98,78,164,88,191,78,104,37,66,236,29,249,238,133,215,175,78,166,110,137,177,57,248,235,1,124\")),bytes32(stringToBytes32(\"206,243,214,238,254,7,62,89,203,235,199,65,238,102,135,224,180,105,229,119,56,15,139,85,23,15,149,176,75,239,220,123\")),bytes32(stringToBytes32(\"197,69,189,252,18,136,67,142,70,131,234,19,103,61,123,1,226,68,107,254,37,240,95,108,100,244,206,13,116,172,25,104\")),bytes32(stringToBytes32(\"2,108,27,173,81,184,13,170,84,211,106,149,191,217,207,71,106,18,68,5,76,228,157,51,220,167,142,160,142,222,194,170\")),bytes32(stringToBytes32(\"198,133,118,220,66,55,21,20,66,165,210,207,206,16,150,27,202,124,1,59,25,36,103,174,241,228,190,20,129,48,142,117\")),bytes32(stringToBytes32(\"188,225,127,205,132,52,170,57,188,238,118,178,8,30,74,53,60,254,12,238,33,157,17,69,132,125,46,215,218,131,157,47\"))]"
            },
            {
              "js": "[[191,208,211,141,225,210,21,14,246,191,214,16,230,219,113,213,189,3,126,165,190,186,228,172,49,113,250,210,127,73,130,189],[75,103,77,88,47,88,219,224,90,42,116,87,165,49,118,125,114,2,225,68,189,187,193,35,120,239,158,234,53,221,17,155],[52,32,230,174,105,78,255,115,141,87,15,46,56,221,225,92,43,71,23,252,217,112,93,40,109,125,211,50,141,162,142,17],[201,188,40,76,85,159,246,248,56,216,24,9,242,99,222,229,58,220,136,170,190,73,107,105,238,253,165,196,88,13,113,35],[90,94,25,230,4,120,44,198,246,232,85,228,218,249,116,237,131,40,175,9,85,42,58,78,127,52,68,122,215,27,58,128],[87,88,18,252,36,173,212,23,222,70,73,86,115,164,83,236,41,248,51,239,36,137,221,4,120,111,28,67,45,204,104,22]]",
              "sol": "[bytes32(stringToBytes32(\"191,208,211,141,225,210,21,14,246,191,214,16,230,219,113,213,189,3,126,165,190,186,228,172,49,113,250,210,127,73,130,189\")),bytes32(stringToBytes32(\"75,103,77,88,47,88,219,224,90,42,116,87,165,49,118,125,114,2,225,68,189,187,193,35,120,239,158,234,53,221,17,155\")),bytes32(stringToBytes32(\"52,32,230,174,105,78,255,115,141,87,15,46,56,221,225,92,43,71,23,252,217,112,93,40,109,125,211,50,141,162,142,17\")),bytes32(stringToBytes32(\"201,188,40,76,85,159,246,248,56,216,24,9,242,99,222,229,58,220,136,170,190,73,107,105,238,253,165,196,88,13,113,35\")),bytes32(stringToBytes32(\"90,94,25,230,4,120,44,198,246,232,85,228,218,249,116,237,131,40,175,9,85,42,58,78,127,52,68,122,215,27,58,128\")),bytes32(stringToBytes32(\"87,88,18,252,36,173,212,23,222,70,73,86,115,164,83,236,41,248,51,239,36,137,221,4,120,111,28,67,45,204,104,22\"))]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[21,4,1000,83,82,1001]",
                "sol": "[uint256(21),uint256(4),uint256(1000),uint256(83),uint256(82),uint256(1001)]"
              },
              {
                "js": "[[23,244,117,98,126,222,8,139,70,44,183,169,187,80,24,101,138,223,208,29,96,63,199,139,93,64,16,212,0,166,72,56],[230,103,148,88,58,83,237,192,170,70,119,191,247,221,41,102,251,228,26,229,119,46,101,205,56,103,181,65,44,161,152,141],[153,22,183,227,70,125,223,59,15,80,72,61,188,131,61,189,138,36,228,27,250,123,45,33,177,52,80,66,49,156,172,67],[4,212,123,216,53,113,248,103,175,60,194,28,44,247,43,31,250,63,91,45,187,55,0,249,171,73,72,230,201,232,215,112],[178,233,254,134,157,188,89,214,199,253,78,178,17,28,85,28,154,21,154,66,239,114,23,147,82,0,82,19,191,186,43,65],[111,255,84,241,212,129,133,44,67,18,49,164,71,65,244,62,94,101,105,49,191,94,45,62,235,131,99,218,77,169,110,130]]",
                "sol": "[bytes32(stringToBytes32(\"23,244,117,98,126,222,8,139,70,44,183,169,187,80,24,101,138,223,208,29,96,63,199,139,93,64,16,212,0,166,72,56\")),bytes32(stringToBytes32(\"230,103,148,88,58,83,237,192,170,70,119,191,247,221,41,102,251,228,26,229,119,46,101,205,56,103,181,65,44,161,152,141\")),bytes32(stringToBytes32(\"153,22,183,227,70,125,223,59,15,80,72,61,188,131,61,189,138,36,228,27,250,123,45,33,177,52,80,66,49,156,172,67\")),bytes32(stringToBytes32(\"4,212,123,216,53,113,248,103,175,60,194,28,44,247,43,31,250,63,91,45,187,55,0,249,171,73,72,230,201,232,215,112\")),bytes32(stringToBytes32(\"178,233,254,134,157,188,89,214,199,253,78,178,17,28,85,28,154,21,154,66,239,114,23,147,82,0,82,19,191,186,43,65\")),bytes32(stringToBytes32(\"111,255,84,241,212,129,133,44,67,18,49,164,71,65,244,62,94,101,105,49,191,94,45,62,235,131,99,218,77,169,110,130\"))]"
              },
              {
                "js": "[11,81,101,160,21,5]",
                "sol": "[uint8(11),uint8(81),uint8(101),uint8(160),uint8(21),uint8(5)]"
              },
              {
                "js": "[[8,19,240,67,249,30,98,78,164,88,191,78,104,37,66,236,29,249,238,133,215,175,78,166,110,137,177,57,248,235,1,124],[206,243,214,238,254,7,62,89,203,235,199,65,238,102,135,224,180,105,229,119,56,15,139,85,23,15,149,176,75,239,220,123],[197,69,189,252,18,136,67,142,70,131,234,19,103,61,123,1,226,68,107,254,37,240,95,108,100,244,206,13,116,172,25,104],[2,108,27,173,81,184,13,170,84,211,106,149,191,217,207,71,106,18,68,5,76,228,157,51,220,167,142,160,142,222,194,170],[198,133,118,220,66,55,21,20,66,165,210,207,206,16,150,27,202,124,1,59,25,36,103,174,241,228,190,20,129,48,142,117],[188,225,127,205,132,52,170,57,188,238,118,178,8,30,74,53,60,254,12,238,33,157,17,69,132,125,46,215,218,131,157,47]]",
                "sol": "[bytes32(stringToBytes32(\"8,19,240,67,249,30,98,78,164,88,191,78,104,37,66,236,29,249,238,133,215,175,78,166,110,137,177,57,248,235,1,124\")),bytes32(stringToBytes32(\"206,243,214,238,254,7,62,89,203,235,199,65,238,102,135,224,180,105,229,119,56,15,139,85,23,15,149,176,75,239,220,123\")),bytes32(stringToBytes32(\"197,69,189,252,18,136,67,142,70,131,234,19,103,61,123,1,226,68,107,254,37,240,95,108,100,244,206,13,116,172,25,104\")),bytes32(stringToBytes32(\"2,108,27,173,81,184,13,170,84,211,106,149,191,217,207,71,106,18,68,5,76,228,157,51,220,167,142,160,142,222,194,170\")),bytes32(stringToBytes32(\"198,133,118,220,66,55,21,20,66,165,210,207,206,16,150,27,202,124,1,59,25,36,103,174,241,228,190,20,129,48,142,117\")),bytes32(stringToBytes32(\"188,225,127,205,132,52,170,57,188,238,118,178,8,30,74,53,60,254,12,238,33,157,17,69,132,125,46,215,218,131,157,47\"))]"
              },
              {
                "js": "[[191,208,211,141,225,210,21,14,246,191,214,16,230,219,113,213,189,3,126,165,190,186,228,172,49,113,250,210,127,73,130,189],[75,103,77,88,47,88,219,224,90,42,116,87,165,49,118,125,114,2,225,68,189,187,193,35,120,239,158,234,53,221,17,155],[52,32,230,174,105,78,255,115,141,87,15,46,56,221,225,92,43,71,23,252,217,112,93,40,109,125,211,50,141,162,142,17],[201,188,40,76,85,159,246,248,56,216,24,9,242,99,222,229,58,220,136,170,190,73,107,105,238,253,165,196,88,13,113,35],[90,94,25,230,4,120,44,198,246,232,85,228,218,249,116,237,131,40,175,9,85,42,58,78,127,52,68,122,215,27,58,128],[87,88,18,252,36,173,212,23,222,70,73,86,115,164,83,236,41,248,51,239,36,137,221,4,120,111,28,67,45,204,104,22]]",
                "sol": "[bytes32(stringToBytes32(\"191,208,211,141,225,210,21,14,246,191,214,16,230,219,113,213,189,3,126,165,190,186,228,172,49,113,250,210,127,73,130,189\")),bytes32(stringToBytes32(\"75,103,77,88,47,88,219,224,90,42,116,87,165,49,118,125,114,2,225,68,189,187,193,35,120,239,158,234,53,221,17,155\")),bytes32(stringToBytes32(\"52,32,230,174,105,78,255,115,141,87,15,46,56,221,225,92,43,71,23,252,217,112,93,40,109,125,211,50,141,162,142,17\")),bytes32(stringToBytes32(\"201,188,40,76,85,159,246,248,56,216,24,9,242,99,222,229,58,220,136,170,190,73,107,105,238,253,165,196,88,13,113,35\")),bytes32(stringToBytes32(\"90,94,25,230,4,120,44,198,246,232,85,228,218,249,116,237,131,40,175,9,85,42,58,78,127,52,68,122,215,27,58,128\")),bytes32(stringToBytes32(\"87,88,18,252,36,173,212,23,222,70,73,86,115,164,83,236,41,248,51,239,36,137,221,4,120,111,28,67,45,204,104,22\"))]"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[2,10000,255,1000,255,255,100]",
                "sol": "[81,18,10,83,101,3,14]"
              },
              {
                "js": "[[23,244,117,98,126,222,8,139,70,44,183,169,187,80,24,101,138,223,208,29,96,63,199,139,93,64,16,212,0,166,72,56],[230,103,148,88,58,83,237,192,170,70,119,191,247,221,41,102,251,228,26,229,119,46,101,205,56,103,181,65,44,161,152,141],[153,22,183,227,70,125,223,59,15,80,72,61,188,131,61,189,138,36,228,27,250,123,45,33,177,52,80,66,49,156,172,67],[4,212,123,216,53,113,248,103,175,60,194,28,44,247,43,31,250,63,91,45,187,55,0,249,171,73,72,230,201,232,215,112],[178,233,254,134,157,188,89,214,199,253,78,178,17,28,85,28,154,21,154,66,239,114,23,147,82,0,82,19,191,186,43,65],[111,255,84,241,212,129,133,44,67,18,49,164,71,65,244,62,94,101,105,49,191,94,45,62,235,131,99,218,77,169,110,130]]",
                "sol": "[bytes32(stringToBytes32(\"23,244,117,98,126,222,8,139,70,44,183,169,187,80,24,101,138,223,208,29,96,63,199,139,93,64,16,212,0,166,72,56\")),bytes32(stringToBytes32(\"230,103,148,88,58,83,237,192,170,70,119,191,247,221,41,102,251,228,26,229,119,46,101,205,56,103,181,65,44,161,152,141\")),bytes32(stringToBytes32(\"153,22,183,227,70,125,223,59,15,80,72,61,188,131,61,189,138,36,228,27,250,123,45,33,177,52,80,66,49,156,172,67\")),bytes32(stringToBytes32(\"4,212,123,216,53,113,248,103,175,60,194,28,44,247,43,31,250,63,91,45,187,55,0,249,171,73,72,230,201,232,215,112\")),bytes32(stringToBytes32(\"178,233,254,134,157,188,89,214,199,253,78,178,17,28,85,28,154,21,154,66,239,114,23,147,82,0,82,19,191,186,43,65\")),bytes32(stringToBytes32(\"111,255,84,241,212,129,133,44,67,18,49,164,71,65,244,62,94,101,105,49,191,94,45,62,235,131,99,218,77,169,110,130\"))]"
              },
              {
                "js": "[11,81,101,160,21,5]",
                "sol": "[uint8(11),uint8(81),uint8(101),uint8(160),uint8(21),uint8(5)]"
              },
              {
                "js": "[[8,19,240,67,249,30,98,78,164,88,191,78,104,37,66,236,29,249,238,133,215,175,78,166,110,137,177,57,248,235,1,124],[206,243,214,238,254,7,62,89,203,235,199,65,238,102,135,224,180,105,229,119,56,15,139,85,23,15,149,176,75,239,220,123],[197,69,189,252,18,136,67,142,70,131,234,19,103,61,123,1,226,68,107,254,37,240,95,108,100,244,206,13,116,172,25,104],[2,108,27,173,81,184,13,170,84,211,106,149,191,217,207,71,106,18,68,5,76,228,157,51,220,167,142,160,142,222,194,170],[198,133,118,220,66,55,21,20,66,165,210,207,206,16,150,27,202,124,1,59,25,36,103,174,241,228,190,20,129,48,142,117],[188,225,127,205,132,52,170,57,188,238,118,178,8,30,74,53,60,254,12,238,33,157,17,69,132,125,46,215,218,131,157,47]]",
                "sol": "[bytes32(stringToBytes32(\"8,19,240,67,249,30,98,78,164,88,191,78,104,37,66,236,29,249,238,133,215,175,78,166,110,137,177,57,248,235,1,124\")),bytes32(stringToBytes32(\"206,243,214,238,254,7,62,89,203,235,199,65,238,102,135,224,180,105,229,119,56,15,139,85,23,15,149,176,75,239,220,123\")),bytes32(stringToBytes32(\"197,69,189,252,18,136,67,142,70,131,234,19,103,61,123,1,226,68,107,254,37,240,95,108,100,244,206,13,116,172,25,104\")),bytes32(stringToBytes32(\"2,108,27,173,81,184,13,170,84,211,106,149,191,217,207,71,106,18,68,5,76,228,157,51,220,167,142,160,142,222,194,170\")),bytes32(stringToBytes32(\"198,133,118,220,66,55,21,20,66,165,210,207,206,16,150,27,202,124,1,59,25,36,103,174,241,228,190,20,129,48,142,117\")),bytes32(stringToBytes32(\"188,225,127,205,132,52,170,57,188,238,118,178,8,30,74,53,60,254,12,238,33,157,17,69,132,125,46,215,218,131,157,47\"))]"
              },
              {
                "js": "[[191,208,211,141,225,210,21,14,246,191,214,16,230,219,113,213,189,3,126,165,190,186,228,172,49,113,250,210,127,73,130,189],[75,103,77,88,47,88,219,224,90,42,116,87,165,49,118,125,114,2,225,68,189,187,193,35,120,239,158,234,53,221,17,155],[52,32,230,174,105,78,255,115,141,87,15,46,56,221,225,92,43,71,23,252,217,112,93,40,109,125,211,50,141,162,142,17],[201,188,40,76,85,159,246,248,56,216,24,9,242,99,222,229,58,220,136,170,190,73,107,105,238,253,165,196,88,13,113,35],[90,94,25,230,4,120,44,198,246,232,85,228,218,249,116,237,131,40,175,9,85,42,58,78,127,52,68,122,215,27,58,128],[87,88,18,252,36,173,212,23,222,70,73,86,115,164,83,236,41,248,51,239,36,137,221,4,120,111,28,67,45,204,104,22]]",
                "sol": "[bytes32(stringToBytes32(\"191,208,211,141,225,210,21,14,246,191,214,16,230,219,113,213,189,3,126,165,190,186,228,172,49,113,250,210,127,73,130,189\")),bytes32(stringToBytes32(\"75,103,77,88,47,88,219,224,90,42,116,87,165,49,118,125,114,2,225,68,189,187,193,35,120,239,158,234,53,221,17,155\")),bytes32(stringToBytes32(\"52,32,230,174,105,78,255,115,141,87,15,46,56,221,225,92,43,71,23,252,217,112,93,40,109,125,211,50,141,162,142,17\")),bytes32(stringToBytes32(\"201,188,40,76,85,159,246,248,56,216,24,9,242,99,222,229,58,220,136,170,190,73,107,105,238,253,165,196,88,13,113,35\")),bytes32(stringToBytes32(\"90,94,25,230,4,120,44,198,246,232,85,228,218,249,116,237,131,40,175,9,85,42,58,78,127,52,68,122,215,27,58,128\")),bytes32(stringToBytes32(\"87,88,18,252,36,173,212,23,222,70,73,86,115,164,83,236,41,248,51,239,36,137,221,4,120,111,28,67,45,204,104,22\"))]"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[9999,21,18,14,1001,100,10000]",
                "sol": "[10,82,19,999,159,83,100]"
              },
              {
                "js": "[[23,244,117,98,126,222,8,139,70,44,183,169,187,80,24,101,138,223,208,29,96,63,199,139,93,64,16,212,0,166,72,56],[230,103,148,88,58,83,237,192,170,70,119,191,247,221,41,102,251,228,26,229,119,46,101,205,56,103,181,65,44,161,152,141],[153,22,183,227,70,125,223,59,15,80,72,61,188,131,61,189,138,36,228,27,250,123,45,33,177,52,80,66,49,156,172,67],[4,212,123,216,53,113,248,103,175,60,194,28,44,247,43,31,250,63,91,45,187,55,0,249,171,73,72,230,201,232,215,112],[178,233,254,134,157,188,89,214,199,253,78,178,17,28,85,28,154,21,154,66,239,114,23,147,82,0,82,19,191,186,43,65],[111,255,84,241,212,129,133,44,67,18,49,164,71,65,244,62,94,101,105,49,191,94,45,62,235,131,99,218,77,169,110,130]]",
                "sol": "[bytes32(stringToBytes32(\"23,244,117,98,126,222,8,139,70,44,183,169,187,80,24,101,138,223,208,29,96,63,199,139,93,64,16,212,0,166,72,56\")),bytes32(stringToBytes32(\"230,103,148,88,58,83,237,192,170,70,119,191,247,221,41,102,251,228,26,229,119,46,101,205,56,103,181,65,44,161,152,141\")),bytes32(stringToBytes32(\"153,22,183,227,70,125,223,59,15,80,72,61,188,131,61,189,138,36,228,27,250,123,45,33,177,52,80,66,49,156,172,67\")),bytes32(stringToBytes32(\"4,212,123,216,53,113,248,103,175,60,194,28,44,247,43,31,250,63,91,45,187,55,0,249,171,73,72,230,201,232,215,112\")),bytes32(stringToBytes32(\"178,233,254,134,157,188,89,214,199,253,78,178,17,28,85,28,154,21,154,66,239,114,23,147,82,0,82,19,191,186,43,65\")),bytes32(stringToBytes32(\"111,255,84,241,212,129,133,44,67,18,49,164,71,65,244,62,94,101,105,49,191,94,45,62,235,131,99,218,77,169,110,130\"))]"
              },
              {
                "js": "[11,81,101,160,21,5]",
                "sol": "[uint8(11),uint8(81),uint8(101),uint8(160),uint8(21),uint8(5)]"
              },
              {
                "js": "[[8,19,240,67,249,30,98,78,164,88,191,78,104,37,66,236,29,249,238,133,215,175,78,166,110,137,177,57,248,235,1,124],[206,243,214,238,254,7,62,89,203,235,199,65,238,102,135,224,180,105,229,119,56,15,139,85,23,15,149,176,75,239,220,123],[197,69,189,252,18,136,67,142,70,131,234,19,103,61,123,1,226,68,107,254,37,240,95,108,100,244,206,13,116,172,25,104],[2,108,27,173,81,184,13,170,84,211,106,149,191,217,207,71,106,18,68,5,76,228,157,51,220,167,142,160,142,222,194,170],[198,133,118,220,66,55,21,20,66,165,210,207,206,16,150,27,202,124,1,59,25,36,103,174,241,228,190,20,129,48,142,117],[188,225,127,205,132,52,170,57,188,238,118,178,8,30,74,53,60,254,12,238,33,157,17,69,132,125,46,215,218,131,157,47]]",
                "sol": "[bytes32(stringToBytes32(\"8,19,240,67,249,30,98,78,164,88,191,78,104,37,66,236,29,249,238,133,215,175,78,166,110,137,177,57,248,235,1,124\")),bytes32(stringToBytes32(\"206,243,214,238,254,7,62,89,203,235,199,65,238,102,135,224,180,105,229,119,56,15,139,85,23,15,149,176,75,239,220,123\")),bytes32(stringToBytes32(\"197,69,189,252,18,136,67,142,70,131,234,19,103,61,123,1,226,68,107,254,37,240,95,108,100,244,206,13,116,172,25,104\")),bytes32(stringToBytes32(\"2,108,27,173,81,184,13,170,84,211,106,149,191,217,207,71,106,18,68,5,76,228,157,51,220,167,142,160,142,222,194,170\")),bytes32(stringToBytes32(\"198,133,118,220,66,55,21,20,66,165,210,207,206,16,150,27,202,124,1,59,25,36,103,174,241,228,190,20,129,48,142,117\")),bytes32(stringToBytes32(\"188,225,127,205,132,52,170,57,188,238,118,178,8,30,74,53,60,254,12,238,33,157,17,69,132,125,46,215,218,131,157,47\"))]"
              },
              {
                "js": "[[191,208,211,141,225,210,21,14,246,191,214,16,230,219,113,213,189,3,126,165,190,186,228,172,49,113,250,210,127,73,130,189],[75,103,77,88,47,88,219,224,90,42,116,87,165,49,118,125,114,2,225,68,189,187,193,35,120,239,158,234,53,221,17,155],[52,32,230,174,105,78,255,115,141,87,15,46,56,221,225,92,43,71,23,252,217,112,93,40,109,125,211,50,141,162,142,17],[201,188,40,76,85,159,246,248,56,216,24,9,242,99,222,229,58,220,136,170,190,73,107,105,238,253,165,196,88,13,113,35],[90,94,25,230,4,120,44,198,246,232,85,228,218,249,116,237,131,40,175,9,85,42,58,78,127,52,68,122,215,27,58,128],[87,88,18,252,36,173,212,23,222,70,73,86,115,164,83,236,41,248,51,239,36,137,221,4,120,111,28,67,45,204,104,22]]",
                "sol": "[bytes32(stringToBytes32(\"191,208,211,141,225,210,21,14,246,191,214,16,230,219,113,213,189,3,126,165,190,186,228,172,49,113,250,210,127,73,130,189\")),bytes32(stringToBytes32(\"75,103,77,88,47,88,219,224,90,42,116,87,165,49,118,125,114,2,225,68,189,187,193,35,120,239,158,234,53,221,17,155\")),bytes32(stringToBytes32(\"52,32,230,174,105,78,255,115,141,87,15,46,56,221,225,92,43,71,23,252,217,112,93,40,109,125,211,50,141,162,142,17\")),bytes32(stringToBytes32(\"201,188,40,76,85,159,246,248,56,216,24,9,242,99,222,229,58,220,136,170,190,73,107,105,238,253,165,196,88,13,113,35\")),bytes32(stringToBytes32(\"90,94,25,230,4,120,44,198,246,232,85,228,218,249,116,237,131,40,175,9,85,42,58,78,127,52,68,122,215,27,58,128\")),bytes32(stringToBytes32(\"87,88,18,252,36,173,212,23,222,70,73,86,115,164,83,236,41,248,51,239,36,137,221,4,120,111,28,67,45,204,104,22\"))]"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[256,999,1336,1000,10000,999,19]",
                "sol": "[2,10000,1338,2,9999,1337,257]"
              },
              {
                "js": "[[23,244,117,98,126,222,8,139,70,44,183,169,187,80,24,101,138,223,208,29,96,63,199,139,93,64,16,212,0,166,72,56],[230,103,148,88,58,83,237,192,170,70,119,191,247,221,41,102,251,228,26,229,119,46,101,205,56,103,181,65,44,161,152,141],[153,22,183,227,70,125,223,59,15,80,72,61,188,131,61,189,138,36,228,27,250,123,45,33,177,52,80,66,49,156,172,67],[4,212,123,216,53,113,248,103,175,60,194,28,44,247,43,31,250,63,91,45,187,55,0,249,171,73,72,230,201,232,215,112],[178,233,254,134,157,188,89,214,199,253,78,178,17,28,85,28,154,21,154,66,239,114,23,147,82,0,82,19,191,186,43,65],[111,255,84,241,212,129,133,44,67,18,49,164,71,65,244,62,94,101,105,49,191,94,45,62,235,131,99,218,77,169,110,130]]",
                "sol": "[bytes32(stringToBytes32(\"23,244,117,98,126,222,8,139,70,44,183,169,187,80,24,101,138,223,208,29,96,63,199,139,93,64,16,212,0,166,72,56\")),bytes32(stringToBytes32(\"230,103,148,88,58,83,237,192,170,70,119,191,247,221,41,102,251,228,26,229,119,46,101,205,56,103,181,65,44,161,152,141\")),bytes32(stringToBytes32(\"153,22,183,227,70,125,223,59,15,80,72,61,188,131,61,189,138,36,228,27,250,123,45,33,177,52,80,66,49,156,172,67\")),bytes32(stringToBytes32(\"4,212,123,216,53,113,248,103,175,60,194,28,44,247,43,31,250,63,91,45,187,55,0,249,171,73,72,230,201,232,215,112\")),bytes32(stringToBytes32(\"178,233,254,134,157,188,89,214,199,253,78,178,17,28,85,28,154,21,154,66,239,114,23,147,82,0,82,19,191,186,43,65\")),bytes32(stringToBytes32(\"111,255,84,241,212,129,133,44,67,18,49,164,71,65,244,62,94,101,105,49,191,94,45,62,235,131,99,218,77,169,110,130\"))]"
              },
              {
                "js": "[11,81,101,160,21,5]",
                "sol": "[uint8(11),uint8(81),uint8(101),uint8(160),uint8(21),uint8(5)]"
              },
              {
                "js": "[[8,19,240,67,249,30,98,78,164,88,191,78,104,37,66,236,29,249,238,133,215,175,78,166,110,137,177,57,248,235,1,124],[206,243,214,238,254,7,62,89,203,235,199,65,238,102,135,224,180,105,229,119,56,15,139,85,23,15,149,176,75,239,220,123],[197,69,189,252,18,136,67,142,70,131,234,19,103,61,123,1,226,68,107,254,37,240,95,108,100,244,206,13,116,172,25,104],[2,108,27,173,81,184,13,170,84,211,106,149,191,217,207,71,106,18,68,5,76,228,157,51,220,167,142,160,142,222,194,170],[198,133,118,220,66,55,21,20,66,165,210,207,206,16,150,27,202,124,1,59,25,36,103,174,241,228,190,20,129,48,142,117],[188,225,127,205,132,52,170,57,188,238,118,178,8,30,74,53,60,254,12,238,33,157,17,69,132,125,46,215,218,131,157,47]]",
                "sol": "[bytes32(stringToBytes32(\"8,19,240,67,249,30,98,78,164,88,191,78,104,37,66,236,29,249,238,133,215,175,78,166,110,137,177,57,248,235,1,124\")),bytes32(stringToBytes32(\"206,243,214,238,254,7,62,89,203,235,199,65,238,102,135,224,180,105,229,119,56,15,139,85,23,15,149,176,75,239,220,123\")),bytes32(stringToBytes32(\"197,69,189,252,18,136,67,142,70,131,234,19,103,61,123,1,226,68,107,254,37,240,95,108,100,244,206,13,116,172,25,104\")),bytes32(stringToBytes32(\"2,108,27,173,81,184,13,170,84,211,106,149,191,217,207,71,106,18,68,5,76,228,157,51,220,167,142,160,142,222,194,170\")),bytes32(stringToBytes32(\"198,133,118,220,66,55,21,20,66,165,210,207,206,16,150,27,202,124,1,59,25,36,103,174,241,228,190,20,129,48,142,117\")),bytes32(stringToBytes32(\"188,225,127,205,132,52,170,57,188,238,118,178,8,30,74,53,60,254,12,238,33,157,17,69,132,125,46,215,218,131,157,47\"))]"
              },
              {
                "js": "[[191,208,211,141,225,210,21,14,246,191,214,16,230,219,113,213,189,3,126,165,190,186,228,172,49,113,250,210,127,73,130,189],[75,103,77,88,47,88,219,224,90,42,116,87,165,49,118,125,114,2,225,68,189,187,193,35,120,239,158,234,53,221,17,155],[52,32,230,174,105,78,255,115,141,87,15,46,56,221,225,92,43,71,23,252,217,112,93,40,109,125,211,50,141,162,142,17],[201,188,40,76,85,159,246,248,56,216,24,9,242,99,222,229,58,220,136,170,190,73,107,105,238,253,165,196,88,13,113,35],[90,94,25,230,4,120,44,198,246,232,85,228,218,249,116,237,131,40,175,9,85,42,58,78,127,52,68,122,215,27,58,128],[87,88,18,252,36,173,212,23,222,70,73,86,115,164,83,236,41,248,51,239,36,137,221,4,120,111,28,67,45,204,104,22]]",
                "sol": "[bytes32(stringToBytes32(\"191,208,211,141,225,210,21,14,246,191,214,16,230,219,113,213,189,3,126,165,190,186,228,172,49,113,250,210,127,73,130,189\")),bytes32(stringToBytes32(\"75,103,77,88,47,88,219,224,90,42,116,87,165,49,118,125,114,2,225,68,189,187,193,35,120,239,158,234,53,221,17,155\")),bytes32(stringToBytes32(\"52,32,230,174,105,78,255,115,141,87,15,46,56,221,225,92,43,71,23,252,217,112,93,40,109,125,211,50,141,162,142,17\")),bytes32(stringToBytes32(\"201,188,40,76,85,159,246,248,56,216,24,9,242,99,222,229,58,220,136,170,190,73,107,105,238,253,165,196,88,13,113,35\")),bytes32(stringToBytes32(\"90,94,25,230,4,120,44,198,246,232,85,228,218,249,116,237,131,40,175,9,85,42,58,78,127,52,68,122,215,27,58,128\")),bytes32(stringToBytes32(\"87,88,18,252,36,173,212,23,222,70,73,86,115,164,83,236,41,248,51,239,36,137,221,4,120,111,28,67,45,204,104,22\"))]"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[4,4,20,83,9,160,160]",
                "sol": "[159,1,16,100,0,10000,100]"
              },
              {
                "js": "[[23,244,117,98,126,222,8,139,70,44,183,169,187,80,24,101,138,223,208,29,96,63,199,139,93,64,16,212,0,166,72,56],[230,103,148,88,58,83,237,192,170,70,119,191,247,221,41,102,251,228,26,229,119,46,101,205,56,103,181,65,44,161,152,141],[153,22,183,227,70,125,223,59,15,80,72,61,188,131,61,189,138,36,228,27,250,123,45,33,177,52,80,66,49,156,172,67],[4,212,123,216,53,113,248,103,175,60,194,28,44,247,43,31,250,63,91,45,187,55,0,249,171,73,72,230,201,232,215,112],[178,233,254,134,157,188,89,214,199,253,78,178,17,28,85,28,154,21,154,66,239,114,23,147,82,0,82,19,191,186,43,65],[111,255,84,241,212,129,133,44,67,18,49,164,71,65,244,62,94,101,105,49,191,94,45,62,235,131,99,218,77,169,110,130]]",
                "sol": "[bytes32(stringToBytes32(\"23,244,117,98,126,222,8,139,70,44,183,169,187,80,24,101,138,223,208,29,96,63,199,139,93,64,16,212,0,166,72,56\")),bytes32(stringToBytes32(\"230,103,148,88,58,83,237,192,170,70,119,191,247,221,41,102,251,228,26,229,119,46,101,205,56,103,181,65,44,161,152,141\")),bytes32(stringToBytes32(\"153,22,183,227,70,125,223,59,15,80,72,61,188,131,61,189,138,36,228,27,250,123,45,33,177,52,80,66,49,156,172,67\")),bytes32(stringToBytes32(\"4,212,123,216,53,113,248,103,175,60,194,28,44,247,43,31,250,63,91,45,187,55,0,249,171,73,72,230,201,232,215,112\")),bytes32(stringToBytes32(\"178,233,254,134,157,188,89,214,199,253,78,178,17,28,85,28,154,21,154,66,239,114,23,147,82,0,82,19,191,186,43,65\")),bytes32(stringToBytes32(\"111,255,84,241,212,129,133,44,67,18,49,164,71,65,244,62,94,101,105,49,191,94,45,62,235,131,99,218,77,169,110,130\"))]"
              },
              {
                "js": "[11,81,101,160,21,5]",
                "sol": "[uint8(11),uint8(81),uint8(101),uint8(160),uint8(21),uint8(5)]"
              },
              {
                "js": "[[8,19,240,67,249,30,98,78,164,88,191,78,104,37,66,236,29,249,238,133,215,175,78,166,110,137,177,57,248,235,1,124],[206,243,214,238,254,7,62,89,203,235,199,65,238,102,135,224,180,105,229,119,56,15,139,85,23,15,149,176,75,239,220,123],[197,69,189,252,18,136,67,142,70,131,234,19,103,61,123,1,226,68,107,254,37,240,95,108,100,244,206,13,116,172,25,104],[2,108,27,173,81,184,13,170,84,211,106,149,191,217,207,71,106,18,68,5,76,228,157,51,220,167,142,160,142,222,194,170],[198,133,118,220,66,55,21,20,66,165,210,207,206,16,150,27,202,124,1,59,25,36,103,174,241,228,190,20,129,48,142,117],[188,225,127,205,132,52,170,57,188,238,118,178,8,30,74,53,60,254,12,238,33,157,17,69,132,125,46,215,218,131,157,47]]",
                "sol": "[bytes32(stringToBytes32(\"8,19,240,67,249,30,98,78,164,88,191,78,104,37,66,236,29,249,238,133,215,175,78,166,110,137,177,57,248,235,1,124\")),bytes32(stringToBytes32(\"206,243,214,238,254,7,62,89,203,235,199,65,238,102,135,224,180,105,229,119,56,15,139,85,23,15,149,176,75,239,220,123\")),bytes32(stringToBytes32(\"197,69,189,252,18,136,67,142,70,131,234,19,103,61,123,1,226,68,107,254,37,240,95,108,100,244,206,13,116,172,25,104\")),bytes32(stringToBytes32(\"2,108,27,173,81,184,13,170,84,211,106,149,191,217,207,71,106,18,68,5,76,228,157,51,220,167,142,160,142,222,194,170\")),bytes32(stringToBytes32(\"198,133,118,220,66,55,21,20,66,165,210,207,206,16,150,27,202,124,1,59,25,36,103,174,241,228,190,20,129,48,142,117\")),bytes32(stringToBytes32(\"188,225,127,205,132,52,170,57,188,238,118,178,8,30,74,53,60,254,12,238,33,157,17,69,132,125,46,215,218,131,157,47\"))]"
              },
              {
                "js": "[[191,208,211,141,225,210,21,14,246,191,214,16,230,219,113,213,189,3,126,165,190,186,228,172,49,113,250,210,127,73,130,189],[75,103,77,88,47,88,219,224,90,42,116,87,165,49,118,125,114,2,225,68,189,187,193,35,120,239,158,234,53,221,17,155],[52,32,230,174,105,78,255,115,141,87,15,46,56,221,225,92,43,71,23,252,217,112,93,40,109,125,211,50,141,162,142,17],[201,188,40,76,85,159,246,248,56,216,24,9,242,99,222,229,58,220,136,170,190,73,107,105,238,253,165,196,88,13,113,35],[90,94,25,230,4,120,44,198,246,232,85,228,218,249,116,237,131,40,175,9,85,42,58,78,127,52,68,122,215,27,58,128],[87,88,18,252,36,173,212,23,222,70,73,86,115,164,83,236,41,248,51,239,36,137,221,4,120,111,28,67,45,204,104,22]]",
                "sol": "[bytes32(stringToBytes32(\"191,208,211,141,225,210,21,14,246,191,214,16,230,219,113,213,189,3,126,165,190,186,228,172,49,113,250,210,127,73,130,189\")),bytes32(stringToBytes32(\"75,103,77,88,47,88,219,224,90,42,116,87,165,49,118,125,114,2,225,68,189,187,193,35,120,239,158,234,53,221,17,155\")),bytes32(stringToBytes32(\"52,32,230,174,105,78,255,115,141,87,15,46,56,221,225,92,43,71,23,252,217,112,93,40,109,125,211,50,141,162,142,17\")),bytes32(stringToBytes32(\"201,188,40,76,85,159,246,248,56,216,24,9,242,99,222,229,58,220,136,170,190,73,107,105,238,253,165,196,88,13,113,35\")),bytes32(stringToBytes32(\"90,94,25,230,4,120,44,198,246,232,85,228,218,249,116,237,131,40,175,9,85,42,58,78,127,52,68,122,215,27,58,128\")),bytes32(stringToBytes32(\"87,88,18,252,36,173,212,23,222,70,73,86,115,164,83,236,41,248,51,239,36,137,221,4,120,111,28,67,45,204,104,22\"))]"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.785ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "[168,84,74,53,197,70,33,183,34,58,15,57,169,106,176,176,29,121,11,215,20,109,66,145,143,147,164,184,48,156,77,49]",
              "sol": "stringToBytes32(\"168,84,74,53,197,70,33,183,34,58,15,57,169,106,176,176,29,121,11,215,20,109,66,145,143,147,164,184,48,156,77,49\")"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "[19,180,55,253,235,128,129,147,29,231,163,237,166,197,139,70,147,174,250,139,41,211,231,118,52,224,233,197,71,4,127,89]",
              "sol": "stringToBytes32(\"19,180,55,253,235,128,129,147,29,231,163,237,166,197,139,70,147,174,250,139,41,211,231,118,52,224,233,197,71,4,127,89\")"
            },
            {
              "js": "[233,123,24,124,163,62,221,61,48,3,114,228,249,137,228,195,235,236,177,169,133,180,109,216,73,173,247,93,248,32,84,192]",
              "sol": "stringToBytes32(\"233,123,24,124,163,62,221,61,48,3,114,228,249,137,228,195,235,236,177,169,133,180,109,216,73,173,247,93,248,32,84,192\")"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "[168,84,74,53,197,70,33,183,34,58,15,57,169,106,176,176,29,121,11,215,20,109,66,145,143,147,164,184,48,156,77,49]",
                "sol": "stringToBytes32(\"168,84,74,53,197,70,33,183,34,58,15,57,169,106,176,176,29,121,11,215,20,109,66,145,143,147,164,184,48,156,77,49\")"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "[19,180,55,253,235,128,129,147,29,231,163,237,166,197,139,70,147,174,250,139,41,211,231,118,52,224,233,197,71,4,127,89]",
                "sol": "stringToBytes32(\"19,180,55,253,235,128,129,147,29,231,163,237,166,197,139,70,147,174,250,139,41,211,231,118,52,224,233,197,71,4,127,89\")"
              },
              {
                "js": "[233,123,24,124,163,62,221,61,48,3,114,228,249,137,228,195,235,236,177,169,133,180,109,216,73,173,247,93,248,32,84,192]",
                "sol": "stringToBytes32(\"233,123,24,124,163,62,221,61,48,3,114,228,249,137,228,195,235,236,177,169,133,180,109,216,73,173,247,93,248,32,84,192\")"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "[168,84,74,53,197,70,33,183,34,58,15,57,169,106,176,176,29,121,11,215,20,109,66,145,143,147,164,184,48,156,77,49]",
                "sol": "stringToBytes32(\"168,84,74,53,197,70,33,183,34,58,15,57,169,106,176,176,29,121,11,215,20,109,66,145,143,147,164,184,48,156,77,49\")"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "[19,180,55,253,235,128,129,147,29,231,163,237,166,197,139,70,147,174,250,139,41,211,231,118,52,224,233,197,71,4,127,89]",
                "sol": "stringToBytes32(\"19,180,55,253,235,128,129,147,29,231,163,237,166,197,139,70,147,174,250,139,41,211,231,118,52,224,233,197,71,4,127,89\")"
              },
              {
                "js": "[233,123,24,124,163,62,221,61,48,3,114,228,249,137,228,195,235,236,177,169,133,180,109,216,73,173,247,93,248,32,84,192]",
                "sol": "stringToBytes32(\"233,123,24,124,163,62,221,61,48,3,114,228,249,137,228,195,235,236,177,169,133,180,109,216,73,173,247,93,248,32,84,192\")"
              },
              {
                "js": 257,
                "sol": 257
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.786ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.787ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "[166,148,179,238,207,184,24,72,147,207,255,157,25,43,102,233,193,83,237,75,0,209,161,79,80,70,166,115,201,16,221,73]",
              "sol": "stringToBytes32(\"166,148,179,238,207,184,24,72,147,207,255,157,25,43,102,233,193,83,237,75,0,209,161,79,80,70,166,115,201,16,221,73\")"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[145,2,209,233,25,73,252,110,2,112,204,123,69,58,143,114,134,17,136,12,146,120,233,145,243,79,67,47,197,57,136,149]",
              "sol": "stringToBytes32(\"145,2,209,233,25,73,252,110,2,112,204,123,69,58,143,114,134,17,136,12,146,120,233,145,243,79,67,47,197,57,136,149\")"
            },
            {
              "js": "[142,115,178,188,81,54,196,33,100,23,144,53,68,92,149,107,90,175,32,104,24,202,233,238,7,230,88,156,184,129,142,179]",
              "sol": "stringToBytes32(\"142,115,178,188,81,54,196,33,100,23,144,53,68,92,149,107,90,175,32,104,24,202,233,238,7,230,88,156,184,129,142,179\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.788ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.788ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:13:12.788ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:13:12.789ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}