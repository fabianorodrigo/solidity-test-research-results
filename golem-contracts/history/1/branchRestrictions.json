,{
  "2020-11-10T05:03:39.513ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:03:46.008ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+836",
              "sol": "block.number+836"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+836+897",
              "sol": "block.number+836+897"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+836",
                "sol": "block.number+836"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+836+897",
                "sol": "block.number+836+897"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+836",
                "sol": "block.number+836"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+836+897",
                "sol": "block.number+836+897"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+836+897",
                "sol": "block.number+836+897"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+836",
                "sol": "block.number+836"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+836",
                "sol": "block.number+836"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:03:52.590ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:03:59.185ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:05.686ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBasicToken.address",
              "sol": "contractBasicToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:12.423ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:19.261ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBasicToken.address",
              "sol": "contractBasicToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:25.908ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.708ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.709ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.709ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": 160,
                "sol": 160
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.711ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.712ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.712ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.713ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.714ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.715ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.715ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.716ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.716ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.718ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.721ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_value <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _value<=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.721ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.722ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.722ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.724ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.725ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.726ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:10001}",
              "sol": "{\"from\":\"0x0\",\"value\":\"10001\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:10001}",
                "sol": "{\"from\":\"0x0\",\"value\":\"10001\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.731ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.732ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.738ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.738ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.738ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.739ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.739ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "[213,75,234,127,38,84,78,76,11,114,13,255,253,115,136,194,37,160,130,81,242,229,213,182,80,77,214,190,124,10,129,170]",
              "sol": "stringToBytes32(\"213,75,234,127,38,84,78,76,11,114,13,255,253,115,136,194,37,160,130,81,242,229,213,182,80,77,214,190,124,10,129,170\")"
            },
            {
              "js": "[93,30,137,111,241,134,224,160,105,126,48,251,23,57,31,24,64,216,187,56,114,233,119,10,91,28,164,23,243,213,75,157]",
              "sol": "stringToBytes32(\"93,30,137,111,241,134,224,160,105,126,48,251,23,57,31,24,64,216,187,56,114,233,119,10,91,28,164,23,243,213,75,157\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.739ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "[78,227,31,47,121,127,195,124,220,253,113,23,53,45,168,213,220,28,134,45]",
              "sol": "abi.encode(\"78,227,31,47,121,127,195,124,220,253,113,23,53,45,168,213,220,28,134,45\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "[62,180,3,76,225,63,165,3,59,19,35,167,37,75,172,210,215,181,238,237,244]",
                "sol": "bytes21(\"62,180,3,76,225,63,165,3,59,19,35,167,37,75,172,210,215,181,238,237,244\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.740ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "[137,46,48,27,149,166,213,177,249,179,106,249,101,191,252,59,104,85,123,163,103,44,178,52,77,184,207,232,79,116,106,72]",
              "sol": "stringToBytes32(\"137,46,48,27,149,166,213,177,249,179,106,249,101,191,252,59,104,85,123,163,103,44,178,52,77,184,207,232,79,116,106,72\")"
            },
            {
              "js": "[80,189,55,162,71,224,119,35,58,22,199,102,75,82,31,223,204,82,237,214,103,155,169,166,215,58,50,194,135,78,214,254]",
              "sol": "stringToBytes32(\"80,189,55,162,71,224,119,35,58,22,199,102,75,82,31,223,204,82,237,214,103,155,169,166,215,58,50,194,135,78,214,254\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.741ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.741ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.742ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.743ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.743ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.743ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.744ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.745ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.747ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.747ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[143,10,103,47,215,197,67,27,166,86,231,161,46,129,56,234,222,25,177,118,2,188,51,232,168,9,212,173,213,176,4,183],[30,237,157,189,47,107,164,57,34,27,161,123,20,81,51,163,23,121,117,114,86,55,151,169,127,216,12,196,91,127,64,236],[86,114,157,50,13,206,16,166,233,193,122,112,253,5,34,72,71,144,232,187,148,46,123,68,210,114,219,207,53,223,208,244],[3,47,64,85,210,172,9,49,177,107,215,28,24,253,233,254,38,254,233,159,112,213,199,61,158,8,130,160,83,212,112,94],[71,147,147,117,249,253,63,21,49,14,156,58,60,236,169,85,175,235,193,177,122,223,32,190,23,1,175,68,28,136,67,182],[252,160,21,133,244,209,166,132,218,53,155,22,160,32,169,87,29,231,233,99,55,223,104,158,3,22,11,174,129,121,199,18]]",
              "sol": "[bytes32(stringToBytes32(\"143,10,103,47,215,197,67,27,166,86,231,161,46,129,56,234,222,25,177,118,2,188,51,232,168,9,212,173,213,176,4,183\")),bytes32(stringToBytes32(\"30,237,157,189,47,107,164,57,34,27,161,123,20,81,51,163,23,121,117,114,86,55,151,169,127,216,12,196,91,127,64,236\")),bytes32(stringToBytes32(\"86,114,157,50,13,206,16,166,233,193,122,112,253,5,34,72,71,144,232,187,148,46,123,68,210,114,219,207,53,223,208,244\")),bytes32(stringToBytes32(\"3,47,64,85,210,172,9,49,177,107,215,28,24,253,233,254,38,254,233,159,112,213,199,61,158,8,130,160,83,212,112,94\")),bytes32(stringToBytes32(\"71,147,147,117,249,253,63,21,49,14,156,58,60,236,169,85,175,235,193,177,122,223,32,190,23,1,175,68,28,136,67,182\")),bytes32(stringToBytes32(\"252,160,21,133,244,209,166,132,218,53,155,22,160,32,169,87,29,231,233,99,55,223,104,158,3,22,11,174,129,121,199,18\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-568",
              "sol": "block.timestamp-568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[143,10,103,47,215,197,67,27,166,86,231,161,46,129,56,234,222,25,177,118,2,188,51,232,168,9,212,173,213,176,4,183],[30,237,157,189,47,107,164,57,34,27,161,123,20,81,51,163,23,121,117,114,86,55,151,169,127,216,12,196,91,127,64,236],[86,114,157,50,13,206,16,166,233,193,122,112,253,5,34,72,71,144,232,187,148,46,123,68,210,114,219,207,53,223,208,244],[3,47,64,85,210,172,9,49,177,107,215,28,24,253,233,254,38,254,233,159,112,213,199,61,158,8,130,160,83,212,112,94],[71,147,147,117,249,253,63,21,49,14,156,58,60,236,169,85,175,235,193,177,122,223,32,190,23,1,175,68,28,136,67,182],[252,160,21,133,244,209,166,132,218,53,155,22,160,32,169,87,29,231,233,99,55,223,104,158,3,22,11,174,129,121,199,18]]",
                "sol": "[bytes32(stringToBytes32(\"143,10,103,47,215,197,67,27,166,86,231,161,46,129,56,234,222,25,177,118,2,188,51,232,168,9,212,173,213,176,4,183\")),bytes32(stringToBytes32(\"30,237,157,189,47,107,164,57,34,27,161,123,20,81,51,163,23,121,117,114,86,55,151,169,127,216,12,196,91,127,64,236\")),bytes32(stringToBytes32(\"86,114,157,50,13,206,16,166,233,193,122,112,253,5,34,72,71,144,232,187,148,46,123,68,210,114,219,207,53,223,208,244\")),bytes32(stringToBytes32(\"3,47,64,85,210,172,9,49,177,107,215,28,24,253,233,254,38,254,233,159,112,213,199,61,158,8,130,160,83,212,112,94\")),bytes32(stringToBytes32(\"71,147,147,117,249,253,63,21,49,14,156,58,60,236,169,85,175,235,193,177,122,223,32,190,23,1,175,68,28,136,67,182\")),bytes32(stringToBytes32(\"252,160,21,133,244,209,166,132,218,53,155,22,160,32,169,87,29,231,233,99,55,223,104,158,3,22,11,174,129,121,199,18\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.749ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "[118,107,182,64,245,33,123,116,194,146,193,20,198,215,85,61,59,250,21,38,178,187,233,113,234,34,151,250,134,25,63,49]",
              "sol": "abi.encode(\"118,107,182,64,245,33,123,116,194,146,193,20,198,215,85,61,59,250,21,38,178,187,233,113,234,34,151,250,134,25,63,49\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "[118,107,182,64,245,33,123,116,194,146,193,20,198,215,85,61,59,250,21,38,178,187,233,113,234,34,151,250,134,25,63,49]",
                "sol": "abi.encode(\"118,107,182,64,245,33,123,116,194,146,193,20,198,215,85,61,59,250,21,38,178,187,233,113,234,34,151,250,134,25,63,49\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.750ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.750ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.751ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.751ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.751ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.752ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.752ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.753ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.754ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.755ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.755ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.756ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.756ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.756ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "[123,183,147,195,11,40,230,34,142,49,137,199,90,53,77,181,167,250,87,205,213,165,51,251,42,189,212,138,20,63,61,158]",
              "sol": "abi.encode(\"123,183,147,195,11,40,230,34,142,49,137,199,90,53,77,181,167,250,87,205,213,165,51,251,42,189,212,138,20,63,61,158\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.757ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.757ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.758ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "[155,78,7,15,29,177,59,40,11,120,187,80,227,90,56,10,109,181,152,26,160,191,114,22,12,145,83,246,165,123,72,70]",
              "sol": "stringToBytes32(\"155,78,7,15,29,177,59,40,11,120,187,80,227,90,56,10,109,181,152,26,160,191,114,22,12,145,83,246,165,123,72,70\")"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[255,123,239,146,210,53,18,189,66,228,68,88,221,101,179,15,54,165,125,68,235,155,220,112,152,191,92,71,159,31,63,87]",
              "sol": "stringToBytes32(\"255,123,239,146,210,53,18,189,66,228,68,88,221,101,179,15,54,165,125,68,235,155,220,112,152,191,92,71,159,31,63,87\")"
            },
            {
              "js": "[37,20,124,206,27,179,75,152,160,254,61,8,205,79,226,22,204,36,89,38,33,252,97,65,100,243,237,82,19,96,52,255]",
              "sol": "stringToBytes32(\"37,20,124,206,27,179,75,152,160,254,61,8,205,79,226,22,204,36,89,38,33,252,97,65,100,243,237,82,19,96,52,255\")"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "[155,78,7,15,29,177,59,40,11,120,187,80,227,90,56,10,109,181,152,26,160,191,114,22,12,145,83,246,165,123,72,70]",
                "sol": "stringToBytes32(\"155,78,7,15,29,177,59,40,11,120,187,80,227,90,56,10,109,181,152,26,160,191,114,22,12,145,83,246,165,123,72,70\")"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[255,123,239,146,210,53,18,189,66,228,68,88,221,101,179,15,54,165,125,68,235,155,220,112,152,191,92,71,159,31,63,87]",
                "sol": "stringToBytes32(\"255,123,239,146,210,53,18,189,66,228,68,88,221,101,179,15,54,165,125,68,235,155,220,112,152,191,92,71,159,31,63,87\")"
              },
              {
                "js": "[37,20,124,206,27,179,75,152,160,254,61,8,205,79,226,22,204,36,89,38,33,252,97,65,100,243,237,82,19,96,52,255]",
                "sol": "stringToBytes32(\"37,20,124,206,27,179,75,152,160,254,61,8,205,79,226,22,204,36,89,38,33,252,97,65,100,243,237,82,19,96,52,255\")"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "[155,78,7,15,29,177,59,40,11,120,187,80,227,90,56,10,109,181,152,26,160,191,114,22,12,145,83,246,165,123,72,70]",
                "sol": "stringToBytes32(\"155,78,7,15,29,177,59,40,11,120,187,80,227,90,56,10,109,181,152,26,160,191,114,22,12,145,83,246,165,123,72,70\")"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[255,123,239,146,210,53,18,189,66,228,68,88,221,101,179,15,54,165,125,68,235,155,220,112,152,191,92,71,159,31,63,87]",
                "sol": "stringToBytes32(\"255,123,239,146,210,53,18,189,66,228,68,88,221,101,179,15,54,165,125,68,235,155,220,112,152,191,92,71,159,31,63,87\")"
              },
              {
                "js": "[37,20,124,206,27,179,75,152,160,254,61,8,205,79,226,22,204,36,89,38,33,252,97,65,100,243,237,82,19,96,52,255]",
                "sol": "stringToBytes32(\"37,20,124,206,27,179,75,152,160,254,61,8,205,79,226,22,204,36,89,38,33,252,97,65,100,243,237,82,19,96,52,255\")"
              },
              {
                "js": 82,
                "sol": 82
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.760ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[81]",
              "sol": "[uint256(81)]"
            },
            {
              "js": "[[71,11,241,172,52,242,166,110,71,44,223,77,168,246,94,7,223,44,132,219,159,19,185,82,91,138,188,157,225,136,81,55]]",
              "sol": "[bytes32(stringToBytes32(\"71,11,241,172,52,242,166,110,71,44,223,77,168,246,94,7,223,44,132,219,159,19,185,82,91,138,188,157,225,136,81,55\"))]"
            },
            {
              "js": "[14]",
              "sol": "[uint8(14)]"
            },
            {
              "js": "[[101,9,8,82,176,151,157,103,84,84,180,137,40,90,95,205,75,7,74,155,107,178,52,15,255,133,125,200,151,159,73,88]]",
              "sol": "[bytes32(stringToBytes32(\"101,9,8,82,176,151,157,103,84,84,180,137,40,90,95,205,75,7,74,155,107,178,52,15,255,133,125,200,151,159,73,88\"))]"
            },
            {
              "js": "[[146,75,124,117,42,153,205,45,241,57,194,241,220,139,224,193,4,104,151,98,206,252,11,2,100,106,218,63,217,105,227,166]]",
              "sol": "[bytes32(stringToBytes32(\"146,75,124,117,42,153,205,45,241,57,194,241,220,139,224,193,4,104,151,98,206,252,11,2,100,106,218,63,217,105,227,166\"))]"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[81]",
                "sol": "[uint256(81)]"
              },
              {
                "js": "[[71,11,241,172,52,242,166,110,71,44,223,77,168,246,94,7,223,44,132,219,159,19,185,82,91,138,188,157,225,136,81,55]]",
                "sol": "[bytes32(stringToBytes32(\"71,11,241,172,52,242,166,110,71,44,223,77,168,246,94,7,223,44,132,219,159,19,185,82,91,138,188,157,225,136,81,55\"))]"
              },
              {
                "js": "[14]",
                "sol": "[uint8(14)]"
              },
              {
                "js": "[[101,9,8,82,176,151,157,103,84,84,180,137,40,90,95,205,75,7,74,155,107,178,52,15,255,133,125,200,151,159,73,88]]",
                "sol": "[bytes32(stringToBytes32(\"101,9,8,82,176,151,157,103,84,84,180,137,40,90,95,205,75,7,74,155,107,178,52,15,255,133,125,200,151,159,73,88\"))]"
              },
              {
                "js": "[[146,75,124,117,42,153,205,45,241,57,194,241,220,139,224,193,4,104,151,98,206,252,11,2,100,106,218,63,217,105,227,166]]",
                "sol": "[bytes32(stringToBytes32(\"146,75,124,117,42,153,205,45,241,57,194,241,220,139,224,193,4,104,151,98,206,252,11,2,100,106,218,63,217,105,227,166\"))]"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1,100]",
                "sol": "[160,100]"
              },
              {
                "js": "[[71,11,241,172,52,242,166,110,71,44,223,77,168,246,94,7,223,44,132,219,159,19,185,82,91,138,188,157,225,136,81,55]]",
                "sol": "[bytes32(stringToBytes32(\"71,11,241,172,52,242,166,110,71,44,223,77,168,246,94,7,223,44,132,219,159,19,185,82,91,138,188,157,225,136,81,55\"))]"
              },
              {
                "js": "[14]",
                "sol": "[uint8(14)]"
              },
              {
                "js": "[[101,9,8,82,176,151,157,103,84,84,180,137,40,90,95,205,75,7,74,155,107,178,52,15,255,133,125,200,151,159,73,88]]",
                "sol": "[bytes32(stringToBytes32(\"101,9,8,82,176,151,157,103,84,84,180,137,40,90,95,205,75,7,74,155,107,178,52,15,255,133,125,200,151,159,73,88\"))]"
              },
              {
                "js": "[[146,75,124,117,42,153,205,45,241,57,194,241,220,139,224,193,4,104,151,98,206,252,11,2,100,106,218,63,217,105,227,166]]",
                "sol": "[bytes32(stringToBytes32(\"146,75,124,117,42,153,205,45,241,57,194,241,220,139,224,193,4,104,151,98,206,252,11,2,100,106,218,63,217,105,227,166\"))]"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1336,159]",
                "sol": "[1338,1338]"
              },
              {
                "js": "[[71,11,241,172,52,242,166,110,71,44,223,77,168,246,94,7,223,44,132,219,159,19,185,82,91,138,188,157,225,136,81,55]]",
                "sol": "[bytes32(stringToBytes32(\"71,11,241,172,52,242,166,110,71,44,223,77,168,246,94,7,223,44,132,219,159,19,185,82,91,138,188,157,225,136,81,55\"))]"
              },
              {
                "js": "[14]",
                "sol": "[uint8(14)]"
              },
              {
                "js": "[[101,9,8,82,176,151,157,103,84,84,180,137,40,90,95,205,75,7,74,155,107,178,52,15,255,133,125,200,151,159,73,88]]",
                "sol": "[bytes32(stringToBytes32(\"101,9,8,82,176,151,157,103,84,84,180,137,40,90,95,205,75,7,74,155,107,178,52,15,255,133,125,200,151,159,73,88\"))]"
              },
              {
                "js": "[[146,75,124,117,42,153,205,45,241,57,194,241,220,139,224,193,4,104,151,98,206,252,11,2,100,106,218,63,217,105,227,166]]",
                "sol": "[bytes32(stringToBytes32(\"146,75,124,117,42,153,205,45,241,57,194,241,220,139,224,193,4,104,151,98,206,252,11,2,100,106,218,63,217,105,227,166\"))]"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[255,1336]",
                "sol": "[1001,3]"
              },
              {
                "js": "[[71,11,241,172,52,242,166,110,71,44,223,77,168,246,94,7,223,44,132,219,159,19,185,82,91,138,188,157,225,136,81,55]]",
                "sol": "[bytes32(stringToBytes32(\"71,11,241,172,52,242,166,110,71,44,223,77,168,246,94,7,223,44,132,219,159,19,185,82,91,138,188,157,225,136,81,55\"))]"
              },
              {
                "js": "[14]",
                "sol": "[uint8(14)]"
              },
              {
                "js": "[[101,9,8,82,176,151,157,103,84,84,180,137,40,90,95,205,75,7,74,155,107,178,52,15,255,133,125,200,151,159,73,88]]",
                "sol": "[bytes32(stringToBytes32(\"101,9,8,82,176,151,157,103,84,84,180,137,40,90,95,205,75,7,74,155,107,178,52,15,255,133,125,200,151,159,73,88\"))]"
              },
              {
                "js": "[[146,75,124,117,42,153,205,45,241,57,194,241,220,139,224,193,4,104,151,98,206,252,11,2,100,106,218,63,217,105,227,166]]",
                "sol": "[bytes32(stringToBytes32(\"146,75,124,117,42,153,205,45,241,57,194,241,220,139,224,193,4,104,151,98,206,252,11,2,100,106,218,63,217,105,227,166\"))]"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[9,1336]",
                "sol": "[5,83]"
              },
              {
                "js": "[[71,11,241,172,52,242,166,110,71,44,223,77,168,246,94,7,223,44,132,219,159,19,185,82,91,138,188,157,225,136,81,55]]",
                "sol": "[bytes32(stringToBytes32(\"71,11,241,172,52,242,166,110,71,44,223,77,168,246,94,7,223,44,132,219,159,19,185,82,91,138,188,157,225,136,81,55\"))]"
              },
              {
                "js": "[14]",
                "sol": "[uint8(14)]"
              },
              {
                "js": "[[101,9,8,82,176,151,157,103,84,84,180,137,40,90,95,205,75,7,74,155,107,178,52,15,255,133,125,200,151,159,73,88]]",
                "sol": "[bytes32(stringToBytes32(\"101,9,8,82,176,151,157,103,84,84,180,137,40,90,95,205,75,7,74,155,107,178,52,15,255,133,125,200,151,159,73,88\"))]"
              },
              {
                "js": "[[146,75,124,117,42,153,205,45,241,57,194,241,220,139,224,193,4,104,151,98,206,252,11,2,100,106,218,63,217,105,227,166]]",
                "sol": "[bytes32(stringToBytes32(\"146,75,124,117,42,153,205,45,241,57,194,241,220,139,224,193,4,104,151,98,206,252,11,2,100,106,218,63,217,105,227,166\"))]"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.764ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[20,167,9,143,253,200,112,225,99,88,198,93,188,250,99,34,22,78,12,66,33,58,11,102,156,88,38,240,14,126,29,160]",
              "sol": "stringToBytes32(\"20,167,9,143,253,200,112,225,99,88,198,93,188,250,99,34,22,78,12,66,33,58,11,102,156,88,38,240,14,126,29,160\")"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "[187,31,167,9,64,84,76,83,85,62,127,82,150,54,243,167,193,106,74,156,5,240,120,8,52,222,3,116,149,121,0,160]",
              "sol": "stringToBytes32(\"187,31,167,9,64,84,76,83,85,62,127,82,150,54,243,167,193,106,74,156,5,240,120,8,52,222,3,116,149,121,0,160\")"
            },
            {
              "js": "[198,113,65,170,197,211,9,118,215,6,23,3,200,71,166,241,154,118,135,42,160,88,189,165,236,245,124,223,37,57,41,51]",
              "sol": "stringToBytes32(\"198,113,65,170,197,211,9,118,215,6,23,3,200,71,166,241,154,118,135,42,160,88,189,165,236,245,124,223,37,57,41,51\")"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[20,167,9,143,253,200,112,225,99,88,198,93,188,250,99,34,22,78,12,66,33,58,11,102,156,88,38,240,14,126,29,160]",
                "sol": "stringToBytes32(\"20,167,9,143,253,200,112,225,99,88,198,93,188,250,99,34,22,78,12,66,33,58,11,102,156,88,38,240,14,126,29,160\")"
              },
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "[187,31,167,9,64,84,76,83,85,62,127,82,150,54,243,167,193,106,74,156,5,240,120,8,52,222,3,116,149,121,0,160]",
                "sol": "stringToBytes32(\"187,31,167,9,64,84,76,83,85,62,127,82,150,54,243,167,193,106,74,156,5,240,120,8,52,222,3,116,149,121,0,160\")"
              },
              {
                "js": "[198,113,65,170,197,211,9,118,215,6,23,3,200,71,166,241,154,118,135,42,160,88,189,165,236,245,124,223,37,57,41,51]",
                "sol": "stringToBytes32(\"198,113,65,170,197,211,9,118,215,6,23,3,200,71,166,241,154,118,135,42,160,88,189,165,236,245,124,223,37,57,41,51\")"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[20,167,9,143,253,200,112,225,99,88,198,93,188,250,99,34,22,78,12,66,33,58,11,102,156,88,38,240,14,126,29,160]",
                "sol": "stringToBytes32(\"20,167,9,143,253,200,112,225,99,88,198,93,188,250,99,34,22,78,12,66,33,58,11,102,156,88,38,240,14,126,29,160\")"
              },
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "[187,31,167,9,64,84,76,83,85,62,127,82,150,54,243,167,193,106,74,156,5,240,120,8,52,222,3,116,149,121,0,160]",
                "sol": "stringToBytes32(\"187,31,167,9,64,84,76,83,85,62,127,82,150,54,243,167,193,106,74,156,5,240,120,8,52,222,3,116,149,121,0,160\")"
              },
              {
                "js": "[198,113,65,170,197,211,9,118,215,6,23,3,200,71,166,241,154,118,135,42,160,88,189,165,236,245,124,223,37,57,41,51]",
                "sol": "stringToBytes32(\"198,113,65,170,197,211,9,118,215,6,23,3,200,71,166,241,154,118,135,42,160,88,189,165,236,245,124,223,37,57,41,51\")"
              },
              {
                "js": 4,
                "sol": 4
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.766ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.767ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "[161,238,165,183,23,166,18,94,29,165,147,178,138,196,228,114,238,224,140,178,6,216,2,12,0,83,36,44,214,22,88,7]",
              "sol": "stringToBytes32(\"161,238,165,183,23,166,18,94,29,165,147,178,138,196,228,114,238,224,140,178,6,216,2,12,0,83,36,44,214,22,88,7\")"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "[96,82,31,151,75,39,84,184,143,20,79,35,59,50,19,207,251,199,36,80,78,185,175,180,198,248,125,195,29,242,25,157]",
              "sol": "stringToBytes32(\"96,82,31,151,75,39,84,184,143,20,79,35,59,50,19,207,251,199,36,80,78,185,175,180,198,248,125,195,29,242,25,157\")"
            },
            {
              "js": "[250,149,144,75,72,192,21,183,157,96,140,156,98,1,20,138,189,81,9,57,95,13,41,156,123,182,224,20,172,188,103,65]",
              "sol": "stringToBytes32(\"250,149,144,75,72,192,21,183,157,96,140,156,98,1,20,138,189,81,9,57,95,13,41,156,123,182,224,20,172,188,103,65\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.768ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.769ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:04:32.770ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:04:32.770ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}