,{
  "2020-11-13T03:11:58.244ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:04.477ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+34",
              "sol": "block.number+34"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+34+505",
              "sol": "block.number+34+505"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+34",
                "sol": "block.number+34"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+34+505",
                "sol": "block.number+34+505"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+34",
                "sol": "block.number+34"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+34+505",
                "sol": "block.number+34+505"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+34+505",
                "sol": "block.number+34+505"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+34",
                "sol": "block.number+34"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+34",
                "sol": "block.number+34"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:10.957ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:17.422ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:23.916ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:30.437ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:37.261ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:43.893ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.624ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.625ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.626ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": 3,
                "sol": 3
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.627ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.627ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.628ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.629ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.630ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.630ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.631ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.631ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.632ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.633ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.635ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_value <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _value<=0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.636ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.636ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.637ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.639ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.640ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.640ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:16}",
              "sol": "{\"from\":\"0x0\",\"value\":\"16\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:16}",
                "sol": "{\"from\":\"0x0\",\"value\":\"16\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.645ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.646ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.650ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.651ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.651ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.651ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.652ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[19,91,117,169,174,26,37,13,74,50,100,167,206,115,52,123,115,241,238,145,15,23,20,16,227,17,91,68,31,253,201,198]",
              "sol": "stringToBytes32(\"19,91,117,169,174,26,37,13,74,50,100,167,206,115,52,123,115,241,238,145,15,23,20,16,227,17,91,68,31,253,201,198\")"
            },
            {
              "js": "[39,56,123,41,221,191,52,179,214,18,134,110,185,30,123,123,37,216,72,124,73,64,11,54,147,6,46,32,212,244,139,244]",
              "sol": "stringToBytes32(\"39,56,123,41,221,191,52,179,214,18,134,110,185,30,123,123,37,216,72,124,73,64,11,54,147,6,46,32,212,244,139,244\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.652ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "[171,4,123,18,120,54,62,137,88,72,203,4,36,238,234,250,182,75,12,3]",
              "sol": "abi.encode(\"171,4,123,18,120,54,62,137,88,72,203,4,36,238,234,250,182,75,12,3\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "[81,6,6,182,38,135,140,236,65,217,136,11,213,105,8,105,195,119,202,108,40]",
                "sol": "bytes21(\"81,6,6,182,38,135,140,236,65,217,136,11,213,105,8,105,195,119,202,108,40\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.653ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "[137,201,23,160,199,56,124,20,14,127,32,3,176,158,200,90,247,229,117,188,187,190,103,153,59,184,54,81,198,222,185,87]",
              "sol": "stringToBytes32(\"137,201,23,160,199,56,124,20,14,127,32,3,176,158,200,90,247,229,117,188,187,190,103,153,59,184,54,81,198,222,185,87\")"
            },
            {
              "js": "[24,237,61,62,175,56,1,112,178,239,204,97,168,136,89,166,168,68,105,61,116,127,96,44,235,44,112,225,42,87,198,8]",
              "sol": "stringToBytes32(\"24,237,61,62,175,56,1,112,178,239,204,97,168,136,89,166,168,68,105,61,116,127,96,44,235,44,112,225,42,87,198,8\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.654ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.654ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.655ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.656ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.656ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.657ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.657ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.658ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1000",
                "sol": "1000"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.659ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.660ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[244,244,207,29,45,23,249,201,3,184,228,192,70,123,228,149,195,255,133,188,41,34,211,2,126,200,46,97,74,8,113,99],[235,168,74,36,29,166,230,4,160,83,41,240,131,243,254,12,81,254,126,19,61,235,218,116,180,23,145,207,117,36,92,150],[198,47,143,245,220,156,1,112,239,132,98,179,87,65,231,180,202,121,67,221,107,126,79,238,88,102,251,13,72,239,81,106],[88,136,109,112,209,59,235,85,83,84,162,204,157,93,208,116,173,118,140,91,155,237,1,112,139,163,93,37,235,93,241,133],[187,24,135,122,168,110,66,82,53,72,179,216,234,24,67,191,77,71,33,142,246,147,55,81,23,125,18,175,224,150,79,205]]",
              "sol": "[bytes32(stringToBytes32(\"244,244,207,29,45,23,249,201,3,184,228,192,70,123,228,149,195,255,133,188,41,34,211,2,126,200,46,97,74,8,113,99\")),bytes32(stringToBytes32(\"235,168,74,36,29,166,230,4,160,83,41,240,131,243,254,12,81,254,126,19,61,235,218,116,180,23,145,207,117,36,92,150\")),bytes32(stringToBytes32(\"198,47,143,245,220,156,1,112,239,132,98,179,87,65,231,180,202,121,67,221,107,126,79,238,88,102,251,13,72,239,81,106\")),bytes32(stringToBytes32(\"88,136,109,112,209,59,235,85,83,84,162,204,157,93,208,116,173,118,140,91,155,237,1,112,139,163,93,37,235,93,241,133\")),bytes32(stringToBytes32(\"187,24,135,122,168,110,66,82,53,72,179,216,234,24,67,191,77,71,33,142,246,147,55,81,23,125,18,175,224,150,79,205\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-805",
              "sol": "block.timestamp-805"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[244,244,207,29,45,23,249,201,3,184,228,192,70,123,228,149,195,255,133,188,41,34,211,2,126,200,46,97,74,8,113,99],[235,168,74,36,29,166,230,4,160,83,41,240,131,243,254,12,81,254,126,19,61,235,218,116,180,23,145,207,117,36,92,150],[198,47,143,245,220,156,1,112,239,132,98,179,87,65,231,180,202,121,67,221,107,126,79,238,88,102,251,13,72,239,81,106],[88,136,109,112,209,59,235,85,83,84,162,204,157,93,208,116,173,118,140,91,155,237,1,112,139,163,93,37,235,93,241,133],[187,24,135,122,168,110,66,82,53,72,179,216,234,24,67,191,77,71,33,142,246,147,55,81,23,125,18,175,224,150,79,205]]",
                "sol": "[bytes32(stringToBytes32(\"244,244,207,29,45,23,249,201,3,184,228,192,70,123,228,149,195,255,133,188,41,34,211,2,126,200,46,97,74,8,113,99\")),bytes32(stringToBytes32(\"235,168,74,36,29,166,230,4,160,83,41,240,131,243,254,12,81,254,126,19,61,235,218,116,180,23,145,207,117,36,92,150\")),bytes32(stringToBytes32(\"198,47,143,245,220,156,1,112,239,132,98,179,87,65,231,180,202,121,67,221,107,126,79,238,88,102,251,13,72,239,81,106\")),bytes32(stringToBytes32(\"88,136,109,112,209,59,235,85,83,84,162,204,157,93,208,116,173,118,140,91,155,237,1,112,139,163,93,37,235,93,241,133\")),bytes32(stringToBytes32(\"187,24,135,122,168,110,66,82,53,72,179,216,234,24,67,191,77,71,33,142,246,147,55,81,23,125,18,175,224,150,79,205\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.662ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "[203,226,159,196,107,150,53,125,132,99,41,63,242,159,112,113,13,18,217,108,4,245,2,38,187,154,96,152,189,120,189,46]",
              "sol": "abi.encode(\"203,226,159,196,107,150,53,125,132,99,41,63,242,159,112,113,13,18,217,108,4,245,2,38,187,154,96,152,189,120,189,46\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "[203,226,159,196,107,150,53,125,132,99,41,63,242,159,112,113,13,18,217,108,4,245,2,38,187,154,96,152,189,120,189,46]",
                "sol": "abi.encode(\"203,226,159,196,107,150,53,125,132,99,41,63,242,159,112,113,13,18,217,108,4,245,2,38,187,154,96,152,189,120,189,46\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.663ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.663ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.664ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.664ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.664ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.664ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.665ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.665ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.666ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.667ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.667ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.668ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.668ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.668ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "[196,52,86,187,139,204,33,112,189,198,117,106,59,123,133,249,175,127,92,113,122,180,14,146,15,177,136,203,28,243,105,240]",
              "sol": "abi.encode(\"196,52,86,187,139,204,33,112,189,198,117,106,59,123,133,249,175,127,92,113,122,180,14,146,15,177,136,203,28,243,105,240\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.669ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.669ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.670ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "[26,9,106,39,99,64,62,52,194,120,231,116,212,210,239,114,189,167,183,233,18,131,137,82,85,48,170,193,106,9,121,129]",
              "sol": "stringToBytes32(\"26,9,106,39,99,64,62,52,194,120,231,116,212,210,239,114,189,167,183,233,18,131,137,82,85,48,170,193,106,9,121,129\")"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "[43,202,221,32,196,29,62,167,241,142,167,97,221,29,88,13,131,54,205,107,181,42,72,191,117,151,51,193,233,167,207,145]",
              "sol": "stringToBytes32(\"43,202,221,32,196,29,62,167,241,142,167,97,221,29,88,13,131,54,205,107,181,42,72,191,117,151,51,193,233,167,207,145\")"
            },
            {
              "js": "[255,47,214,51,35,138,23,42,255,38,171,49,205,76,5,110,216,11,114,252,63,249,172,93,177,162,240,96,156,107,211,220]",
              "sol": "stringToBytes32(\"255,47,214,51,35,138,23,42,255,38,171,49,205,76,5,110,216,11,114,252,63,249,172,93,177,162,240,96,156,107,211,220\")"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "[26,9,106,39,99,64,62,52,194,120,231,116,212,210,239,114,189,167,183,233,18,131,137,82,85,48,170,193,106,9,121,129]",
                "sol": "stringToBytes32(\"26,9,106,39,99,64,62,52,194,120,231,116,212,210,239,114,189,167,183,233,18,131,137,82,85,48,170,193,106,9,121,129\")"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "[43,202,221,32,196,29,62,167,241,142,167,97,221,29,88,13,131,54,205,107,181,42,72,191,117,151,51,193,233,167,207,145]",
                "sol": "stringToBytes32(\"43,202,221,32,196,29,62,167,241,142,167,97,221,29,88,13,131,54,205,107,181,42,72,191,117,151,51,193,233,167,207,145\")"
              },
              {
                "js": "[255,47,214,51,35,138,23,42,255,38,171,49,205,76,5,110,216,11,114,252,63,249,172,93,177,162,240,96,156,107,211,220]",
                "sol": "stringToBytes32(\"255,47,214,51,35,138,23,42,255,38,171,49,205,76,5,110,216,11,114,252,63,249,172,93,177,162,240,96,156,107,211,220\")"
              },
              {
                "js": "82",
                "sol": "82"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "[26,9,106,39,99,64,62,52,194,120,231,116,212,210,239,114,189,167,183,233,18,131,137,82,85,48,170,193,106,9,121,129]",
                "sol": "stringToBytes32(\"26,9,106,39,99,64,62,52,194,120,231,116,212,210,239,114,189,167,183,233,18,131,137,82,85,48,170,193,106,9,121,129\")"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "[43,202,221,32,196,29,62,167,241,142,167,97,221,29,88,13,131,54,205,107,181,42,72,191,117,151,51,193,233,167,207,145]",
                "sol": "stringToBytes32(\"43,202,221,32,196,29,62,167,241,142,167,97,221,29,88,13,131,54,205,107,181,42,72,191,117,151,51,193,233,167,207,145\")"
              },
              {
                "js": "[255,47,214,51,35,138,23,42,255,38,171,49,205,76,5,110,216,11,114,252,63,249,172,93,177,162,240,96,156,107,211,220]",
                "sol": "stringToBytes32(\"255,47,214,51,35,138,23,42,255,38,171,49,205,76,5,110,216,11,114,252,63,249,172,93,177,162,240,96,156,107,211,220\")"
              },
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.672ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[4,1,83,21,255,99,5]",
              "sol": "[uint256(4),uint256(1),uint256(83),uint256(21),uint256(255),uint256(99),uint256(5)]"
            },
            {
              "js": "[[40,155,45,200,234,21,163,31,16,224,141,63,164,254,206,242,128,16,181,202,157,44,6,85,117,153,45,222,129,15,88,215],[88,50,225,175,73,225,197,157,15,95,38,106,188,179,235,129,28,89,4,191,221,45,67,244,217,220,234,2,21,102,70,120],[119,171,28,192,73,16,169,67,223,189,239,220,54,191,61,27,213,212,189,5,53,121,229,206,181,42,184,207,143,55,188,226],[252,93,255,255,205,197,68,222,74,166,190,208,209,85,12,69,36,225,198,100,163,215,47,208,247,206,215,47,184,147,239,161],[68,88,133,2,152,9,8,111,47,94,213,190,115,163,85,23,64,116,19,142,112,243,59,85,55,250,243,240,70,90,8,185],[33,255,224,124,248,132,36,224,20,163,75,121,114,125,17,115,31,67,29,133,24,139,82,157,133,237,126,144,105,176,82,250],[9,157,85,125,9,135,243,238,106,114,61,205,97,145,249,137,82,5,145,181,34,58,238,124,173,151,221,177,126,104,143,36]]",
              "sol": "[bytes32(stringToBytes32(\"40,155,45,200,234,21,163,31,16,224,141,63,164,254,206,242,128,16,181,202,157,44,6,85,117,153,45,222,129,15,88,215\")),bytes32(stringToBytes32(\"88,50,225,175,73,225,197,157,15,95,38,106,188,179,235,129,28,89,4,191,221,45,67,244,217,220,234,2,21,102,70,120\")),bytes32(stringToBytes32(\"119,171,28,192,73,16,169,67,223,189,239,220,54,191,61,27,213,212,189,5,53,121,229,206,181,42,184,207,143,55,188,226\")),bytes32(stringToBytes32(\"252,93,255,255,205,197,68,222,74,166,190,208,209,85,12,69,36,225,198,100,163,215,47,208,247,206,215,47,184,147,239,161\")),bytes32(stringToBytes32(\"68,88,133,2,152,9,8,111,47,94,213,190,115,163,85,23,64,116,19,142,112,243,59,85,55,250,243,240,70,90,8,185\")),bytes32(stringToBytes32(\"33,255,224,124,248,132,36,224,20,163,75,121,114,125,17,115,31,67,29,133,24,139,82,157,133,237,126,144,105,176,82,250\")),bytes32(stringToBytes32(\"9,157,85,125,9,135,243,238,106,114,61,205,97,145,249,137,82,5,145,181,34,58,238,124,173,151,221,177,126,104,143,36\"))]"
            },
            {
              "js": "[3,83,160,83,100,99,2]",
              "sol": "[uint8(3),uint8(83),uint8(160),uint8(83),uint8(100),uint8(99),uint8(2)]"
            },
            {
              "js": "[[17,44,80,97,62,210,216,153,238,239,252,8,209,189,106,231,126,128,143,93,157,239,46,160,85,24,59,195,64,169,226,46],[171,133,107,25,201,163,49,89,154,25,156,91,30,143,97,151,103,76,176,80,184,203,9,248,206,247,91,148,213,30,164,204],[45,158,85,175,8,132,198,96,147,165,240,53,10,154,126,122,44,44,114,254,227,195,126,108,12,116,232,20,56,67,242,99],[173,140,61,56,66,190,113,36,25,227,160,160,36,71,10,34,173,52,78,25,136,64,44,36,194,198,244,223,75,85,14,231],[220,158,61,31,24,71,251,120,218,34,154,150,135,120,119,82,24,230,177,95,58,180,188,86,47,79,73,205,188,73,65,249],[59,172,40,11,252,25,173,155,53,68,244,232,157,156,9,165,2,35,129,72,99,247,26,69,215,132,237,61,214,27,51,195],[41,64,64,118,140,17,175,251,72,242,196,204,90,65,208,127,31,43,83,60,23,115,206,194,37,8,97,135,176,68,114,78]]",
              "sol": "[bytes32(stringToBytes32(\"17,44,80,97,62,210,216,153,238,239,252,8,209,189,106,231,126,128,143,93,157,239,46,160,85,24,59,195,64,169,226,46\")),bytes32(stringToBytes32(\"171,133,107,25,201,163,49,89,154,25,156,91,30,143,97,151,103,76,176,80,184,203,9,248,206,247,91,148,213,30,164,204\")),bytes32(stringToBytes32(\"45,158,85,175,8,132,198,96,147,165,240,53,10,154,126,122,44,44,114,254,227,195,126,108,12,116,232,20,56,67,242,99\")),bytes32(stringToBytes32(\"173,140,61,56,66,190,113,36,25,227,160,160,36,71,10,34,173,52,78,25,136,64,44,36,194,198,244,223,75,85,14,231\")),bytes32(stringToBytes32(\"220,158,61,31,24,71,251,120,218,34,154,150,135,120,119,82,24,230,177,95,58,180,188,86,47,79,73,205,188,73,65,249\")),bytes32(stringToBytes32(\"59,172,40,11,252,25,173,155,53,68,244,232,157,156,9,165,2,35,129,72,99,247,26,69,215,132,237,61,214,27,51,195\")),bytes32(stringToBytes32(\"41,64,64,118,140,17,175,251,72,242,196,204,90,65,208,127,31,43,83,60,23,115,206,194,37,8,97,135,176,68,114,78\"))]"
            },
            {
              "js": "[[219,123,106,151,73,161,208,156,23,165,233,43,155,217,207,80,134,56,137,147,119,229,196,194,31,200,170,234,210,29,122,50],[137,134,34,239,112,1,167,191,163,243,219,213,218,110,60,240,250,139,124,113,103,58,73,137,123,84,229,150,21,91,122,5],[118,230,51,172,228,61,82,114,11,233,160,113,234,237,13,84,182,133,80,49,247,194,146,228,233,109,95,42,255,196,74,41],[170,74,60,6,253,95,167,46,209,33,235,23,81,61,50,144,196,62,137,212,206,170,183,202,157,85,3,199,126,14,69,179],[130,110,14,120,83,188,208,87,187,187,58,106,140,26,49,100,252,187,148,25,136,43,28,21,8,145,169,126,155,211,36,128],[41,63,215,136,128,160,31,118,184,113,178,133,10,198,124,96,83,217,190,182,219,234,255,171,182,185,246,232,81,76,123,92],[186,46,152,91,18,182,18,239,32,131,49,219,144,213,55,42,112,159,252,9,23,106,20,113,164,149,88,77,75,11,52,185]]",
              "sol": "[bytes32(stringToBytes32(\"219,123,106,151,73,161,208,156,23,165,233,43,155,217,207,80,134,56,137,147,119,229,196,194,31,200,170,234,210,29,122,50\")),bytes32(stringToBytes32(\"137,134,34,239,112,1,167,191,163,243,219,213,218,110,60,240,250,139,124,113,103,58,73,137,123,84,229,150,21,91,122,5\")),bytes32(stringToBytes32(\"118,230,51,172,228,61,82,114,11,233,160,113,234,237,13,84,182,133,80,49,247,194,146,228,233,109,95,42,255,196,74,41\")),bytes32(stringToBytes32(\"170,74,60,6,253,95,167,46,209,33,235,23,81,61,50,144,196,62,137,212,206,170,183,202,157,85,3,199,126,14,69,179\")),bytes32(stringToBytes32(\"130,110,14,120,83,188,208,87,187,187,58,106,140,26,49,100,252,187,148,25,136,43,28,21,8,145,169,126,155,211,36,128\")),bytes32(stringToBytes32(\"41,63,215,136,128,160,31,118,184,113,178,133,10,198,124,96,83,217,190,182,219,234,255,171,182,185,246,232,81,76,123,92\")),bytes32(stringToBytes32(\"186,46,152,91,18,182,18,239,32,131,49,219,144,213,55,42,112,159,252,9,23,106,20,113,164,149,88,77,75,11,52,185\"))]"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[4,1,83,21,255,99,5]",
                "sol": "[uint256(4),uint256(1),uint256(83),uint256(21),uint256(255),uint256(99),uint256(5)]"
              },
              {
                "js": "[[40,155,45,200,234,21,163,31,16,224,141,63,164,254,206,242,128,16,181,202,157,44,6,85,117,153,45,222,129,15,88,215],[88,50,225,175,73,225,197,157,15,95,38,106,188,179,235,129,28,89,4,191,221,45,67,244,217,220,234,2,21,102,70,120],[119,171,28,192,73,16,169,67,223,189,239,220,54,191,61,27,213,212,189,5,53,121,229,206,181,42,184,207,143,55,188,226],[252,93,255,255,205,197,68,222,74,166,190,208,209,85,12,69,36,225,198,100,163,215,47,208,247,206,215,47,184,147,239,161],[68,88,133,2,152,9,8,111,47,94,213,190,115,163,85,23,64,116,19,142,112,243,59,85,55,250,243,240,70,90,8,185],[33,255,224,124,248,132,36,224,20,163,75,121,114,125,17,115,31,67,29,133,24,139,82,157,133,237,126,144,105,176,82,250],[9,157,85,125,9,135,243,238,106,114,61,205,97,145,249,137,82,5,145,181,34,58,238,124,173,151,221,177,126,104,143,36]]",
                "sol": "[bytes32(stringToBytes32(\"40,155,45,200,234,21,163,31,16,224,141,63,164,254,206,242,128,16,181,202,157,44,6,85,117,153,45,222,129,15,88,215\")),bytes32(stringToBytes32(\"88,50,225,175,73,225,197,157,15,95,38,106,188,179,235,129,28,89,4,191,221,45,67,244,217,220,234,2,21,102,70,120\")),bytes32(stringToBytes32(\"119,171,28,192,73,16,169,67,223,189,239,220,54,191,61,27,213,212,189,5,53,121,229,206,181,42,184,207,143,55,188,226\")),bytes32(stringToBytes32(\"252,93,255,255,205,197,68,222,74,166,190,208,209,85,12,69,36,225,198,100,163,215,47,208,247,206,215,47,184,147,239,161\")),bytes32(stringToBytes32(\"68,88,133,2,152,9,8,111,47,94,213,190,115,163,85,23,64,116,19,142,112,243,59,85,55,250,243,240,70,90,8,185\")),bytes32(stringToBytes32(\"33,255,224,124,248,132,36,224,20,163,75,121,114,125,17,115,31,67,29,133,24,139,82,157,133,237,126,144,105,176,82,250\")),bytes32(stringToBytes32(\"9,157,85,125,9,135,243,238,106,114,61,205,97,145,249,137,82,5,145,181,34,58,238,124,173,151,221,177,126,104,143,36\"))]"
              },
              {
                "js": "[3,83,160,83,100,99,2]",
                "sol": "[uint8(3),uint8(83),uint8(160),uint8(83),uint8(100),uint8(99),uint8(2)]"
              },
              {
                "js": "[[17,44,80,97,62,210,216,153,238,239,252,8,209,189,106,231,126,128,143,93,157,239,46,160,85,24,59,195,64,169,226,46],[171,133,107,25,201,163,49,89,154,25,156,91,30,143,97,151,103,76,176,80,184,203,9,248,206,247,91,148,213,30,164,204],[45,158,85,175,8,132,198,96,147,165,240,53,10,154,126,122,44,44,114,254,227,195,126,108,12,116,232,20,56,67,242,99],[173,140,61,56,66,190,113,36,25,227,160,160,36,71,10,34,173,52,78,25,136,64,44,36,194,198,244,223,75,85,14,231],[220,158,61,31,24,71,251,120,218,34,154,150,135,120,119,82,24,230,177,95,58,180,188,86,47,79,73,205,188,73,65,249],[59,172,40,11,252,25,173,155,53,68,244,232,157,156,9,165,2,35,129,72,99,247,26,69,215,132,237,61,214,27,51,195],[41,64,64,118,140,17,175,251,72,242,196,204,90,65,208,127,31,43,83,60,23,115,206,194,37,8,97,135,176,68,114,78]]",
                "sol": "[bytes32(stringToBytes32(\"17,44,80,97,62,210,216,153,238,239,252,8,209,189,106,231,126,128,143,93,157,239,46,160,85,24,59,195,64,169,226,46\")),bytes32(stringToBytes32(\"171,133,107,25,201,163,49,89,154,25,156,91,30,143,97,151,103,76,176,80,184,203,9,248,206,247,91,148,213,30,164,204\")),bytes32(stringToBytes32(\"45,158,85,175,8,132,198,96,147,165,240,53,10,154,126,122,44,44,114,254,227,195,126,108,12,116,232,20,56,67,242,99\")),bytes32(stringToBytes32(\"173,140,61,56,66,190,113,36,25,227,160,160,36,71,10,34,173,52,78,25,136,64,44,36,194,198,244,223,75,85,14,231\")),bytes32(stringToBytes32(\"220,158,61,31,24,71,251,120,218,34,154,150,135,120,119,82,24,230,177,95,58,180,188,86,47,79,73,205,188,73,65,249\")),bytes32(stringToBytes32(\"59,172,40,11,252,25,173,155,53,68,244,232,157,156,9,165,2,35,129,72,99,247,26,69,215,132,237,61,214,27,51,195\")),bytes32(stringToBytes32(\"41,64,64,118,140,17,175,251,72,242,196,204,90,65,208,127,31,43,83,60,23,115,206,194,37,8,97,135,176,68,114,78\"))]"
              },
              {
                "js": "[[219,123,106,151,73,161,208,156,23,165,233,43,155,217,207,80,134,56,137,147,119,229,196,194,31,200,170,234,210,29,122,50],[137,134,34,239,112,1,167,191,163,243,219,213,218,110,60,240,250,139,124,113,103,58,73,137,123,84,229,150,21,91,122,5],[118,230,51,172,228,61,82,114,11,233,160,113,234,237,13,84,182,133,80,49,247,194,146,228,233,109,95,42,255,196,74,41],[170,74,60,6,253,95,167,46,209,33,235,23,81,61,50,144,196,62,137,212,206,170,183,202,157,85,3,199,126,14,69,179],[130,110,14,120,83,188,208,87,187,187,58,106,140,26,49,100,252,187,148,25,136,43,28,21,8,145,169,126,155,211,36,128],[41,63,215,136,128,160,31,118,184,113,178,133,10,198,124,96,83,217,190,182,219,234,255,171,182,185,246,232,81,76,123,92],[186,46,152,91,18,182,18,239,32,131,49,219,144,213,55,42,112,159,252,9,23,106,20,113,164,149,88,77,75,11,52,185]]",
                "sol": "[bytes32(stringToBytes32(\"219,123,106,151,73,161,208,156,23,165,233,43,155,217,207,80,134,56,137,147,119,229,196,194,31,200,170,234,210,29,122,50\")),bytes32(stringToBytes32(\"137,134,34,239,112,1,167,191,163,243,219,213,218,110,60,240,250,139,124,113,103,58,73,137,123,84,229,150,21,91,122,5\")),bytes32(stringToBytes32(\"118,230,51,172,228,61,82,114,11,233,160,113,234,237,13,84,182,133,80,49,247,194,146,228,233,109,95,42,255,196,74,41\")),bytes32(stringToBytes32(\"170,74,60,6,253,95,167,46,209,33,235,23,81,61,50,144,196,62,137,212,206,170,183,202,157,85,3,199,126,14,69,179\")),bytes32(stringToBytes32(\"130,110,14,120,83,188,208,87,187,187,58,106,140,26,49,100,252,187,148,25,136,43,28,21,8,145,169,126,155,211,36,128\")),bytes32(stringToBytes32(\"41,63,215,136,128,160,31,118,184,113,178,133,10,198,124,96,83,217,190,182,219,234,255,171,182,185,246,232,81,76,123,92\")),bytes32(stringToBytes32(\"186,46,152,91,18,182,18,239,32,131,49,219,144,213,55,42,112,159,252,9,23,106,20,113,164,149,88,77,75,11,52,185\"))]"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[18,10001,3,160,15,21,81,159]",
                "sol": "[159,1338,19,999,10,1000,17,1337]"
              },
              {
                "js": "[[40,155,45,200,234,21,163,31,16,224,141,63,164,254,206,242,128,16,181,202,157,44,6,85,117,153,45,222,129,15,88,215],[88,50,225,175,73,225,197,157,15,95,38,106,188,179,235,129,28,89,4,191,221,45,67,244,217,220,234,2,21,102,70,120],[119,171,28,192,73,16,169,67,223,189,239,220,54,191,61,27,213,212,189,5,53,121,229,206,181,42,184,207,143,55,188,226],[252,93,255,255,205,197,68,222,74,166,190,208,209,85,12,69,36,225,198,100,163,215,47,208,247,206,215,47,184,147,239,161],[68,88,133,2,152,9,8,111,47,94,213,190,115,163,85,23,64,116,19,142,112,243,59,85,55,250,243,240,70,90,8,185],[33,255,224,124,248,132,36,224,20,163,75,121,114,125,17,115,31,67,29,133,24,139,82,157,133,237,126,144,105,176,82,250],[9,157,85,125,9,135,243,238,106,114,61,205,97,145,249,137,82,5,145,181,34,58,238,124,173,151,221,177,126,104,143,36]]",
                "sol": "[bytes32(stringToBytes32(\"40,155,45,200,234,21,163,31,16,224,141,63,164,254,206,242,128,16,181,202,157,44,6,85,117,153,45,222,129,15,88,215\")),bytes32(stringToBytes32(\"88,50,225,175,73,225,197,157,15,95,38,106,188,179,235,129,28,89,4,191,221,45,67,244,217,220,234,2,21,102,70,120\")),bytes32(stringToBytes32(\"119,171,28,192,73,16,169,67,223,189,239,220,54,191,61,27,213,212,189,5,53,121,229,206,181,42,184,207,143,55,188,226\")),bytes32(stringToBytes32(\"252,93,255,255,205,197,68,222,74,166,190,208,209,85,12,69,36,225,198,100,163,215,47,208,247,206,215,47,184,147,239,161\")),bytes32(stringToBytes32(\"68,88,133,2,152,9,8,111,47,94,213,190,115,163,85,23,64,116,19,142,112,243,59,85,55,250,243,240,70,90,8,185\")),bytes32(stringToBytes32(\"33,255,224,124,248,132,36,224,20,163,75,121,114,125,17,115,31,67,29,133,24,139,82,157,133,237,126,144,105,176,82,250\")),bytes32(stringToBytes32(\"9,157,85,125,9,135,243,238,106,114,61,205,97,145,249,137,82,5,145,181,34,58,238,124,173,151,221,177,126,104,143,36\"))]"
              },
              {
                "js": "[3,83,160,83,100,99,2]",
                "sol": "[uint8(3),uint8(83),uint8(160),uint8(83),uint8(100),uint8(99),uint8(2)]"
              },
              {
                "js": "[[17,44,80,97,62,210,216,153,238,239,252,8,209,189,106,231,126,128,143,93,157,239,46,160,85,24,59,195,64,169,226,46],[171,133,107,25,201,163,49,89,154,25,156,91,30,143,97,151,103,76,176,80,184,203,9,248,206,247,91,148,213,30,164,204],[45,158,85,175,8,132,198,96,147,165,240,53,10,154,126,122,44,44,114,254,227,195,126,108,12,116,232,20,56,67,242,99],[173,140,61,56,66,190,113,36,25,227,160,160,36,71,10,34,173,52,78,25,136,64,44,36,194,198,244,223,75,85,14,231],[220,158,61,31,24,71,251,120,218,34,154,150,135,120,119,82,24,230,177,95,58,180,188,86,47,79,73,205,188,73,65,249],[59,172,40,11,252,25,173,155,53,68,244,232,157,156,9,165,2,35,129,72,99,247,26,69,215,132,237,61,214,27,51,195],[41,64,64,118,140,17,175,251,72,242,196,204,90,65,208,127,31,43,83,60,23,115,206,194,37,8,97,135,176,68,114,78]]",
                "sol": "[bytes32(stringToBytes32(\"17,44,80,97,62,210,216,153,238,239,252,8,209,189,106,231,126,128,143,93,157,239,46,160,85,24,59,195,64,169,226,46\")),bytes32(stringToBytes32(\"171,133,107,25,201,163,49,89,154,25,156,91,30,143,97,151,103,76,176,80,184,203,9,248,206,247,91,148,213,30,164,204\")),bytes32(stringToBytes32(\"45,158,85,175,8,132,198,96,147,165,240,53,10,154,126,122,44,44,114,254,227,195,126,108,12,116,232,20,56,67,242,99\")),bytes32(stringToBytes32(\"173,140,61,56,66,190,113,36,25,227,160,160,36,71,10,34,173,52,78,25,136,64,44,36,194,198,244,223,75,85,14,231\")),bytes32(stringToBytes32(\"220,158,61,31,24,71,251,120,218,34,154,150,135,120,119,82,24,230,177,95,58,180,188,86,47,79,73,205,188,73,65,249\")),bytes32(stringToBytes32(\"59,172,40,11,252,25,173,155,53,68,244,232,157,156,9,165,2,35,129,72,99,247,26,69,215,132,237,61,214,27,51,195\")),bytes32(stringToBytes32(\"41,64,64,118,140,17,175,251,72,242,196,204,90,65,208,127,31,43,83,60,23,115,206,194,37,8,97,135,176,68,114,78\"))]"
              },
              {
                "js": "[[219,123,106,151,73,161,208,156,23,165,233,43,155,217,207,80,134,56,137,147,119,229,196,194,31,200,170,234,210,29,122,50],[137,134,34,239,112,1,167,191,163,243,219,213,218,110,60,240,250,139,124,113,103,58,73,137,123,84,229,150,21,91,122,5],[118,230,51,172,228,61,82,114,11,233,160,113,234,237,13,84,182,133,80,49,247,194,146,228,233,109,95,42,255,196,74,41],[170,74,60,6,253,95,167,46,209,33,235,23,81,61,50,144,196,62,137,212,206,170,183,202,157,85,3,199,126,14,69,179],[130,110,14,120,83,188,208,87,187,187,58,106,140,26,49,100,252,187,148,25,136,43,28,21,8,145,169,126,155,211,36,128],[41,63,215,136,128,160,31,118,184,113,178,133,10,198,124,96,83,217,190,182,219,234,255,171,182,185,246,232,81,76,123,92],[186,46,152,91,18,182,18,239,32,131,49,219,144,213,55,42,112,159,252,9,23,106,20,113,164,149,88,77,75,11,52,185]]",
                "sol": "[bytes32(stringToBytes32(\"219,123,106,151,73,161,208,156,23,165,233,43,155,217,207,80,134,56,137,147,119,229,196,194,31,200,170,234,210,29,122,50\")),bytes32(stringToBytes32(\"137,134,34,239,112,1,167,191,163,243,219,213,218,110,60,240,250,139,124,113,103,58,73,137,123,84,229,150,21,91,122,5\")),bytes32(stringToBytes32(\"118,230,51,172,228,61,82,114,11,233,160,113,234,237,13,84,182,133,80,49,247,194,146,228,233,109,95,42,255,196,74,41\")),bytes32(stringToBytes32(\"170,74,60,6,253,95,167,46,209,33,235,23,81,61,50,144,196,62,137,212,206,170,183,202,157,85,3,199,126,14,69,179\")),bytes32(stringToBytes32(\"130,110,14,120,83,188,208,87,187,187,58,106,140,26,49,100,252,187,148,25,136,43,28,21,8,145,169,126,155,211,36,128\")),bytes32(stringToBytes32(\"41,63,215,136,128,160,31,118,184,113,178,133,10,198,124,96,83,217,190,182,219,234,255,171,182,185,246,232,81,76,123,92\")),bytes32(stringToBytes32(\"186,46,152,91,18,182,18,239,32,131,49,219,144,213,55,42,112,159,252,9,23,106,20,113,164,149,88,77,75,11,52,185\"))]"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[83,1,100,257,9,159,11,159]",
                "sol": "[1337,1336,159,1337,3,20,2,21]"
              },
              {
                "js": "[[40,155,45,200,234,21,163,31,16,224,141,63,164,254,206,242,128,16,181,202,157,44,6,85,117,153,45,222,129,15,88,215],[88,50,225,175,73,225,197,157,15,95,38,106,188,179,235,129,28,89,4,191,221,45,67,244,217,220,234,2,21,102,70,120],[119,171,28,192,73,16,169,67,223,189,239,220,54,191,61,27,213,212,189,5,53,121,229,206,181,42,184,207,143,55,188,226],[252,93,255,255,205,197,68,222,74,166,190,208,209,85,12,69,36,225,198,100,163,215,47,208,247,206,215,47,184,147,239,161],[68,88,133,2,152,9,8,111,47,94,213,190,115,163,85,23,64,116,19,142,112,243,59,85,55,250,243,240,70,90,8,185],[33,255,224,124,248,132,36,224,20,163,75,121,114,125,17,115,31,67,29,133,24,139,82,157,133,237,126,144,105,176,82,250],[9,157,85,125,9,135,243,238,106,114,61,205,97,145,249,137,82,5,145,181,34,58,238,124,173,151,221,177,126,104,143,36]]",
                "sol": "[bytes32(stringToBytes32(\"40,155,45,200,234,21,163,31,16,224,141,63,164,254,206,242,128,16,181,202,157,44,6,85,117,153,45,222,129,15,88,215\")),bytes32(stringToBytes32(\"88,50,225,175,73,225,197,157,15,95,38,106,188,179,235,129,28,89,4,191,221,45,67,244,217,220,234,2,21,102,70,120\")),bytes32(stringToBytes32(\"119,171,28,192,73,16,169,67,223,189,239,220,54,191,61,27,213,212,189,5,53,121,229,206,181,42,184,207,143,55,188,226\")),bytes32(stringToBytes32(\"252,93,255,255,205,197,68,222,74,166,190,208,209,85,12,69,36,225,198,100,163,215,47,208,247,206,215,47,184,147,239,161\")),bytes32(stringToBytes32(\"68,88,133,2,152,9,8,111,47,94,213,190,115,163,85,23,64,116,19,142,112,243,59,85,55,250,243,240,70,90,8,185\")),bytes32(stringToBytes32(\"33,255,224,124,248,132,36,224,20,163,75,121,114,125,17,115,31,67,29,133,24,139,82,157,133,237,126,144,105,176,82,250\")),bytes32(stringToBytes32(\"9,157,85,125,9,135,243,238,106,114,61,205,97,145,249,137,82,5,145,181,34,58,238,124,173,151,221,177,126,104,143,36\"))]"
              },
              {
                "js": "[3,83,160,83,100,99,2]",
                "sol": "[uint8(3),uint8(83),uint8(160),uint8(83),uint8(100),uint8(99),uint8(2)]"
              },
              {
                "js": "[[17,44,80,97,62,210,216,153,238,239,252,8,209,189,106,231,126,128,143,93,157,239,46,160,85,24,59,195,64,169,226,46],[171,133,107,25,201,163,49,89,154,25,156,91,30,143,97,151,103,76,176,80,184,203,9,248,206,247,91,148,213,30,164,204],[45,158,85,175,8,132,198,96,147,165,240,53,10,154,126,122,44,44,114,254,227,195,126,108,12,116,232,20,56,67,242,99],[173,140,61,56,66,190,113,36,25,227,160,160,36,71,10,34,173,52,78,25,136,64,44,36,194,198,244,223,75,85,14,231],[220,158,61,31,24,71,251,120,218,34,154,150,135,120,119,82,24,230,177,95,58,180,188,86,47,79,73,205,188,73,65,249],[59,172,40,11,252,25,173,155,53,68,244,232,157,156,9,165,2,35,129,72,99,247,26,69,215,132,237,61,214,27,51,195],[41,64,64,118,140,17,175,251,72,242,196,204,90,65,208,127,31,43,83,60,23,115,206,194,37,8,97,135,176,68,114,78]]",
                "sol": "[bytes32(stringToBytes32(\"17,44,80,97,62,210,216,153,238,239,252,8,209,189,106,231,126,128,143,93,157,239,46,160,85,24,59,195,64,169,226,46\")),bytes32(stringToBytes32(\"171,133,107,25,201,163,49,89,154,25,156,91,30,143,97,151,103,76,176,80,184,203,9,248,206,247,91,148,213,30,164,204\")),bytes32(stringToBytes32(\"45,158,85,175,8,132,198,96,147,165,240,53,10,154,126,122,44,44,114,254,227,195,126,108,12,116,232,20,56,67,242,99\")),bytes32(stringToBytes32(\"173,140,61,56,66,190,113,36,25,227,160,160,36,71,10,34,173,52,78,25,136,64,44,36,194,198,244,223,75,85,14,231\")),bytes32(stringToBytes32(\"220,158,61,31,24,71,251,120,218,34,154,150,135,120,119,82,24,230,177,95,58,180,188,86,47,79,73,205,188,73,65,249\")),bytes32(stringToBytes32(\"59,172,40,11,252,25,173,155,53,68,244,232,157,156,9,165,2,35,129,72,99,247,26,69,215,132,237,61,214,27,51,195\")),bytes32(stringToBytes32(\"41,64,64,118,140,17,175,251,72,242,196,204,90,65,208,127,31,43,83,60,23,115,206,194,37,8,97,135,176,68,114,78\"))]"
              },
              {
                "js": "[[219,123,106,151,73,161,208,156,23,165,233,43,155,217,207,80,134,56,137,147,119,229,196,194,31,200,170,234,210,29,122,50],[137,134,34,239,112,1,167,191,163,243,219,213,218,110,60,240,250,139,124,113,103,58,73,137,123,84,229,150,21,91,122,5],[118,230,51,172,228,61,82,114,11,233,160,113,234,237,13,84,182,133,80,49,247,194,146,228,233,109,95,42,255,196,74,41],[170,74,60,6,253,95,167,46,209,33,235,23,81,61,50,144,196,62,137,212,206,170,183,202,157,85,3,199,126,14,69,179],[130,110,14,120,83,188,208,87,187,187,58,106,140,26,49,100,252,187,148,25,136,43,28,21,8,145,169,126,155,211,36,128],[41,63,215,136,128,160,31,118,184,113,178,133,10,198,124,96,83,217,190,182,219,234,255,171,182,185,246,232,81,76,123,92],[186,46,152,91,18,182,18,239,32,131,49,219,144,213,55,42,112,159,252,9,23,106,20,113,164,149,88,77,75,11,52,185]]",
                "sol": "[bytes32(stringToBytes32(\"219,123,106,151,73,161,208,156,23,165,233,43,155,217,207,80,134,56,137,147,119,229,196,194,31,200,170,234,210,29,122,50\")),bytes32(stringToBytes32(\"137,134,34,239,112,1,167,191,163,243,219,213,218,110,60,240,250,139,124,113,103,58,73,137,123,84,229,150,21,91,122,5\")),bytes32(stringToBytes32(\"118,230,51,172,228,61,82,114,11,233,160,113,234,237,13,84,182,133,80,49,247,194,146,228,233,109,95,42,255,196,74,41\")),bytes32(stringToBytes32(\"170,74,60,6,253,95,167,46,209,33,235,23,81,61,50,144,196,62,137,212,206,170,183,202,157,85,3,199,126,14,69,179\")),bytes32(stringToBytes32(\"130,110,14,120,83,188,208,87,187,187,58,106,140,26,49,100,252,187,148,25,136,43,28,21,8,145,169,126,155,211,36,128\")),bytes32(stringToBytes32(\"41,63,215,136,128,160,31,118,184,113,178,133,10,198,124,96,83,217,190,182,219,234,255,171,182,185,246,232,81,76,123,92\")),bytes32(stringToBytes32(\"186,46,152,91,18,182,18,239,32,131,49,219,144,213,55,42,112,159,252,9,23,106,20,113,164,149,88,77,75,11,52,185\"))]"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[10,5,159,1338,2,10,3,1338]",
                "sol": "[159,99,256,82,2,81,14,10001]"
              },
              {
                "js": "[[40,155,45,200,234,21,163,31,16,224,141,63,164,254,206,242,128,16,181,202,157,44,6,85,117,153,45,222,129,15,88,215],[88,50,225,175,73,225,197,157,15,95,38,106,188,179,235,129,28,89,4,191,221,45,67,244,217,220,234,2,21,102,70,120],[119,171,28,192,73,16,169,67,223,189,239,220,54,191,61,27,213,212,189,5,53,121,229,206,181,42,184,207,143,55,188,226],[252,93,255,255,205,197,68,222,74,166,190,208,209,85,12,69,36,225,198,100,163,215,47,208,247,206,215,47,184,147,239,161],[68,88,133,2,152,9,8,111,47,94,213,190,115,163,85,23,64,116,19,142,112,243,59,85,55,250,243,240,70,90,8,185],[33,255,224,124,248,132,36,224,20,163,75,121,114,125,17,115,31,67,29,133,24,139,82,157,133,237,126,144,105,176,82,250],[9,157,85,125,9,135,243,238,106,114,61,205,97,145,249,137,82,5,145,181,34,58,238,124,173,151,221,177,126,104,143,36]]",
                "sol": "[bytes32(stringToBytes32(\"40,155,45,200,234,21,163,31,16,224,141,63,164,254,206,242,128,16,181,202,157,44,6,85,117,153,45,222,129,15,88,215\")),bytes32(stringToBytes32(\"88,50,225,175,73,225,197,157,15,95,38,106,188,179,235,129,28,89,4,191,221,45,67,244,217,220,234,2,21,102,70,120\")),bytes32(stringToBytes32(\"119,171,28,192,73,16,169,67,223,189,239,220,54,191,61,27,213,212,189,5,53,121,229,206,181,42,184,207,143,55,188,226\")),bytes32(stringToBytes32(\"252,93,255,255,205,197,68,222,74,166,190,208,209,85,12,69,36,225,198,100,163,215,47,208,247,206,215,47,184,147,239,161\")),bytes32(stringToBytes32(\"68,88,133,2,152,9,8,111,47,94,213,190,115,163,85,23,64,116,19,142,112,243,59,85,55,250,243,240,70,90,8,185\")),bytes32(stringToBytes32(\"33,255,224,124,248,132,36,224,20,163,75,121,114,125,17,115,31,67,29,133,24,139,82,157,133,237,126,144,105,176,82,250\")),bytes32(stringToBytes32(\"9,157,85,125,9,135,243,238,106,114,61,205,97,145,249,137,82,5,145,181,34,58,238,124,173,151,221,177,126,104,143,36\"))]"
              },
              {
                "js": "[3,83,160,83,100,99,2]",
                "sol": "[uint8(3),uint8(83),uint8(160),uint8(83),uint8(100),uint8(99),uint8(2)]"
              },
              {
                "js": "[[17,44,80,97,62,210,216,153,238,239,252,8,209,189,106,231,126,128,143,93,157,239,46,160,85,24,59,195,64,169,226,46],[171,133,107,25,201,163,49,89,154,25,156,91,30,143,97,151,103,76,176,80,184,203,9,248,206,247,91,148,213,30,164,204],[45,158,85,175,8,132,198,96,147,165,240,53,10,154,126,122,44,44,114,254,227,195,126,108,12,116,232,20,56,67,242,99],[173,140,61,56,66,190,113,36,25,227,160,160,36,71,10,34,173,52,78,25,136,64,44,36,194,198,244,223,75,85,14,231],[220,158,61,31,24,71,251,120,218,34,154,150,135,120,119,82,24,230,177,95,58,180,188,86,47,79,73,205,188,73,65,249],[59,172,40,11,252,25,173,155,53,68,244,232,157,156,9,165,2,35,129,72,99,247,26,69,215,132,237,61,214,27,51,195],[41,64,64,118,140,17,175,251,72,242,196,204,90,65,208,127,31,43,83,60,23,115,206,194,37,8,97,135,176,68,114,78]]",
                "sol": "[bytes32(stringToBytes32(\"17,44,80,97,62,210,216,153,238,239,252,8,209,189,106,231,126,128,143,93,157,239,46,160,85,24,59,195,64,169,226,46\")),bytes32(stringToBytes32(\"171,133,107,25,201,163,49,89,154,25,156,91,30,143,97,151,103,76,176,80,184,203,9,248,206,247,91,148,213,30,164,204\")),bytes32(stringToBytes32(\"45,158,85,175,8,132,198,96,147,165,240,53,10,154,126,122,44,44,114,254,227,195,126,108,12,116,232,20,56,67,242,99\")),bytes32(stringToBytes32(\"173,140,61,56,66,190,113,36,25,227,160,160,36,71,10,34,173,52,78,25,136,64,44,36,194,198,244,223,75,85,14,231\")),bytes32(stringToBytes32(\"220,158,61,31,24,71,251,120,218,34,154,150,135,120,119,82,24,230,177,95,58,180,188,86,47,79,73,205,188,73,65,249\")),bytes32(stringToBytes32(\"59,172,40,11,252,25,173,155,53,68,244,232,157,156,9,165,2,35,129,72,99,247,26,69,215,132,237,61,214,27,51,195\")),bytes32(stringToBytes32(\"41,64,64,118,140,17,175,251,72,242,196,204,90,65,208,127,31,43,83,60,23,115,206,194,37,8,97,135,176,68,114,78\"))]"
              },
              {
                "js": "[[219,123,106,151,73,161,208,156,23,165,233,43,155,217,207,80,134,56,137,147,119,229,196,194,31,200,170,234,210,29,122,50],[137,134,34,239,112,1,167,191,163,243,219,213,218,110,60,240,250,139,124,113,103,58,73,137,123,84,229,150,21,91,122,5],[118,230,51,172,228,61,82,114,11,233,160,113,234,237,13,84,182,133,80,49,247,194,146,228,233,109,95,42,255,196,74,41],[170,74,60,6,253,95,167,46,209,33,235,23,81,61,50,144,196,62,137,212,206,170,183,202,157,85,3,199,126,14,69,179],[130,110,14,120,83,188,208,87,187,187,58,106,140,26,49,100,252,187,148,25,136,43,28,21,8,145,169,126,155,211,36,128],[41,63,215,136,128,160,31,118,184,113,178,133,10,198,124,96,83,217,190,182,219,234,255,171,182,185,246,232,81,76,123,92],[186,46,152,91,18,182,18,239,32,131,49,219,144,213,55,42,112,159,252,9,23,106,20,113,164,149,88,77,75,11,52,185]]",
                "sol": "[bytes32(stringToBytes32(\"219,123,106,151,73,161,208,156,23,165,233,43,155,217,207,80,134,56,137,147,119,229,196,194,31,200,170,234,210,29,122,50\")),bytes32(stringToBytes32(\"137,134,34,239,112,1,167,191,163,243,219,213,218,110,60,240,250,139,124,113,103,58,73,137,123,84,229,150,21,91,122,5\")),bytes32(stringToBytes32(\"118,230,51,172,228,61,82,114,11,233,160,113,234,237,13,84,182,133,80,49,247,194,146,228,233,109,95,42,255,196,74,41\")),bytes32(stringToBytes32(\"170,74,60,6,253,95,167,46,209,33,235,23,81,61,50,144,196,62,137,212,206,170,183,202,157,85,3,199,126,14,69,179\")),bytes32(stringToBytes32(\"130,110,14,120,83,188,208,87,187,187,58,106,140,26,49,100,252,187,148,25,136,43,28,21,8,145,169,126,155,211,36,128\")),bytes32(stringToBytes32(\"41,63,215,136,128,160,31,118,184,113,178,133,10,198,124,96,83,217,190,182,219,234,255,171,182,185,246,232,81,76,123,92\")),bytes32(stringToBytes32(\"186,46,152,91,18,182,18,239,32,131,49,219,144,213,55,42,112,159,252,9,23,106,20,113,164,149,88,77,75,11,52,185\"))]"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[5,16,21,1,255,255,2,161]",
                "sol": "[0,2,999,999,20,161,256,160]"
              },
              {
                "js": "[[40,155,45,200,234,21,163,31,16,224,141,63,164,254,206,242,128,16,181,202,157,44,6,85,117,153,45,222,129,15,88,215],[88,50,225,175,73,225,197,157,15,95,38,106,188,179,235,129,28,89,4,191,221,45,67,244,217,220,234,2,21,102,70,120],[119,171,28,192,73,16,169,67,223,189,239,220,54,191,61,27,213,212,189,5,53,121,229,206,181,42,184,207,143,55,188,226],[252,93,255,255,205,197,68,222,74,166,190,208,209,85,12,69,36,225,198,100,163,215,47,208,247,206,215,47,184,147,239,161],[68,88,133,2,152,9,8,111,47,94,213,190,115,163,85,23,64,116,19,142,112,243,59,85,55,250,243,240,70,90,8,185],[33,255,224,124,248,132,36,224,20,163,75,121,114,125,17,115,31,67,29,133,24,139,82,157,133,237,126,144,105,176,82,250],[9,157,85,125,9,135,243,238,106,114,61,205,97,145,249,137,82,5,145,181,34,58,238,124,173,151,221,177,126,104,143,36]]",
                "sol": "[bytes32(stringToBytes32(\"40,155,45,200,234,21,163,31,16,224,141,63,164,254,206,242,128,16,181,202,157,44,6,85,117,153,45,222,129,15,88,215\")),bytes32(stringToBytes32(\"88,50,225,175,73,225,197,157,15,95,38,106,188,179,235,129,28,89,4,191,221,45,67,244,217,220,234,2,21,102,70,120\")),bytes32(stringToBytes32(\"119,171,28,192,73,16,169,67,223,189,239,220,54,191,61,27,213,212,189,5,53,121,229,206,181,42,184,207,143,55,188,226\")),bytes32(stringToBytes32(\"252,93,255,255,205,197,68,222,74,166,190,208,209,85,12,69,36,225,198,100,163,215,47,208,247,206,215,47,184,147,239,161\")),bytes32(stringToBytes32(\"68,88,133,2,152,9,8,111,47,94,213,190,115,163,85,23,64,116,19,142,112,243,59,85,55,250,243,240,70,90,8,185\")),bytes32(stringToBytes32(\"33,255,224,124,248,132,36,224,20,163,75,121,114,125,17,115,31,67,29,133,24,139,82,157,133,237,126,144,105,176,82,250\")),bytes32(stringToBytes32(\"9,157,85,125,9,135,243,238,106,114,61,205,97,145,249,137,82,5,145,181,34,58,238,124,173,151,221,177,126,104,143,36\"))]"
              },
              {
                "js": "[3,83,160,83,100,99,2]",
                "sol": "[uint8(3),uint8(83),uint8(160),uint8(83),uint8(100),uint8(99),uint8(2)]"
              },
              {
                "js": "[[17,44,80,97,62,210,216,153,238,239,252,8,209,189,106,231,126,128,143,93,157,239,46,160,85,24,59,195,64,169,226,46],[171,133,107,25,201,163,49,89,154,25,156,91,30,143,97,151,103,76,176,80,184,203,9,248,206,247,91,148,213,30,164,204],[45,158,85,175,8,132,198,96,147,165,240,53,10,154,126,122,44,44,114,254,227,195,126,108,12,116,232,20,56,67,242,99],[173,140,61,56,66,190,113,36,25,227,160,160,36,71,10,34,173,52,78,25,136,64,44,36,194,198,244,223,75,85,14,231],[220,158,61,31,24,71,251,120,218,34,154,150,135,120,119,82,24,230,177,95,58,180,188,86,47,79,73,205,188,73,65,249],[59,172,40,11,252,25,173,155,53,68,244,232,157,156,9,165,2,35,129,72,99,247,26,69,215,132,237,61,214,27,51,195],[41,64,64,118,140,17,175,251,72,242,196,204,90,65,208,127,31,43,83,60,23,115,206,194,37,8,97,135,176,68,114,78]]",
                "sol": "[bytes32(stringToBytes32(\"17,44,80,97,62,210,216,153,238,239,252,8,209,189,106,231,126,128,143,93,157,239,46,160,85,24,59,195,64,169,226,46\")),bytes32(stringToBytes32(\"171,133,107,25,201,163,49,89,154,25,156,91,30,143,97,151,103,76,176,80,184,203,9,248,206,247,91,148,213,30,164,204\")),bytes32(stringToBytes32(\"45,158,85,175,8,132,198,96,147,165,240,53,10,154,126,122,44,44,114,254,227,195,126,108,12,116,232,20,56,67,242,99\")),bytes32(stringToBytes32(\"173,140,61,56,66,190,113,36,25,227,160,160,36,71,10,34,173,52,78,25,136,64,44,36,194,198,244,223,75,85,14,231\")),bytes32(stringToBytes32(\"220,158,61,31,24,71,251,120,218,34,154,150,135,120,119,82,24,230,177,95,58,180,188,86,47,79,73,205,188,73,65,249\")),bytes32(stringToBytes32(\"59,172,40,11,252,25,173,155,53,68,244,232,157,156,9,165,2,35,129,72,99,247,26,69,215,132,237,61,214,27,51,195\")),bytes32(stringToBytes32(\"41,64,64,118,140,17,175,251,72,242,196,204,90,65,208,127,31,43,83,60,23,115,206,194,37,8,97,135,176,68,114,78\"))]"
              },
              {
                "js": "[[219,123,106,151,73,161,208,156,23,165,233,43,155,217,207,80,134,56,137,147,119,229,196,194,31,200,170,234,210,29,122,50],[137,134,34,239,112,1,167,191,163,243,219,213,218,110,60,240,250,139,124,113,103,58,73,137,123,84,229,150,21,91,122,5],[118,230,51,172,228,61,82,114,11,233,160,113,234,237,13,84,182,133,80,49,247,194,146,228,233,109,95,42,255,196,74,41],[170,74,60,6,253,95,167,46,209,33,235,23,81,61,50,144,196,62,137,212,206,170,183,202,157,85,3,199,126,14,69,179],[130,110,14,120,83,188,208,87,187,187,58,106,140,26,49,100,252,187,148,25,136,43,28,21,8,145,169,126,155,211,36,128],[41,63,215,136,128,160,31,118,184,113,178,133,10,198,124,96,83,217,190,182,219,234,255,171,182,185,246,232,81,76,123,92],[186,46,152,91,18,182,18,239,32,131,49,219,144,213,55,42,112,159,252,9,23,106,20,113,164,149,88,77,75,11,52,185]]",
                "sol": "[bytes32(stringToBytes32(\"219,123,106,151,73,161,208,156,23,165,233,43,155,217,207,80,134,56,137,147,119,229,196,194,31,200,170,234,210,29,122,50\")),bytes32(stringToBytes32(\"137,134,34,239,112,1,167,191,163,243,219,213,218,110,60,240,250,139,124,113,103,58,73,137,123,84,229,150,21,91,122,5\")),bytes32(stringToBytes32(\"118,230,51,172,228,61,82,114,11,233,160,113,234,237,13,84,182,133,80,49,247,194,146,228,233,109,95,42,255,196,74,41\")),bytes32(stringToBytes32(\"170,74,60,6,253,95,167,46,209,33,235,23,81,61,50,144,196,62,137,212,206,170,183,202,157,85,3,199,126,14,69,179\")),bytes32(stringToBytes32(\"130,110,14,120,83,188,208,87,187,187,58,106,140,26,49,100,252,187,148,25,136,43,28,21,8,145,169,126,155,211,36,128\")),bytes32(stringToBytes32(\"41,63,215,136,128,160,31,118,184,113,178,133,10,198,124,96,83,217,190,182,219,234,255,171,182,185,246,232,81,76,123,92\")),bytes32(stringToBytes32(\"186,46,152,91,18,182,18,239,32,131,49,219,144,213,55,42,112,159,252,9,23,106,20,113,164,149,88,77,75,11,52,185\"))]"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.678ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "[95,93,138,37,11,2,36,143,161,64,91,51,70,166,113,1,143,249,36,11,165,9,220,138,21,250,140,106,21,201,228,251]",
              "sol": "stringToBytes32(\"95,93,138,37,11,2,36,143,161,64,91,51,70,166,113,1,143,249,36,11,165,9,220,138,21,250,140,106,21,201,228,251\")"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[126,43,191,226,114,142,5,88,23,199,233,21,37,194,248,3,210,222,14,63,47,201,28,10,84,220,136,1,159,185,183,71]",
              "sol": "stringToBytes32(\"126,43,191,226,114,142,5,88,23,199,233,21,37,194,248,3,210,222,14,63,47,201,28,10,84,220,136,1,159,185,183,71\")"
            },
            {
              "js": "[230,233,19,126,150,7,235,251,160,199,123,130,3,74,77,227,210,238,88,110,43,195,135,211,52,237,45,229,94,50,23,0]",
              "sol": "stringToBytes32(\"230,233,19,126,150,7,235,251,160,199,123,130,3,74,77,227,210,238,88,110,43,195,135,211,52,237,45,229,94,50,23,0\")"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "[95,93,138,37,11,2,36,143,161,64,91,51,70,166,113,1,143,249,36,11,165,9,220,138,21,250,140,106,21,201,228,251]",
                "sol": "stringToBytes32(\"95,93,138,37,11,2,36,143,161,64,91,51,70,166,113,1,143,249,36,11,165,9,220,138,21,250,140,106,21,201,228,251\")"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[126,43,191,226,114,142,5,88,23,199,233,21,37,194,248,3,210,222,14,63,47,201,28,10,84,220,136,1,159,185,183,71]",
                "sol": "stringToBytes32(\"126,43,191,226,114,142,5,88,23,199,233,21,37,194,248,3,210,222,14,63,47,201,28,10,84,220,136,1,159,185,183,71\")"
              },
              {
                "js": "[230,233,19,126,150,7,235,251,160,199,123,130,3,74,77,227,210,238,88,110,43,195,135,211,52,237,45,229,94,50,23,0]",
                "sol": "stringToBytes32(\"230,233,19,126,150,7,235,251,160,199,123,130,3,74,77,227,210,238,88,110,43,195,135,211,52,237,45,229,94,50,23,0\")"
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "[95,93,138,37,11,2,36,143,161,64,91,51,70,166,113,1,143,249,36,11,165,9,220,138,21,250,140,106,21,201,228,251]",
                "sol": "stringToBytes32(\"95,93,138,37,11,2,36,143,161,64,91,51,70,166,113,1,143,249,36,11,165,9,220,138,21,250,140,106,21,201,228,251\")"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[126,43,191,226,114,142,5,88,23,199,233,21,37,194,248,3,210,222,14,63,47,201,28,10,84,220,136,1,159,185,183,71]",
                "sol": "stringToBytes32(\"126,43,191,226,114,142,5,88,23,199,233,21,37,194,248,3,210,222,14,63,47,201,28,10,84,220,136,1,159,185,183,71\")"
              },
              {
                "js": "[230,233,19,126,150,7,235,251,160,199,123,130,3,74,77,227,210,238,88,110,43,195,135,211,52,237,45,229,94,50,23,0]",
                "sol": "stringToBytes32(\"230,233,19,126,150,7,235,251,160,199,123,130,3,74,77,227,210,238,88,110,43,195,135,211,52,237,45,229,94,50,23,0\")"
              },
              {
                "js": 256,
                "sol": 256
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.679ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.680ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "[106,198,198,131,138,168,102,124,39,159,191,211,230,62,19,246,44,99,236,6,255,69,2,138,158,125,16,134,174,180,103,161]",
              "sol": "stringToBytes32(\"106,198,198,131,138,168,102,124,39,159,191,211,230,62,19,246,44,99,236,6,255,69,2,138,158,125,16,134,174,180,103,161\")"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[45,241,92,242,61,223,238,75,38,79,215,116,144,149,30,48,214,255,78,123,233,33,227,114,61,154,186,35,3,30,65,133]",
              "sol": "stringToBytes32(\"45,241,92,242,61,223,238,75,38,79,215,116,144,149,30,48,214,255,78,123,233,33,227,114,61,154,186,35,3,30,65,133\")"
            },
            {
              "js": "[119,254,24,190,133,117,89,235,177,82,236,211,142,179,182,63,159,26,31,194,162,153,102,151,90,159,129,224,101,114,203,179]",
              "sol": "stringToBytes32(\"119,254,24,190,133,117,89,235,177,82,236,211,142,179,182,63,159,26,31,194,162,153,102,151,90,159,129,224,101,114,203,179\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.681ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.681ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:12:50.681ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:12:50.682ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}