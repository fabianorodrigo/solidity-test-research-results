,{
  "2020-11-13T02:55:40.175ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:55:46.602ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+761",
              "sol": "block.number+761"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+761+340",
              "sol": "block.number+761+340"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+761",
                "sol": "block.number+761"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+761+340",
                "sol": "block.number+761+340"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+761",
                "sol": "block.number+761"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+761+340",
                "sol": "block.number+761+340"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+761+340",
                "sol": "block.number+761+340"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+761",
                "sol": "block.number+761"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+761",
                "sol": "block.number+761"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:55:53.181ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:55:59.637ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:06.146ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:06.147ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:19.510ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractBasicToken.address",
              "sol": "contractBasicToken"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:26.158ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.906ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.908ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.908ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": 5,
                "sol": 5
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.909ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.910ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.910ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.911ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.912ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.913ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.913ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.914ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.914ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.916ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.918ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_value <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _value<=0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.921ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.921ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.922ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.932ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.934ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.936ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:2}",
              "sol": "{\"from\":\"0x0\",\"value\":\"2\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:2}",
                "sol": "{\"from\":\"0x0\",\"value\":\"2\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.944ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.945ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.949ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.950ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.950ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.950ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.951ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "[71,8,146,116,215,87,221,207,98,147,65,53,9,13,9,238,114,123,171,50,90,204,141,72,85,219,250,96,74,143,231,140]",
              "sol": "stringToBytes32(\"71,8,146,116,215,87,221,207,98,147,65,53,9,13,9,238,114,123,171,50,90,204,141,72,85,219,250,96,74,143,231,140\")"
            },
            {
              "js": "[192,218,223,249,74,250,206,6,16,57,18,189,108,252,160,7,203,92,84,186,26,224,8,230,223,32,73,172,225,239,87,190]",
              "sol": "stringToBytes32(\"192,218,223,249,74,250,206,6,16,57,18,189,108,252,160,7,203,92,84,186,26,224,8,230,223,32,73,172,225,239,87,190\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.951ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "[65,245,221,12,141,60,10,220,26,235,206,34,26,79,232,14,25,254,115,225]",
              "sol": "abi.encode(\"65,245,221,12,141,60,10,220,26,235,206,34,26,79,232,14,25,254,115,225\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "[67,145,100,4,237,115,253,75,21,24,196,41,111,31,82,67,248,152,129,235,3]",
                "sol": "bytes21(\"67,145,100,4,237,115,253,75,21,24,196,41,111,31,82,67,248,152,129,235,3\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.953ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "[106,36,237,155,16,126,39,138,88,14,79,183,164,34,228,134,240,29,20,47,139,221,177,157,215,140,112,200,153,59,20,77]",
              "sol": "stringToBytes32(\"106,36,237,155,16,126,39,138,88,14,79,183,164,34,228,134,240,29,20,47,139,221,177,157,215,140,112,200,153,59,20,77\")"
            },
            {
              "js": "[137,125,133,153,167,89,249,22,165,62,56,21,11,53,189,247,152,117,184,238,23,253,78,194,112,201,146,149,32,76,113,136]",
              "sol": "stringToBytes32(\"137,125,133,153,167,89,249,22,165,62,56,21,11,53,189,247,152,117,184,238,23,253,78,194,112,201,146,149,32,76,113,136\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.954ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.954ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.955ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.955ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.956ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.956ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.957ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.958ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.960ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "1000",
                "sol": "1000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.961ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[30,159,99,156,3,149,30,179,37,140,40,171,139,110,44,143,13,199,91,32,10,33,198,236,78,22,252,219,141,201,198,218],[246,77,64,196,90,223,210,51,112,216,42,74,58,82,13,74,51,133,103,26,238,218,73,56,53,67,199,34,140,167,168,67],[143,92,26,118,42,222,162,207,138,72,92,53,42,143,107,22,49,107,221,56,189,250,180,107,244,54,162,151,192,151,182,71],[172,1,41,20,67,206,235,50,177,18,85,77,118,147,43,151,85,95,246,229,135,177,21,182,80,178,255,55,82,29,173,172],[81,80,220,196,39,251,91,164,122,46,239,25,179,54,81,79,57,153,175,134,172,131,135,95,3,171,120,199,234,174,112,86],[77,63,243,68,40,123,60,51,68,166,223,251,143,172,91,249,179,149,104,177,255,153,96,82,229,75,164,209,152,12,233,29],[10,87,79,186,61,118,37,193,203,161,193,227,122,59,59,233,159,219,241,0,120,8,16,61,79,138,179,121,106,64,233,54],[199,143,67,166,122,214,108,218,237,108,192,181,121,62,201,251,113,241,4,105,115,82,20,11,64,92,2,95,50,23,234,196],[37,146,105,218,126,191,39,89,167,111,121,183,113,52,137,111,204,252,189,0,139,2,9,108,97,6,75,254,254,206,61,76],[99,71,244,166,47,225,25,239,81,49,202,200,243,77,224,24,128,6,60,3,60,115,210,31,12,184,52,60,116,161,244,64]]",
              "sol": "[bytes32(stringToBytes32(\"30,159,99,156,3,149,30,179,37,140,40,171,139,110,44,143,13,199,91,32,10,33,198,236,78,22,252,219,141,201,198,218\")),bytes32(stringToBytes32(\"246,77,64,196,90,223,210,51,112,216,42,74,58,82,13,74,51,133,103,26,238,218,73,56,53,67,199,34,140,167,168,67\")),bytes32(stringToBytes32(\"143,92,26,118,42,222,162,207,138,72,92,53,42,143,107,22,49,107,221,56,189,250,180,107,244,54,162,151,192,151,182,71\")),bytes32(stringToBytes32(\"172,1,41,20,67,206,235,50,177,18,85,77,118,147,43,151,85,95,246,229,135,177,21,182,80,178,255,55,82,29,173,172\")),bytes32(stringToBytes32(\"81,80,220,196,39,251,91,164,122,46,239,25,179,54,81,79,57,153,175,134,172,131,135,95,3,171,120,199,234,174,112,86\")),bytes32(stringToBytes32(\"77,63,243,68,40,123,60,51,68,166,223,251,143,172,91,249,179,149,104,177,255,153,96,82,229,75,164,209,152,12,233,29\")),bytes32(stringToBytes32(\"10,87,79,186,61,118,37,193,203,161,193,227,122,59,59,233,159,219,241,0,120,8,16,61,79,138,179,121,106,64,233,54\")),bytes32(stringToBytes32(\"199,143,67,166,122,214,108,218,237,108,192,181,121,62,201,251,113,241,4,105,115,82,20,11,64,92,2,95,50,23,234,196\")),bytes32(stringToBytes32(\"37,146,105,218,126,191,39,89,167,111,121,183,113,52,137,111,204,252,189,0,139,2,9,108,97,6,75,254,254,206,61,76\")),bytes32(stringToBytes32(\"99,71,244,166,47,225,25,239,81,49,202,200,243,77,224,24,128,6,60,3,60,115,210,31,12,184,52,60,116,161,244,64\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-551",
              "sol": "block.timestamp-551"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[30,159,99,156,3,149,30,179,37,140,40,171,139,110,44,143,13,199,91,32,10,33,198,236,78,22,252,219,141,201,198,218],[246,77,64,196,90,223,210,51,112,216,42,74,58,82,13,74,51,133,103,26,238,218,73,56,53,67,199,34,140,167,168,67],[143,92,26,118,42,222,162,207,138,72,92,53,42,143,107,22,49,107,221,56,189,250,180,107,244,54,162,151,192,151,182,71],[172,1,41,20,67,206,235,50,177,18,85,77,118,147,43,151,85,95,246,229,135,177,21,182,80,178,255,55,82,29,173,172],[81,80,220,196,39,251,91,164,122,46,239,25,179,54,81,79,57,153,175,134,172,131,135,95,3,171,120,199,234,174,112,86],[77,63,243,68,40,123,60,51,68,166,223,251,143,172,91,249,179,149,104,177,255,153,96,82,229,75,164,209,152,12,233,29],[10,87,79,186,61,118,37,193,203,161,193,227,122,59,59,233,159,219,241,0,120,8,16,61,79,138,179,121,106,64,233,54],[199,143,67,166,122,214,108,218,237,108,192,181,121,62,201,251,113,241,4,105,115,82,20,11,64,92,2,95,50,23,234,196],[37,146,105,218,126,191,39,89,167,111,121,183,113,52,137,111,204,252,189,0,139,2,9,108,97,6,75,254,254,206,61,76],[99,71,244,166,47,225,25,239,81,49,202,200,243,77,224,24,128,6,60,3,60,115,210,31,12,184,52,60,116,161,244,64]]",
                "sol": "[bytes32(stringToBytes32(\"30,159,99,156,3,149,30,179,37,140,40,171,139,110,44,143,13,199,91,32,10,33,198,236,78,22,252,219,141,201,198,218\")),bytes32(stringToBytes32(\"246,77,64,196,90,223,210,51,112,216,42,74,58,82,13,74,51,133,103,26,238,218,73,56,53,67,199,34,140,167,168,67\")),bytes32(stringToBytes32(\"143,92,26,118,42,222,162,207,138,72,92,53,42,143,107,22,49,107,221,56,189,250,180,107,244,54,162,151,192,151,182,71\")),bytes32(stringToBytes32(\"172,1,41,20,67,206,235,50,177,18,85,77,118,147,43,151,85,95,246,229,135,177,21,182,80,178,255,55,82,29,173,172\")),bytes32(stringToBytes32(\"81,80,220,196,39,251,91,164,122,46,239,25,179,54,81,79,57,153,175,134,172,131,135,95,3,171,120,199,234,174,112,86\")),bytes32(stringToBytes32(\"77,63,243,68,40,123,60,51,68,166,223,251,143,172,91,249,179,149,104,177,255,153,96,82,229,75,164,209,152,12,233,29\")),bytes32(stringToBytes32(\"10,87,79,186,61,118,37,193,203,161,193,227,122,59,59,233,159,219,241,0,120,8,16,61,79,138,179,121,106,64,233,54\")),bytes32(stringToBytes32(\"199,143,67,166,122,214,108,218,237,108,192,181,121,62,201,251,113,241,4,105,115,82,20,11,64,92,2,95,50,23,234,196\")),bytes32(stringToBytes32(\"37,146,105,218,126,191,39,89,167,111,121,183,113,52,137,111,204,252,189,0,139,2,9,108,97,6,75,254,254,206,61,76\")),bytes32(stringToBytes32(\"99,71,244,166,47,225,25,239,81,49,202,200,243,77,224,24,128,6,60,3,60,115,210,31,12,184,52,60,116,161,244,64\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.963ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "[157,161,235,39,85,65,236,136,54,72,206,80,170,69,178,149,75,181,97,249,59,100,13,191,219,255,65,65,221,197,27,95]",
              "sol": "abi.encode(\"157,161,235,39,85,65,236,136,54,72,206,80,170,69,178,149,75,181,97,249,59,100,13,191,219,255,65,65,221,197,27,95\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "[157,161,235,39,85,65,236,136,54,72,206,80,170,69,178,149,75,181,97,249,59,100,13,191,219,255,65,65,221,197,27,95]",
                "sol": "abi.encode(\"157,161,235,39,85,65,236,136,54,72,206,80,170,69,178,149,75,181,97,249,59,100,13,191,219,255,65,65,221,197,27,95\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.966ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.967ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.967ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.968ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.968ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.969ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.969ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.972ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.975ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.976ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.978ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.979ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.980ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.980ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "[95,23,71,63,127,149,61,217,218,119,193,41,205,119,41,148,147,99,59,117,196,209,188,195,239,36,71,217,252,150,149,225]",
              "sol": "abi.encode(\"95,23,71,63,127,149,61,217,218,119,193,41,205,119,41,148,147,99,59,117,196,209,188,195,239,36,71,217,252,150,149,225\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.982ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:32.983ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.987ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "[32,74,219,86,145,228,2,219,202,66,29,172,233,29,193,241,229,39,171,251,26,7,99,59,174,108,183,222,126,171,13,162]",
              "sol": "stringToBytes32(\"32,74,219,86,145,228,2,219,202,66,29,172,233,29,193,241,229,39,171,251,26,7,99,59,174,108,183,222,126,171,13,162\")"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "[22,220,51,129,84,21,78,137,123,7,214,242,197,94,72,6,237,15,246,122,7,111,47,9,29,129,100,114,44,25,82,53]",
              "sol": "stringToBytes32(\"22,220,51,129,84,21,78,137,123,7,214,242,197,94,72,6,237,15,246,122,7,111,47,9,29,129,100,114,44,25,82,53\")"
            },
            {
              "js": "[69,223,102,61,154,50,62,173,191,49,216,180,193,143,180,233,133,148,27,217,144,190,32,34,82,138,141,124,145,137,203,141]",
              "sol": "stringToBytes32(\"69,223,102,61,154,50,62,173,191,49,216,180,193,143,180,233,133,148,27,217,144,190,32,34,82,138,141,124,145,137,203,141\")"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "[32,74,219,86,145,228,2,219,202,66,29,172,233,29,193,241,229,39,171,251,26,7,99,59,174,108,183,222,126,171,13,162]",
                "sol": "stringToBytes32(\"32,74,219,86,145,228,2,219,202,66,29,172,233,29,193,241,229,39,171,251,26,7,99,59,174,108,183,222,126,171,13,162\")"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "[22,220,51,129,84,21,78,137,123,7,214,242,197,94,72,6,237,15,246,122,7,111,47,9,29,129,100,114,44,25,82,53]",
                "sol": "stringToBytes32(\"22,220,51,129,84,21,78,137,123,7,214,242,197,94,72,6,237,15,246,122,7,111,47,9,29,129,100,114,44,25,82,53\")"
              },
              {
                "js": "[69,223,102,61,154,50,62,173,191,49,216,180,193,143,180,233,133,148,27,217,144,190,32,34,82,138,141,124,145,137,203,141]",
                "sol": "stringToBytes32(\"69,223,102,61,154,50,62,173,191,49,216,180,193,143,180,233,133,148,27,217,144,190,32,34,82,138,141,124,145,137,203,141\")"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "[32,74,219,86,145,228,2,219,202,66,29,172,233,29,193,241,229,39,171,251,26,7,99,59,174,108,183,222,126,171,13,162]",
                "sol": "stringToBytes32(\"32,74,219,86,145,228,2,219,202,66,29,172,233,29,193,241,229,39,171,251,26,7,99,59,174,108,183,222,126,171,13,162\")"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "[22,220,51,129,84,21,78,137,123,7,214,242,197,94,72,6,237,15,246,122,7,111,47,9,29,129,100,114,44,25,82,53]",
                "sol": "stringToBytes32(\"22,220,51,129,84,21,78,137,123,7,214,242,197,94,72,6,237,15,246,122,7,111,47,9,29,129,100,114,44,25,82,53\")"
              },
              {
                "js": "[69,223,102,61,154,50,62,173,191,49,216,180,193,143,180,233,133,148,27,217,144,190,32,34,82,138,141,124,145,137,203,141]",
                "sol": "stringToBytes32(\"69,223,102,61,154,50,62,173,191,49,216,180,193,143,180,233,133,148,27,217,144,190,32,34,82,138,141,124,145,137,203,141\")"
              },
              {
                "js": 1339,
                "sol": 1339
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:32.990ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[159,100,1001,16]",
              "sol": "[uint256(159),uint256(100),uint256(1001),uint256(16)]"
            },
            {
              "js": "[[71,78,48,227,188,111,237,96,102,96,70,129,61,99,36,164,188,104,151,30,123,115,109,39,114,13,250,47,9,87,162,13],[65,253,110,247,30,97,217,204,66,82,245,17,71,9,117,13,2,121,12,110,231,221,140,125,156,67,23,101,255,144,212,96],[167,127,139,214,253,87,231,205,179,109,60,228,57,112,236,105,178,46,92,183,113,113,45,187,117,143,95,143,15,184,116,88],[67,133,229,78,227,18,235,203,151,152,129,72,156,143,172,113,88,118,228,95,234,75,250,29,136,40,134,182,221,148,2,162]]",
              "sol": "[bytes32(stringToBytes32(\"71,78,48,227,188,111,237,96,102,96,70,129,61,99,36,164,188,104,151,30,123,115,109,39,114,13,250,47,9,87,162,13\")),bytes32(stringToBytes32(\"65,253,110,247,30,97,217,204,66,82,245,17,71,9,117,13,2,121,12,110,231,221,140,125,156,67,23,101,255,144,212,96\")),bytes32(stringToBytes32(\"167,127,139,214,253,87,231,205,179,109,60,228,57,112,236,105,178,46,92,183,113,113,45,187,117,143,95,143,15,184,116,88\")),bytes32(stringToBytes32(\"67,133,229,78,227,18,235,203,151,152,129,72,156,143,172,113,88,118,228,95,234,75,250,29,136,40,134,182,221,148,2,162\"))]"
            },
            {
              "js": "[10,99,1,17]",
              "sol": "[uint8(10),uint8(99),uint8(1),uint8(17)]"
            },
            {
              "js": "[[244,123,140,209,167,94,231,7,128,209,145,139,121,169,81,192,235,218,149,155,242,124,210,218,120,25,197,173,249,39,55,35],[235,126,241,218,202,96,148,152,60,138,64,203,30,205,214,61,224,88,254,107,12,226,223,71,136,15,98,113,76,177,52,55],[135,233,132,21,149,69,229,46,7,97,244,214,51,81,121,55,44,24,133,37,155,139,162,87,218,57,107,164,88,1,13,122],[127,232,126,109,21,239,222,215,63,166,168,102,173,214,190,79,29,55,39,214,94,20,69,119,101,170,190,27,246,51,25,76]]",
              "sol": "[bytes32(stringToBytes32(\"244,123,140,209,167,94,231,7,128,209,145,139,121,169,81,192,235,218,149,155,242,124,210,218,120,25,197,173,249,39,55,35\")),bytes32(stringToBytes32(\"235,126,241,218,202,96,148,152,60,138,64,203,30,205,214,61,224,88,254,107,12,226,223,71,136,15,98,113,76,177,52,55\")),bytes32(stringToBytes32(\"135,233,132,21,149,69,229,46,7,97,244,214,51,81,121,55,44,24,133,37,155,139,162,87,218,57,107,164,88,1,13,122\")),bytes32(stringToBytes32(\"127,232,126,109,21,239,222,215,63,166,168,102,173,214,190,79,29,55,39,214,94,20,69,119,101,170,190,27,246,51,25,76\"))]"
            },
            {
              "js": "[[68,156,161,35,13,42,237,210,78,148,52,92,244,28,133,76,101,240,238,40,235,217,213,57,40,139,129,1,242,191,2,27],[26,16,160,157,22,232,254,171,112,231,121,106,157,128,205,55,230,128,247,60,69,9,95,178,19,51,45,180,56,207,237,138],[51,189,145,131,27,10,176,155,232,179,174,159,120,45,25,16,107,207,16,184,4,160,10,68,190,84,113,8,137,36,230,79],[163,77,207,211,57,48,87,132,103,215,6,100,11,236,45,88,33,199,135,130,255,204,73,200,51,121,44,191,86,207,247,209]]",
              "sol": "[bytes32(stringToBytes32(\"68,156,161,35,13,42,237,210,78,148,52,92,244,28,133,76,101,240,238,40,235,217,213,57,40,139,129,1,242,191,2,27\")),bytes32(stringToBytes32(\"26,16,160,157,22,232,254,171,112,231,121,106,157,128,205,55,230,128,247,60,69,9,95,178,19,51,45,180,56,207,237,138\")),bytes32(stringToBytes32(\"51,189,145,131,27,10,176,155,232,179,174,159,120,45,25,16,107,207,16,184,4,160,10,68,190,84,113,8,137,36,230,79\")),bytes32(stringToBytes32(\"163,77,207,211,57,48,87,132,103,215,6,100,11,236,45,88,33,199,135,130,255,204,73,200,51,121,44,191,86,207,247,209\"))]"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[159,100,1001,16]",
                "sol": "[uint256(159),uint256(100),uint256(1001),uint256(16)]"
              },
              {
                "js": "[[71,78,48,227,188,111,237,96,102,96,70,129,61,99,36,164,188,104,151,30,123,115,109,39,114,13,250,47,9,87,162,13],[65,253,110,247,30,97,217,204,66,82,245,17,71,9,117,13,2,121,12,110,231,221,140,125,156,67,23,101,255,144,212,96],[167,127,139,214,253,87,231,205,179,109,60,228,57,112,236,105,178,46,92,183,113,113,45,187,117,143,95,143,15,184,116,88],[67,133,229,78,227,18,235,203,151,152,129,72,156,143,172,113,88,118,228,95,234,75,250,29,136,40,134,182,221,148,2,162]]",
                "sol": "[bytes32(stringToBytes32(\"71,78,48,227,188,111,237,96,102,96,70,129,61,99,36,164,188,104,151,30,123,115,109,39,114,13,250,47,9,87,162,13\")),bytes32(stringToBytes32(\"65,253,110,247,30,97,217,204,66,82,245,17,71,9,117,13,2,121,12,110,231,221,140,125,156,67,23,101,255,144,212,96\")),bytes32(stringToBytes32(\"167,127,139,214,253,87,231,205,179,109,60,228,57,112,236,105,178,46,92,183,113,113,45,187,117,143,95,143,15,184,116,88\")),bytes32(stringToBytes32(\"67,133,229,78,227,18,235,203,151,152,129,72,156,143,172,113,88,118,228,95,234,75,250,29,136,40,134,182,221,148,2,162\"))]"
              },
              {
                "js": "[10,99,1,17]",
                "sol": "[uint8(10),uint8(99),uint8(1),uint8(17)]"
              },
              {
                "js": "[[244,123,140,209,167,94,231,7,128,209,145,139,121,169,81,192,235,218,149,155,242,124,210,218,120,25,197,173,249,39,55,35],[235,126,241,218,202,96,148,152,60,138,64,203,30,205,214,61,224,88,254,107,12,226,223,71,136,15,98,113,76,177,52,55],[135,233,132,21,149,69,229,46,7,97,244,214,51,81,121,55,44,24,133,37,155,139,162,87,218,57,107,164,88,1,13,122],[127,232,126,109,21,239,222,215,63,166,168,102,173,214,190,79,29,55,39,214,94,20,69,119,101,170,190,27,246,51,25,76]]",
                "sol": "[bytes32(stringToBytes32(\"244,123,140,209,167,94,231,7,128,209,145,139,121,169,81,192,235,218,149,155,242,124,210,218,120,25,197,173,249,39,55,35\")),bytes32(stringToBytes32(\"235,126,241,218,202,96,148,152,60,138,64,203,30,205,214,61,224,88,254,107,12,226,223,71,136,15,98,113,76,177,52,55\")),bytes32(stringToBytes32(\"135,233,132,21,149,69,229,46,7,97,244,214,51,81,121,55,44,24,133,37,155,139,162,87,218,57,107,164,88,1,13,122\")),bytes32(stringToBytes32(\"127,232,126,109,21,239,222,215,63,166,168,102,173,214,190,79,29,55,39,214,94,20,69,119,101,170,190,27,246,51,25,76\"))]"
              },
              {
                "js": "[[68,156,161,35,13,42,237,210,78,148,52,92,244,28,133,76,101,240,238,40,235,217,213,57,40,139,129,1,242,191,2,27],[26,16,160,157,22,232,254,171,112,231,121,106,157,128,205,55,230,128,247,60,69,9,95,178,19,51,45,180,56,207,237,138],[51,189,145,131,27,10,176,155,232,179,174,159,120,45,25,16,107,207,16,184,4,160,10,68,190,84,113,8,137,36,230,79],[163,77,207,211,57,48,87,132,103,215,6,100,11,236,45,88,33,199,135,130,255,204,73,200,51,121,44,191,86,207,247,209]]",
                "sol": "[bytes32(stringToBytes32(\"68,156,161,35,13,42,237,210,78,148,52,92,244,28,133,76,101,240,238,40,235,217,213,57,40,139,129,1,242,191,2,27\")),bytes32(stringToBytes32(\"26,16,160,157,22,232,254,171,112,231,121,106,157,128,205,55,230,128,247,60,69,9,95,178,19,51,45,180,56,207,237,138\")),bytes32(stringToBytes32(\"51,189,145,131,27,10,176,155,232,179,174,159,120,45,25,16,107,207,16,184,4,160,10,68,190,84,113,8,137,36,230,79\")),bytes32(stringToBytes32(\"163,77,207,211,57,48,87,132,103,215,6,100,11,236,45,88,33,199,135,130,255,204,73,200,51,121,44,191,86,207,247,209\"))]"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[160,100,14,1001,161]",
                "sol": "[14,11,10000,14,9999]"
              },
              {
                "js": "[[71,78,48,227,188,111,237,96,102,96,70,129,61,99,36,164,188,104,151,30,123,115,109,39,114,13,250,47,9,87,162,13],[65,253,110,247,30,97,217,204,66,82,245,17,71,9,117,13,2,121,12,110,231,221,140,125,156,67,23,101,255,144,212,96],[167,127,139,214,253,87,231,205,179,109,60,228,57,112,236,105,178,46,92,183,113,113,45,187,117,143,95,143,15,184,116,88],[67,133,229,78,227,18,235,203,151,152,129,72,156,143,172,113,88,118,228,95,234,75,250,29,136,40,134,182,221,148,2,162]]",
                "sol": "[bytes32(stringToBytes32(\"71,78,48,227,188,111,237,96,102,96,70,129,61,99,36,164,188,104,151,30,123,115,109,39,114,13,250,47,9,87,162,13\")),bytes32(stringToBytes32(\"65,253,110,247,30,97,217,204,66,82,245,17,71,9,117,13,2,121,12,110,231,221,140,125,156,67,23,101,255,144,212,96\")),bytes32(stringToBytes32(\"167,127,139,214,253,87,231,205,179,109,60,228,57,112,236,105,178,46,92,183,113,113,45,187,117,143,95,143,15,184,116,88\")),bytes32(stringToBytes32(\"67,133,229,78,227,18,235,203,151,152,129,72,156,143,172,113,88,118,228,95,234,75,250,29,136,40,134,182,221,148,2,162\"))]"
              },
              {
                "js": "[10,99,1,17]",
                "sol": "[uint8(10),uint8(99),uint8(1),uint8(17)]"
              },
              {
                "js": "[[244,123,140,209,167,94,231,7,128,209,145,139,121,169,81,192,235,218,149,155,242,124,210,218,120,25,197,173,249,39,55,35],[235,126,241,218,202,96,148,152,60,138,64,203,30,205,214,61,224,88,254,107,12,226,223,71,136,15,98,113,76,177,52,55],[135,233,132,21,149,69,229,46,7,97,244,214,51,81,121,55,44,24,133,37,155,139,162,87,218,57,107,164,88,1,13,122],[127,232,126,109,21,239,222,215,63,166,168,102,173,214,190,79,29,55,39,214,94,20,69,119,101,170,190,27,246,51,25,76]]",
                "sol": "[bytes32(stringToBytes32(\"244,123,140,209,167,94,231,7,128,209,145,139,121,169,81,192,235,218,149,155,242,124,210,218,120,25,197,173,249,39,55,35\")),bytes32(stringToBytes32(\"235,126,241,218,202,96,148,152,60,138,64,203,30,205,214,61,224,88,254,107,12,226,223,71,136,15,98,113,76,177,52,55\")),bytes32(stringToBytes32(\"135,233,132,21,149,69,229,46,7,97,244,214,51,81,121,55,44,24,133,37,155,139,162,87,218,57,107,164,88,1,13,122\")),bytes32(stringToBytes32(\"127,232,126,109,21,239,222,215,63,166,168,102,173,214,190,79,29,55,39,214,94,20,69,119,101,170,190,27,246,51,25,76\"))]"
              },
              {
                "js": "[[68,156,161,35,13,42,237,210,78,148,52,92,244,28,133,76,101,240,238,40,235,217,213,57,40,139,129,1,242,191,2,27],[26,16,160,157,22,232,254,171,112,231,121,106,157,128,205,55,230,128,247,60,69,9,95,178,19,51,45,180,56,207,237,138],[51,189,145,131,27,10,176,155,232,179,174,159,120,45,25,16,107,207,16,184,4,160,10,68,190,84,113,8,137,36,230,79],[163,77,207,211,57,48,87,132,103,215,6,100,11,236,45,88,33,199,135,130,255,204,73,200,51,121,44,191,86,207,247,209]]",
                "sol": "[bytes32(stringToBytes32(\"68,156,161,35,13,42,237,210,78,148,52,92,244,28,133,76,101,240,238,40,235,217,213,57,40,139,129,1,242,191,2,27\")),bytes32(stringToBytes32(\"26,16,160,157,22,232,254,171,112,231,121,106,157,128,205,55,230,128,247,60,69,9,95,178,19,51,45,180,56,207,237,138\")),bytes32(stringToBytes32(\"51,189,145,131,27,10,176,155,232,179,174,159,120,45,25,16,107,207,16,184,4,160,10,68,190,84,113,8,137,36,230,79\")),bytes32(stringToBytes32(\"163,77,207,211,57,48,87,132,103,215,6,100,11,236,45,88,33,199,135,130,255,204,73,200,51,121,44,191,86,207,247,209\"))]"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[10,999,256,83,1338]",
                "sol": "[257,11,1,4,82]"
              },
              {
                "js": "[[71,78,48,227,188,111,237,96,102,96,70,129,61,99,36,164,188,104,151,30,123,115,109,39,114,13,250,47,9,87,162,13],[65,253,110,247,30,97,217,204,66,82,245,17,71,9,117,13,2,121,12,110,231,221,140,125,156,67,23,101,255,144,212,96],[167,127,139,214,253,87,231,205,179,109,60,228,57,112,236,105,178,46,92,183,113,113,45,187,117,143,95,143,15,184,116,88],[67,133,229,78,227,18,235,203,151,152,129,72,156,143,172,113,88,118,228,95,234,75,250,29,136,40,134,182,221,148,2,162]]",
                "sol": "[bytes32(stringToBytes32(\"71,78,48,227,188,111,237,96,102,96,70,129,61,99,36,164,188,104,151,30,123,115,109,39,114,13,250,47,9,87,162,13\")),bytes32(stringToBytes32(\"65,253,110,247,30,97,217,204,66,82,245,17,71,9,117,13,2,121,12,110,231,221,140,125,156,67,23,101,255,144,212,96\")),bytes32(stringToBytes32(\"167,127,139,214,253,87,231,205,179,109,60,228,57,112,236,105,178,46,92,183,113,113,45,187,117,143,95,143,15,184,116,88\")),bytes32(stringToBytes32(\"67,133,229,78,227,18,235,203,151,152,129,72,156,143,172,113,88,118,228,95,234,75,250,29,136,40,134,182,221,148,2,162\"))]"
              },
              {
                "js": "[10,99,1,17]",
                "sol": "[uint8(10),uint8(99),uint8(1),uint8(17)]"
              },
              {
                "js": "[[244,123,140,209,167,94,231,7,128,209,145,139,121,169,81,192,235,218,149,155,242,124,210,218,120,25,197,173,249,39,55,35],[235,126,241,218,202,96,148,152,60,138,64,203,30,205,214,61,224,88,254,107,12,226,223,71,136,15,98,113,76,177,52,55],[135,233,132,21,149,69,229,46,7,97,244,214,51,81,121,55,44,24,133,37,155,139,162,87,218,57,107,164,88,1,13,122],[127,232,126,109,21,239,222,215,63,166,168,102,173,214,190,79,29,55,39,214,94,20,69,119,101,170,190,27,246,51,25,76]]",
                "sol": "[bytes32(stringToBytes32(\"244,123,140,209,167,94,231,7,128,209,145,139,121,169,81,192,235,218,149,155,242,124,210,218,120,25,197,173,249,39,55,35\")),bytes32(stringToBytes32(\"235,126,241,218,202,96,148,152,60,138,64,203,30,205,214,61,224,88,254,107,12,226,223,71,136,15,98,113,76,177,52,55\")),bytes32(stringToBytes32(\"135,233,132,21,149,69,229,46,7,97,244,214,51,81,121,55,44,24,133,37,155,139,162,87,218,57,107,164,88,1,13,122\")),bytes32(stringToBytes32(\"127,232,126,109,21,239,222,215,63,166,168,102,173,214,190,79,29,55,39,214,94,20,69,119,101,170,190,27,246,51,25,76\"))]"
              },
              {
                "js": "[[68,156,161,35,13,42,237,210,78,148,52,92,244,28,133,76,101,240,238,40,235,217,213,57,40,139,129,1,242,191,2,27],[26,16,160,157,22,232,254,171,112,231,121,106,157,128,205,55,230,128,247,60,69,9,95,178,19,51,45,180,56,207,237,138],[51,189,145,131,27,10,176,155,232,179,174,159,120,45,25,16,107,207,16,184,4,160,10,68,190,84,113,8,137,36,230,79],[163,77,207,211,57,48,87,132,103,215,6,100,11,236,45,88,33,199,135,130,255,204,73,200,51,121,44,191,86,207,247,209]]",
                "sol": "[bytes32(stringToBytes32(\"68,156,161,35,13,42,237,210,78,148,52,92,244,28,133,76,101,240,238,40,235,217,213,57,40,139,129,1,242,191,2,27\")),bytes32(stringToBytes32(\"26,16,160,157,22,232,254,171,112,231,121,106,157,128,205,55,230,128,247,60,69,9,95,178,19,51,45,180,56,207,237,138\")),bytes32(stringToBytes32(\"51,189,145,131,27,10,176,155,232,179,174,159,120,45,25,16,107,207,16,184,4,160,10,68,190,84,113,8,137,36,230,79\")),bytes32(stringToBytes32(\"163,77,207,211,57,48,87,132,103,215,6,100,11,236,45,88,33,199,135,130,255,204,73,200,51,121,44,191,86,207,247,209\"))]"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[16,21,16,21,256]",
                "sol": "[999,11,18,1337,256]"
              },
              {
                "js": "[[71,78,48,227,188,111,237,96,102,96,70,129,61,99,36,164,188,104,151,30,123,115,109,39,114,13,250,47,9,87,162,13],[65,253,110,247,30,97,217,204,66,82,245,17,71,9,117,13,2,121,12,110,231,221,140,125,156,67,23,101,255,144,212,96],[167,127,139,214,253,87,231,205,179,109,60,228,57,112,236,105,178,46,92,183,113,113,45,187,117,143,95,143,15,184,116,88],[67,133,229,78,227,18,235,203,151,152,129,72,156,143,172,113,88,118,228,95,234,75,250,29,136,40,134,182,221,148,2,162]]",
                "sol": "[bytes32(stringToBytes32(\"71,78,48,227,188,111,237,96,102,96,70,129,61,99,36,164,188,104,151,30,123,115,109,39,114,13,250,47,9,87,162,13\")),bytes32(stringToBytes32(\"65,253,110,247,30,97,217,204,66,82,245,17,71,9,117,13,2,121,12,110,231,221,140,125,156,67,23,101,255,144,212,96\")),bytes32(stringToBytes32(\"167,127,139,214,253,87,231,205,179,109,60,228,57,112,236,105,178,46,92,183,113,113,45,187,117,143,95,143,15,184,116,88\")),bytes32(stringToBytes32(\"67,133,229,78,227,18,235,203,151,152,129,72,156,143,172,113,88,118,228,95,234,75,250,29,136,40,134,182,221,148,2,162\"))]"
              },
              {
                "js": "[10,99,1,17]",
                "sol": "[uint8(10),uint8(99),uint8(1),uint8(17)]"
              },
              {
                "js": "[[244,123,140,209,167,94,231,7,128,209,145,139,121,169,81,192,235,218,149,155,242,124,210,218,120,25,197,173,249,39,55,35],[235,126,241,218,202,96,148,152,60,138,64,203,30,205,214,61,224,88,254,107,12,226,223,71,136,15,98,113,76,177,52,55],[135,233,132,21,149,69,229,46,7,97,244,214,51,81,121,55,44,24,133,37,155,139,162,87,218,57,107,164,88,1,13,122],[127,232,126,109,21,239,222,215,63,166,168,102,173,214,190,79,29,55,39,214,94,20,69,119,101,170,190,27,246,51,25,76]]",
                "sol": "[bytes32(stringToBytes32(\"244,123,140,209,167,94,231,7,128,209,145,139,121,169,81,192,235,218,149,155,242,124,210,218,120,25,197,173,249,39,55,35\")),bytes32(stringToBytes32(\"235,126,241,218,202,96,148,152,60,138,64,203,30,205,214,61,224,88,254,107,12,226,223,71,136,15,98,113,76,177,52,55\")),bytes32(stringToBytes32(\"135,233,132,21,149,69,229,46,7,97,244,214,51,81,121,55,44,24,133,37,155,139,162,87,218,57,107,164,88,1,13,122\")),bytes32(stringToBytes32(\"127,232,126,109,21,239,222,215,63,166,168,102,173,214,190,79,29,55,39,214,94,20,69,119,101,170,190,27,246,51,25,76\"))]"
              },
              {
                "js": "[[68,156,161,35,13,42,237,210,78,148,52,92,244,28,133,76,101,240,238,40,235,217,213,57,40,139,129,1,242,191,2,27],[26,16,160,157,22,232,254,171,112,231,121,106,157,128,205,55,230,128,247,60,69,9,95,178,19,51,45,180,56,207,237,138],[51,189,145,131,27,10,176,155,232,179,174,159,120,45,25,16,107,207,16,184,4,160,10,68,190,84,113,8,137,36,230,79],[163,77,207,211,57,48,87,132,103,215,6,100,11,236,45,88,33,199,135,130,255,204,73,200,51,121,44,191,86,207,247,209]]",
                "sol": "[bytes32(stringToBytes32(\"68,156,161,35,13,42,237,210,78,148,52,92,244,28,133,76,101,240,238,40,235,217,213,57,40,139,129,1,242,191,2,27\")),bytes32(stringToBytes32(\"26,16,160,157,22,232,254,171,112,231,121,106,157,128,205,55,230,128,247,60,69,9,95,178,19,51,45,180,56,207,237,138\")),bytes32(stringToBytes32(\"51,189,145,131,27,10,176,155,232,179,174,159,120,45,25,16,107,207,16,184,4,160,10,68,190,84,113,8,137,36,230,79\")),bytes32(stringToBytes32(\"163,77,207,211,57,48,87,132,103,215,6,100,11,236,45,88,33,199,135,130,255,204,73,200,51,121,44,191,86,207,247,209\"))]"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[11,15,5,1000,160]",
                "sol": "[100,1338,100,999,10]"
              },
              {
                "js": "[[71,78,48,227,188,111,237,96,102,96,70,129,61,99,36,164,188,104,151,30,123,115,109,39,114,13,250,47,9,87,162,13],[65,253,110,247,30,97,217,204,66,82,245,17,71,9,117,13,2,121,12,110,231,221,140,125,156,67,23,101,255,144,212,96],[167,127,139,214,253,87,231,205,179,109,60,228,57,112,236,105,178,46,92,183,113,113,45,187,117,143,95,143,15,184,116,88],[67,133,229,78,227,18,235,203,151,152,129,72,156,143,172,113,88,118,228,95,234,75,250,29,136,40,134,182,221,148,2,162]]",
                "sol": "[bytes32(stringToBytes32(\"71,78,48,227,188,111,237,96,102,96,70,129,61,99,36,164,188,104,151,30,123,115,109,39,114,13,250,47,9,87,162,13\")),bytes32(stringToBytes32(\"65,253,110,247,30,97,217,204,66,82,245,17,71,9,117,13,2,121,12,110,231,221,140,125,156,67,23,101,255,144,212,96\")),bytes32(stringToBytes32(\"167,127,139,214,253,87,231,205,179,109,60,228,57,112,236,105,178,46,92,183,113,113,45,187,117,143,95,143,15,184,116,88\")),bytes32(stringToBytes32(\"67,133,229,78,227,18,235,203,151,152,129,72,156,143,172,113,88,118,228,95,234,75,250,29,136,40,134,182,221,148,2,162\"))]"
              },
              {
                "js": "[10,99,1,17]",
                "sol": "[uint8(10),uint8(99),uint8(1),uint8(17)]"
              },
              {
                "js": "[[244,123,140,209,167,94,231,7,128,209,145,139,121,169,81,192,235,218,149,155,242,124,210,218,120,25,197,173,249,39,55,35],[235,126,241,218,202,96,148,152,60,138,64,203,30,205,214,61,224,88,254,107,12,226,223,71,136,15,98,113,76,177,52,55],[135,233,132,21,149,69,229,46,7,97,244,214,51,81,121,55,44,24,133,37,155,139,162,87,218,57,107,164,88,1,13,122],[127,232,126,109,21,239,222,215,63,166,168,102,173,214,190,79,29,55,39,214,94,20,69,119,101,170,190,27,246,51,25,76]]",
                "sol": "[bytes32(stringToBytes32(\"244,123,140,209,167,94,231,7,128,209,145,139,121,169,81,192,235,218,149,155,242,124,210,218,120,25,197,173,249,39,55,35\")),bytes32(stringToBytes32(\"235,126,241,218,202,96,148,152,60,138,64,203,30,205,214,61,224,88,254,107,12,226,223,71,136,15,98,113,76,177,52,55\")),bytes32(stringToBytes32(\"135,233,132,21,149,69,229,46,7,97,244,214,51,81,121,55,44,24,133,37,155,139,162,87,218,57,107,164,88,1,13,122\")),bytes32(stringToBytes32(\"127,232,126,109,21,239,222,215,63,166,168,102,173,214,190,79,29,55,39,214,94,20,69,119,101,170,190,27,246,51,25,76\"))]"
              },
              {
                "js": "[[68,156,161,35,13,42,237,210,78,148,52,92,244,28,133,76,101,240,238,40,235,217,213,57,40,139,129,1,242,191,2,27],[26,16,160,157,22,232,254,171,112,231,121,106,157,128,205,55,230,128,247,60,69,9,95,178,19,51,45,180,56,207,237,138],[51,189,145,131,27,10,176,155,232,179,174,159,120,45,25,16,107,207,16,184,4,160,10,68,190,84,113,8,137,36,230,79],[163,77,207,211,57,48,87,132,103,215,6,100,11,236,45,88,33,199,135,130,255,204,73,200,51,121,44,191,86,207,247,209]]",
                "sol": "[bytes32(stringToBytes32(\"68,156,161,35,13,42,237,210,78,148,52,92,244,28,133,76,101,240,238,40,235,217,213,57,40,139,129,1,242,191,2,27\")),bytes32(stringToBytes32(\"26,16,160,157,22,232,254,171,112,231,121,106,157,128,205,55,230,128,247,60,69,9,95,178,19,51,45,180,56,207,237,138\")),bytes32(stringToBytes32(\"51,189,145,131,27,10,176,155,232,179,174,159,120,45,25,16,107,207,16,184,4,160,10,68,190,84,113,8,137,36,230,79\")),bytes32(stringToBytes32(\"163,77,207,211,57,48,87,132,103,215,6,100,11,236,45,88,33,199,135,130,255,204,73,200,51,121,44,191,86,207,247,209\"))]"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:33.014ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "[66,203,218,142,229,122,86,108,235,95,147,78,158,147,16,96,113,58,181,187,72,237,222,229,123,193,206,34,103,41,53,156]",
              "sol": "stringToBytes32(\"66,203,218,142,229,122,86,108,235,95,147,78,158,147,16,96,113,58,181,187,72,237,222,229,123,193,206,34,103,41,53,156\")"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "[93,202,130,251,59,242,16,69,215,239,86,79,159,192,15,210,211,253,86,194,236,249,237,54,84,141,107,4,235,190,146,188]",
              "sol": "stringToBytes32(\"93,202,130,251,59,242,16,69,215,239,86,79,159,192,15,210,211,253,86,194,236,249,237,54,84,141,107,4,235,190,146,188\")"
            },
            {
              "js": "[21,197,146,1,140,29,245,131,152,74,203,224,128,104,20,73,191,33,53,137,25,184,172,157,220,215,83,243,20,45,21,72]",
              "sol": "stringToBytes32(\"21,197,146,1,140,29,245,131,152,74,203,224,128,104,20,73,191,33,53,137,25,184,172,157,220,215,83,243,20,45,21,72\")"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "[66,203,218,142,229,122,86,108,235,95,147,78,158,147,16,96,113,58,181,187,72,237,222,229,123,193,206,34,103,41,53,156]",
                "sol": "stringToBytes32(\"66,203,218,142,229,122,86,108,235,95,147,78,158,147,16,96,113,58,181,187,72,237,222,229,123,193,206,34,103,41,53,156\")"
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "[93,202,130,251,59,242,16,69,215,239,86,79,159,192,15,210,211,253,86,194,236,249,237,54,84,141,107,4,235,190,146,188]",
                "sol": "stringToBytes32(\"93,202,130,251,59,242,16,69,215,239,86,79,159,192,15,210,211,253,86,194,236,249,237,54,84,141,107,4,235,190,146,188\")"
              },
              {
                "js": "[21,197,146,1,140,29,245,131,152,74,203,224,128,104,20,73,191,33,53,137,25,184,172,157,220,215,83,243,20,45,21,72]",
                "sol": "stringToBytes32(\"21,197,146,1,140,29,245,131,152,74,203,224,128,104,20,73,191,33,53,137,25,184,172,157,220,215,83,243,20,45,21,72\")"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "[66,203,218,142,229,122,86,108,235,95,147,78,158,147,16,96,113,58,181,187,72,237,222,229,123,193,206,34,103,41,53,156]",
                "sol": "stringToBytes32(\"66,203,218,142,229,122,86,108,235,95,147,78,158,147,16,96,113,58,181,187,72,237,222,229,123,193,206,34,103,41,53,156\")"
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "[93,202,130,251,59,242,16,69,215,239,86,79,159,192,15,210,211,253,86,194,236,249,237,54,84,141,107,4,235,190,146,188]",
                "sol": "stringToBytes32(\"93,202,130,251,59,242,16,69,215,239,86,79,159,192,15,210,211,253,86,194,236,249,237,54,84,141,107,4,235,190,146,188\")"
              },
              {
                "js": "[21,197,146,1,140,29,245,131,152,74,203,224,128,104,20,73,191,33,53,137,25,184,172,157,220,215,83,243,20,45,21,72]",
                "sol": "stringToBytes32(\"21,197,146,1,140,29,245,131,152,74,203,224,128,104,20,73,191,33,53,137,25,184,172,157,220,215,83,243,20,45,21,72\")"
              },
              {
                "js": 21,
                "sol": 21
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:33.016ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:33.017ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[58,235,99,104,113,131,166,100,15,3,206,238,120,125,6,136,118,76,88,123,137,33,248,223,170,84,69,0,147,78,17,71]",
              "sol": "stringToBytes32(\"58,235,99,104,113,131,166,100,15,3,206,238,120,125,6,136,118,76,88,123,137,33,248,223,170,84,69,0,147,78,17,71\")"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[80,228,135,249,207,8,237,46,82,146,163,246,170,110,16,188,31,181,20,142,116,177,67,101,242,211,146,254,140,57,194,116]",
              "sol": "stringToBytes32(\"80,228,135,249,207,8,237,46,82,146,163,246,170,110,16,188,31,181,20,142,116,177,67,101,242,211,146,254,140,57,194,116\")"
            },
            {
              "js": "[237,83,237,229,246,31,226,142,31,85,168,83,41,213,169,151,207,72,180,149,188,176,236,14,130,34,142,195,207,95,19,249]",
              "sol": "stringToBytes32(\"237,83,237,229,246,31,226,142,31,85,168,83,41,213,169,151,207,72,180,149,188,176,236,14,130,34,142,195,207,95,19,249\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:33.018ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:33.018ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:56:33.018ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:56:33.019ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}