,{
  "2020-11-11T07:50:09.073ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:50:15.632ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+519",
              "sol": "block.number+519"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+519+556",
              "sol": "block.number+519+556"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+519",
                "sol": "block.number+519"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+519+556",
                "sol": "block.number+519+556"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+519",
                "sol": "block.number+519"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+519+556",
                "sol": "block.number+519+556"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+519+556",
                "sol": "block.number+519+556"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+519",
                "sol": "block.number+519"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+519",
                "sol": "block.number+519"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:50:22.117ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:50:28.865ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:50:35.455ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:50:42.097ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:50:48.786ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractTokenProxy.address",
              "sol": "contractTokenProxy"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:50:55.522ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.438ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.439ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.440ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 1,
                "sol": 1
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.441ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.441ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.442ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.443ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.443ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.444ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.444ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.445ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.445ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.446ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.447ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_value <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _value<=0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.449ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.449ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.449ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.452ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.453ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.453ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:6}",
              "sol": "{\"from\":\"0x0\",\"value\":\"6\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:6}",
                "sol": "{\"from\":\"0x0\",\"value\":\"6\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.458ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.459ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.463ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.463ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.463ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.464ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.464ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[229,229,23,196,137,28,169,187,183,51,90,53,238,4,85,32,142,112,139,185,139,88,107,134,169,193,139,232,95,69,60,91]",
              "sol": "stringToBytes32(\"229,229,23,196,137,28,169,187,183,51,90,53,238,4,85,32,142,112,139,185,139,88,107,134,169,193,139,232,95,69,60,91\")"
            },
            {
              "js": "[105,196,219,80,13,19,215,221,146,72,182,228,13,140,38,54,13,255,185,210,224,59,76,233,46,107,118,70,45,157,101,26]",
              "sol": "stringToBytes32(\"105,196,219,80,13,19,215,221,146,72,182,228,13,140,38,54,13,255,185,210,224,59,76,233,46,107,118,70,45,157,101,26\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.464ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "[59,36,254,216,54,45,239,208,33,34,126,11,49,20,168,106,210,29,241,178]",
              "sol": "abi.encode(\"59,36,254,216,54,45,239,208,33,34,126,11,49,20,168,106,210,29,241,178\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "[133,215,32,228,228,76,125,31,197,9,98,26,231,231,122,226,160,120,224,229,171]",
                "sol": "bytes21(\"133,215,32,228,228,76,125,31,197,9,98,26,231,231,122,226,160,120,224,229,171\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.466ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[94,101,183,148,172,218,104,11,134,81,70,163,171,5,98,6,235,102,62,29,245,79,34,45,245,169,202,187,241,199,254,254]",
              "sol": "stringToBytes32(\"94,101,183,148,172,218,104,11,134,81,70,163,171,5,98,6,235,102,62,29,245,79,34,45,245,169,202,187,241,199,254,254\")"
            },
            {
              "js": "[149,97,129,48,82,20,71,194,96,37,38,114,55,143,19,12,73,208,131,25,214,74,155,239,161,217,23,125,10,38,42,50]",
              "sol": "stringToBytes32(\"149,97,129,48,82,20,71,194,96,37,38,114,55,143,19,12,73,208,131,25,214,74,155,239,161,217,23,125,10,38,42,50\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.466ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.467ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.467ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.468ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.469ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.469ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.469ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.470ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.472ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.473ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[5,182,110,119,94,82,148,231,172,174,181,152,200,102,167,11,57,145,70,200,196,223,125,68,195,3,39,178,18,75,130,239]]",
              "sol": "[bytes32(stringToBytes32(\"5,182,110,119,94,82,148,231,172,174,181,152,200,102,167,11,57,145,70,200,196,223,125,68,195,3,39,178,18,75,130,239\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-987",
              "sol": "block.timestamp-987"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[5,182,110,119,94,82,148,231,172,174,181,152,200,102,167,11,57,145,70,200,196,223,125,68,195,3,39,178,18,75,130,239]]",
                "sol": "[bytes32(stringToBytes32(\"5,182,110,119,94,82,148,231,172,174,181,152,200,102,167,11,57,145,70,200,196,223,125,68,195,3,39,178,18,75,130,239\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.474ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "[97,147,194,151,153,147,242,116,47,57,221,70,102,212,242,218,50,77,175,127,115,29,156,221,152,189,177,236,185,69,203,66]",
              "sol": "abi.encode(\"97,147,194,151,153,147,242,116,47,57,221,70,102,212,242,218,50,77,175,127,115,29,156,221,152,189,177,236,185,69,203,66\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "[97,147,194,151,153,147,242,116,47,57,221,70,102,212,242,218,50,77,175,127,115,29,156,221,152,189,177,236,185,69,203,66]",
                "sol": "abi.encode(\"97,147,194,151,153,147,242,116,47,57,221,70,102,212,242,218,50,77,175,127,115,29,156,221,152,189,177,236,185,69,203,66\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.476ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.476ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.476ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.476ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.477ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.477ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.477ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.478ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.479ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.479ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.480ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.480ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.481ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.481ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[121,89,183,175,162,217,250,144,205,149,234,75,106,73,232,183,221,33,179,10,155,200,92,224,255,16,199,153,15,84,157,86]",
              "sol": "abi.encode(\"121,89,183,175,162,217,250,144,205,149,234,75,106,73,232,183,221,33,179,10,155,200,92,224,255,16,199,153,15,84,157,86\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.481ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.482ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.483ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "[139,164,137,165,33,23,71,109,248,137,27,62,124,192,218,182,37,213,172,38,200,7,170,239,200,115,143,77,191,95,88,165]",
              "sol": "stringToBytes32(\"139,164,137,165,33,23,71,109,248,137,27,62,124,192,218,182,37,213,172,38,200,7,170,239,200,115,143,77,191,95,88,165\")"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[150,194,45,100,184,100,118,111,122,22,166,74,233,90,233,141,110,199,160,81,174,191,157,80,168,254,182,66,14,106,125,99]",
              "sol": "stringToBytes32(\"150,194,45,100,184,100,118,111,122,22,166,74,233,90,233,141,110,199,160,81,174,191,157,80,168,254,182,66,14,106,125,99\")"
            },
            {
              "js": "[185,0,129,163,44,63,104,204,210,244,123,238,81,119,215,9,7,168,15,176,221,230,192,125,74,172,66,204,168,4,170,141]",
              "sol": "stringToBytes32(\"185,0,129,163,44,63,104,204,210,244,123,238,81,119,215,9,7,168,15,176,221,230,192,125,74,172,66,204,168,4,170,141\")"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "[139,164,137,165,33,23,71,109,248,137,27,62,124,192,218,182,37,213,172,38,200,7,170,239,200,115,143,77,191,95,88,165]",
                "sol": "stringToBytes32(\"139,164,137,165,33,23,71,109,248,137,27,62,124,192,218,182,37,213,172,38,200,7,170,239,200,115,143,77,191,95,88,165\")"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "[150,194,45,100,184,100,118,111,122,22,166,74,233,90,233,141,110,199,160,81,174,191,157,80,168,254,182,66,14,106,125,99]",
                "sol": "stringToBytes32(\"150,194,45,100,184,100,118,111,122,22,166,74,233,90,233,141,110,199,160,81,174,191,157,80,168,254,182,66,14,106,125,99\")"
              },
              {
                "js": "[185,0,129,163,44,63,104,204,210,244,123,238,81,119,215,9,7,168,15,176,221,230,192,125,74,172,66,204,168,4,170,141]",
                "sol": "stringToBytes32(\"185,0,129,163,44,63,104,204,210,244,123,238,81,119,215,9,7,168,15,176,221,230,192,125,74,172,66,204,168,4,170,141\")"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "[139,164,137,165,33,23,71,109,248,137,27,62,124,192,218,182,37,213,172,38,200,7,170,239,200,115,143,77,191,95,88,165]",
                "sol": "stringToBytes32(\"139,164,137,165,33,23,71,109,248,137,27,62,124,192,218,182,37,213,172,38,200,7,170,239,200,115,143,77,191,95,88,165\")"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "[150,194,45,100,184,100,118,111,122,22,166,74,233,90,233,141,110,199,160,81,174,191,157,80,168,254,182,66,14,106,125,99]",
                "sol": "stringToBytes32(\"150,194,45,100,184,100,118,111,122,22,166,74,233,90,233,141,110,199,160,81,174,191,157,80,168,254,182,66,14,106,125,99\")"
              },
              {
                "js": "[185,0,129,163,44,63,104,204,210,244,123,238,81,119,215,9,7,168,15,176,221,230,192,125,74,172,66,204,168,4,170,141]",
                "sol": "stringToBytes32(\"185,0,129,163,44,63,104,204,210,244,123,238,81,119,215,9,7,168,15,176,221,230,192,125,74,172,66,204,168,4,170,141\")"
              },
              {
                "js": 1339,
                "sol": 1339
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.484ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[5,3,19,1338,99,256]",
              "sol": "[uint256(5),uint256(3),uint256(19),uint256(1338),uint256(99),uint256(256)]"
            },
            {
              "js": "[[191,126,101,148,127,235,157,74,193,129,48,90,81,25,110,8,77,56,52,231,43,196,156,0,88,49,229,227,38,184,21,68],[96,135,242,111,43,71,97,71,169,153,108,210,129,101,255,230,24,138,15,200,219,87,37,11,148,100,220,244,40,199,72,100],[202,129,18,243,1,196,73,188,11,107,166,255,223,99,44,156,99,246,117,245,91,53,214,24,128,224,244,118,126,69,182,139],[248,174,78,189,158,124,90,243,94,225,232,33,190,31,82,232,197,94,180,238,254,17,31,134,104,78,63,65,51,146,6,3],[48,103,151,42,209,25,161,133,65,153,20,163,112,123,188,253,116,167,170,159,171,155,53,82,68,205,54,115,202,160,220,7],[118,185,152,187,94,252,154,90,196,227,107,57,139,12,115,4,200,224,107,238,76,225,71,82,239,186,179,102,173,149,156,248]]",
              "sol": "[bytes32(stringToBytes32(\"191,126,101,148,127,235,157,74,193,129,48,90,81,25,110,8,77,56,52,231,43,196,156,0,88,49,229,227,38,184,21,68\")),bytes32(stringToBytes32(\"96,135,242,111,43,71,97,71,169,153,108,210,129,101,255,230,24,138,15,200,219,87,37,11,148,100,220,244,40,199,72,100\")),bytes32(stringToBytes32(\"202,129,18,243,1,196,73,188,11,107,166,255,223,99,44,156,99,246,117,245,91,53,214,24,128,224,244,118,126,69,182,139\")),bytes32(stringToBytes32(\"248,174,78,189,158,124,90,243,94,225,232,33,190,31,82,232,197,94,180,238,254,17,31,134,104,78,63,65,51,146,6,3\")),bytes32(stringToBytes32(\"48,103,151,42,209,25,161,133,65,153,20,163,112,123,188,253,116,167,170,159,171,155,53,82,68,205,54,115,202,160,220,7\")),bytes32(stringToBytes32(\"118,185,152,187,94,252,154,90,196,227,107,57,139,12,115,4,200,224,107,238,76,225,71,82,239,186,179,102,173,149,156,248\"))]"
            },
            {
              "js": "[82,160,20,83,17,14]",
              "sol": "[uint8(82),uint8(160),uint8(20),uint8(83),uint8(17),uint8(14)]"
            },
            {
              "js": "[[248,202,197,133,209,136,178,219,88,99,189,37,69,219,179,94,213,154,212,118,227,203,196,26,104,71,39,68,139,132,236,240],[0,123,238,22,119,138,17,12,179,180,109,131,164,99,90,87,10,146,91,172,144,159,240,79,197,234,139,183,150,8,164,150],[7,183,184,121,119,254,23,122,212,194,2,132,153,115,246,238,109,81,6,179,199,212,184,10,54,0,141,185,20,16,159,34],[218,183,47,89,177,83,202,180,196,226,92,140,37,51,58,12,5,96,211,223,149,216,90,62,43,64,187,141,13,114,44,88],[233,103,138,207,232,57,165,130,141,49,241,200,48,174,3,26,21,219,239,41,162,89,186,236,136,230,243,186,13,130,218,189],[194,130,149,42,229,92,99,125,152,248,171,26,87,96,10,180,59,214,112,231,44,128,187,80,103,11,66,56,228,30,66,235]]",
              "sol": "[bytes32(stringToBytes32(\"248,202,197,133,209,136,178,219,88,99,189,37,69,219,179,94,213,154,212,118,227,203,196,26,104,71,39,68,139,132,236,240\")),bytes32(stringToBytes32(\"0,123,238,22,119,138,17,12,179,180,109,131,164,99,90,87,10,146,91,172,144,159,240,79,197,234,139,183,150,8,164,150\")),bytes32(stringToBytes32(\"7,183,184,121,119,254,23,122,212,194,2,132,153,115,246,238,109,81,6,179,199,212,184,10,54,0,141,185,20,16,159,34\")),bytes32(stringToBytes32(\"218,183,47,89,177,83,202,180,196,226,92,140,37,51,58,12,5,96,211,223,149,216,90,62,43,64,187,141,13,114,44,88\")),bytes32(stringToBytes32(\"233,103,138,207,232,57,165,130,141,49,241,200,48,174,3,26,21,219,239,41,162,89,186,236,136,230,243,186,13,130,218,189\")),bytes32(stringToBytes32(\"194,130,149,42,229,92,99,125,152,248,171,26,87,96,10,180,59,214,112,231,44,128,187,80,103,11,66,56,228,30,66,235\"))]"
            },
            {
              "js": "[[179,9,120,211,188,193,35,29,66,148,226,235,58,231,195,176,192,145,241,175,54,163,187,162,76,97,93,50,23,254,40,216],[123,163,172,160,217,71,207,69,173,9,132,1,110,71,225,35,48,9,228,122,68,172,57,75,124,233,58,35,112,45,96,86],[200,32,145,182,157,203,204,97,233,125,73,199,101,184,80,96,44,183,208,186,145,101,58,100,245,82,38,19,82,171,159,73],[92,213,166,96,198,33,20,159,250,121,13,248,221,106,216,55,219,20,10,110,128,178,185,132,173,230,68,148,27,87,178,93],[51,20,228,233,210,187,58,19,66,64,52,118,238,98,123,131,166,164,188,169,190,244,77,62,166,34,58,126,248,170,24,180],[246,197,253,207,93,185,79,189,138,193,244,171,95,93,194,245,16,16,239,69,138,62,3,46,91,152,215,254,6,225,243,128]]",
              "sol": "[bytes32(stringToBytes32(\"179,9,120,211,188,193,35,29,66,148,226,235,58,231,195,176,192,145,241,175,54,163,187,162,76,97,93,50,23,254,40,216\")),bytes32(stringToBytes32(\"123,163,172,160,217,71,207,69,173,9,132,1,110,71,225,35,48,9,228,122,68,172,57,75,124,233,58,35,112,45,96,86\")),bytes32(stringToBytes32(\"200,32,145,182,157,203,204,97,233,125,73,199,101,184,80,96,44,183,208,186,145,101,58,100,245,82,38,19,82,171,159,73\")),bytes32(stringToBytes32(\"92,213,166,96,198,33,20,159,250,121,13,248,221,106,216,55,219,20,10,110,128,178,185,132,173,230,68,148,27,87,178,93\")),bytes32(stringToBytes32(\"51,20,228,233,210,187,58,19,66,64,52,118,238,98,123,131,166,164,188,169,190,244,77,62,166,34,58,126,248,170,24,180\")),bytes32(stringToBytes32(\"246,197,253,207,93,185,79,189,138,193,244,171,95,93,194,245,16,16,239,69,138,62,3,46,91,152,215,254,6,225,243,128\"))]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[5,3,19,1338,99,256]",
                "sol": "[uint256(5),uint256(3),uint256(19),uint256(1338),uint256(99),uint256(256)]"
              },
              {
                "js": "[[191,126,101,148,127,235,157,74,193,129,48,90,81,25,110,8,77,56,52,231,43,196,156,0,88,49,229,227,38,184,21,68],[96,135,242,111,43,71,97,71,169,153,108,210,129,101,255,230,24,138,15,200,219,87,37,11,148,100,220,244,40,199,72,100],[202,129,18,243,1,196,73,188,11,107,166,255,223,99,44,156,99,246,117,245,91,53,214,24,128,224,244,118,126,69,182,139],[248,174,78,189,158,124,90,243,94,225,232,33,190,31,82,232,197,94,180,238,254,17,31,134,104,78,63,65,51,146,6,3],[48,103,151,42,209,25,161,133,65,153,20,163,112,123,188,253,116,167,170,159,171,155,53,82,68,205,54,115,202,160,220,7],[118,185,152,187,94,252,154,90,196,227,107,57,139,12,115,4,200,224,107,238,76,225,71,82,239,186,179,102,173,149,156,248]]",
                "sol": "[bytes32(stringToBytes32(\"191,126,101,148,127,235,157,74,193,129,48,90,81,25,110,8,77,56,52,231,43,196,156,0,88,49,229,227,38,184,21,68\")),bytes32(stringToBytes32(\"96,135,242,111,43,71,97,71,169,153,108,210,129,101,255,230,24,138,15,200,219,87,37,11,148,100,220,244,40,199,72,100\")),bytes32(stringToBytes32(\"202,129,18,243,1,196,73,188,11,107,166,255,223,99,44,156,99,246,117,245,91,53,214,24,128,224,244,118,126,69,182,139\")),bytes32(stringToBytes32(\"248,174,78,189,158,124,90,243,94,225,232,33,190,31,82,232,197,94,180,238,254,17,31,134,104,78,63,65,51,146,6,3\")),bytes32(stringToBytes32(\"48,103,151,42,209,25,161,133,65,153,20,163,112,123,188,253,116,167,170,159,171,155,53,82,68,205,54,115,202,160,220,7\")),bytes32(stringToBytes32(\"118,185,152,187,94,252,154,90,196,227,107,57,139,12,115,4,200,224,107,238,76,225,71,82,239,186,179,102,173,149,156,248\"))]"
              },
              {
                "js": "[82,160,20,83,17,14]",
                "sol": "[uint8(82),uint8(160),uint8(20),uint8(83),uint8(17),uint8(14)]"
              },
              {
                "js": "[[248,202,197,133,209,136,178,219,88,99,189,37,69,219,179,94,213,154,212,118,227,203,196,26,104,71,39,68,139,132,236,240],[0,123,238,22,119,138,17,12,179,180,109,131,164,99,90,87,10,146,91,172,144,159,240,79,197,234,139,183,150,8,164,150],[7,183,184,121,119,254,23,122,212,194,2,132,153,115,246,238,109,81,6,179,199,212,184,10,54,0,141,185,20,16,159,34],[218,183,47,89,177,83,202,180,196,226,92,140,37,51,58,12,5,96,211,223,149,216,90,62,43,64,187,141,13,114,44,88],[233,103,138,207,232,57,165,130,141,49,241,200,48,174,3,26,21,219,239,41,162,89,186,236,136,230,243,186,13,130,218,189],[194,130,149,42,229,92,99,125,152,248,171,26,87,96,10,180,59,214,112,231,44,128,187,80,103,11,66,56,228,30,66,235]]",
                "sol": "[bytes32(stringToBytes32(\"248,202,197,133,209,136,178,219,88,99,189,37,69,219,179,94,213,154,212,118,227,203,196,26,104,71,39,68,139,132,236,240\")),bytes32(stringToBytes32(\"0,123,238,22,119,138,17,12,179,180,109,131,164,99,90,87,10,146,91,172,144,159,240,79,197,234,139,183,150,8,164,150\")),bytes32(stringToBytes32(\"7,183,184,121,119,254,23,122,212,194,2,132,153,115,246,238,109,81,6,179,199,212,184,10,54,0,141,185,20,16,159,34\")),bytes32(stringToBytes32(\"218,183,47,89,177,83,202,180,196,226,92,140,37,51,58,12,5,96,211,223,149,216,90,62,43,64,187,141,13,114,44,88\")),bytes32(stringToBytes32(\"233,103,138,207,232,57,165,130,141,49,241,200,48,174,3,26,21,219,239,41,162,89,186,236,136,230,243,186,13,130,218,189\")),bytes32(stringToBytes32(\"194,130,149,42,229,92,99,125,152,248,171,26,87,96,10,180,59,214,112,231,44,128,187,80,103,11,66,56,228,30,66,235\"))]"
              },
              {
                "js": "[[179,9,120,211,188,193,35,29,66,148,226,235,58,231,195,176,192,145,241,175,54,163,187,162,76,97,93,50,23,254,40,216],[123,163,172,160,217,71,207,69,173,9,132,1,110,71,225,35,48,9,228,122,68,172,57,75,124,233,58,35,112,45,96,86],[200,32,145,182,157,203,204,97,233,125,73,199,101,184,80,96,44,183,208,186,145,101,58,100,245,82,38,19,82,171,159,73],[92,213,166,96,198,33,20,159,250,121,13,248,221,106,216,55,219,20,10,110,128,178,185,132,173,230,68,148,27,87,178,93],[51,20,228,233,210,187,58,19,66,64,52,118,238,98,123,131,166,164,188,169,190,244,77,62,166,34,58,126,248,170,24,180],[246,197,253,207,93,185,79,189,138,193,244,171,95,93,194,245,16,16,239,69,138,62,3,46,91,152,215,254,6,225,243,128]]",
                "sol": "[bytes32(stringToBytes32(\"179,9,120,211,188,193,35,29,66,148,226,235,58,231,195,176,192,145,241,175,54,163,187,162,76,97,93,50,23,254,40,216\")),bytes32(stringToBytes32(\"123,163,172,160,217,71,207,69,173,9,132,1,110,71,225,35,48,9,228,122,68,172,57,75,124,233,58,35,112,45,96,86\")),bytes32(stringToBytes32(\"200,32,145,182,157,203,204,97,233,125,73,199,101,184,80,96,44,183,208,186,145,101,58,100,245,82,38,19,82,171,159,73\")),bytes32(stringToBytes32(\"92,213,166,96,198,33,20,159,250,121,13,248,221,106,216,55,219,20,10,110,128,178,185,132,173,230,68,148,27,87,178,93\")),bytes32(stringToBytes32(\"51,20,228,233,210,187,58,19,66,64,52,118,238,98,123,131,166,164,188,169,190,244,77,62,166,34,58,126,248,170,24,180\")),bytes32(stringToBytes32(\"246,197,253,207,93,185,79,189,138,193,244,171,95,93,194,245,16,16,239,69,138,62,3,46,91,152,215,254,6,225,243,128\"))]"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1,255,1337,5,0,16,257]",
                "sol": "[15,999,18,4,6,10,999]"
              },
              {
                "js": "[[191,126,101,148,127,235,157,74,193,129,48,90,81,25,110,8,77,56,52,231,43,196,156,0,88,49,229,227,38,184,21,68],[96,135,242,111,43,71,97,71,169,153,108,210,129,101,255,230,24,138,15,200,219,87,37,11,148,100,220,244,40,199,72,100],[202,129,18,243,1,196,73,188,11,107,166,255,223,99,44,156,99,246,117,245,91,53,214,24,128,224,244,118,126,69,182,139],[248,174,78,189,158,124,90,243,94,225,232,33,190,31,82,232,197,94,180,238,254,17,31,134,104,78,63,65,51,146,6,3],[48,103,151,42,209,25,161,133,65,153,20,163,112,123,188,253,116,167,170,159,171,155,53,82,68,205,54,115,202,160,220,7],[118,185,152,187,94,252,154,90,196,227,107,57,139,12,115,4,200,224,107,238,76,225,71,82,239,186,179,102,173,149,156,248]]",
                "sol": "[bytes32(stringToBytes32(\"191,126,101,148,127,235,157,74,193,129,48,90,81,25,110,8,77,56,52,231,43,196,156,0,88,49,229,227,38,184,21,68\")),bytes32(stringToBytes32(\"96,135,242,111,43,71,97,71,169,153,108,210,129,101,255,230,24,138,15,200,219,87,37,11,148,100,220,244,40,199,72,100\")),bytes32(stringToBytes32(\"202,129,18,243,1,196,73,188,11,107,166,255,223,99,44,156,99,246,117,245,91,53,214,24,128,224,244,118,126,69,182,139\")),bytes32(stringToBytes32(\"248,174,78,189,158,124,90,243,94,225,232,33,190,31,82,232,197,94,180,238,254,17,31,134,104,78,63,65,51,146,6,3\")),bytes32(stringToBytes32(\"48,103,151,42,209,25,161,133,65,153,20,163,112,123,188,253,116,167,170,159,171,155,53,82,68,205,54,115,202,160,220,7\")),bytes32(stringToBytes32(\"118,185,152,187,94,252,154,90,196,227,107,57,139,12,115,4,200,224,107,238,76,225,71,82,239,186,179,102,173,149,156,248\"))]"
              },
              {
                "js": "[82,160,20,83,17,14]",
                "sol": "[uint8(82),uint8(160),uint8(20),uint8(83),uint8(17),uint8(14)]"
              },
              {
                "js": "[[248,202,197,133,209,136,178,219,88,99,189,37,69,219,179,94,213,154,212,118,227,203,196,26,104,71,39,68,139,132,236,240],[0,123,238,22,119,138,17,12,179,180,109,131,164,99,90,87,10,146,91,172,144,159,240,79,197,234,139,183,150,8,164,150],[7,183,184,121,119,254,23,122,212,194,2,132,153,115,246,238,109,81,6,179,199,212,184,10,54,0,141,185,20,16,159,34],[218,183,47,89,177,83,202,180,196,226,92,140,37,51,58,12,5,96,211,223,149,216,90,62,43,64,187,141,13,114,44,88],[233,103,138,207,232,57,165,130,141,49,241,200,48,174,3,26,21,219,239,41,162,89,186,236,136,230,243,186,13,130,218,189],[194,130,149,42,229,92,99,125,152,248,171,26,87,96,10,180,59,214,112,231,44,128,187,80,103,11,66,56,228,30,66,235]]",
                "sol": "[bytes32(stringToBytes32(\"248,202,197,133,209,136,178,219,88,99,189,37,69,219,179,94,213,154,212,118,227,203,196,26,104,71,39,68,139,132,236,240\")),bytes32(stringToBytes32(\"0,123,238,22,119,138,17,12,179,180,109,131,164,99,90,87,10,146,91,172,144,159,240,79,197,234,139,183,150,8,164,150\")),bytes32(stringToBytes32(\"7,183,184,121,119,254,23,122,212,194,2,132,153,115,246,238,109,81,6,179,199,212,184,10,54,0,141,185,20,16,159,34\")),bytes32(stringToBytes32(\"218,183,47,89,177,83,202,180,196,226,92,140,37,51,58,12,5,96,211,223,149,216,90,62,43,64,187,141,13,114,44,88\")),bytes32(stringToBytes32(\"233,103,138,207,232,57,165,130,141,49,241,200,48,174,3,26,21,219,239,41,162,89,186,236,136,230,243,186,13,130,218,189\")),bytes32(stringToBytes32(\"194,130,149,42,229,92,99,125,152,248,171,26,87,96,10,180,59,214,112,231,44,128,187,80,103,11,66,56,228,30,66,235\"))]"
              },
              {
                "js": "[[179,9,120,211,188,193,35,29,66,148,226,235,58,231,195,176,192,145,241,175,54,163,187,162,76,97,93,50,23,254,40,216],[123,163,172,160,217,71,207,69,173,9,132,1,110,71,225,35,48,9,228,122,68,172,57,75,124,233,58,35,112,45,96,86],[200,32,145,182,157,203,204,97,233,125,73,199,101,184,80,96,44,183,208,186,145,101,58,100,245,82,38,19,82,171,159,73],[92,213,166,96,198,33,20,159,250,121,13,248,221,106,216,55,219,20,10,110,128,178,185,132,173,230,68,148,27,87,178,93],[51,20,228,233,210,187,58,19,66,64,52,118,238,98,123,131,166,164,188,169,190,244,77,62,166,34,58,126,248,170,24,180],[246,197,253,207,93,185,79,189,138,193,244,171,95,93,194,245,16,16,239,69,138,62,3,46,91,152,215,254,6,225,243,128]]",
                "sol": "[bytes32(stringToBytes32(\"179,9,120,211,188,193,35,29,66,148,226,235,58,231,195,176,192,145,241,175,54,163,187,162,76,97,93,50,23,254,40,216\")),bytes32(stringToBytes32(\"123,163,172,160,217,71,207,69,173,9,132,1,110,71,225,35,48,9,228,122,68,172,57,75,124,233,58,35,112,45,96,86\")),bytes32(stringToBytes32(\"200,32,145,182,157,203,204,97,233,125,73,199,101,184,80,96,44,183,208,186,145,101,58,100,245,82,38,19,82,171,159,73\")),bytes32(stringToBytes32(\"92,213,166,96,198,33,20,159,250,121,13,248,221,106,216,55,219,20,10,110,128,178,185,132,173,230,68,148,27,87,178,93\")),bytes32(stringToBytes32(\"51,20,228,233,210,187,58,19,66,64,52,118,238,98,123,131,166,164,188,169,190,244,77,62,166,34,58,126,248,170,24,180\")),bytes32(stringToBytes32(\"246,197,253,207,93,185,79,189,138,193,244,171,95,93,194,245,16,16,239,69,138,62,3,46,91,152,215,254,6,225,243,128\"))]"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[18,1001,4,1336,1,15,20]",
                "sol": "[256,1,100,10001,10,257,18]"
              },
              {
                "js": "[[191,126,101,148,127,235,157,74,193,129,48,90,81,25,110,8,77,56,52,231,43,196,156,0,88,49,229,227,38,184,21,68],[96,135,242,111,43,71,97,71,169,153,108,210,129,101,255,230,24,138,15,200,219,87,37,11,148,100,220,244,40,199,72,100],[202,129,18,243,1,196,73,188,11,107,166,255,223,99,44,156,99,246,117,245,91,53,214,24,128,224,244,118,126,69,182,139],[248,174,78,189,158,124,90,243,94,225,232,33,190,31,82,232,197,94,180,238,254,17,31,134,104,78,63,65,51,146,6,3],[48,103,151,42,209,25,161,133,65,153,20,163,112,123,188,253,116,167,170,159,171,155,53,82,68,205,54,115,202,160,220,7],[118,185,152,187,94,252,154,90,196,227,107,57,139,12,115,4,200,224,107,238,76,225,71,82,239,186,179,102,173,149,156,248]]",
                "sol": "[bytes32(stringToBytes32(\"191,126,101,148,127,235,157,74,193,129,48,90,81,25,110,8,77,56,52,231,43,196,156,0,88,49,229,227,38,184,21,68\")),bytes32(stringToBytes32(\"96,135,242,111,43,71,97,71,169,153,108,210,129,101,255,230,24,138,15,200,219,87,37,11,148,100,220,244,40,199,72,100\")),bytes32(stringToBytes32(\"202,129,18,243,1,196,73,188,11,107,166,255,223,99,44,156,99,246,117,245,91,53,214,24,128,224,244,118,126,69,182,139\")),bytes32(stringToBytes32(\"248,174,78,189,158,124,90,243,94,225,232,33,190,31,82,232,197,94,180,238,254,17,31,134,104,78,63,65,51,146,6,3\")),bytes32(stringToBytes32(\"48,103,151,42,209,25,161,133,65,153,20,163,112,123,188,253,116,167,170,159,171,155,53,82,68,205,54,115,202,160,220,7\")),bytes32(stringToBytes32(\"118,185,152,187,94,252,154,90,196,227,107,57,139,12,115,4,200,224,107,238,76,225,71,82,239,186,179,102,173,149,156,248\"))]"
              },
              {
                "js": "[82,160,20,83,17,14]",
                "sol": "[uint8(82),uint8(160),uint8(20),uint8(83),uint8(17),uint8(14)]"
              },
              {
                "js": "[[248,202,197,133,209,136,178,219,88,99,189,37,69,219,179,94,213,154,212,118,227,203,196,26,104,71,39,68,139,132,236,240],[0,123,238,22,119,138,17,12,179,180,109,131,164,99,90,87,10,146,91,172,144,159,240,79,197,234,139,183,150,8,164,150],[7,183,184,121,119,254,23,122,212,194,2,132,153,115,246,238,109,81,6,179,199,212,184,10,54,0,141,185,20,16,159,34],[218,183,47,89,177,83,202,180,196,226,92,140,37,51,58,12,5,96,211,223,149,216,90,62,43,64,187,141,13,114,44,88],[233,103,138,207,232,57,165,130,141,49,241,200,48,174,3,26,21,219,239,41,162,89,186,236,136,230,243,186,13,130,218,189],[194,130,149,42,229,92,99,125,152,248,171,26,87,96,10,180,59,214,112,231,44,128,187,80,103,11,66,56,228,30,66,235]]",
                "sol": "[bytes32(stringToBytes32(\"248,202,197,133,209,136,178,219,88,99,189,37,69,219,179,94,213,154,212,118,227,203,196,26,104,71,39,68,139,132,236,240\")),bytes32(stringToBytes32(\"0,123,238,22,119,138,17,12,179,180,109,131,164,99,90,87,10,146,91,172,144,159,240,79,197,234,139,183,150,8,164,150\")),bytes32(stringToBytes32(\"7,183,184,121,119,254,23,122,212,194,2,132,153,115,246,238,109,81,6,179,199,212,184,10,54,0,141,185,20,16,159,34\")),bytes32(stringToBytes32(\"218,183,47,89,177,83,202,180,196,226,92,140,37,51,58,12,5,96,211,223,149,216,90,62,43,64,187,141,13,114,44,88\")),bytes32(stringToBytes32(\"233,103,138,207,232,57,165,130,141,49,241,200,48,174,3,26,21,219,239,41,162,89,186,236,136,230,243,186,13,130,218,189\")),bytes32(stringToBytes32(\"194,130,149,42,229,92,99,125,152,248,171,26,87,96,10,180,59,214,112,231,44,128,187,80,103,11,66,56,228,30,66,235\"))]"
              },
              {
                "js": "[[179,9,120,211,188,193,35,29,66,148,226,235,58,231,195,176,192,145,241,175,54,163,187,162,76,97,93,50,23,254,40,216],[123,163,172,160,217,71,207,69,173,9,132,1,110,71,225,35,48,9,228,122,68,172,57,75,124,233,58,35,112,45,96,86],[200,32,145,182,157,203,204,97,233,125,73,199,101,184,80,96,44,183,208,186,145,101,58,100,245,82,38,19,82,171,159,73],[92,213,166,96,198,33,20,159,250,121,13,248,221,106,216,55,219,20,10,110,128,178,185,132,173,230,68,148,27,87,178,93],[51,20,228,233,210,187,58,19,66,64,52,118,238,98,123,131,166,164,188,169,190,244,77,62,166,34,58,126,248,170,24,180],[246,197,253,207,93,185,79,189,138,193,244,171,95,93,194,245,16,16,239,69,138,62,3,46,91,152,215,254,6,225,243,128]]",
                "sol": "[bytes32(stringToBytes32(\"179,9,120,211,188,193,35,29,66,148,226,235,58,231,195,176,192,145,241,175,54,163,187,162,76,97,93,50,23,254,40,216\")),bytes32(stringToBytes32(\"123,163,172,160,217,71,207,69,173,9,132,1,110,71,225,35,48,9,228,122,68,172,57,75,124,233,58,35,112,45,96,86\")),bytes32(stringToBytes32(\"200,32,145,182,157,203,204,97,233,125,73,199,101,184,80,96,44,183,208,186,145,101,58,100,245,82,38,19,82,171,159,73\")),bytes32(stringToBytes32(\"92,213,166,96,198,33,20,159,250,121,13,248,221,106,216,55,219,20,10,110,128,178,185,132,173,230,68,148,27,87,178,93\")),bytes32(stringToBytes32(\"51,20,228,233,210,187,58,19,66,64,52,118,238,98,123,131,166,164,188,169,190,244,77,62,166,34,58,126,248,170,24,180\")),bytes32(stringToBytes32(\"246,197,253,207,93,185,79,189,138,193,244,171,95,93,194,245,16,16,239,69,138,62,3,46,91,152,215,254,6,225,243,128\"))]"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[4,2,82,256,99,5,256]",
                "sol": "[1001,16,83,999,100,255,10]"
              },
              {
                "js": "[[191,126,101,148,127,235,157,74,193,129,48,90,81,25,110,8,77,56,52,231,43,196,156,0,88,49,229,227,38,184,21,68],[96,135,242,111,43,71,97,71,169,153,108,210,129,101,255,230,24,138,15,200,219,87,37,11,148,100,220,244,40,199,72,100],[202,129,18,243,1,196,73,188,11,107,166,255,223,99,44,156,99,246,117,245,91,53,214,24,128,224,244,118,126,69,182,139],[248,174,78,189,158,124,90,243,94,225,232,33,190,31,82,232,197,94,180,238,254,17,31,134,104,78,63,65,51,146,6,3],[48,103,151,42,209,25,161,133,65,153,20,163,112,123,188,253,116,167,170,159,171,155,53,82,68,205,54,115,202,160,220,7],[118,185,152,187,94,252,154,90,196,227,107,57,139,12,115,4,200,224,107,238,76,225,71,82,239,186,179,102,173,149,156,248]]",
                "sol": "[bytes32(stringToBytes32(\"191,126,101,148,127,235,157,74,193,129,48,90,81,25,110,8,77,56,52,231,43,196,156,0,88,49,229,227,38,184,21,68\")),bytes32(stringToBytes32(\"96,135,242,111,43,71,97,71,169,153,108,210,129,101,255,230,24,138,15,200,219,87,37,11,148,100,220,244,40,199,72,100\")),bytes32(stringToBytes32(\"202,129,18,243,1,196,73,188,11,107,166,255,223,99,44,156,99,246,117,245,91,53,214,24,128,224,244,118,126,69,182,139\")),bytes32(stringToBytes32(\"248,174,78,189,158,124,90,243,94,225,232,33,190,31,82,232,197,94,180,238,254,17,31,134,104,78,63,65,51,146,6,3\")),bytes32(stringToBytes32(\"48,103,151,42,209,25,161,133,65,153,20,163,112,123,188,253,116,167,170,159,171,155,53,82,68,205,54,115,202,160,220,7\")),bytes32(stringToBytes32(\"118,185,152,187,94,252,154,90,196,227,107,57,139,12,115,4,200,224,107,238,76,225,71,82,239,186,179,102,173,149,156,248\"))]"
              },
              {
                "js": "[82,160,20,83,17,14]",
                "sol": "[uint8(82),uint8(160),uint8(20),uint8(83),uint8(17),uint8(14)]"
              },
              {
                "js": "[[248,202,197,133,209,136,178,219,88,99,189,37,69,219,179,94,213,154,212,118,227,203,196,26,104,71,39,68,139,132,236,240],[0,123,238,22,119,138,17,12,179,180,109,131,164,99,90,87,10,146,91,172,144,159,240,79,197,234,139,183,150,8,164,150],[7,183,184,121,119,254,23,122,212,194,2,132,153,115,246,238,109,81,6,179,199,212,184,10,54,0,141,185,20,16,159,34],[218,183,47,89,177,83,202,180,196,226,92,140,37,51,58,12,5,96,211,223,149,216,90,62,43,64,187,141,13,114,44,88],[233,103,138,207,232,57,165,130,141,49,241,200,48,174,3,26,21,219,239,41,162,89,186,236,136,230,243,186,13,130,218,189],[194,130,149,42,229,92,99,125,152,248,171,26,87,96,10,180,59,214,112,231,44,128,187,80,103,11,66,56,228,30,66,235]]",
                "sol": "[bytes32(stringToBytes32(\"248,202,197,133,209,136,178,219,88,99,189,37,69,219,179,94,213,154,212,118,227,203,196,26,104,71,39,68,139,132,236,240\")),bytes32(stringToBytes32(\"0,123,238,22,119,138,17,12,179,180,109,131,164,99,90,87,10,146,91,172,144,159,240,79,197,234,139,183,150,8,164,150\")),bytes32(stringToBytes32(\"7,183,184,121,119,254,23,122,212,194,2,132,153,115,246,238,109,81,6,179,199,212,184,10,54,0,141,185,20,16,159,34\")),bytes32(stringToBytes32(\"218,183,47,89,177,83,202,180,196,226,92,140,37,51,58,12,5,96,211,223,149,216,90,62,43,64,187,141,13,114,44,88\")),bytes32(stringToBytes32(\"233,103,138,207,232,57,165,130,141,49,241,200,48,174,3,26,21,219,239,41,162,89,186,236,136,230,243,186,13,130,218,189\")),bytes32(stringToBytes32(\"194,130,149,42,229,92,99,125,152,248,171,26,87,96,10,180,59,214,112,231,44,128,187,80,103,11,66,56,228,30,66,235\"))]"
              },
              {
                "js": "[[179,9,120,211,188,193,35,29,66,148,226,235,58,231,195,176,192,145,241,175,54,163,187,162,76,97,93,50,23,254,40,216],[123,163,172,160,217,71,207,69,173,9,132,1,110,71,225,35,48,9,228,122,68,172,57,75,124,233,58,35,112,45,96,86],[200,32,145,182,157,203,204,97,233,125,73,199,101,184,80,96,44,183,208,186,145,101,58,100,245,82,38,19,82,171,159,73],[92,213,166,96,198,33,20,159,250,121,13,248,221,106,216,55,219,20,10,110,128,178,185,132,173,230,68,148,27,87,178,93],[51,20,228,233,210,187,58,19,66,64,52,118,238,98,123,131,166,164,188,169,190,244,77,62,166,34,58,126,248,170,24,180],[246,197,253,207,93,185,79,189,138,193,244,171,95,93,194,245,16,16,239,69,138,62,3,46,91,152,215,254,6,225,243,128]]",
                "sol": "[bytes32(stringToBytes32(\"179,9,120,211,188,193,35,29,66,148,226,235,58,231,195,176,192,145,241,175,54,163,187,162,76,97,93,50,23,254,40,216\")),bytes32(stringToBytes32(\"123,163,172,160,217,71,207,69,173,9,132,1,110,71,225,35,48,9,228,122,68,172,57,75,124,233,58,35,112,45,96,86\")),bytes32(stringToBytes32(\"200,32,145,182,157,203,204,97,233,125,73,199,101,184,80,96,44,183,208,186,145,101,58,100,245,82,38,19,82,171,159,73\")),bytes32(stringToBytes32(\"92,213,166,96,198,33,20,159,250,121,13,248,221,106,216,55,219,20,10,110,128,178,185,132,173,230,68,148,27,87,178,93\")),bytes32(stringToBytes32(\"51,20,228,233,210,187,58,19,66,64,52,118,238,98,123,131,166,164,188,169,190,244,77,62,166,34,58,126,248,170,24,180\")),bytes32(stringToBytes32(\"246,197,253,207,93,185,79,189,138,193,244,171,95,93,194,245,16,16,239,69,138,62,3,46,91,152,215,254,6,225,243,128\"))]"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[83,9,2,1001,1336,159,5]",
                "sol": "[11,160,1336,256,17,1,101]"
              },
              {
                "js": "[[191,126,101,148,127,235,157,74,193,129,48,90,81,25,110,8,77,56,52,231,43,196,156,0,88,49,229,227,38,184,21,68],[96,135,242,111,43,71,97,71,169,153,108,210,129,101,255,230,24,138,15,200,219,87,37,11,148,100,220,244,40,199,72,100],[202,129,18,243,1,196,73,188,11,107,166,255,223,99,44,156,99,246,117,245,91,53,214,24,128,224,244,118,126,69,182,139],[248,174,78,189,158,124,90,243,94,225,232,33,190,31,82,232,197,94,180,238,254,17,31,134,104,78,63,65,51,146,6,3],[48,103,151,42,209,25,161,133,65,153,20,163,112,123,188,253,116,167,170,159,171,155,53,82,68,205,54,115,202,160,220,7],[118,185,152,187,94,252,154,90,196,227,107,57,139,12,115,4,200,224,107,238,76,225,71,82,239,186,179,102,173,149,156,248]]",
                "sol": "[bytes32(stringToBytes32(\"191,126,101,148,127,235,157,74,193,129,48,90,81,25,110,8,77,56,52,231,43,196,156,0,88,49,229,227,38,184,21,68\")),bytes32(stringToBytes32(\"96,135,242,111,43,71,97,71,169,153,108,210,129,101,255,230,24,138,15,200,219,87,37,11,148,100,220,244,40,199,72,100\")),bytes32(stringToBytes32(\"202,129,18,243,1,196,73,188,11,107,166,255,223,99,44,156,99,246,117,245,91,53,214,24,128,224,244,118,126,69,182,139\")),bytes32(stringToBytes32(\"248,174,78,189,158,124,90,243,94,225,232,33,190,31,82,232,197,94,180,238,254,17,31,134,104,78,63,65,51,146,6,3\")),bytes32(stringToBytes32(\"48,103,151,42,209,25,161,133,65,153,20,163,112,123,188,253,116,167,170,159,171,155,53,82,68,205,54,115,202,160,220,7\")),bytes32(stringToBytes32(\"118,185,152,187,94,252,154,90,196,227,107,57,139,12,115,4,200,224,107,238,76,225,71,82,239,186,179,102,173,149,156,248\"))]"
              },
              {
                "js": "[82,160,20,83,17,14]",
                "sol": "[uint8(82),uint8(160),uint8(20),uint8(83),uint8(17),uint8(14)]"
              },
              {
                "js": "[[248,202,197,133,209,136,178,219,88,99,189,37,69,219,179,94,213,154,212,118,227,203,196,26,104,71,39,68,139,132,236,240],[0,123,238,22,119,138,17,12,179,180,109,131,164,99,90,87,10,146,91,172,144,159,240,79,197,234,139,183,150,8,164,150],[7,183,184,121,119,254,23,122,212,194,2,132,153,115,246,238,109,81,6,179,199,212,184,10,54,0,141,185,20,16,159,34],[218,183,47,89,177,83,202,180,196,226,92,140,37,51,58,12,5,96,211,223,149,216,90,62,43,64,187,141,13,114,44,88],[233,103,138,207,232,57,165,130,141,49,241,200,48,174,3,26,21,219,239,41,162,89,186,236,136,230,243,186,13,130,218,189],[194,130,149,42,229,92,99,125,152,248,171,26,87,96,10,180,59,214,112,231,44,128,187,80,103,11,66,56,228,30,66,235]]",
                "sol": "[bytes32(stringToBytes32(\"248,202,197,133,209,136,178,219,88,99,189,37,69,219,179,94,213,154,212,118,227,203,196,26,104,71,39,68,139,132,236,240\")),bytes32(stringToBytes32(\"0,123,238,22,119,138,17,12,179,180,109,131,164,99,90,87,10,146,91,172,144,159,240,79,197,234,139,183,150,8,164,150\")),bytes32(stringToBytes32(\"7,183,184,121,119,254,23,122,212,194,2,132,153,115,246,238,109,81,6,179,199,212,184,10,54,0,141,185,20,16,159,34\")),bytes32(stringToBytes32(\"218,183,47,89,177,83,202,180,196,226,92,140,37,51,58,12,5,96,211,223,149,216,90,62,43,64,187,141,13,114,44,88\")),bytes32(stringToBytes32(\"233,103,138,207,232,57,165,130,141,49,241,200,48,174,3,26,21,219,239,41,162,89,186,236,136,230,243,186,13,130,218,189\")),bytes32(stringToBytes32(\"194,130,149,42,229,92,99,125,152,248,171,26,87,96,10,180,59,214,112,231,44,128,187,80,103,11,66,56,228,30,66,235\"))]"
              },
              {
                "js": "[[179,9,120,211,188,193,35,29,66,148,226,235,58,231,195,176,192,145,241,175,54,163,187,162,76,97,93,50,23,254,40,216],[123,163,172,160,217,71,207,69,173,9,132,1,110,71,225,35,48,9,228,122,68,172,57,75,124,233,58,35,112,45,96,86],[200,32,145,182,157,203,204,97,233,125,73,199,101,184,80,96,44,183,208,186,145,101,58,100,245,82,38,19,82,171,159,73],[92,213,166,96,198,33,20,159,250,121,13,248,221,106,216,55,219,20,10,110,128,178,185,132,173,230,68,148,27,87,178,93],[51,20,228,233,210,187,58,19,66,64,52,118,238,98,123,131,166,164,188,169,190,244,77,62,166,34,58,126,248,170,24,180],[246,197,253,207,93,185,79,189,138,193,244,171,95,93,194,245,16,16,239,69,138,62,3,46,91,152,215,254,6,225,243,128]]",
                "sol": "[bytes32(stringToBytes32(\"179,9,120,211,188,193,35,29,66,148,226,235,58,231,195,176,192,145,241,175,54,163,187,162,76,97,93,50,23,254,40,216\")),bytes32(stringToBytes32(\"123,163,172,160,217,71,207,69,173,9,132,1,110,71,225,35,48,9,228,122,68,172,57,75,124,233,58,35,112,45,96,86\")),bytes32(stringToBytes32(\"200,32,145,182,157,203,204,97,233,125,73,199,101,184,80,96,44,183,208,186,145,101,58,100,245,82,38,19,82,171,159,73\")),bytes32(stringToBytes32(\"92,213,166,96,198,33,20,159,250,121,13,248,221,106,216,55,219,20,10,110,128,178,185,132,173,230,68,148,27,87,178,93\")),bytes32(stringToBytes32(\"51,20,228,233,210,187,58,19,66,64,52,118,238,98,123,131,166,164,188,169,190,244,77,62,166,34,58,126,248,170,24,180\")),bytes32(stringToBytes32(\"246,197,253,207,93,185,79,189,138,193,244,171,95,93,194,245,16,16,239,69,138,62,3,46,91,152,215,254,6,225,243,128\"))]"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.490ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "[74,184,114,198,125,30,138,225,185,203,202,149,98,147,212,117,80,91,86,219,144,31,23,222,210,67,135,11,131,40,4,50]",
              "sol": "stringToBytes32(\"74,184,114,198,125,30,138,225,185,203,202,149,98,147,212,117,80,91,86,219,144,31,23,222,210,67,135,11,131,40,4,50\")"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[122,226,228,207,169,39,101,124,249,89,255,97,209,194,216,83,171,21,73,197,158,112,20,119,67,225,223,151,76,193,13,49]",
              "sol": "stringToBytes32(\"122,226,228,207,169,39,101,124,249,89,255,97,209,194,216,83,171,21,73,197,158,112,20,119,67,225,223,151,76,193,13,49\")"
            },
            {
              "js": "[184,87,50,231,70,193,123,237,245,255,153,144,202,93,245,197,239,14,232,229,163,198,200,29,176,56,205,142,200,163,145,73]",
              "sol": "stringToBytes32(\"184,87,50,231,70,193,123,237,245,255,153,144,202,93,245,197,239,14,232,229,163,198,200,29,176,56,205,142,200,163,145,73\")"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "[74,184,114,198,125,30,138,225,185,203,202,149,98,147,212,117,80,91,86,219,144,31,23,222,210,67,135,11,131,40,4,50]",
                "sol": "stringToBytes32(\"74,184,114,198,125,30,138,225,185,203,202,149,98,147,212,117,80,91,86,219,144,31,23,222,210,67,135,11,131,40,4,50\")"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "[122,226,228,207,169,39,101,124,249,89,255,97,209,194,216,83,171,21,73,197,158,112,20,119,67,225,223,151,76,193,13,49]",
                "sol": "stringToBytes32(\"122,226,228,207,169,39,101,124,249,89,255,97,209,194,216,83,171,21,73,197,158,112,20,119,67,225,223,151,76,193,13,49\")"
              },
              {
                "js": "[184,87,50,231,70,193,123,237,245,255,153,144,202,93,245,197,239,14,232,229,163,198,200,29,176,56,205,142,200,163,145,73]",
                "sol": "stringToBytes32(\"184,87,50,231,70,193,123,237,245,255,153,144,202,93,245,197,239,14,232,229,163,198,200,29,176,56,205,142,200,163,145,73\")"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "[74,184,114,198,125,30,138,225,185,203,202,149,98,147,212,117,80,91,86,219,144,31,23,222,210,67,135,11,131,40,4,50]",
                "sol": "stringToBytes32(\"74,184,114,198,125,30,138,225,185,203,202,149,98,147,212,117,80,91,86,219,144,31,23,222,210,67,135,11,131,40,4,50\")"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "[122,226,228,207,169,39,101,124,249,89,255,97,209,194,216,83,171,21,73,197,158,112,20,119,67,225,223,151,76,193,13,49]",
                "sol": "stringToBytes32(\"122,226,228,207,169,39,101,124,249,89,255,97,209,194,216,83,171,21,73,197,158,112,20,119,67,225,223,151,76,193,13,49\")"
              },
              {
                "js": "[184,87,50,231,70,193,123,237,245,255,153,144,202,93,245,197,239,14,232,229,163,198,200,29,176,56,205,142,200,163,145,73]",
                "sol": "stringToBytes32(\"184,87,50,231,70,193,123,237,245,255,153,144,202,93,245,197,239,14,232,229,163,198,200,29,176,56,205,142,200,163,145,73\")"
              },
              {
                "js": 256,
                "sol": 256
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.491ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.492ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "[190,98,8,244,172,77,108,242,18,215,228,103,158,81,113,93,68,145,239,26,135,175,111,171,236,176,64,65,129,174,184,243]",
              "sol": "stringToBytes32(\"190,98,8,244,172,77,108,242,18,215,228,103,158,81,113,93,68,145,239,26,135,175,111,171,236,176,64,65,129,174,184,243\")"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "[145,198,129,37,112,183,3,244,33,147,164,59,193,209,48,158,74,25,221,81,216,92,30,57,21,28,51,164,219,111,29,21]",
              "sol": "stringToBytes32(\"145,198,129,37,112,183,3,244,33,147,164,59,193,209,48,158,74,25,221,81,216,92,30,57,21,28,51,164,219,111,29,21\")"
            },
            {
              "js": "[13,75,171,76,191,147,231,167,80,190,153,196,118,32,240,205,126,91,55,66,74,174,13,2,16,221,92,199,149,51,38,57]",
              "sol": "stringToBytes32(\"13,75,171,76,191,147,231,167,80,190,153,196,118,32,240,205,126,91,55,66,74,174,13,2,16,221,92,199,149,51,38,57\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.492ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.493ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:51:02.493ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:51:02.493ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}