,{
  "2020-11-10T18:13:28.990ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:13:35.381ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+234",
              "sol": "block.number+234"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+234+313",
              "sol": "block.number+234+313"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+234",
                "sol": "block.number+234"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+234+313",
                "sol": "block.number+234+313"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+234",
                "sol": "block.number+234"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+234+313",
                "sol": "block.number+234+313"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+234+313",
                "sol": "block.number+234+313"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+234",
                "sol": "block.number+234"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+234",
                "sol": "block.number+234"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:13:41.937ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:13:48.326ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:13:54.893ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:01.548ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractTokenProxy.address",
              "sol": "contractTokenProxy"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:08.132ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:14.760ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.508ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.509ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.509ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": 20,
                "sol": 20
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.510ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.511ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.511ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.512ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.513ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.514ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.514ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.515ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.515ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.516ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.517ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_value <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _value<=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.518ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.519ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.519ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.521ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.522ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.523ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:18}",
              "sol": "{\"from\":\"0x0\",\"value\":\"18\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:18}",
                "sol": "{\"from\":\"0x0\",\"value\":\"18\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.527ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.528ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.532ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.533ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.533ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.533ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.533ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "[108,7,48,36,122,104,204,22,44,163,207,184,250,30,230,240,24,85,205,4,203,171,158,42,49,217,153,150,60,70,244,224]",
              "sol": "stringToBytes32(\"108,7,48,36,122,104,204,22,44,163,207,184,250,30,230,240,24,85,205,4,203,171,158,42,49,217,153,150,60,70,244,224\")"
            },
            {
              "js": "[84,90,57,186,198,23,83,125,6,76,225,71,207,12,79,177,34,146,211,226,235,188,106,47,51,213,44,185,151,169,232,89]",
              "sol": "stringToBytes32(\"84,90,57,186,198,23,83,125,6,76,225,71,207,12,79,177,34,146,211,226,235,188,106,47,51,213,44,185,151,169,232,89\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.534ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[152,175,70,198,144,67,35,204,126,74,182,128,114,188,69,38,211,69,171,174]",
              "sol": "abi.encode(\"152,175,70,198,144,67,35,204,126,74,182,128,114,188,69,38,211,69,171,174\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[102,122,118,219,98,110,46,72,62,236,76,133,168,216,39,88,171,244,221,87,106]",
                "sol": "bytes21(\"102,122,118,219,98,110,46,72,62,236,76,133,168,216,39,88,171,244,221,87,106\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.535ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "[237,148,199,116,66,43,240,180,98,210,164,215,12,120,120,55,21,71,118,21,19,253,148,222,39,121,30,129,29,16,131,49]",
              "sol": "stringToBytes32(\"237,148,199,116,66,43,240,180,98,210,164,215,12,120,120,55,21,71,118,21,19,253,148,222,39,121,30,129,29,16,131,49\")"
            },
            {
              "js": "[13,78,107,145,89,16,78,192,233,70,78,29,76,224,174,241,123,25,81,93,238,157,253,233,210,176,208,185,234,27,192,216]",
              "sol": "stringToBytes32(\"13,78,107,145,89,16,78,192,233,70,78,29,76,224,174,241,123,25,81,93,238,157,253,233,210,176,208,185,234,27,192,216\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.535ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.536ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.536ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.537ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.538ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.538ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.538ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.540ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.541ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.543ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[222,72,114,41,79,133,167,73,168,121,64,140,240,255,214,229,166,11,73,118,107,11,200,99,106,64,250,141,182,116,68,245],[108,39,31,10,57,215,52,6,181,10,173,202,220,39,96,196,6,175,199,134,157,231,175,1,199,167,26,207,233,23,36,137],[125,194,205,157,162,162,78,222,241,181,150,214,48,149,140,198,106,24,39,246,47,211,196,100,67,214,203,54,187,30,10,234],[175,235,210,183,28,82,152,236,92,169,232,158,10,109,113,133,173,66,77,169,126,241,233,241,165,0,156,79,219,247,180,98],[226,162,148,154,75,204,124,181,123,131,235,235,189,193,186,195,32,175,4,87,29,128,212,168,95,132,80,248,126,194,21,71],[128,13,82,38,20,78,86,82,127,24,189,194,198,199,184,211,175,50,94,6,167,78,190,157,22,183,113,97,44,120,123,65],[119,141,207,222,100,47,211,99,14,152,108,58,189,149,91,77,213,170,40,73,203,116,176,159,145,223,203,172,88,122,244,81],[68,190,30,62,225,47,114,151,167,142,182,111,148,3,238,120,66,160,51,179,66,212,95,140,244,152,101,150,47,168,32,174],[47,255,196,89,185,209,89,12,154,63,158,2,3,109,50,82,200,197,129,124,30,188,184,13,148,10,195,65,94,228,131,34]]",
              "sol": "[bytes32(stringToBytes32(\"222,72,114,41,79,133,167,73,168,121,64,140,240,255,214,229,166,11,73,118,107,11,200,99,106,64,250,141,182,116,68,245\")),bytes32(stringToBytes32(\"108,39,31,10,57,215,52,6,181,10,173,202,220,39,96,196,6,175,199,134,157,231,175,1,199,167,26,207,233,23,36,137\")),bytes32(stringToBytes32(\"125,194,205,157,162,162,78,222,241,181,150,214,48,149,140,198,106,24,39,246,47,211,196,100,67,214,203,54,187,30,10,234\")),bytes32(stringToBytes32(\"175,235,210,183,28,82,152,236,92,169,232,158,10,109,113,133,173,66,77,169,126,241,233,241,165,0,156,79,219,247,180,98\")),bytes32(stringToBytes32(\"226,162,148,154,75,204,124,181,123,131,235,235,189,193,186,195,32,175,4,87,29,128,212,168,95,132,80,248,126,194,21,71\")),bytes32(stringToBytes32(\"128,13,82,38,20,78,86,82,127,24,189,194,198,199,184,211,175,50,94,6,167,78,190,157,22,183,113,97,44,120,123,65\")),bytes32(stringToBytes32(\"119,141,207,222,100,47,211,99,14,152,108,58,189,149,91,77,213,170,40,73,203,116,176,159,145,223,203,172,88,122,244,81\")),bytes32(stringToBytes32(\"68,190,30,62,225,47,114,151,167,142,182,111,148,3,238,120,66,160,51,179,66,212,95,140,244,152,101,150,47,168,32,174\")),bytes32(stringToBytes32(\"47,255,196,89,185,209,89,12,154,63,158,2,3,109,50,82,200,197,129,124,30,188,184,13,148,10,195,65,94,228,131,34\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-635",
              "sol": "block.timestamp-635"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[222,72,114,41,79,133,167,73,168,121,64,140,240,255,214,229,166,11,73,118,107,11,200,99,106,64,250,141,182,116,68,245],[108,39,31,10,57,215,52,6,181,10,173,202,220,39,96,196,6,175,199,134,157,231,175,1,199,167,26,207,233,23,36,137],[125,194,205,157,162,162,78,222,241,181,150,214,48,149,140,198,106,24,39,246,47,211,196,100,67,214,203,54,187,30,10,234],[175,235,210,183,28,82,152,236,92,169,232,158,10,109,113,133,173,66,77,169,126,241,233,241,165,0,156,79,219,247,180,98],[226,162,148,154,75,204,124,181,123,131,235,235,189,193,186,195,32,175,4,87,29,128,212,168,95,132,80,248,126,194,21,71],[128,13,82,38,20,78,86,82,127,24,189,194,198,199,184,211,175,50,94,6,167,78,190,157,22,183,113,97,44,120,123,65],[119,141,207,222,100,47,211,99,14,152,108,58,189,149,91,77,213,170,40,73,203,116,176,159,145,223,203,172,88,122,244,81],[68,190,30,62,225,47,114,151,167,142,182,111,148,3,238,120,66,160,51,179,66,212,95,140,244,152,101,150,47,168,32,174],[47,255,196,89,185,209,89,12,154,63,158,2,3,109,50,82,200,197,129,124,30,188,184,13,148,10,195,65,94,228,131,34]]",
                "sol": "[bytes32(stringToBytes32(\"222,72,114,41,79,133,167,73,168,121,64,140,240,255,214,229,166,11,73,118,107,11,200,99,106,64,250,141,182,116,68,245\")),bytes32(stringToBytes32(\"108,39,31,10,57,215,52,6,181,10,173,202,220,39,96,196,6,175,199,134,157,231,175,1,199,167,26,207,233,23,36,137\")),bytes32(stringToBytes32(\"125,194,205,157,162,162,78,222,241,181,150,214,48,149,140,198,106,24,39,246,47,211,196,100,67,214,203,54,187,30,10,234\")),bytes32(stringToBytes32(\"175,235,210,183,28,82,152,236,92,169,232,158,10,109,113,133,173,66,77,169,126,241,233,241,165,0,156,79,219,247,180,98\")),bytes32(stringToBytes32(\"226,162,148,154,75,204,124,181,123,131,235,235,189,193,186,195,32,175,4,87,29,128,212,168,95,132,80,248,126,194,21,71\")),bytes32(stringToBytes32(\"128,13,82,38,20,78,86,82,127,24,189,194,198,199,184,211,175,50,94,6,167,78,190,157,22,183,113,97,44,120,123,65\")),bytes32(stringToBytes32(\"119,141,207,222,100,47,211,99,14,152,108,58,189,149,91,77,213,170,40,73,203,116,176,159,145,223,203,172,88,122,244,81\")),bytes32(stringToBytes32(\"68,190,30,62,225,47,114,151,167,142,182,111,148,3,238,120,66,160,51,179,66,212,95,140,244,152,101,150,47,168,32,174\")),bytes32(stringToBytes32(\"47,255,196,89,185,209,89,12,154,63,158,2,3,109,50,82,200,197,129,124,30,188,184,13,148,10,195,65,94,228,131,34\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.544ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "[177,216,127,125,146,128,79,155,14,75,247,10,181,161,153,154,232,10,21,10,157,98,29,56,15,128,100,29,149,51,54,255]",
              "sol": "abi.encode(\"177,216,127,125,146,128,79,155,14,75,247,10,181,161,153,154,232,10,21,10,157,98,29,56,15,128,100,29,149,51,54,255\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "[177,216,127,125,146,128,79,155,14,75,247,10,181,161,153,154,232,10,21,10,157,98,29,56,15,128,100,29,149,51,54,255]",
                "sol": "abi.encode(\"177,216,127,125,146,128,79,155,14,75,247,10,181,161,153,154,232,10,21,10,157,98,29,56,15,128,100,29,149,51,54,255\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.546ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.546ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.546ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.547ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.547ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.547ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.547ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.548ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.549ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.549ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.550ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.550ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.551ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.551ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "[114,252,130,77,253,88,56,147,251,115,59,154,82,87,188,82,61,141,44,14,197,106,97,67,127,152,150,105,249,71,90,116]",
              "sol": "abi.encode(\"114,252,130,77,253,88,56,147,251,115,59,154,82,87,188,82,61,141,44,14,197,106,97,67,127,152,150,105,249,71,90,116\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.551ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.552ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.553ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "[144,133,67,133,81,255,144,147,137,5,218,16,85,204,230,129,160,222,119,110,255,20,36,49,177,251,174,244,22,123,196,253]",
              "sol": "stringToBytes32(\"144,133,67,133,81,255,144,147,137,5,218,16,85,204,230,129,160,222,119,110,255,20,36,49,177,251,174,244,22,123,196,253\")"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[137,207,71,144,9,208,4,33,147,244,190,41,169,224,228,117,8,118,194,37,15,201,79,125,99,163,104,121,174,157,157,81]",
              "sol": "stringToBytes32(\"137,207,71,144,9,208,4,33,147,244,190,41,169,224,228,117,8,118,194,37,15,201,79,125,99,163,104,121,174,157,157,81\")"
            },
            {
              "js": "[6,53,144,233,121,51,124,154,231,121,194,26,149,200,218,168,130,78,242,39,117,221,89,254,235,10,212,156,191,192,58,155]",
              "sol": "stringToBytes32(\"6,53,144,233,121,51,124,154,231,121,194,26,149,200,218,168,130,78,242,39,117,221,89,254,235,10,212,156,191,192,58,155\")"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "[144,133,67,133,81,255,144,147,137,5,218,16,85,204,230,129,160,222,119,110,255,20,36,49,177,251,174,244,22,123,196,253]",
                "sol": "stringToBytes32(\"144,133,67,133,81,255,144,147,137,5,218,16,85,204,230,129,160,222,119,110,255,20,36,49,177,251,174,244,22,123,196,253\")"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[137,207,71,144,9,208,4,33,147,244,190,41,169,224,228,117,8,118,194,37,15,201,79,125,99,163,104,121,174,157,157,81]",
                "sol": "stringToBytes32(\"137,207,71,144,9,208,4,33,147,244,190,41,169,224,228,117,8,118,194,37,15,201,79,125,99,163,104,121,174,157,157,81\")"
              },
              {
                "js": "[6,53,144,233,121,51,124,154,231,121,194,26,149,200,218,168,130,78,242,39,117,221,89,254,235,10,212,156,191,192,58,155]",
                "sol": "stringToBytes32(\"6,53,144,233,121,51,124,154,231,121,194,26,149,200,218,168,130,78,242,39,117,221,89,254,235,10,212,156,191,192,58,155\")"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "[144,133,67,133,81,255,144,147,137,5,218,16,85,204,230,129,160,222,119,110,255,20,36,49,177,251,174,244,22,123,196,253]",
                "sol": "stringToBytes32(\"144,133,67,133,81,255,144,147,137,5,218,16,85,204,230,129,160,222,119,110,255,20,36,49,177,251,174,244,22,123,196,253\")"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "[137,207,71,144,9,208,4,33,147,244,190,41,169,224,228,117,8,118,194,37,15,201,79,125,99,163,104,121,174,157,157,81]",
                "sol": "stringToBytes32(\"137,207,71,144,9,208,4,33,147,244,190,41,169,224,228,117,8,118,194,37,15,201,79,125,99,163,104,121,174,157,157,81\")"
              },
              {
                "js": "[6,53,144,233,121,51,124,154,231,121,194,26,149,200,218,168,130,78,242,39,117,221,89,254,235,10,212,156,191,192,58,155]",
                "sol": "stringToBytes32(\"6,53,144,233,121,51,124,154,231,121,194,26,149,200,218,168,130,78,242,39,117,221,89,254,235,10,212,156,191,192,58,155\")"
              },
              {
                "js": 1,
                "sol": 1
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.554ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[11,999,9]",
              "sol": "[uint256(11),uint256(999),uint256(9)]"
            },
            {
              "js": "[[215,91,168,32,72,220,87,99,250,247,67,136,50,21,106,172,70,32,1,163,154,209,179,209,208,55,163,64,116,228,17,115],[203,131,82,35,60,116,219,186,203,147,117,106,103,245,36,120,64,231,54,21,112,125,195,100,224,145,176,111,90,214,224,94],[157,93,245,235,81,143,35,117,216,192,161,5,223,134,195,4,24,245,200,17,143,174,102,229,137,78,79,251,166,29,245,12]]",
              "sol": "[bytes32(stringToBytes32(\"215,91,168,32,72,220,87,99,250,247,67,136,50,21,106,172,70,32,1,163,154,209,179,209,208,55,163,64,116,228,17,115\")),bytes32(stringToBytes32(\"203,131,82,35,60,116,219,186,203,147,117,106,103,245,36,120,64,231,54,21,112,125,195,100,224,145,176,111,90,214,224,94\")),bytes32(stringToBytes32(\"157,93,245,235,81,143,35,117,216,192,161,5,223,134,195,4,24,245,200,17,143,174,102,229,137,78,79,251,166,29,245,12\"))]"
            },
            {
              "js": "[9,18,19]",
              "sol": "[uint8(9),uint8(18),uint8(19)]"
            },
            {
              "js": "[[224,148,180,66,32,161,129,44,192,44,163,254,187,46,44,216,141,177,108,232,76,127,7,20,86,155,21,121,238,117,71,245],[201,56,98,222,114,209,34,231,42,160,27,118,198,219,18,224,208,246,242,249,90,214,79,198,223,230,169,76,92,169,198,119],[188,199,210,19,214,231,50,107,147,158,44,63,126,243,232,7,133,0,48,135,59,68,80,114,215,214,200,51,209,43,7,82]]",
              "sol": "[bytes32(stringToBytes32(\"224,148,180,66,32,161,129,44,192,44,163,254,187,46,44,216,141,177,108,232,76,127,7,20,86,155,21,121,238,117,71,245\")),bytes32(stringToBytes32(\"201,56,98,222,114,209,34,231,42,160,27,118,198,219,18,224,208,246,242,249,90,214,79,198,223,230,169,76,92,169,198,119\")),bytes32(stringToBytes32(\"188,199,210,19,214,231,50,107,147,158,44,63,126,243,232,7,133,0,48,135,59,68,80,114,215,214,200,51,209,43,7,82\"))]"
            },
            {
              "js": "[[163,137,44,238,50,90,251,175,250,27,45,170,206,75,66,251,161,226,209,146,69,142,83,47,238,4,110,183,44,49,11,144],[62,184,206,201,10,30,146,250,142,5,239,120,123,3,131,9,65,224,112,77,204,179,156,196,35,109,66,56,103,87,126,97],[43,96,172,158,23,158,150,12,200,109,51,240,86,98,52,219,104,86,162,82,222,28,233,202,165,233,105,217,1,141,172,182]]",
              "sol": "[bytes32(stringToBytes32(\"163,137,44,238,50,90,251,175,250,27,45,170,206,75,66,251,161,226,209,146,69,142,83,47,238,4,110,183,44,49,11,144\")),bytes32(stringToBytes32(\"62,184,206,201,10,30,146,250,142,5,239,120,123,3,131,9,65,224,112,77,204,179,156,196,35,109,66,56,103,87,126,97\")),bytes32(stringToBytes32(\"43,96,172,158,23,158,150,12,200,109,51,240,86,98,52,219,104,86,162,82,222,28,233,202,165,233,105,217,1,141,172,182\"))]"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[11,999,9]",
                "sol": "[uint256(11),uint256(999),uint256(9)]"
              },
              {
                "js": "[[215,91,168,32,72,220,87,99,250,247,67,136,50,21,106,172,70,32,1,163,154,209,179,209,208,55,163,64,116,228,17,115],[203,131,82,35,60,116,219,186,203,147,117,106,103,245,36,120,64,231,54,21,112,125,195,100,224,145,176,111,90,214,224,94],[157,93,245,235,81,143,35,117,216,192,161,5,223,134,195,4,24,245,200,17,143,174,102,229,137,78,79,251,166,29,245,12]]",
                "sol": "[bytes32(stringToBytes32(\"215,91,168,32,72,220,87,99,250,247,67,136,50,21,106,172,70,32,1,163,154,209,179,209,208,55,163,64,116,228,17,115\")),bytes32(stringToBytes32(\"203,131,82,35,60,116,219,186,203,147,117,106,103,245,36,120,64,231,54,21,112,125,195,100,224,145,176,111,90,214,224,94\")),bytes32(stringToBytes32(\"157,93,245,235,81,143,35,117,216,192,161,5,223,134,195,4,24,245,200,17,143,174,102,229,137,78,79,251,166,29,245,12\"))]"
              },
              {
                "js": "[9,18,19]",
                "sol": "[uint8(9),uint8(18),uint8(19)]"
              },
              {
                "js": "[[224,148,180,66,32,161,129,44,192,44,163,254,187,46,44,216,141,177,108,232,76,127,7,20,86,155,21,121,238,117,71,245],[201,56,98,222,114,209,34,231,42,160,27,118,198,219,18,224,208,246,242,249,90,214,79,198,223,230,169,76,92,169,198,119],[188,199,210,19,214,231,50,107,147,158,44,63,126,243,232,7,133,0,48,135,59,68,80,114,215,214,200,51,209,43,7,82]]",
                "sol": "[bytes32(stringToBytes32(\"224,148,180,66,32,161,129,44,192,44,163,254,187,46,44,216,141,177,108,232,76,127,7,20,86,155,21,121,238,117,71,245\")),bytes32(stringToBytes32(\"201,56,98,222,114,209,34,231,42,160,27,118,198,219,18,224,208,246,242,249,90,214,79,198,223,230,169,76,92,169,198,119\")),bytes32(stringToBytes32(\"188,199,210,19,214,231,50,107,147,158,44,63,126,243,232,7,133,0,48,135,59,68,80,114,215,214,200,51,209,43,7,82\"))]"
              },
              {
                "js": "[[163,137,44,238,50,90,251,175,250,27,45,170,206,75,66,251,161,226,209,146,69,142,83,47,238,4,110,183,44,49,11,144],[62,184,206,201,10,30,146,250,142,5,239,120,123,3,131,9,65,224,112,77,204,179,156,196,35,109,66,56,103,87,126,97],[43,96,172,158,23,158,150,12,200,109,51,240,86,98,52,219,104,86,162,82,222,28,233,202,165,233,105,217,1,141,172,182]]",
                "sol": "[bytes32(stringToBytes32(\"163,137,44,238,50,90,251,175,250,27,45,170,206,75,66,251,161,226,209,146,69,142,83,47,238,4,110,183,44,49,11,144\")),bytes32(stringToBytes32(\"62,184,206,201,10,30,146,250,142,5,239,120,123,3,131,9,65,224,112,77,204,179,156,196,35,109,66,56,103,87,126,97\")),bytes32(stringToBytes32(\"43,96,172,158,23,158,150,12,200,109,51,240,86,98,52,219,104,86,162,82,222,28,233,202,165,233,105,217,1,141,172,182\"))]"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[10,159,999,0]",
                "sol": "[15,101,1000,19]"
              },
              {
                "js": "[[215,91,168,32,72,220,87,99,250,247,67,136,50,21,106,172,70,32,1,163,154,209,179,209,208,55,163,64,116,228,17,115],[203,131,82,35,60,116,219,186,203,147,117,106,103,245,36,120,64,231,54,21,112,125,195,100,224,145,176,111,90,214,224,94],[157,93,245,235,81,143,35,117,216,192,161,5,223,134,195,4,24,245,200,17,143,174,102,229,137,78,79,251,166,29,245,12]]",
                "sol": "[bytes32(stringToBytes32(\"215,91,168,32,72,220,87,99,250,247,67,136,50,21,106,172,70,32,1,163,154,209,179,209,208,55,163,64,116,228,17,115\")),bytes32(stringToBytes32(\"203,131,82,35,60,116,219,186,203,147,117,106,103,245,36,120,64,231,54,21,112,125,195,100,224,145,176,111,90,214,224,94\")),bytes32(stringToBytes32(\"157,93,245,235,81,143,35,117,216,192,161,5,223,134,195,4,24,245,200,17,143,174,102,229,137,78,79,251,166,29,245,12\"))]"
              },
              {
                "js": "[9,18,19]",
                "sol": "[uint8(9),uint8(18),uint8(19)]"
              },
              {
                "js": "[[224,148,180,66,32,161,129,44,192,44,163,254,187,46,44,216,141,177,108,232,76,127,7,20,86,155,21,121,238,117,71,245],[201,56,98,222,114,209,34,231,42,160,27,118,198,219,18,224,208,246,242,249,90,214,79,198,223,230,169,76,92,169,198,119],[188,199,210,19,214,231,50,107,147,158,44,63,126,243,232,7,133,0,48,135,59,68,80,114,215,214,200,51,209,43,7,82]]",
                "sol": "[bytes32(stringToBytes32(\"224,148,180,66,32,161,129,44,192,44,163,254,187,46,44,216,141,177,108,232,76,127,7,20,86,155,21,121,238,117,71,245\")),bytes32(stringToBytes32(\"201,56,98,222,114,209,34,231,42,160,27,118,198,219,18,224,208,246,242,249,90,214,79,198,223,230,169,76,92,169,198,119\")),bytes32(stringToBytes32(\"188,199,210,19,214,231,50,107,147,158,44,63,126,243,232,7,133,0,48,135,59,68,80,114,215,214,200,51,209,43,7,82\"))]"
              },
              {
                "js": "[[163,137,44,238,50,90,251,175,250,27,45,170,206,75,66,251,161,226,209,146,69,142,83,47,238,4,110,183,44,49,11,144],[62,184,206,201,10,30,146,250,142,5,239,120,123,3,131,9,65,224,112,77,204,179,156,196,35,109,66,56,103,87,126,97],[43,96,172,158,23,158,150,12,200,109,51,240,86,98,52,219,104,86,162,82,222,28,233,202,165,233,105,217,1,141,172,182]]",
                "sol": "[bytes32(stringToBytes32(\"163,137,44,238,50,90,251,175,250,27,45,170,206,75,66,251,161,226,209,146,69,142,83,47,238,4,110,183,44,49,11,144\")),bytes32(stringToBytes32(\"62,184,206,201,10,30,146,250,142,5,239,120,123,3,131,9,65,224,112,77,204,179,156,196,35,109,66,56,103,87,126,97\")),bytes32(stringToBytes32(\"43,96,172,158,23,158,150,12,200,109,51,240,86,98,52,219,104,86,162,82,222,28,233,202,165,233,105,217,1,141,172,182\"))]"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[6,20,2,82]",
                "sol": "[5,82,1,4]"
              },
              {
                "js": "[[215,91,168,32,72,220,87,99,250,247,67,136,50,21,106,172,70,32,1,163,154,209,179,209,208,55,163,64,116,228,17,115],[203,131,82,35,60,116,219,186,203,147,117,106,103,245,36,120,64,231,54,21,112,125,195,100,224,145,176,111,90,214,224,94],[157,93,245,235,81,143,35,117,216,192,161,5,223,134,195,4,24,245,200,17,143,174,102,229,137,78,79,251,166,29,245,12]]",
                "sol": "[bytes32(stringToBytes32(\"215,91,168,32,72,220,87,99,250,247,67,136,50,21,106,172,70,32,1,163,154,209,179,209,208,55,163,64,116,228,17,115\")),bytes32(stringToBytes32(\"203,131,82,35,60,116,219,186,203,147,117,106,103,245,36,120,64,231,54,21,112,125,195,100,224,145,176,111,90,214,224,94\")),bytes32(stringToBytes32(\"157,93,245,235,81,143,35,117,216,192,161,5,223,134,195,4,24,245,200,17,143,174,102,229,137,78,79,251,166,29,245,12\"))]"
              },
              {
                "js": "[9,18,19]",
                "sol": "[uint8(9),uint8(18),uint8(19)]"
              },
              {
                "js": "[[224,148,180,66,32,161,129,44,192,44,163,254,187,46,44,216,141,177,108,232,76,127,7,20,86,155,21,121,238,117,71,245],[201,56,98,222,114,209,34,231,42,160,27,118,198,219,18,224,208,246,242,249,90,214,79,198,223,230,169,76,92,169,198,119],[188,199,210,19,214,231,50,107,147,158,44,63,126,243,232,7,133,0,48,135,59,68,80,114,215,214,200,51,209,43,7,82]]",
                "sol": "[bytes32(stringToBytes32(\"224,148,180,66,32,161,129,44,192,44,163,254,187,46,44,216,141,177,108,232,76,127,7,20,86,155,21,121,238,117,71,245\")),bytes32(stringToBytes32(\"201,56,98,222,114,209,34,231,42,160,27,118,198,219,18,224,208,246,242,249,90,214,79,198,223,230,169,76,92,169,198,119\")),bytes32(stringToBytes32(\"188,199,210,19,214,231,50,107,147,158,44,63,126,243,232,7,133,0,48,135,59,68,80,114,215,214,200,51,209,43,7,82\"))]"
              },
              {
                "js": "[[163,137,44,238,50,90,251,175,250,27,45,170,206,75,66,251,161,226,209,146,69,142,83,47,238,4,110,183,44,49,11,144],[62,184,206,201,10,30,146,250,142,5,239,120,123,3,131,9,65,224,112,77,204,179,156,196,35,109,66,56,103,87,126,97],[43,96,172,158,23,158,150,12,200,109,51,240,86,98,52,219,104,86,162,82,222,28,233,202,165,233,105,217,1,141,172,182]]",
                "sol": "[bytes32(stringToBytes32(\"163,137,44,238,50,90,251,175,250,27,45,170,206,75,66,251,161,226,209,146,69,142,83,47,238,4,110,183,44,49,11,144\")),bytes32(stringToBytes32(\"62,184,206,201,10,30,146,250,142,5,239,120,123,3,131,9,65,224,112,77,204,179,156,196,35,109,66,56,103,87,126,97\")),bytes32(stringToBytes32(\"43,96,172,158,23,158,150,12,200,109,51,240,86,98,52,219,104,86,162,82,222,28,233,202,165,233,105,217,1,141,172,182\"))]"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1001,6,9,1000]",
                "sol": "[17,1336,18,2]"
              },
              {
                "js": "[[215,91,168,32,72,220,87,99,250,247,67,136,50,21,106,172,70,32,1,163,154,209,179,209,208,55,163,64,116,228,17,115],[203,131,82,35,60,116,219,186,203,147,117,106,103,245,36,120,64,231,54,21,112,125,195,100,224,145,176,111,90,214,224,94],[157,93,245,235,81,143,35,117,216,192,161,5,223,134,195,4,24,245,200,17,143,174,102,229,137,78,79,251,166,29,245,12]]",
                "sol": "[bytes32(stringToBytes32(\"215,91,168,32,72,220,87,99,250,247,67,136,50,21,106,172,70,32,1,163,154,209,179,209,208,55,163,64,116,228,17,115\")),bytes32(stringToBytes32(\"203,131,82,35,60,116,219,186,203,147,117,106,103,245,36,120,64,231,54,21,112,125,195,100,224,145,176,111,90,214,224,94\")),bytes32(stringToBytes32(\"157,93,245,235,81,143,35,117,216,192,161,5,223,134,195,4,24,245,200,17,143,174,102,229,137,78,79,251,166,29,245,12\"))]"
              },
              {
                "js": "[9,18,19]",
                "sol": "[uint8(9),uint8(18),uint8(19)]"
              },
              {
                "js": "[[224,148,180,66,32,161,129,44,192,44,163,254,187,46,44,216,141,177,108,232,76,127,7,20,86,155,21,121,238,117,71,245],[201,56,98,222,114,209,34,231,42,160,27,118,198,219,18,224,208,246,242,249,90,214,79,198,223,230,169,76,92,169,198,119],[188,199,210,19,214,231,50,107,147,158,44,63,126,243,232,7,133,0,48,135,59,68,80,114,215,214,200,51,209,43,7,82]]",
                "sol": "[bytes32(stringToBytes32(\"224,148,180,66,32,161,129,44,192,44,163,254,187,46,44,216,141,177,108,232,76,127,7,20,86,155,21,121,238,117,71,245\")),bytes32(stringToBytes32(\"201,56,98,222,114,209,34,231,42,160,27,118,198,219,18,224,208,246,242,249,90,214,79,198,223,230,169,76,92,169,198,119\")),bytes32(stringToBytes32(\"188,199,210,19,214,231,50,107,147,158,44,63,126,243,232,7,133,0,48,135,59,68,80,114,215,214,200,51,209,43,7,82\"))]"
              },
              {
                "js": "[[163,137,44,238,50,90,251,175,250,27,45,170,206,75,66,251,161,226,209,146,69,142,83,47,238,4,110,183,44,49,11,144],[62,184,206,201,10,30,146,250,142,5,239,120,123,3,131,9,65,224,112,77,204,179,156,196,35,109,66,56,103,87,126,97],[43,96,172,158,23,158,150,12,200,109,51,240,86,98,52,219,104,86,162,82,222,28,233,202,165,233,105,217,1,141,172,182]]",
                "sol": "[bytes32(stringToBytes32(\"163,137,44,238,50,90,251,175,250,27,45,170,206,75,66,251,161,226,209,146,69,142,83,47,238,4,110,183,44,49,11,144\")),bytes32(stringToBytes32(\"62,184,206,201,10,30,146,250,142,5,239,120,123,3,131,9,65,224,112,77,204,179,156,196,35,109,66,56,103,87,126,97\")),bytes32(stringToBytes32(\"43,96,172,158,23,158,150,12,200,109,51,240,86,98,52,219,104,86,162,82,222,28,233,202,165,233,105,217,1,141,172,182\"))]"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[256,10,1001,10]",
                "sol": "[1337,5,4,160]"
              },
              {
                "js": "[[215,91,168,32,72,220,87,99,250,247,67,136,50,21,106,172,70,32,1,163,154,209,179,209,208,55,163,64,116,228,17,115],[203,131,82,35,60,116,219,186,203,147,117,106,103,245,36,120,64,231,54,21,112,125,195,100,224,145,176,111,90,214,224,94],[157,93,245,235,81,143,35,117,216,192,161,5,223,134,195,4,24,245,200,17,143,174,102,229,137,78,79,251,166,29,245,12]]",
                "sol": "[bytes32(stringToBytes32(\"215,91,168,32,72,220,87,99,250,247,67,136,50,21,106,172,70,32,1,163,154,209,179,209,208,55,163,64,116,228,17,115\")),bytes32(stringToBytes32(\"203,131,82,35,60,116,219,186,203,147,117,106,103,245,36,120,64,231,54,21,112,125,195,100,224,145,176,111,90,214,224,94\")),bytes32(stringToBytes32(\"157,93,245,235,81,143,35,117,216,192,161,5,223,134,195,4,24,245,200,17,143,174,102,229,137,78,79,251,166,29,245,12\"))]"
              },
              {
                "js": "[9,18,19]",
                "sol": "[uint8(9),uint8(18),uint8(19)]"
              },
              {
                "js": "[[224,148,180,66,32,161,129,44,192,44,163,254,187,46,44,216,141,177,108,232,76,127,7,20,86,155,21,121,238,117,71,245],[201,56,98,222,114,209,34,231,42,160,27,118,198,219,18,224,208,246,242,249,90,214,79,198,223,230,169,76,92,169,198,119],[188,199,210,19,214,231,50,107,147,158,44,63,126,243,232,7,133,0,48,135,59,68,80,114,215,214,200,51,209,43,7,82]]",
                "sol": "[bytes32(stringToBytes32(\"224,148,180,66,32,161,129,44,192,44,163,254,187,46,44,216,141,177,108,232,76,127,7,20,86,155,21,121,238,117,71,245\")),bytes32(stringToBytes32(\"201,56,98,222,114,209,34,231,42,160,27,118,198,219,18,224,208,246,242,249,90,214,79,198,223,230,169,76,92,169,198,119\")),bytes32(stringToBytes32(\"188,199,210,19,214,231,50,107,147,158,44,63,126,243,232,7,133,0,48,135,59,68,80,114,215,214,200,51,209,43,7,82\"))]"
              },
              {
                "js": "[[163,137,44,238,50,90,251,175,250,27,45,170,206,75,66,251,161,226,209,146,69,142,83,47,238,4,110,183,44,49,11,144],[62,184,206,201,10,30,146,250,142,5,239,120,123,3,131,9,65,224,112,77,204,179,156,196,35,109,66,56,103,87,126,97],[43,96,172,158,23,158,150,12,200,109,51,240,86,98,52,219,104,86,162,82,222,28,233,202,165,233,105,217,1,141,172,182]]",
                "sol": "[bytes32(stringToBytes32(\"163,137,44,238,50,90,251,175,250,27,45,170,206,75,66,251,161,226,209,146,69,142,83,47,238,4,110,183,44,49,11,144\")),bytes32(stringToBytes32(\"62,184,206,201,10,30,146,250,142,5,239,120,123,3,131,9,65,224,112,77,204,179,156,196,35,109,66,56,103,87,126,97\")),bytes32(stringToBytes32(\"43,96,172,158,23,158,150,12,200,109,51,240,86,98,52,219,104,86,162,82,222,28,233,202,165,233,105,217,1,141,172,182\"))]"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.558ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "[75,201,213,150,130,151,101,232,165,27,55,56,134,93,72,59,126,11,161,36,237,60,80,191,129,245,110,107,200,172,67,119]",
              "sol": "stringToBytes32(\"75,201,213,150,130,151,101,232,165,27,55,56,134,93,72,59,126,11,161,36,237,60,80,191,129,245,110,107,200,172,67,119\")"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "[156,195,77,54,7,242,35,213,26,77,27,104,129,75,149,212,40,160,138,36,12,169,64,228,212,62,181,238,75,82,112,192]",
              "sol": "stringToBytes32(\"156,195,77,54,7,242,35,213,26,77,27,104,129,75,149,212,40,160,138,36,12,169,64,228,212,62,181,238,75,82,112,192\")"
            },
            {
              "js": "[183,55,3,126,230,8,94,126,36,80,32,44,133,188,248,158,20,88,235,91,80,69,163,10,15,201,152,91,32,110,29,12]",
              "sol": "stringToBytes32(\"183,55,3,126,230,8,94,126,36,80,32,44,133,188,248,158,20,88,235,91,80,69,163,10,15,201,152,91,32,110,29,12\")"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "[75,201,213,150,130,151,101,232,165,27,55,56,134,93,72,59,126,11,161,36,237,60,80,191,129,245,110,107,200,172,67,119]",
                "sol": "stringToBytes32(\"75,201,213,150,130,151,101,232,165,27,55,56,134,93,72,59,126,11,161,36,237,60,80,191,129,245,110,107,200,172,67,119\")"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "[156,195,77,54,7,242,35,213,26,77,27,104,129,75,149,212,40,160,138,36,12,169,64,228,212,62,181,238,75,82,112,192]",
                "sol": "stringToBytes32(\"156,195,77,54,7,242,35,213,26,77,27,104,129,75,149,212,40,160,138,36,12,169,64,228,212,62,181,238,75,82,112,192\")"
              },
              {
                "js": "[183,55,3,126,230,8,94,126,36,80,32,44,133,188,248,158,20,88,235,91,80,69,163,10,15,201,152,91,32,110,29,12]",
                "sol": "stringToBytes32(\"183,55,3,126,230,8,94,126,36,80,32,44,133,188,248,158,20,88,235,91,80,69,163,10,15,201,152,91,32,110,29,12\")"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "[75,201,213,150,130,151,101,232,165,27,55,56,134,93,72,59,126,11,161,36,237,60,80,191,129,245,110,107,200,172,67,119]",
                "sol": "stringToBytes32(\"75,201,213,150,130,151,101,232,165,27,55,56,134,93,72,59,126,11,161,36,237,60,80,191,129,245,110,107,200,172,67,119\")"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "[156,195,77,54,7,242,35,213,26,77,27,104,129,75,149,212,40,160,138,36,12,169,64,228,212,62,181,238,75,82,112,192]",
                "sol": "stringToBytes32(\"156,195,77,54,7,242,35,213,26,77,27,104,129,75,149,212,40,160,138,36,12,169,64,228,212,62,181,238,75,82,112,192\")"
              },
              {
                "js": "[183,55,3,126,230,8,94,126,36,80,32,44,133,188,248,158,20,88,235,91,80,69,163,10,15,201,152,91,32,110,29,12]",
                "sol": "stringToBytes32(\"183,55,3,126,230,8,94,126,36,80,32,44,133,188,248,158,20,88,235,91,80,69,163,10,15,201,152,91,32,110,29,12\")"
              },
              {
                "js": 17,
                "sol": 17
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.560ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.560ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "[15,196,29,46,110,134,253,115,203,44,108,77,211,191,23,246,238,82,17,165,233,135,118,229,130,137,120,119,85,248,84,127]",
              "sol": "stringToBytes32(\"15,196,29,46,110,134,253,115,203,44,108,77,211,191,23,246,238,82,17,165,233,135,118,229,130,137,120,119,85,248,84,127\")"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[92,110,45,234,183,137,60,196,87,141,22,107,98,210,222,203,125,102,145,122,80,42,163,148,56,252,221,51,224,51,44,70]",
              "sol": "stringToBytes32(\"92,110,45,234,183,137,60,196,87,141,22,107,98,210,222,203,125,102,145,122,80,42,163,148,56,252,221,51,224,51,44,70\")"
            },
            {
              "js": "[80,238,209,46,112,145,118,13,250,217,204,254,1,214,20,116,15,91,112,36,0,135,182,91,42,36,88,124,73,9,24,156]",
              "sol": "stringToBytes32(\"80,238,209,46,112,145,118,13,250,217,204,254,1,214,20,116,15,91,112,36,0,135,182,91,42,36,88,124,73,9,24,156\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.561ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.561ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T18:14:21.561ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T18:14:21.562ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}