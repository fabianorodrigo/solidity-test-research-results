,{
  "2020-11-13T03:44:18.396ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:44:24.632ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+476",
              "sol": "block.number+476"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+476+725",
              "sol": "block.number+476+725"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+476",
                "sol": "block.number+476"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+476+725",
                "sol": "block.number+476+725"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+476",
                "sol": "block.number+476"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+476+725",
                "sol": "block.number+476+725"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+476+725",
                "sol": "block.number+476+725"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+476",
                "sol": "block.number+476"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+476",
                "sol": "block.number+476"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:44:31.205ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:44:37.648ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:44:44.161ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:44:50.668ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:44:50.669ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractTokenProxy.address",
              "sol": "contractTokenProxy"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:03.948ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.672ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.673ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.673ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": 1337,
                "sol": 1337
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.674ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.675ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.676ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.676ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.677ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.678ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.679ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.679ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.679ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.682ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.683ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_value <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _value<=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.684ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.684ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.684ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.687ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.688ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.688ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:256}",
              "sol": "{\"from\":\"0x0\",\"value\":\"256\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:256}",
                "sol": "{\"from\":\"0x0\",\"value\":\"256\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.694ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.695ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.700ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.700ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.701ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.701ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.701ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "[148,126,103,225,83,243,226,48,221,208,217,253,212,188,63,198,248,86,149,167,16,55,187,69,28,80,118,57,96,146,69,23]",
              "sol": "stringToBytes32(\"148,126,103,225,83,243,226,48,221,208,217,253,212,188,63,198,248,86,149,167,16,55,187,69,28,80,118,57,96,146,69,23\")"
            },
            {
              "js": "[76,241,179,12,150,152,246,50,11,94,96,235,236,45,183,165,59,89,182,224,243,79,170,117,242,201,126,188,35,35,60,193]",
              "sol": "stringToBytes32(\"76,241,179,12,150,152,246,50,11,94,96,235,236,45,183,165,59,89,182,224,243,79,170,117,242,201,126,188,35,35,60,193\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.702ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "[241,180,78,248,74,234,26,79,186,251,180,151,158,36,227,111,60,247,89,88]",
              "sol": "abi.encode(\"241,180,78,248,74,234,26,79,186,251,180,151,158,36,227,111,60,247,89,88\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "[121,20,199,180,180,150,250,134,201,68,177,80,7,117,34,177,143,100,136,187,151]",
                "sol": "bytes21(\"121,20,199,180,180,150,250,134,201,68,177,80,7,117,34,177,143,100,136,187,151\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.703ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "[14,164,15,187,223,52,228,194,130,49,235,234,144,146,133,69,239,73,72,23,213,254,70,201,0,212,63,103,147,95,253,229]",
              "sol": "stringToBytes32(\"14,164,15,187,223,52,228,194,130,49,235,234,144,146,133,69,239,73,72,23,213,254,70,201,0,212,63,103,147,95,253,229\")"
            },
            {
              "js": "[61,0,89,20,1,217,49,163,27,149,234,164,82,20,96,63,183,17,152,20,231,100,58,111,147,74,63,9,226,145,103,83]",
              "sol": "stringToBytes32(\"61,0,89,20,1,217,49,163,27,149,234,164,82,20,96,63,183,17,152,20,231,100,58,111,147,74,63,9,226,145,103,83\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.703ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.704ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.704ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.705ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.706ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.706ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.706ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.708ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.710ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.711ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[183,150,198,134,52,232,228,13,60,103,244,224,215,176,104,118,146,196,24,80,250,156,33,53,16,102,166,51,205,243,221,85],[213,55,78,84,50,143,215,175,105,214,28,221,150,80,164,220,255,245,222,131,49,49,181,46,33,203,195,213,11,22,148,59],[200,155,225,56,134,64,193,254,92,45,202,57,100,145,139,187,204,236,90,28,228,232,140,124,204,186,99,187,216,189,238,166],[40,118,245,118,190,211,187,27,182,235,178,167,42,77,55,186,57,123,249,197,149,165,187,27,30,230,249,109,108,241,222,82],[34,156,201,7,112,219,177,185,198,250,161,198,194,160,163,235,176,167,221,147,174,137,203,214,92,122,140,31,206,147,166,60],[142,142,131,109,224,136,216,97,137,199,80,163,193,77,16,228,64,8,36,208,197,119,200,228,176,184,56,148,103,102,50,196],[150,146,44,202,162,45,66,41,87,194,117,161,215,136,246,204,143,68,180,156,125,212,16,57,234,73,182,70,216,54,185,144],[213,109,1,117,130,32,100,61,116,126,34,219,22,205,86,105,210,228,73,127,105,93,94,128,227,91,58,83,118,3,251,96]]",
              "sol": "[bytes32(stringToBytes32(\"183,150,198,134,52,232,228,13,60,103,244,224,215,176,104,118,146,196,24,80,250,156,33,53,16,102,166,51,205,243,221,85\")),bytes32(stringToBytes32(\"213,55,78,84,50,143,215,175,105,214,28,221,150,80,164,220,255,245,222,131,49,49,181,46,33,203,195,213,11,22,148,59\")),bytes32(stringToBytes32(\"200,155,225,56,134,64,193,254,92,45,202,57,100,145,139,187,204,236,90,28,228,232,140,124,204,186,99,187,216,189,238,166\")),bytes32(stringToBytes32(\"40,118,245,118,190,211,187,27,182,235,178,167,42,77,55,186,57,123,249,197,149,165,187,27,30,230,249,109,108,241,222,82\")),bytes32(stringToBytes32(\"34,156,201,7,112,219,177,185,198,250,161,198,194,160,163,235,176,167,221,147,174,137,203,214,92,122,140,31,206,147,166,60\")),bytes32(stringToBytes32(\"142,142,131,109,224,136,216,97,137,199,80,163,193,77,16,228,64,8,36,208,197,119,200,228,176,184,56,148,103,102,50,196\")),bytes32(stringToBytes32(\"150,146,44,202,162,45,66,41,87,194,117,161,215,136,246,204,143,68,180,156,125,212,16,57,234,73,182,70,216,54,185,144\")),bytes32(stringToBytes32(\"213,109,1,117,130,32,100,61,116,126,34,219,22,205,86,105,210,228,73,127,105,93,94,128,227,91,58,83,118,3,251,96\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-425",
              "sol": "block.timestamp-425"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[183,150,198,134,52,232,228,13,60,103,244,224,215,176,104,118,146,196,24,80,250,156,33,53,16,102,166,51,205,243,221,85],[213,55,78,84,50,143,215,175,105,214,28,221,150,80,164,220,255,245,222,131,49,49,181,46,33,203,195,213,11,22,148,59],[200,155,225,56,134,64,193,254,92,45,202,57,100,145,139,187,204,236,90,28,228,232,140,124,204,186,99,187,216,189,238,166],[40,118,245,118,190,211,187,27,182,235,178,167,42,77,55,186,57,123,249,197,149,165,187,27,30,230,249,109,108,241,222,82],[34,156,201,7,112,219,177,185,198,250,161,198,194,160,163,235,176,167,221,147,174,137,203,214,92,122,140,31,206,147,166,60],[142,142,131,109,224,136,216,97,137,199,80,163,193,77,16,228,64,8,36,208,197,119,200,228,176,184,56,148,103,102,50,196],[150,146,44,202,162,45,66,41,87,194,117,161,215,136,246,204,143,68,180,156,125,212,16,57,234,73,182,70,216,54,185,144],[213,109,1,117,130,32,100,61,116,126,34,219,22,205,86,105,210,228,73,127,105,93,94,128,227,91,58,83,118,3,251,96]]",
                "sol": "[bytes32(stringToBytes32(\"183,150,198,134,52,232,228,13,60,103,244,224,215,176,104,118,146,196,24,80,250,156,33,53,16,102,166,51,205,243,221,85\")),bytes32(stringToBytes32(\"213,55,78,84,50,143,215,175,105,214,28,221,150,80,164,220,255,245,222,131,49,49,181,46,33,203,195,213,11,22,148,59\")),bytes32(stringToBytes32(\"200,155,225,56,134,64,193,254,92,45,202,57,100,145,139,187,204,236,90,28,228,232,140,124,204,186,99,187,216,189,238,166\")),bytes32(stringToBytes32(\"40,118,245,118,190,211,187,27,182,235,178,167,42,77,55,186,57,123,249,197,149,165,187,27,30,230,249,109,108,241,222,82\")),bytes32(stringToBytes32(\"34,156,201,7,112,219,177,185,198,250,161,198,194,160,163,235,176,167,221,147,174,137,203,214,92,122,140,31,206,147,166,60\")),bytes32(stringToBytes32(\"142,142,131,109,224,136,216,97,137,199,80,163,193,77,16,228,64,8,36,208,197,119,200,228,176,184,56,148,103,102,50,196\")),bytes32(stringToBytes32(\"150,146,44,202,162,45,66,41,87,194,117,161,215,136,246,204,143,68,180,156,125,212,16,57,234,73,182,70,216,54,185,144\")),bytes32(stringToBytes32(\"213,109,1,117,130,32,100,61,116,126,34,219,22,205,86,105,210,228,73,127,105,93,94,128,227,91,58,83,118,3,251,96\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.712ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "[76,6,229,198,19,201,254,70,94,221,112,160,24,69,233,242,255,18,228,159,197,250,211,124,196,174,123,132,79,30,109,69]",
              "sol": "abi.encode(\"76,6,229,198,19,201,254,70,94,221,112,160,24,69,233,242,255,18,228,159,197,250,211,124,196,174,123,132,79,30,109,69\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1000",
                "sol": "1000"
              },
              {
                "js": "[76,6,229,198,19,201,254,70,94,221,112,160,24,69,233,242,255,18,228,159,197,250,211,124,196,174,123,132,79,30,109,69]",
                "sol": "abi.encode(\"76,6,229,198,19,201,254,70,94,221,112,160,24,69,233,242,255,18,228,159,197,250,211,124,196,174,123,132,79,30,109,69\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.713ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.714ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.714ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.714ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.715ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.715ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.715ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.717ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.717ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.718ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.718ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.719ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.719ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.720ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[113,143,96,127,139,84,214,200,165,66,148,57,164,213,243,22,75,194,59,5,139,207,22,155,6,203,133,95,157,124,99,253]",
              "sol": "abi.encode(\"113,143,96,127,139,84,214,200,165,66,148,57,164,213,243,22,75,194,59,5,139,207,22,155,6,203,133,95,157,124,99,253\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.720ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.721ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.722ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "[238,54,103,109,87,69,68,156,146,109,157,236,156,44,253,43,106,17,77,174,165,191,100,160,99,168,153,164,81,93,16,139]",
              "sol": "stringToBytes32(\"238,54,103,109,87,69,68,156,146,109,157,236,156,44,253,43,106,17,77,174,165,191,100,160,99,168,153,164,81,93,16,139\")"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[211,162,211,100,128,188,6,145,185,36,225,148,95,221,142,177,254,188,65,88,7,9,184,200,182,132,141,101,202,202,10,167]",
              "sol": "stringToBytes32(\"211,162,211,100,128,188,6,145,185,36,225,148,95,221,142,177,254,188,65,88,7,9,184,200,182,132,141,101,202,202,10,167\")"
            },
            {
              "js": "[11,30,229,101,226,150,114,230,196,132,50,140,75,227,146,148,233,117,103,219,16,90,57,186,90,133,199,228,88,184,255,118]",
              "sol": "stringToBytes32(\"11,30,229,101,226,150,114,230,196,132,50,140,75,227,146,148,233,117,103,219,16,90,57,186,90,133,199,228,88,184,255,118\")"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "[238,54,103,109,87,69,68,156,146,109,157,236,156,44,253,43,106,17,77,174,165,191,100,160,99,168,153,164,81,93,16,139]",
                "sol": "stringToBytes32(\"238,54,103,109,87,69,68,156,146,109,157,236,156,44,253,43,106,17,77,174,165,191,100,160,99,168,153,164,81,93,16,139\")"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "[211,162,211,100,128,188,6,145,185,36,225,148,95,221,142,177,254,188,65,88,7,9,184,200,182,132,141,101,202,202,10,167]",
                "sol": "stringToBytes32(\"211,162,211,100,128,188,6,145,185,36,225,148,95,221,142,177,254,188,65,88,7,9,184,200,182,132,141,101,202,202,10,167\")"
              },
              {
                "js": "[11,30,229,101,226,150,114,230,196,132,50,140,75,227,146,148,233,117,103,219,16,90,57,186,90,133,199,228,88,184,255,118]",
                "sol": "stringToBytes32(\"11,30,229,101,226,150,114,230,196,132,50,140,75,227,146,148,233,117,103,219,16,90,57,186,90,133,199,228,88,184,255,118\")"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "[238,54,103,109,87,69,68,156,146,109,157,236,156,44,253,43,106,17,77,174,165,191,100,160,99,168,153,164,81,93,16,139]",
                "sol": "stringToBytes32(\"238,54,103,109,87,69,68,156,146,109,157,236,156,44,253,43,106,17,77,174,165,191,100,160,99,168,153,164,81,93,16,139\")"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "[211,162,211,100,128,188,6,145,185,36,225,148,95,221,142,177,254,188,65,88,7,9,184,200,182,132,141,101,202,202,10,167]",
                "sol": "stringToBytes32(\"211,162,211,100,128,188,6,145,185,36,225,148,95,221,142,177,254,188,65,88,7,9,184,200,182,132,141,101,202,202,10,167\")"
              },
              {
                "js": "[11,30,229,101,226,150,114,230,196,132,50,140,75,227,146,148,233,117,103,219,16,90,57,186,90,133,199,228,88,184,255,118]",
                "sol": "stringToBytes32(\"11,30,229,101,226,150,114,230,196,132,50,140,75,227,146,148,233,117,103,219,16,90,57,186,90,133,199,228,88,184,255,118\")"
              },
              {
                "js": 18,
                "sol": 18
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.723ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[81,255]",
              "sol": "[uint256(81),uint256(255)]"
            },
            {
              "js": "[[91,208,80,114,119,200,172,173,213,193,242,180,42,87,224,226,193,221,35,110,33,238,215,143,39,23,195,111,122,72,142,25],[129,162,238,142,119,50,159,216,211,227,115,78,180,133,113,123,252,73,192,216,9,21,243,223,224,253,155,54,129,193,183,205]]",
              "sol": "[bytes32(stringToBytes32(\"91,208,80,114,119,200,172,173,213,193,242,180,42,87,224,226,193,221,35,110,33,238,215,143,39,23,195,111,122,72,142,25\")),bytes32(stringToBytes32(\"129,162,238,142,119,50,159,216,211,227,115,78,180,133,113,123,252,73,192,216,9,21,243,223,224,253,155,54,129,193,183,205\"))]"
            },
            {
              "js": "[101,1]",
              "sol": "[uint8(101),uint8(1)]"
            },
            {
              "js": "[[103,96,30,135,165,3,13,220,144,107,111,24,49,39,117,249,72,17,163,35,238,58,33,58,197,119,86,101,20,151,11,81],[107,107,188,170,132,121,153,126,129,131,91,103,246,174,31,49,153,91,139,123,23,244,231,166,39,232,84,42,185,112,125,9]]",
              "sol": "[bytes32(stringToBytes32(\"103,96,30,135,165,3,13,220,144,107,111,24,49,39,117,249,72,17,163,35,238,58,33,58,197,119,86,101,20,151,11,81\")),bytes32(stringToBytes32(\"107,107,188,170,132,121,153,126,129,131,91,103,246,174,31,49,153,91,139,123,23,244,231,166,39,232,84,42,185,112,125,9\"))]"
            },
            {
              "js": "[[14,230,77,185,11,17,26,56,218,42,48,158,213,208,8,75,7,227,117,213,123,147,112,139,145,231,223,56,194,159,93,55],[8,124,33,24,209,224,103,59,108,45,202,195,15,147,229,7,107,20,240,95,210,217,179,178,117,197,160,252,177,241,136,47]]",
              "sol": "[bytes32(stringToBytes32(\"14,230,77,185,11,17,26,56,218,42,48,158,213,208,8,75,7,227,117,213,123,147,112,139,145,231,223,56,194,159,93,55\")),bytes32(stringToBytes32(\"8,124,33,24,209,224,103,59,108,45,202,195,15,147,229,7,107,20,240,95,210,217,179,178,117,197,160,252,177,241,136,47\"))]"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[81,255]",
                "sol": "[uint256(81),uint256(255)]"
              },
              {
                "js": "[[91,208,80,114,119,200,172,173,213,193,242,180,42,87,224,226,193,221,35,110,33,238,215,143,39,23,195,111,122,72,142,25],[129,162,238,142,119,50,159,216,211,227,115,78,180,133,113,123,252,73,192,216,9,21,243,223,224,253,155,54,129,193,183,205]]",
                "sol": "[bytes32(stringToBytes32(\"91,208,80,114,119,200,172,173,213,193,242,180,42,87,224,226,193,221,35,110,33,238,215,143,39,23,195,111,122,72,142,25\")),bytes32(stringToBytes32(\"129,162,238,142,119,50,159,216,211,227,115,78,180,133,113,123,252,73,192,216,9,21,243,223,224,253,155,54,129,193,183,205\"))]"
              },
              {
                "js": "[101,1]",
                "sol": "[uint8(101),uint8(1)]"
              },
              {
                "js": "[[103,96,30,135,165,3,13,220,144,107,111,24,49,39,117,249,72,17,163,35,238,58,33,58,197,119,86,101,20,151,11,81],[107,107,188,170,132,121,153,126,129,131,91,103,246,174,31,49,153,91,139,123,23,244,231,166,39,232,84,42,185,112,125,9]]",
                "sol": "[bytes32(stringToBytes32(\"103,96,30,135,165,3,13,220,144,107,111,24,49,39,117,249,72,17,163,35,238,58,33,58,197,119,86,101,20,151,11,81\")),bytes32(stringToBytes32(\"107,107,188,170,132,121,153,126,129,131,91,103,246,174,31,49,153,91,139,123,23,244,231,166,39,232,84,42,185,112,125,9\"))]"
              },
              {
                "js": "[[14,230,77,185,11,17,26,56,218,42,48,158,213,208,8,75,7,227,117,213,123,147,112,139,145,231,223,56,194,159,93,55],[8,124,33,24,209,224,103,59,108,45,202,195,15,147,229,7,107,20,240,95,210,217,179,178,117,197,160,252,177,241,136,47]]",
                "sol": "[bytes32(stringToBytes32(\"14,230,77,185,11,17,26,56,218,42,48,158,213,208,8,75,7,227,117,213,123,147,112,139,145,231,223,56,194,159,93,55\")),bytes32(stringToBytes32(\"8,124,33,24,209,224,103,59,108,45,202,195,15,147,229,7,107,20,240,95,210,217,179,178,117,197,160,252,177,241,136,47\"))]"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[19,1336,2]",
                "sol": "[257,1336,3]"
              },
              {
                "js": "[[91,208,80,114,119,200,172,173,213,193,242,180,42,87,224,226,193,221,35,110,33,238,215,143,39,23,195,111,122,72,142,25],[129,162,238,142,119,50,159,216,211,227,115,78,180,133,113,123,252,73,192,216,9,21,243,223,224,253,155,54,129,193,183,205]]",
                "sol": "[bytes32(stringToBytes32(\"91,208,80,114,119,200,172,173,213,193,242,180,42,87,224,226,193,221,35,110,33,238,215,143,39,23,195,111,122,72,142,25\")),bytes32(stringToBytes32(\"129,162,238,142,119,50,159,216,211,227,115,78,180,133,113,123,252,73,192,216,9,21,243,223,224,253,155,54,129,193,183,205\"))]"
              },
              {
                "js": "[101,1]",
                "sol": "[uint8(101),uint8(1)]"
              },
              {
                "js": "[[103,96,30,135,165,3,13,220,144,107,111,24,49,39,117,249,72,17,163,35,238,58,33,58,197,119,86,101,20,151,11,81],[107,107,188,170,132,121,153,126,129,131,91,103,246,174,31,49,153,91,139,123,23,244,231,166,39,232,84,42,185,112,125,9]]",
                "sol": "[bytes32(stringToBytes32(\"103,96,30,135,165,3,13,220,144,107,111,24,49,39,117,249,72,17,163,35,238,58,33,58,197,119,86,101,20,151,11,81\")),bytes32(stringToBytes32(\"107,107,188,170,132,121,153,126,129,131,91,103,246,174,31,49,153,91,139,123,23,244,231,166,39,232,84,42,185,112,125,9\"))]"
              },
              {
                "js": "[[14,230,77,185,11,17,26,56,218,42,48,158,213,208,8,75,7,227,117,213,123,147,112,139,145,231,223,56,194,159,93,55],[8,124,33,24,209,224,103,59,108,45,202,195,15,147,229,7,107,20,240,95,210,217,179,178,117,197,160,252,177,241,136,47]]",
                "sol": "[bytes32(stringToBytes32(\"14,230,77,185,11,17,26,56,218,42,48,158,213,208,8,75,7,227,117,213,123,147,112,139,145,231,223,56,194,159,93,55\")),bytes32(stringToBytes32(\"8,124,33,24,209,224,103,59,108,45,202,195,15,147,229,7,107,20,240,95,210,217,179,178,117,197,160,252,177,241,136,47\"))]"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[5,161,160]",
                "sol": "[19,160,11]"
              },
              {
                "js": "[[91,208,80,114,119,200,172,173,213,193,242,180,42,87,224,226,193,221,35,110,33,238,215,143,39,23,195,111,122,72,142,25],[129,162,238,142,119,50,159,216,211,227,115,78,180,133,113,123,252,73,192,216,9,21,243,223,224,253,155,54,129,193,183,205]]",
                "sol": "[bytes32(stringToBytes32(\"91,208,80,114,119,200,172,173,213,193,242,180,42,87,224,226,193,221,35,110,33,238,215,143,39,23,195,111,122,72,142,25\")),bytes32(stringToBytes32(\"129,162,238,142,119,50,159,216,211,227,115,78,180,133,113,123,252,73,192,216,9,21,243,223,224,253,155,54,129,193,183,205\"))]"
              },
              {
                "js": "[101,1]",
                "sol": "[uint8(101),uint8(1)]"
              },
              {
                "js": "[[103,96,30,135,165,3,13,220,144,107,111,24,49,39,117,249,72,17,163,35,238,58,33,58,197,119,86,101,20,151,11,81],[107,107,188,170,132,121,153,126,129,131,91,103,246,174,31,49,153,91,139,123,23,244,231,166,39,232,84,42,185,112,125,9]]",
                "sol": "[bytes32(stringToBytes32(\"103,96,30,135,165,3,13,220,144,107,111,24,49,39,117,249,72,17,163,35,238,58,33,58,197,119,86,101,20,151,11,81\")),bytes32(stringToBytes32(\"107,107,188,170,132,121,153,126,129,131,91,103,246,174,31,49,153,91,139,123,23,244,231,166,39,232,84,42,185,112,125,9\"))]"
              },
              {
                "js": "[[14,230,77,185,11,17,26,56,218,42,48,158,213,208,8,75,7,227,117,213,123,147,112,139,145,231,223,56,194,159,93,55],[8,124,33,24,209,224,103,59,108,45,202,195,15,147,229,7,107,20,240,95,210,217,179,178,117,197,160,252,177,241,136,47]]",
                "sol": "[bytes32(stringToBytes32(\"14,230,77,185,11,17,26,56,218,42,48,158,213,208,8,75,7,227,117,213,123,147,112,139,145,231,223,56,194,159,93,55\")),bytes32(stringToBytes32(\"8,124,33,24,209,224,103,59,108,45,202,195,15,147,229,7,107,20,240,95,210,217,179,178,117,197,160,252,177,241,136,47\"))]"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[14,19,14]",
                "sol": "[99,1337,17]"
              },
              {
                "js": "[[91,208,80,114,119,200,172,173,213,193,242,180,42,87,224,226,193,221,35,110,33,238,215,143,39,23,195,111,122,72,142,25],[129,162,238,142,119,50,159,216,211,227,115,78,180,133,113,123,252,73,192,216,9,21,243,223,224,253,155,54,129,193,183,205]]",
                "sol": "[bytes32(stringToBytes32(\"91,208,80,114,119,200,172,173,213,193,242,180,42,87,224,226,193,221,35,110,33,238,215,143,39,23,195,111,122,72,142,25\")),bytes32(stringToBytes32(\"129,162,238,142,119,50,159,216,211,227,115,78,180,133,113,123,252,73,192,216,9,21,243,223,224,253,155,54,129,193,183,205\"))]"
              },
              {
                "js": "[101,1]",
                "sol": "[uint8(101),uint8(1)]"
              },
              {
                "js": "[[103,96,30,135,165,3,13,220,144,107,111,24,49,39,117,249,72,17,163,35,238,58,33,58,197,119,86,101,20,151,11,81],[107,107,188,170,132,121,153,126,129,131,91,103,246,174,31,49,153,91,139,123,23,244,231,166,39,232,84,42,185,112,125,9]]",
                "sol": "[bytes32(stringToBytes32(\"103,96,30,135,165,3,13,220,144,107,111,24,49,39,117,249,72,17,163,35,238,58,33,58,197,119,86,101,20,151,11,81\")),bytes32(stringToBytes32(\"107,107,188,170,132,121,153,126,129,131,91,103,246,174,31,49,153,91,139,123,23,244,231,166,39,232,84,42,185,112,125,9\"))]"
              },
              {
                "js": "[[14,230,77,185,11,17,26,56,218,42,48,158,213,208,8,75,7,227,117,213,123,147,112,139,145,231,223,56,194,159,93,55],[8,124,33,24,209,224,103,59,108,45,202,195,15,147,229,7,107,20,240,95,210,217,179,178,117,197,160,252,177,241,136,47]]",
                "sol": "[bytes32(stringToBytes32(\"14,230,77,185,11,17,26,56,218,42,48,158,213,208,8,75,7,227,117,213,123,147,112,139,145,231,223,56,194,159,93,55\")),bytes32(stringToBytes32(\"8,124,33,24,209,224,103,59,108,45,202,195,15,147,229,7,107,20,240,95,210,217,179,178,117,197,160,252,177,241,136,47\"))]"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1000,1001,18]",
                "sol": "[159,19,100]"
              },
              {
                "js": "[[91,208,80,114,119,200,172,173,213,193,242,180,42,87,224,226,193,221,35,110,33,238,215,143,39,23,195,111,122,72,142,25],[129,162,238,142,119,50,159,216,211,227,115,78,180,133,113,123,252,73,192,216,9,21,243,223,224,253,155,54,129,193,183,205]]",
                "sol": "[bytes32(stringToBytes32(\"91,208,80,114,119,200,172,173,213,193,242,180,42,87,224,226,193,221,35,110,33,238,215,143,39,23,195,111,122,72,142,25\")),bytes32(stringToBytes32(\"129,162,238,142,119,50,159,216,211,227,115,78,180,133,113,123,252,73,192,216,9,21,243,223,224,253,155,54,129,193,183,205\"))]"
              },
              {
                "js": "[101,1]",
                "sol": "[uint8(101),uint8(1)]"
              },
              {
                "js": "[[103,96,30,135,165,3,13,220,144,107,111,24,49,39,117,249,72,17,163,35,238,58,33,58,197,119,86,101,20,151,11,81],[107,107,188,170,132,121,153,126,129,131,91,103,246,174,31,49,153,91,139,123,23,244,231,166,39,232,84,42,185,112,125,9]]",
                "sol": "[bytes32(stringToBytes32(\"103,96,30,135,165,3,13,220,144,107,111,24,49,39,117,249,72,17,163,35,238,58,33,58,197,119,86,101,20,151,11,81\")),bytes32(stringToBytes32(\"107,107,188,170,132,121,153,126,129,131,91,103,246,174,31,49,153,91,139,123,23,244,231,166,39,232,84,42,185,112,125,9\"))]"
              },
              {
                "js": "[[14,230,77,185,11,17,26,56,218,42,48,158,213,208,8,75,7,227,117,213,123,147,112,139,145,231,223,56,194,159,93,55],[8,124,33,24,209,224,103,59,108,45,202,195,15,147,229,7,107,20,240,95,210,217,179,178,117,197,160,252,177,241,136,47]]",
                "sol": "[bytes32(stringToBytes32(\"14,230,77,185,11,17,26,56,218,42,48,158,213,208,8,75,7,227,117,213,123,147,112,139,145,231,223,56,194,159,93,55\")),bytes32(stringToBytes32(\"8,124,33,24,209,224,103,59,108,45,202,195,15,147,229,7,107,20,240,95,210,217,179,178,117,197,160,252,177,241,136,47\"))]"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.728ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "[104,106,208,220,208,180,180,155,57,233,192,215,54,247,176,170,237,174,74,115,250,205,234,251,96,178,12,136,14,7,250,153]",
              "sol": "stringToBytes32(\"104,106,208,220,208,180,180,155,57,233,192,215,54,247,176,170,237,174,74,115,250,205,234,251,96,178,12,136,14,7,250,153\")"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "[75,154,62,127,192,103,190,72,246,190,14,24,234,85,14,51,217,79,222,193,108,150,226,90,39,240,82,99,244,94,19,234]",
              "sol": "stringToBytes32(\"75,154,62,127,192,103,190,72,246,190,14,24,234,85,14,51,217,79,222,193,108,150,226,90,39,240,82,99,244,94,19,234\")"
            },
            {
              "js": "[32,4,144,112,241,255,73,170,74,145,166,106,239,136,154,157,162,95,141,81,212,142,13,115,44,73,73,77,160,195,246,169]",
              "sol": "stringToBytes32(\"32,4,144,112,241,255,73,170,74,145,166,106,239,136,154,157,162,95,141,81,212,142,13,115,44,73,73,77,160,195,246,169\")"
            },
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "[104,106,208,220,208,180,180,155,57,233,192,215,54,247,176,170,237,174,74,115,250,205,234,251,96,178,12,136,14,7,250,153]",
                "sol": "stringToBytes32(\"104,106,208,220,208,180,180,155,57,233,192,215,54,247,176,170,237,174,74,115,250,205,234,251,96,178,12,136,14,7,250,153\")"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "[75,154,62,127,192,103,190,72,246,190,14,24,234,85,14,51,217,79,222,193,108,150,226,90,39,240,82,99,244,94,19,234]",
                "sol": "stringToBytes32(\"75,154,62,127,192,103,190,72,246,190,14,24,234,85,14,51,217,79,222,193,108,150,226,90,39,240,82,99,244,94,19,234\")"
              },
              {
                "js": "[32,4,144,112,241,255,73,170,74,145,166,106,239,136,154,157,162,95,141,81,212,142,13,115,44,73,73,77,160,195,246,169]",
                "sol": "stringToBytes32(\"32,4,144,112,241,255,73,170,74,145,166,106,239,136,154,157,162,95,141,81,212,142,13,115,44,73,73,77,160,195,246,169\")"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "[104,106,208,220,208,180,180,155,57,233,192,215,54,247,176,170,237,174,74,115,250,205,234,251,96,178,12,136,14,7,250,153]",
                "sol": "stringToBytes32(\"104,106,208,220,208,180,180,155,57,233,192,215,54,247,176,170,237,174,74,115,250,205,234,251,96,178,12,136,14,7,250,153\")"
              },
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": "[75,154,62,127,192,103,190,72,246,190,14,24,234,85,14,51,217,79,222,193,108,150,226,90,39,240,82,99,244,94,19,234]",
                "sol": "stringToBytes32(\"75,154,62,127,192,103,190,72,246,190,14,24,234,85,14,51,217,79,222,193,108,150,226,90,39,240,82,99,244,94,19,234\")"
              },
              {
                "js": "[32,4,144,112,241,255,73,170,74,145,166,106,239,136,154,157,162,95,141,81,212,142,13,115,44,73,73,77,160,195,246,169]",
                "sol": "stringToBytes32(\"32,4,144,112,241,255,73,170,74,145,166,106,239,136,154,157,162,95,141,81,212,142,13,115,44,73,73,77,160,195,246,169\")"
              },
              {
                "js": 1337,
                "sol": 1337
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.731ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.732ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "[4,244,63,30,142,24,160,9,30,24,177,233,114,232,106,76,69,82,117,50,128,146,236,115,255,95,100,229,159,247,63,148]",
              "sol": "stringToBytes32(\"4,244,63,30,142,24,160,9,30,24,177,233,114,232,106,76,69,82,117,50,128,146,236,115,255,95,100,229,159,247,63,148\")"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "[234,178,172,61,3,151,164,123,255,126,148,89,141,141,117,177,23,249,113,3,94,205,53,81,89,250,70,2,133,193,52,210]",
              "sol": "stringToBytes32(\"234,178,172,61,3,151,164,123,255,126,148,89,141,141,117,177,23,249,113,3,94,205,53,81,89,250,70,2,133,193,52,210\")"
            },
            {
              "js": "[201,214,56,200,110,25,88,17,175,1,165,149,244,155,246,110,110,6,247,246,239,204,93,90,14,3,235,105,230,89,136,48]",
              "sol": "stringToBytes32(\"201,214,56,200,110,25,88,17,175,1,165,149,244,155,246,110,110,6,247,246,239,204,93,90,14,3,235,105,230,89,136,48\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.733ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.733ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:45:10.733ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:45:10.734ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}