const truffleAssert = require('truffle-assertions');
const Faucet = artifacts.require("Faucet");
const GNTDeposit = artifacts.require("GNTDeposit");
const GNTPaymentChannels = artifacts.require("GNTPaymentChannels");
const GNTAllocation = artifacts.require("GNTAllocation");
const GolemNetworkToken = artifacts.require("GolemNetworkToken");
const GolemNetworkTokenBatching = artifacts.require("GolemNetworkTokenBatching");
const BasicToken = artifacts.require("BasicToken");
const BurnableToken = artifacts.require("BurnableToken");
const SafeMath = artifacts.require("SafeMath");
const StandardToken = artifacts.require("StandardToken");
const Gate = artifacts.require("Gate");
const TokenProxy = artifacts.require("TokenProxy");
const ProxySafeMath = artifacts.require("ProxySafeMath");

contract("GNTDeposit",(accounts)=>{
  let trace = false;
  let contractSafeMath = null;
  let contractBasicToken = null;
  let contractStandardToken = null;
  let contractBurnableToken = null;
  let contractGNTAllocation = null;
  let contractGolemNetworkToken = null;
  let contractGNTPaymentChannels = null;
  let contractFaucet = null;
  let contractTokenProxy = null;
  let contractGate = null;
  let contractGolemNetworkTokenBatching = null;
  let contractGNTDeposit = null;
  beforeEach(async () => {
    contractSafeMath = await SafeMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');
    BasicToken.link("SafeMath",contractSafeMath.address);
    contractBasicToken = await BasicToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: BasicToken.new({from: accounts[0]}');
    contractStandardToken = await StandardToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: StandardToken.new({from: accounts[0]}');
    contractBurnableToken = await BurnableToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: BurnableToken.new({from: accounts[0]}');
    contractGNTAllocation = await GNTAllocation.new(accounts[5],{from:accounts[0]});
    if(trace) console.log('SUCESSO: GNTAllocation.new(accounts[5],{from:accounts[0]}');
    contractGolemNetworkToken = await GolemNetworkToken.new(accounts[1],accounts[1],(await web3.eth.getBlockNumber())+943,(await web3.eth.getBlockNumber())+943+863,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GolemNetworkToken.new(accounts[1],accounts[1],(await web3.eth.getBlockNumber())+943,(await web3.eth.getBlockNumber())+943+863,{from:accounts[0]}');
    contractGNTPaymentChannels = await GNTPaymentChannels.new(accounts[7],14,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GNTPaymentChannels.new(accounts[7],14,{from:accounts[0]}');
    contractFaucet = await Faucet.new(contractGolemNetworkToken.address,{from:accounts[0]});
    if(trace) console.log('SUCESSO: Faucet.new(contractGolemNetworkToken.address,{from:accounts[0]}');
    contractTokenProxy = await TokenProxy.new(contractBurnableToken.address,{from:accounts[0]});
    if(trace) console.log('SUCESSO: TokenProxy.new(contractBurnableToken.address,{from:accounts[0]}');
    contractGate = await Gate.new(contractStandardToken.address,accounts[8],{from:accounts[0]});
    if(trace) console.log('SUCESSO: Gate.new(contractStandardToken.address,accounts[8],{from:accounts[0]}');
    contractGolemNetworkTokenBatching = await GolemNetworkTokenBatching.new(contractBasicToken.address,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GolemNetworkTokenBatching.new(contractBasicToken.address,{from:accounts[0]}');
    contractGNTDeposit = await GNTDeposit.new(contractGolemNetworkTokenBatching.address,accounts[6],accounts[9],10000,{from:accounts[0]});
    if(trace) console.log('SUCESSO: GNTDeposit.new(contractGolemNetworkTokenBatching.address,accounts[6],accounts[9],10000,{from:accounts[0]}');
  });
  
  it('Should execute balanceOf(address)', async () => {
    let result = await contractGNTDeposit.balanceOf(accounts[6],{from: accounts[0]});
  });
  it('Should execute isLocked(address)', async () => {
    let result = await contractGNTDeposit.isLocked(accounts[2],{from: accounts[0]});
  });
  it('Should execute isTimeLocked(address)', async () => {
    let result = await contractGNTDeposit.isTimeLocked(accounts[8],{from: accounts[0]});
  });
  it('Should execute isUnlocked(address)', async () => {
    let result = await contractGNTDeposit.isUnlocked(accounts[0],{from: accounts[0]});
  });
  it('Should execute getTimelock(address)', async () => {
    let result = await contractGNTDeposit.getTimelock(accounts[4],{from: accounts[0]});
  });
  it('Should execute isDepositPossible(address,uint256)', async () => {
    let result = await contractGNTDeposit.isDepositPossible(accounts[8], 99,{from: accounts[0]});
  });
  it('Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractGNTDeposit.transferConcent(accounts[6],{from: accounts[0]});
  });
  it('Should fail transferConcent(address) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferConcent(accounts[6],{from: accounts[9]}),'revert');
  });
  it('Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferConcent("0x0000000000000000000000000000000000000000",{from: accounts[0]}),'revert');
  });
  it('Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractGNTDeposit.transferColdwallet(accounts[4],{from: accounts[0]});
  });
  it('Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferColdwallet(accounts[4],{from: accounts[9]}),'revert');
  });
  it('Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferColdwallet("0x0000000000000000000000000000000000000000",{from: accounts[0]}),'revert');
  });
  it('Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.setMaximumDepositsTotal(160,{from: accounts[0]});
  });
  it('Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.setMaximumDepositsTotal(160,{from: accounts[9]}),'revert');
  });
  it('Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.setMaximumDepositAmount(1000,{from: accounts[0]});
  });
  it('Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.setMaximumDepositAmount(1000,{from: accounts[9]}),'revert');
  });
  it('Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.setDailyReimbursementLimit(21,{from: accounts[0]});
  });
  it('Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.setDailyReimbursementLimit(21,{from: accounts[9]}),'revert');
  });
  it('Should execute unlock()', async () => {
    let result = await contractGNTDeposit.unlock({from: accounts[0]});
  });
  it('Should execute lock()', async () => {
    let result = await contractGNTDeposit.lock({from: accounts[0]});
  });
  it('Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true', async () => {
    let result = await contractGNTDeposit.onTokenReceived(accounts[2], 20, [183,153,249,198,3,21,88,4,113,64,242,184,42,154,241,105,247,46,10,75,11,210,141,176,124,133,6,223,23,141,94,214],{from: accounts[0]});
  });
  it('Should execute withdraw(address)', async () => {
    let result = await contractGNTDeposit.withdraw(accounts[3],{from: accounts[0]});
  });
  it('Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount', async () => {
    let result = await contractGNTDeposit.burn(accounts[3], 10001,{from: accounts[6]});
  });
  it('Should fail burn(address,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.burn(accounts[3], 10001,{from: accounts[9]}),'revert');
  });
  it('Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount', async () => {
    let result = await contractGNTDeposit.burn(accounts[8], 1336,{from: accounts[6]});
  });
  it('Should fail burn(address,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.burn(accounts[8], 1336,{from: accounts[9]}),'revert');
  });
  it('Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount', async () => {
    let result = await contractGNTDeposit.reimburseForSubtask(accounts[0], accounts[8], 1000, [174,68,154,255,13,63,90,237,164,48,27,80,210,194,240,130,8,87,33,235,5,11,16,225,19,134,47,27,27,168,207,175], 20, [122,3,204,169,52,147,32,208,216,53,0,32,103,171,227,217,188,148,89,137,11,197,76,52,26,198,230,164,80,249,238,80], [166,152,150,194,210,182,220,175,174,122,78,174,12,155,110,194,237,225,158,180,213,183,133,227,181,12,63,7,92,246,161,151], 99,{from: accounts[6]});
  });
  it('Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForSubtask(accounts[0], accounts[8], 1000, [174,68,154,255,13,63,90,237,164,48,27,80,210,194,240,130,8,87,33,235,5,11,16,225,19,134,47,27,27,168,207,175], 20, [122,3,204,169,52,147,32,208,216,53,0,32,103,171,227,217,188,148,89,137,11,197,76,52,26,198,230,164,80,249,238,80], [166,152,150,194,210,182,220,175,174,122,78,174,12,155,110,194,237,225,158,180,213,183,133,227,181,12,63,7,92,246,161,151], 99,{from: accounts[9]}),'revert');
  });
  it('Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForSubtask(accounts[0], accounts[8], 1000, [174,68,154,255,13,63,90,237,164,48,27,80,210,194,240,130,8,87,33,235,5,11,16,225,19,134,47,27,27,168,207,175], 20, [122,3,204,169,52,147,32,208,216,53,0,32,103,171,227,217,188,148,89,137,11,197,76,52,26,198,230,164,80,249,238,80], [166,152,150,194,210,182,220,175,174,122,78,174,12,155,110,194,237,225,158,180,213,183,133,227,181,12,63,7,92,246,161,151], 1001,{from: accounts[6]}),'revert');
  });
  it('Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount', async () => {
    let result = await contractGNTDeposit.reimburseForNoPayment(accounts[9], accounts[5], [160,19,19,9,19,21,19,10,1336,3], [[99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122],[221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249],[92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26],[34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242],[215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149],[99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76],[233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80],[246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19],[182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185],[79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174]], [19,99,9,1,0,2,11,99,1,21], [[214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55],[194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216],[136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94],[11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9],[189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75],[85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244],[186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168],[116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212],[233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60],[21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22]], [[171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60],[64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20],[44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34],[115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97],[208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98],[125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203],[89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230],[98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226],[125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28],[240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76]], 4, 101,{from: accounts[6]});
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[9], accounts[5], [160,19,19,9,19,21,19,10,1336,3], [[99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122],[221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249],[92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26],[34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242],[215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149],[99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76],[233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80],[246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19],[182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185],[79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174]], [19,99,9,1,0,2,11,99,1,21], [[214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55],[194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216],[136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94],[11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9],[189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75],[85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244],[186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168],[116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212],[233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60],[21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22]], [[171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60],[64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20],[44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34],[115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97],[208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98],[125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203],[89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230],[98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226],[125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28],[240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76]], 4, 101,{from: accounts[9]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[9], accounts[5], [9999,1000,5,21,81,15,19,81,1000,21,100], [[99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122],[221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249],[92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26],[34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242],[215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149],[99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76],[233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80],[246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19],[182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185],[79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174]], [19,99,9,1,0,2,11,99,1,21], [[214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55],[194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216],[136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94],[11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9],[189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75],[85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244],[186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168],[116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212],[233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60],[21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22]], [[171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60],[64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20],[44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34],[115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97],[208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98],[125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203],[89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230],[98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226],[125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28],[240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76]], 4, 101,{from: accounts[6]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[9], accounts[5], [100,10001,9,9,99,99,1000,82,256,82,21], [[99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122],[221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249],[92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26],[34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242],[215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149],[99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76],[233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80],[246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19],[182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185],[79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174]], [19,99,9,1,0,2,11,99,1,21], [[214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55],[194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216],[136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94],[11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9],[189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75],[85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244],[186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168],[116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212],[233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60],[21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22]], [[171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60],[64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20],[44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34],[115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97],[208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98],[125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203],[89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230],[98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226],[125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28],[240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76]], 4, 101,{from: accounts[6]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[9], accounts[5], [1001,99,1337,17,256,10000,160,9,11,82,9], [[99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122],[221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249],[92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26],[34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242],[215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149],[99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76],[233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80],[246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19],[182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185],[79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174]], [19,99,9,1,0,2,11,99,1,21], [[214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55],[194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216],[136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94],[11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9],[189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75],[85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244],[186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168],[116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212],[233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60],[21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22]], [[171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60],[64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20],[44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34],[115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97],[208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98],[125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203],[89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230],[98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226],[125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28],[240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76]], 4, 101,{from: accounts[6]}),'revert');
  });
  it('Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForNoPayment(accounts[9], accounts[5], [5,0,1000,21,9,160,1000,100,20,15,256], [[99,0,124,189,248,35,47,251,84,239,97,246,93,60,139,173,49,220,200,45,165,49,103,202,43,42,100,188,18,250,203,122],[221,71,177,122,0,14,90,121,91,60,229,162,45,38,212,23,190,8,104,162,89,86,146,27,150,153,11,132,141,243,176,249],[92,150,21,207,42,89,81,71,151,223,92,245,2,7,220,134,157,181,170,183,253,62,244,111,12,155,20,120,145,211,147,26],[34,76,182,47,67,19,150,113,208,187,58,204,87,54,139,117,184,104,89,201,214,159,37,130,15,220,180,246,156,21,98,242],[215,25,249,201,135,154,231,183,66,250,204,230,85,176,36,45,136,236,129,214,21,72,75,169,128,57,187,85,175,32,181,149],[99,6,87,203,241,117,156,14,134,224,65,248,0,149,112,239,129,239,154,1,197,199,80,10,150,26,162,230,143,177,203,76],[233,132,128,50,73,55,255,80,152,187,73,20,62,128,163,0,238,5,132,91,60,82,146,255,178,75,137,59,131,84,167,80],[246,91,228,98,6,232,187,48,210,38,29,249,11,12,184,33,176,216,226,106,139,29,239,148,9,215,15,31,249,48,198,19],[182,129,221,168,145,205,96,43,105,97,253,120,3,53,131,145,93,72,132,114,162,31,11,127,145,124,70,137,146,144,6,185],[79,76,248,240,174,204,142,223,84,251,47,206,159,72,12,194,190,101,128,21,204,89,100,157,57,127,30,54,92,42,148,174]], [19,99,9,1,0,2,11,99,1,21], [[214,234,71,109,170,51,106,83,106,221,74,221,62,19,9,228,179,131,67,54,19,184,56,63,151,189,77,219,129,171,117,55],[194,130,58,170,105,11,103,68,201,2,31,132,169,66,119,234,164,132,141,174,140,197,56,209,5,140,144,82,77,231,230,216],[136,142,221,19,33,70,140,220,66,168,220,122,17,201,107,191,37,161,227,57,95,71,220,13,111,165,226,26,214,87,236,94],[11,234,188,238,129,228,172,137,103,244,187,37,109,191,121,108,117,204,58,206,217,62,95,0,138,193,229,52,232,57,111,9],[189,20,125,160,17,0,14,88,202,190,121,199,202,155,62,14,174,21,101,233,153,151,204,138,25,144,126,65,75,252,83,75],[85,217,16,57,169,92,56,125,92,151,111,229,223,45,119,72,96,124,99,18,184,188,18,163,174,76,125,72,27,148,116,244],[186,229,163,104,162,82,6,91,41,31,95,187,28,223,168,8,189,74,216,180,21,124,56,135,36,119,220,82,120,34,57,168],[116,214,114,87,164,59,130,43,62,179,161,180,22,13,164,72,0,3,77,32,163,192,115,80,1,167,135,205,158,86,18,212],[233,189,106,21,11,73,251,156,126,47,117,48,137,226,185,14,134,211,218,22,82,175,114,1,245,12,155,167,22,166,111,60],[21,146,186,97,228,166,160,12,207,202,71,132,109,129,101,172,142,81,144,49,203,105,55,167,50,50,114,215,33,101,234,22]], [[171,21,150,72,171,55,20,137,175,88,45,30,87,152,159,198,148,129,135,120,4,41,168,245,253,109,174,181,5,92,190,60],[64,239,96,112,196,32,192,102,155,114,199,243,108,1,74,237,159,240,208,76,139,65,52,255,62,134,96,233,126,123,5,20],[44,11,0,133,67,126,89,44,108,143,17,94,78,246,125,186,234,160,156,229,180,193,43,82,38,141,21,141,74,77,9,34],[115,52,83,207,107,202,58,207,106,97,221,172,35,95,165,72,93,112,47,89,146,22,43,89,59,237,136,17,82,146,22,97],[208,83,65,189,1,140,31,100,56,149,181,223,114,181,152,199,245,170,24,118,48,29,243,117,170,200,169,169,59,92,239,98],[125,171,72,106,75,158,126,48,137,242,201,22,192,3,62,55,116,52,52,218,133,219,89,211,177,143,185,159,218,170,224,203],[89,118,154,87,143,202,240,225,254,126,95,174,143,98,143,160,35,44,80,37,194,250,225,246,87,194,56,50,84,164,215,230],[98,204,1,12,99,121,159,6,195,174,161,152,74,65,9,202,192,149,12,212,114,159,121,188,46,222,252,177,239,22,65,226],[125,184,251,165,173,102,183,143,106,53,140,218,57,207,59,247,139,49,248,49,120,2,36,36,209,56,254,60,116,92,95,28],[240,180,229,127,192,116,194,249,5,232,75,183,175,1,146,46,7,66,56,235,236,70,243,205,209,177,100,170,49,165,96,76]], 4, 101,{from: accounts[6]}),'revert');
  });
  it('Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount', async () => {
    let result = await contractGNTDeposit.reimburseForVerificationCosts(accounts[3], 4, [91,51,47,167,215,162,226,129,147,194,138,15,182,171,68,243,186,177,131,12,230,146,119,170,208,249,44,225,83,53,200,54], 17, [97,31,102,145,254,52,42,5,172,203,188,165,124,239,112,207,56,220,3,173,155,216,39,187,95,199,219,9,159,153,141,115], [89,35,227,219,158,173,140,103,198,104,94,98,196,129,101,51,178,9,74,173,237,32,73,69,216,70,86,158,8,166,81,13], 4,{from: accounts[6]});
  });
  it('Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForVerificationCosts(accounts[3], 4, [91,51,47,167,215,162,226,129,147,194,138,15,182,171,68,243,186,177,131,12,230,146,119,170,208,249,44,225,83,53,200,54], 17, [97,31,102,145,254,52,42,5,172,203,188,165,124,239,112,207,56,220,3,173,155,216,39,187,95,199,219,9,159,153,141,115], [89,35,227,219,158,173,140,103,198,104,94,98,196,129,101,51,178,9,74,173,237,32,73,69,216,70,86,158,8,166,81,13], 4,{from: accounts[9]}),'revert');
  });
  it('Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForVerificationCosts(accounts[3], 4, [91,51,47,167,215,162,226,129,147,194,138,15,182,171,68,243,186,177,131,12,230,146,119,170,208,249,44,225,83,53,200,54], 17, [97,31,102,145,254,52,42,5,172,203,188,165,124,239,112,207,56,220,3,173,155,216,39,187,95,199,219,9,159,153,141,115], [89,35,227,219,158,173,140,103,198,104,94,98,196,129,101,51,178,9,74,173,237,32,73,69,216,70,86,158,8,166,81,13], 5,{from: accounts[6]}),'revert');
  });
  it('Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent', async () => {
    let result = await contractGNTDeposit.reimburseForCommunication(accounts[4], 10,{from: accounts[6]});
  });
  it('Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.reimburseForCommunication(accounts[4], 10,{from: accounts[9]}),'revert');
  });
  it('Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)', async () => {
    let result = await contractGNTDeposit._isValidSignature(accounts[3], accounts[3], 11, [216,91,147,89,118,106,13,233,254,107,65,99,228,52,18,106,7,119,215,146,83,116,105,197,105,1,39,80,209,197,234,154], 83, [238,250,0,122,138,22,253,120,182,27,14,93,57,77,203,175,128,138,87,114,66,194,204,172,235,156,26,247,243,221,236,139], [216,249,96,201,149,118,76,9,203,35,132,234,126,226,239,249,82,159,103,199,46,137,55,216,240,89,80,35,201,133,135,122],{from: accounts[0]});
  });
  it('Should execute owner()', async () => {
    let result = await contractGNTDeposit.owner({from: accounts[0]});
  });
  it('Should execute isOwner()', async () => {
    let result = await contractGNTDeposit.isOwner({from: accounts[0]});
  });
  it('Should execute renounceOwnership() WHEN msg.sender==_owner', async () => {
    let result = await contractGNTDeposit.renounceOwnership({from: accounts[0]});
  });
  it('Should fail renounceOwnership() when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.renounceOwnership({from: accounts[9]}),'revert');
  });
  it('Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractGNTDeposit.transferOwnership(accounts[4],{from: accounts[0]});
  });
  it('Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferOwnership(accounts[4],{from: accounts[9]}),'revert');
  });
  it('Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractGNTDeposit.transferOwnership("0x0000000000000000000000000000000000000000",{from: accounts[0]}),'revert');
  });
});
