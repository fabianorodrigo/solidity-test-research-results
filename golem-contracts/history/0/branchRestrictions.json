,{
  "2020-11-10T02:47:19.801ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:47:26.027ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+23",
              "sol": "block.number+23"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+23+530",
              "sol": "block.number+23+530"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+23",
                "sol": "block.number+23"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+23+530",
                "sol": "block.number+23+530"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+23",
                "sol": "block.number+23"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+23+530",
                "sol": "block.number+23+530"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+23+530",
                "sol": "block.number+23+530"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+23",
                "sol": "block.number+23"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+23",
                "sol": "block.number+23"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:47:32.414ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:47:39.035ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:47:45.490ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBurnableToken.address",
              "sol": "contractBurnableToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:47:52.226ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:47:52.228ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBasicToken.address",
              "sol": "contractBasicToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:05.635ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.429ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.431ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.431ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 1,
                "sol": 1
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.432ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.433ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.433ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.434ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.435ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "82",
                "sol": "82"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.435ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.436ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.436ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.436ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.439ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.440ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_value <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _value<=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.441ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.442ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.442ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.444ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.445ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.446ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:1}",
              "sol": "{\"from\":\"0x0\",\"value\":\"1\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:1}",
                "sol": "{\"from\":\"0x0\",\"value\":\"1\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.452ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.453ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.459ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.459ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.460ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.460ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.460ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "[101,93,204,15,63,176,40,149,136,41,79,154,69,244,135,187,179,187,238,249,62,145,218,0,195,221,190,225,221,165,168,204]",
              "sol": "stringToBytes32(\"101,93,204,15,63,176,40,149,136,41,79,154,69,244,135,187,179,187,238,249,62,145,218,0,195,221,190,225,221,165,168,204\")"
            },
            {
              "js": "[182,67,86,140,236,243,116,153,50,224,117,126,133,61,227,199,142,187,140,29,167,92,216,219,11,39,149,206,15,129,148,95]",
              "sol": "stringToBytes32(\"182,67,86,140,236,243,116,153,50,224,117,126,133,61,227,199,142,187,140,29,167,92,216,219,11,39,149,206,15,129,148,95\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.461ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[15,2,9,127,250,252,37,182,177,230,136,228,72,6,240,157,190,241,239,77]",
              "sol": "abi.encode(\"15,2,9,127,250,252,37,182,177,230,136,228,72,6,240,157,190,241,239,77\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "[26,172,35,190,108,148,180,191,121,52,186,15,104,180,244,180,40,88,251,192,96]",
                "sol": "bytes21(\"26,172,35,190,108,148,180,191,121,52,186,15,104,180,244,180,40,88,251,192,96\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.462ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "[236,175,144,148,191,255,39,153,168,139,162,150,85,85,186,88,31,45,97,155,220,173,137,135,246,142,111,223,137,132,187,206]",
              "sol": "stringToBytes32(\"236,175,144,148,191,255,39,153,168,139,162,150,85,85,186,88,31,45,97,155,220,173,137,135,246,142,111,223,137,132,187,206\")"
            },
            {
              "js": "[72,151,11,241,145,234,221,213,58,172,203,46,33,80,1,23,194,132,14,82,36,226,182,52,176,40,61,117,18,194,156,117]",
              "sol": "stringToBytes32(\"72,151,11,241,145,234,221,213,58,172,203,46,33,80,1,23,194,132,14,82,36,226,182,52,176,40,61,117,18,194,156,117\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.463ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.463ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.464ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.464ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.465ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.465ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.465ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.468ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.469ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.470ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[240,79,170,40,69,147,159,27,85,114,130,234,179,187,105,119,62,83,224,103,232,135,166,64,29,44,42,106,158,229,72,54],[60,231,66,178,115,138,111,151,179,122,130,143,36,19,18,85,255,123,149,172,163,168,238,63,147,211,43,196,31,149,195,149],[183,203,158,72,11,64,41,80,36,12,209,162,178,79,253,188,201,221,48,46,65,225,226,224,110,165,47,103,225,46,139,220],[252,29,109,137,93,146,25,78,140,22,206,129,248,169,203,39,92,41,192,113,233,131,23,65,224,60,112,83,11,45,121,45],[45,23,57,211,164,166,70,84,180,206,240,40,186,149,158,184,44,93,186,179,121,103,221,166,32,1,183,135,14,230,105,242]]",
              "sol": "[bytes32(stringToBytes32(\"240,79,170,40,69,147,159,27,85,114,130,234,179,187,105,119,62,83,224,103,232,135,166,64,29,44,42,106,158,229,72,54\")),bytes32(stringToBytes32(\"60,231,66,178,115,138,111,151,179,122,130,143,36,19,18,85,255,123,149,172,163,168,238,63,147,211,43,196,31,149,195,149\")),bytes32(stringToBytes32(\"183,203,158,72,11,64,41,80,36,12,209,162,178,79,253,188,201,221,48,46,65,225,226,224,110,165,47,103,225,46,139,220\")),bytes32(stringToBytes32(\"252,29,109,137,93,146,25,78,140,22,206,129,248,169,203,39,92,41,192,113,233,131,23,65,224,60,112,83,11,45,121,45\")),bytes32(stringToBytes32(\"45,23,57,211,164,166,70,84,180,206,240,40,186,149,158,184,44,93,186,179,121,103,221,166,32,1,183,135,14,230,105,242\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-351",
              "sol": "block.timestamp-351"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[240,79,170,40,69,147,159,27,85,114,130,234,179,187,105,119,62,83,224,103,232,135,166,64,29,44,42,106,158,229,72,54],[60,231,66,178,115,138,111,151,179,122,130,143,36,19,18,85,255,123,149,172,163,168,238,63,147,211,43,196,31,149,195,149],[183,203,158,72,11,64,41,80,36,12,209,162,178,79,253,188,201,221,48,46,65,225,226,224,110,165,47,103,225,46,139,220],[252,29,109,137,93,146,25,78,140,22,206,129,248,169,203,39,92,41,192,113,233,131,23,65,224,60,112,83,11,45,121,45],[45,23,57,211,164,166,70,84,180,206,240,40,186,149,158,184,44,93,186,179,121,103,221,166,32,1,183,135,14,230,105,242]]",
                "sol": "[bytes32(stringToBytes32(\"240,79,170,40,69,147,159,27,85,114,130,234,179,187,105,119,62,83,224,103,232,135,166,64,29,44,42,106,158,229,72,54\")),bytes32(stringToBytes32(\"60,231,66,178,115,138,111,151,179,122,130,143,36,19,18,85,255,123,149,172,163,168,238,63,147,211,43,196,31,149,195,149\")),bytes32(stringToBytes32(\"183,203,158,72,11,64,41,80,36,12,209,162,178,79,253,188,201,221,48,46,65,225,226,224,110,165,47,103,225,46,139,220\")),bytes32(stringToBytes32(\"252,29,109,137,93,146,25,78,140,22,206,129,248,169,203,39,92,41,192,113,233,131,23,65,224,60,112,83,11,45,121,45\")),bytes32(stringToBytes32(\"45,23,57,211,164,166,70,84,180,206,240,40,186,149,158,184,44,93,186,179,121,103,221,166,32,1,183,135,14,230,105,242\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.471ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "[42,37,80,8,244,212,14,59,103,193,89,166,183,125,92,189,177,204,150,29,232,108,49,24,189,2,179,65,126,173,173,97]",
              "sol": "abi.encode(\"42,37,80,8,244,212,14,59,103,193,89,166,183,125,92,189,177,204,150,29,232,108,49,24,189,2,179,65,126,173,173,97\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "[42,37,80,8,244,212,14,59,103,193,89,166,183,125,92,189,177,204,150,29,232,108,49,24,189,2,179,65,126,173,173,97]",
                "sol": "abi.encode(\"42,37,80,8,244,212,14,59,103,193,89,166,183,125,92,189,177,204,150,29,232,108,49,24,189,2,179,65,126,173,173,97\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.473ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.473ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.473ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.474ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.474ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.474ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.474ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.476ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.477ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "82",
                "sol": "82"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.477ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.478ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.478ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.479ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.479ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "[142,148,104,219,51,94,122,66,40,38,21,12,205,151,127,14,243,216,155,47,165,164,80,73,91,241,217,225,227,134,142,16]",
              "sol": "abi.encode(\"142,148,104,219,51,94,122,66,40,38,21,12,205,151,127,14,243,216,155,47,165,164,80,73,91,241,217,225,227,134,142,16\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.480ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.480ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.481ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "[132,68,134,119,123,190,105,131,67,75,244,118,98,6,10,5,179,223,179,170,145,174,102,233,65,3,93,173,194,172,189,249]",
              "sol": "stringToBytes32(\"132,68,134,119,123,190,105,131,67,75,244,118,98,6,10,5,179,223,179,170,145,174,102,233,65,3,93,173,194,172,189,249\")"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[98,28,115,230,208,166,16,113,170,216,155,6,114,70,12,55,220,57,6,38,138,84,13,214,120,244,11,197,104,250,192,92]",
              "sol": "stringToBytes32(\"98,28,115,230,208,166,16,113,170,216,155,6,114,70,12,55,220,57,6,38,138,84,13,214,120,244,11,197,104,250,192,92\")"
            },
            {
              "js": "[210,190,42,139,117,99,93,22,83,64,22,114,118,184,177,23,70,64,236,33,48,128,120,152,31,47,135,175,101,246,197,43]",
              "sol": "stringToBytes32(\"210,190,42,139,117,99,93,22,83,64,22,114,118,184,177,23,70,64,236,33,48,128,120,152,31,47,135,175,101,246,197,43\")"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "[132,68,134,119,123,190,105,131,67,75,244,118,98,6,10,5,179,223,179,170,145,174,102,233,65,3,93,173,194,172,189,249]",
                "sol": "stringToBytes32(\"132,68,134,119,123,190,105,131,67,75,244,118,98,6,10,5,179,223,179,170,145,174,102,233,65,3,93,173,194,172,189,249\")"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "[98,28,115,230,208,166,16,113,170,216,155,6,114,70,12,55,220,57,6,38,138,84,13,214,120,244,11,197,104,250,192,92]",
                "sol": "stringToBytes32(\"98,28,115,230,208,166,16,113,170,216,155,6,114,70,12,55,220,57,6,38,138,84,13,214,120,244,11,197,104,250,192,92\")"
              },
              {
                "js": "[210,190,42,139,117,99,93,22,83,64,22,114,118,184,177,23,70,64,236,33,48,128,120,152,31,47,135,175,101,246,197,43]",
                "sol": "stringToBytes32(\"210,190,42,139,117,99,93,22,83,64,22,114,118,184,177,23,70,64,236,33,48,128,120,152,31,47,135,175,101,246,197,43\")"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "[132,68,134,119,123,190,105,131,67,75,244,118,98,6,10,5,179,223,179,170,145,174,102,233,65,3,93,173,194,172,189,249]",
                "sol": "stringToBytes32(\"132,68,134,119,123,190,105,131,67,75,244,118,98,6,10,5,179,223,179,170,145,174,102,233,65,3,93,173,194,172,189,249\")"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "[98,28,115,230,208,166,16,113,170,216,155,6,114,70,12,55,220,57,6,38,138,84,13,214,120,244,11,197,104,250,192,92]",
                "sol": "stringToBytes32(\"98,28,115,230,208,166,16,113,170,216,155,6,114,70,12,55,220,57,6,38,138,84,13,214,120,244,11,197,104,250,192,92\")"
              },
              {
                "js": "[210,190,42,139,117,99,93,22,83,64,22,114,118,184,177,23,70,64,236,33,48,128,120,152,31,47,135,175,101,246,197,43]",
                "sol": "stringToBytes32(\"210,190,42,139,117,99,93,22,83,64,22,114,118,184,177,23,70,64,236,33,48,128,120,152,31,47,135,175,101,246,197,43\")"
              },
              {
                "js": 18,
                "sol": 18
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.483ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[1336,19]",
              "sol": "[uint256(1336),uint256(19)]"
            },
            {
              "js": "[[93,15,91,129,59,217,212,115,33,105,254,49,10,243,1,210,54,196,199,173,48,56,202,183,25,239,78,216,18,217,46,18],[150,176,1,58,63,16,35,240,201,75,65,130,132,46,222,131,148,42,128,55,237,129,141,126,126,101,223,100,43,235,6,131]]",
              "sol": "[bytes32(stringToBytes32(\"93,15,91,129,59,217,212,115,33,105,254,49,10,243,1,210,54,196,199,173,48,56,202,183,25,239,78,216,18,217,46,18\")),bytes32(stringToBytes32(\"150,176,1,58,63,16,35,240,201,75,65,130,132,46,222,131,148,42,128,55,237,129,141,126,126,101,223,100,43,235,6,131\"))]"
            },
            {
              "js": "[15,16]",
              "sol": "[uint8(15),uint8(16)]"
            },
            {
              "js": "[[5,120,75,112,3,111,31,94,175,171,50,41,61,195,185,2,74,105,205,247,172,181,145,151,211,94,140,34,175,78,95,203],[5,201,0,251,104,197,152,252,165,234,150,47,232,186,67,176,58,206,166,179,58,44,250,111,28,85,163,184,216,207,158,105]]",
              "sol": "[bytes32(stringToBytes32(\"5,120,75,112,3,111,31,94,175,171,50,41,61,195,185,2,74,105,205,247,172,181,145,151,211,94,140,34,175,78,95,203\")),bytes32(stringToBytes32(\"5,201,0,251,104,197,152,252,165,234,150,47,232,186,67,176,58,206,166,179,58,44,250,111,28,85,163,184,216,207,158,105\"))]"
            },
            {
              "js": "[[252,128,206,241,75,96,91,141,64,1,72,226,28,180,177,76,108,193,213,60,14,74,125,49,164,122,234,196,193,214,153,180],[247,78,211,237,143,84,163,223,46,209,182,94,61,29,98,246,244,54,4,110,24,102,94,121,234,94,233,142,112,103,140,48]]",
              "sol": "[bytes32(stringToBytes32(\"252,128,206,241,75,96,91,141,64,1,72,226,28,180,177,76,108,193,213,60,14,74,125,49,164,122,234,196,193,214,153,180\")),bytes32(stringToBytes32(\"247,78,211,237,143,84,163,223,46,209,182,94,61,29,98,246,244,54,4,110,24,102,94,121,234,94,233,142,112,103,140,48\"))]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1336,19]",
                "sol": "[uint256(1336),uint256(19)]"
              },
              {
                "js": "[[93,15,91,129,59,217,212,115,33,105,254,49,10,243,1,210,54,196,199,173,48,56,202,183,25,239,78,216,18,217,46,18],[150,176,1,58,63,16,35,240,201,75,65,130,132,46,222,131,148,42,128,55,237,129,141,126,126,101,223,100,43,235,6,131]]",
                "sol": "[bytes32(stringToBytes32(\"93,15,91,129,59,217,212,115,33,105,254,49,10,243,1,210,54,196,199,173,48,56,202,183,25,239,78,216,18,217,46,18\")),bytes32(stringToBytes32(\"150,176,1,58,63,16,35,240,201,75,65,130,132,46,222,131,148,42,128,55,237,129,141,126,126,101,223,100,43,235,6,131\"))]"
              },
              {
                "js": "[15,16]",
                "sol": "[uint8(15),uint8(16)]"
              },
              {
                "js": "[[5,120,75,112,3,111,31,94,175,171,50,41,61,195,185,2,74,105,205,247,172,181,145,151,211,94,140,34,175,78,95,203],[5,201,0,251,104,197,152,252,165,234,150,47,232,186,67,176,58,206,166,179,58,44,250,111,28,85,163,184,216,207,158,105]]",
                "sol": "[bytes32(stringToBytes32(\"5,120,75,112,3,111,31,94,175,171,50,41,61,195,185,2,74,105,205,247,172,181,145,151,211,94,140,34,175,78,95,203\")),bytes32(stringToBytes32(\"5,201,0,251,104,197,152,252,165,234,150,47,232,186,67,176,58,206,166,179,58,44,250,111,28,85,163,184,216,207,158,105\"))]"
              },
              {
                "js": "[[252,128,206,241,75,96,91,141,64,1,72,226,28,180,177,76,108,193,213,60,14,74,125,49,164,122,234,196,193,214,153,180],[247,78,211,237,143,84,163,223,46,209,182,94,61,29,98,246,244,54,4,110,24,102,94,121,234,94,233,142,112,103,140,48]]",
                "sol": "[bytes32(stringToBytes32(\"252,128,206,241,75,96,91,141,64,1,72,226,28,180,177,76,108,193,213,60,14,74,125,49,164,122,234,196,193,214,153,180\")),bytes32(stringToBytes32(\"247,78,211,237,143,84,163,223,46,209,182,94,61,29,98,246,244,54,4,110,24,102,94,121,234,94,233,142,112,103,140,48\"))]"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[14,15,1001]",
                "sol": "[18,1,9]"
              },
              {
                "js": "[[93,15,91,129,59,217,212,115,33,105,254,49,10,243,1,210,54,196,199,173,48,56,202,183,25,239,78,216,18,217,46,18],[150,176,1,58,63,16,35,240,201,75,65,130,132,46,222,131,148,42,128,55,237,129,141,126,126,101,223,100,43,235,6,131]]",
                "sol": "[bytes32(stringToBytes32(\"93,15,91,129,59,217,212,115,33,105,254,49,10,243,1,210,54,196,199,173,48,56,202,183,25,239,78,216,18,217,46,18\")),bytes32(stringToBytes32(\"150,176,1,58,63,16,35,240,201,75,65,130,132,46,222,131,148,42,128,55,237,129,141,126,126,101,223,100,43,235,6,131\"))]"
              },
              {
                "js": "[15,16]",
                "sol": "[uint8(15),uint8(16)]"
              },
              {
                "js": "[[5,120,75,112,3,111,31,94,175,171,50,41,61,195,185,2,74,105,205,247,172,181,145,151,211,94,140,34,175,78,95,203],[5,201,0,251,104,197,152,252,165,234,150,47,232,186,67,176,58,206,166,179,58,44,250,111,28,85,163,184,216,207,158,105]]",
                "sol": "[bytes32(stringToBytes32(\"5,120,75,112,3,111,31,94,175,171,50,41,61,195,185,2,74,105,205,247,172,181,145,151,211,94,140,34,175,78,95,203\")),bytes32(stringToBytes32(\"5,201,0,251,104,197,152,252,165,234,150,47,232,186,67,176,58,206,166,179,58,44,250,111,28,85,163,184,216,207,158,105\"))]"
              },
              {
                "js": "[[252,128,206,241,75,96,91,141,64,1,72,226,28,180,177,76,108,193,213,60,14,74,125,49,164,122,234,196,193,214,153,180],[247,78,211,237,143,84,163,223,46,209,182,94,61,29,98,246,244,54,4,110,24,102,94,121,234,94,233,142,112,103,140,48]]",
                "sol": "[bytes32(stringToBytes32(\"252,128,206,241,75,96,91,141,64,1,72,226,28,180,177,76,108,193,213,60,14,74,125,49,164,122,234,196,193,214,153,180\")),bytes32(stringToBytes32(\"247,78,211,237,143,84,163,223,46,209,182,94,61,29,98,246,244,54,4,110,24,102,94,121,234,94,233,142,112,103,140,48\"))]"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[100,161,1001]",
                "sol": "[4,82,83]"
              },
              {
                "js": "[[93,15,91,129,59,217,212,115,33,105,254,49,10,243,1,210,54,196,199,173,48,56,202,183,25,239,78,216,18,217,46,18],[150,176,1,58,63,16,35,240,201,75,65,130,132,46,222,131,148,42,128,55,237,129,141,126,126,101,223,100,43,235,6,131]]",
                "sol": "[bytes32(stringToBytes32(\"93,15,91,129,59,217,212,115,33,105,254,49,10,243,1,210,54,196,199,173,48,56,202,183,25,239,78,216,18,217,46,18\")),bytes32(stringToBytes32(\"150,176,1,58,63,16,35,240,201,75,65,130,132,46,222,131,148,42,128,55,237,129,141,126,126,101,223,100,43,235,6,131\"))]"
              },
              {
                "js": "[15,16]",
                "sol": "[uint8(15),uint8(16)]"
              },
              {
                "js": "[[5,120,75,112,3,111,31,94,175,171,50,41,61,195,185,2,74,105,205,247,172,181,145,151,211,94,140,34,175,78,95,203],[5,201,0,251,104,197,152,252,165,234,150,47,232,186,67,176,58,206,166,179,58,44,250,111,28,85,163,184,216,207,158,105]]",
                "sol": "[bytes32(stringToBytes32(\"5,120,75,112,3,111,31,94,175,171,50,41,61,195,185,2,74,105,205,247,172,181,145,151,211,94,140,34,175,78,95,203\")),bytes32(stringToBytes32(\"5,201,0,251,104,197,152,252,165,234,150,47,232,186,67,176,58,206,166,179,58,44,250,111,28,85,163,184,216,207,158,105\"))]"
              },
              {
                "js": "[[252,128,206,241,75,96,91,141,64,1,72,226,28,180,177,76,108,193,213,60,14,74,125,49,164,122,234,196,193,214,153,180],[247,78,211,237,143,84,163,223,46,209,182,94,61,29,98,246,244,54,4,110,24,102,94,121,234,94,233,142,112,103,140,48]]",
                "sol": "[bytes32(stringToBytes32(\"252,128,206,241,75,96,91,141,64,1,72,226,28,180,177,76,108,193,213,60,14,74,125,49,164,122,234,196,193,214,153,180\")),bytes32(stringToBytes32(\"247,78,211,237,143,84,163,223,46,209,182,94,61,29,98,246,244,54,4,110,24,102,94,121,234,94,233,142,112,103,140,48\"))]"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[9,1001,1001]",
                "sol": "[1338,1,15]"
              },
              {
                "js": "[[93,15,91,129,59,217,212,115,33,105,254,49,10,243,1,210,54,196,199,173,48,56,202,183,25,239,78,216,18,217,46,18],[150,176,1,58,63,16,35,240,201,75,65,130,132,46,222,131,148,42,128,55,237,129,141,126,126,101,223,100,43,235,6,131]]",
                "sol": "[bytes32(stringToBytes32(\"93,15,91,129,59,217,212,115,33,105,254,49,10,243,1,210,54,196,199,173,48,56,202,183,25,239,78,216,18,217,46,18\")),bytes32(stringToBytes32(\"150,176,1,58,63,16,35,240,201,75,65,130,132,46,222,131,148,42,128,55,237,129,141,126,126,101,223,100,43,235,6,131\"))]"
              },
              {
                "js": "[15,16]",
                "sol": "[uint8(15),uint8(16)]"
              },
              {
                "js": "[[5,120,75,112,3,111,31,94,175,171,50,41,61,195,185,2,74,105,205,247,172,181,145,151,211,94,140,34,175,78,95,203],[5,201,0,251,104,197,152,252,165,234,150,47,232,186,67,176,58,206,166,179,58,44,250,111,28,85,163,184,216,207,158,105]]",
                "sol": "[bytes32(stringToBytes32(\"5,120,75,112,3,111,31,94,175,171,50,41,61,195,185,2,74,105,205,247,172,181,145,151,211,94,140,34,175,78,95,203\")),bytes32(stringToBytes32(\"5,201,0,251,104,197,152,252,165,234,150,47,232,186,67,176,58,206,166,179,58,44,250,111,28,85,163,184,216,207,158,105\"))]"
              },
              {
                "js": "[[252,128,206,241,75,96,91,141,64,1,72,226,28,180,177,76,108,193,213,60,14,74,125,49,164,122,234,196,193,214,153,180],[247,78,211,237,143,84,163,223,46,209,182,94,61,29,98,246,244,54,4,110,24,102,94,121,234,94,233,142,112,103,140,48]]",
                "sol": "[bytes32(stringToBytes32(\"252,128,206,241,75,96,91,141,64,1,72,226,28,180,177,76,108,193,213,60,14,74,125,49,164,122,234,196,193,214,153,180\")),bytes32(stringToBytes32(\"247,78,211,237,143,84,163,223,46,209,182,94,61,29,98,246,244,54,4,110,24,102,94,121,234,94,233,142,112,103,140,48\"))]"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1,0,4]",
                "sol": "[16,256,5]"
              },
              {
                "js": "[[93,15,91,129,59,217,212,115,33,105,254,49,10,243,1,210,54,196,199,173,48,56,202,183,25,239,78,216,18,217,46,18],[150,176,1,58,63,16,35,240,201,75,65,130,132,46,222,131,148,42,128,55,237,129,141,126,126,101,223,100,43,235,6,131]]",
                "sol": "[bytes32(stringToBytes32(\"93,15,91,129,59,217,212,115,33,105,254,49,10,243,1,210,54,196,199,173,48,56,202,183,25,239,78,216,18,217,46,18\")),bytes32(stringToBytes32(\"150,176,1,58,63,16,35,240,201,75,65,130,132,46,222,131,148,42,128,55,237,129,141,126,126,101,223,100,43,235,6,131\"))]"
              },
              {
                "js": "[15,16]",
                "sol": "[uint8(15),uint8(16)]"
              },
              {
                "js": "[[5,120,75,112,3,111,31,94,175,171,50,41,61,195,185,2,74,105,205,247,172,181,145,151,211,94,140,34,175,78,95,203],[5,201,0,251,104,197,152,252,165,234,150,47,232,186,67,176,58,206,166,179,58,44,250,111,28,85,163,184,216,207,158,105]]",
                "sol": "[bytes32(stringToBytes32(\"5,120,75,112,3,111,31,94,175,171,50,41,61,195,185,2,74,105,205,247,172,181,145,151,211,94,140,34,175,78,95,203\")),bytes32(stringToBytes32(\"5,201,0,251,104,197,152,252,165,234,150,47,232,186,67,176,58,206,166,179,58,44,250,111,28,85,163,184,216,207,158,105\"))]"
              },
              {
                "js": "[[252,128,206,241,75,96,91,141,64,1,72,226,28,180,177,76,108,193,213,60,14,74,125,49,164,122,234,196,193,214,153,180],[247,78,211,237,143,84,163,223,46,209,182,94,61,29,98,246,244,54,4,110,24,102,94,121,234,94,233,142,112,103,140,48]]",
                "sol": "[bytes32(stringToBytes32(\"252,128,206,241,75,96,91,141,64,1,72,226,28,180,177,76,108,193,213,60,14,74,125,49,164,122,234,196,193,214,153,180\")),bytes32(stringToBytes32(\"247,78,211,237,143,84,163,223,46,209,182,94,61,29,98,246,244,54,4,110,24,102,94,121,234,94,233,142,112,103,140,48\"))]"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.490ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "[46,86,206,101,70,178,26,243,14,141,13,184,196,83,164,182,220,97,250,139,189,230,34,21,77,194,140,138,7,41,123,229]",
              "sol": "stringToBytes32(\"46,86,206,101,70,178,26,243,14,141,13,184,196,83,164,182,220,97,250,139,189,230,34,21,77,194,140,138,7,41,123,229\")"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "[151,187,53,155,142,197,233,124,78,33,72,146,99,71,45,193,225,102,96,91,233,225,76,39,243,187,210,46,6,149,209,199]",
              "sol": "stringToBytes32(\"151,187,53,155,142,197,233,124,78,33,72,146,99,71,45,193,225,102,96,91,233,225,76,39,243,187,210,46,6,149,209,199\")"
            },
            {
              "js": "[244,137,78,0,242,97,104,177,26,160,101,59,81,105,5,240,44,178,248,226,133,130,8,15,148,211,244,54,85,41,181,7]",
              "sol": "stringToBytes32(\"244,137,78,0,242,97,104,177,26,160,101,59,81,105,5,240,44,178,248,226,133,130,8,15,148,211,244,54,85,41,181,7\")"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "[46,86,206,101,70,178,26,243,14,141,13,184,196,83,164,182,220,97,250,139,189,230,34,21,77,194,140,138,7,41,123,229]",
                "sol": "stringToBytes32(\"46,86,206,101,70,178,26,243,14,141,13,184,196,83,164,182,220,97,250,139,189,230,34,21,77,194,140,138,7,41,123,229\")"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "[151,187,53,155,142,197,233,124,78,33,72,146,99,71,45,193,225,102,96,91,233,225,76,39,243,187,210,46,6,149,209,199]",
                "sol": "stringToBytes32(\"151,187,53,155,142,197,233,124,78,33,72,146,99,71,45,193,225,102,96,91,233,225,76,39,243,187,210,46,6,149,209,199\")"
              },
              {
                "js": "[244,137,78,0,242,97,104,177,26,160,101,59,81,105,5,240,44,178,248,226,133,130,8,15,148,211,244,54,85,41,181,7]",
                "sol": "stringToBytes32(\"244,137,78,0,242,97,104,177,26,160,101,59,81,105,5,240,44,178,248,226,133,130,8,15,148,211,244,54,85,41,181,7\")"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "[46,86,206,101,70,178,26,243,14,141,13,184,196,83,164,182,220,97,250,139,189,230,34,21,77,194,140,138,7,41,123,229]",
                "sol": "stringToBytes32(\"46,86,206,101,70,178,26,243,14,141,13,184,196,83,164,182,220,97,250,139,189,230,34,21,77,194,140,138,7,41,123,229\")"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "[151,187,53,155,142,197,233,124,78,33,72,146,99,71,45,193,225,102,96,91,233,225,76,39,243,187,210,46,6,149,209,199]",
                "sol": "stringToBytes32(\"151,187,53,155,142,197,233,124,78,33,72,146,99,71,45,193,225,102,96,91,233,225,76,39,243,187,210,46,6,149,209,199\")"
              },
              {
                "js": "[244,137,78,0,242,97,104,177,26,160,101,59,81,105,5,240,44,178,248,226,133,130,8,15,148,211,244,54,85,41,181,7]",
                "sol": "stringToBytes32(\"244,137,78,0,242,97,104,177,26,160,101,59,81,105,5,240,44,178,248,226,133,130,8,15,148,211,244,54,85,41,181,7\")"
              },
              {
                "js": 17,
                "sol": 17
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.493ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.494ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[121,79,150,55,209,185,251,126,239,56,197,94,186,198,70,120,100,126,195,110,125,136,86,125,4,178,244,111,198,135,198,116]",
              "sol": "stringToBytes32(\"121,79,150,55,209,185,251,126,239,56,197,94,186,198,70,120,100,126,195,110,125,136,86,125,4,178,244,111,198,135,198,116\")"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "[196,27,211,195,1,169,126,196,173,195,7,186,206,57,62,81,203,16,200,10,139,226,203,157,125,143,211,200,65,96,106,116]",
              "sol": "stringToBytes32(\"196,27,211,195,1,169,126,196,173,195,7,186,206,57,62,81,203,16,200,10,139,226,203,157,125,143,211,200,65,96,106,116\")"
            },
            {
              "js": "[204,41,67,243,27,134,77,78,202,89,55,123,5,242,117,91,240,164,132,239,61,52,160,27,79,106,180,208,95,215,142,165]",
              "sol": "stringToBytes32(\"204,41,67,243,27,134,77,78,202,89,55,123,5,242,117,91,240,164,132,239,61,52,160,27,79,106,180,208,95,215,142,165\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.494ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.495ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:48:12.495ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:48:12.496ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}