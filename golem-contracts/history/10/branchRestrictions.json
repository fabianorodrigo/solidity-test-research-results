,{
  "2020-11-11T01:07:07.526ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:07:14.038ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+623",
              "sol": "block.number+623"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+623+371",
              "sol": "block.number+623+371"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+623",
                "sol": "block.number+623"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+623+371",
                "sol": "block.number+623+371"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+623",
                "sol": "block.number+623"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+623+371",
                "sol": "block.number+623+371"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+623+371",
                "sol": "block.number+623+371"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+623",
                "sol": "block.number+623"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+623",
                "sol": "block.number+623"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:07:20.712ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:07:27.284ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:07:33.891ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:07:40.790ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractStandardToken.address",
              "sol": "contractStandardToken"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:07:47.505ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBasicToken.address",
              "sol": "contractBasicToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:07:54.296ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.356ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.357ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.358ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": 6,
                "sol": 6
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.358ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.359ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.360ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.361ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.361ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.362ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.363ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.363ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.363ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.365ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.366ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "senderBalance < _value"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance<_value",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.368ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.368ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.368ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.371ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.372ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.372ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:9}",
              "sol": "{\"from\":\"0x0\",\"value\":\"9\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:9}",
                "sol": "{\"from\":\"0x0\",\"value\":\"9\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.377ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.378ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.382ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.382ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.382ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.383ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.383ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "[247,70,104,4,175,44,234,108,205,137,32,134,130,158,48,96,151,193,217,161,172,253,20,86,77,15,65,99,249,117,103,238]",
              "sol": "stringToBytes32(\"247,70,104,4,175,44,234,108,205,137,32,134,130,158,48,96,151,193,217,161,172,253,20,86,77,15,65,99,249,117,103,238\")"
            },
            {
              "js": "[87,161,153,130,39,223,166,200,11,46,4,178,1,61,33,62,35,223,115,217,253,130,175,229,48,47,158,35,213,231,73,145]",
              "sol": "stringToBytes32(\"87,161,153,130,39,223,166,200,11,46,4,178,1,61,33,62,35,223,115,217,253,130,175,229,48,47,158,35,213,231,73,145\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.384ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "[57,92,146,249,196,90,58,63,249,161,121,200,253,193,70,93,60,142,240,71]",
              "sol": "abi.encode(\"57,92,146,249,196,90,58,63,249,161,121,200,253,193,70,93,60,142,240,71\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "82",
                "sol": "82"
              },
              {
                "js": "[80,229,208,44,57,107,1,16,145,152,235,244,96,103,250,8,100,93,9,62,139]",
                "sol": "bytes21(\"80,229,208,44,57,107,1,16,145,152,235,244,96,103,250,8,100,93,9,62,139\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.385ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "[46,87,45,98,239,17,205,86,104,211,218,18,229,62,136,0,184,52,18,186,192,41,43,140,73,199,156,219,159,198,34,181]",
              "sol": "stringToBytes32(\"46,87,45,98,239,17,205,86,104,211,218,18,229,62,136,0,184,52,18,186,192,41,43,140,73,199,156,219,159,198,34,181\")"
            },
            {
              "js": "[255,148,66,198,80,191,83,92,179,110,63,121,217,146,164,91,232,234,230,206,45,114,36,38,103,152,168,83,176,186,91,70]",
              "sol": "stringToBytes32(\"255,148,66,198,80,191,83,92,179,110,63,121,217,146,164,91,232,234,230,206,45,114,36,38,103,152,168,83,176,186,91,70\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.385ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.386ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.386ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.387ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.388ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.388ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.388ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.389ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1000",
                "sol": "1000"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.391ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.391ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[4,85,178,112,173,145,1,103,189,147,83,47,145,172,199,174,221,42,189,39,88,181,128,178,64,101,144,224,41,193,68,126]]",
              "sol": "[bytes32(stringToBytes32(\"4,85,178,112,173,145,1,103,189,147,83,47,145,172,199,174,221,42,189,39,88,181,128,178,64,101,144,224,41,193,68,126\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-190",
              "sol": "block.timestamp-190"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[4,85,178,112,173,145,1,103,189,147,83,47,145,172,199,174,221,42,189,39,88,181,128,178,64,101,144,224,41,193,68,126]]",
                "sol": "[bytes32(stringToBytes32(\"4,85,178,112,173,145,1,103,189,147,83,47,145,172,199,174,221,42,189,39,88,181,128,178,64,101,144,224,41,193,68,126\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.392ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "[85,182,93,14,246,191,115,166,134,184,166,117,62,158,250,86,124,78,31,231,172,72,62,32,84,88,219,170,94,218,144,19]",
              "sol": "abi.encode(\"85,182,93,14,246,191,115,166,134,184,166,117,62,158,250,86,124,78,31,231,172,72,62,32,84,88,219,170,94,218,144,19\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "[85,182,93,14,246,191,115,166,134,184,166,117,62,158,250,86,124,78,31,231,172,72,62,32,84,88,219,170,94,218,144,19]",
                "sol": "abi.encode(\"85,182,93,14,246,191,115,166,134,184,166,117,62,158,250,86,124,78,31,231,172,72,62,32,84,88,219,170,94,218,144,19\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.394ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.394ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.394ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.395ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.395ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.395ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.395ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.396ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.397ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.397ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "82",
                "sol": "82"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.398ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.398ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.399ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.399ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "[165,169,188,164,105,235,64,242,127,251,23,185,178,140,114,16,154,137,225,167,37,160,204,250,249,125,117,197,213,55,222,112]",
              "sol": "abi.encode(\"165,169,188,164,105,235,64,242,127,251,23,185,178,140,114,16,154,137,225,167,37,160,204,250,249,125,117,197,213,55,222,112\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.399ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.400ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.401ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "[133,180,101,221,18,69,249,240,130,210,187,104,180,106,43,161,183,206,131,167,167,180,166,186,57,33,100,203,231,92,83,120]",
              "sol": "stringToBytes32(\"133,180,101,221,18,69,249,240,130,210,187,104,180,106,43,161,183,206,131,167,167,180,166,186,57,33,100,203,231,92,83,120\")"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "[84,102,218,38,61,225,66,156,92,75,122,158,197,50,197,177,238,48,189,149,160,107,18,144,19,67,250,146,208,107,4,188]",
              "sol": "stringToBytes32(\"84,102,218,38,61,225,66,156,92,75,122,158,197,50,197,177,238,48,189,149,160,107,18,144,19,67,250,146,208,107,4,188\")"
            },
            {
              "js": "[139,214,46,114,0,106,37,32,1,90,56,179,18,16,142,88,244,35,160,201,95,48,114,207,135,229,1,15,205,137,152,104]",
              "sol": "stringToBytes32(\"139,214,46,114,0,106,37,32,1,90,56,179,18,16,142,88,244,35,160,201,95,48,114,207,135,229,1,15,205,137,152,104\")"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "[133,180,101,221,18,69,249,240,130,210,187,104,180,106,43,161,183,206,131,167,167,180,166,186,57,33,100,203,231,92,83,120]",
                "sol": "stringToBytes32(\"133,180,101,221,18,69,249,240,130,210,187,104,180,106,43,161,183,206,131,167,167,180,166,186,57,33,100,203,231,92,83,120\")"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "[84,102,218,38,61,225,66,156,92,75,122,158,197,50,197,177,238,48,189,149,160,107,18,144,19,67,250,146,208,107,4,188]",
                "sol": "stringToBytes32(\"84,102,218,38,61,225,66,156,92,75,122,158,197,50,197,177,238,48,189,149,160,107,18,144,19,67,250,146,208,107,4,188\")"
              },
              {
                "js": "[139,214,46,114,0,106,37,32,1,90,56,179,18,16,142,88,244,35,160,201,95,48,114,207,135,229,1,15,205,137,152,104]",
                "sol": "stringToBytes32(\"139,214,46,114,0,106,37,32,1,90,56,179,18,16,142,88,244,35,160,201,95,48,114,207,135,229,1,15,205,137,152,104\")"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "[133,180,101,221,18,69,249,240,130,210,187,104,180,106,43,161,183,206,131,167,167,180,166,186,57,33,100,203,231,92,83,120]",
                "sol": "stringToBytes32(\"133,180,101,221,18,69,249,240,130,210,187,104,180,106,43,161,183,206,131,167,167,180,166,186,57,33,100,203,231,92,83,120\")"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "[84,102,218,38,61,225,66,156,92,75,122,158,197,50,197,177,238,48,189,149,160,107,18,144,19,67,250,146,208,107,4,188]",
                "sol": "stringToBytes32(\"84,102,218,38,61,225,66,156,92,75,122,158,197,50,197,177,238,48,189,149,160,107,18,144,19,67,250,146,208,107,4,188\")"
              },
              {
                "js": "[139,214,46,114,0,106,37,32,1,90,56,179,18,16,142,88,244,35,160,201,95,48,114,207,135,229,1,15,205,137,152,104]",
                "sol": "stringToBytes32(\"139,214,46,114,0,106,37,32,1,90,56,179,18,16,142,88,244,35,160,201,95,48,114,207,135,229,1,15,205,137,152,104\")"
              },
              {
                "js": 101,
                "sol": 101
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.402ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[10000,1337,82,10000,16,159,1000]",
              "sol": "[uint256(10000),uint256(1337),uint256(82),uint256(10000),uint256(16),uint256(159),uint256(1000)]"
            },
            {
              "js": "[[46,193,231,140,215,131,127,141,198,138,150,153,192,193,220,102,140,132,173,139,211,181,91,17,193,32,190,174,20,50,111,247],[197,166,46,52,39,12,41,228,202,21,197,210,53,234,12,159,182,93,33,184,127,75,208,211,53,133,216,8,22,38,24,243],[186,42,57,155,46,184,117,77,224,10,197,53,128,181,202,147,89,148,28,236,233,105,89,13,142,123,91,173,33,202,80,2],[136,6,172,195,7,206,184,210,6,136,137,72,32,218,185,142,220,26,107,193,142,183,124,39,102,162,44,104,96,163,106,235],[202,77,18,164,170,255,46,36,8,198,69,220,89,94,175,84,8,188,97,201,210,16,175,112,143,26,47,128,2,71,97,162],[8,139,36,179,219,67,251,67,160,190,163,215,105,152,117,211,92,29,100,173,12,86,151,61,188,140,249,220,180,31,240,30],[207,252,132,107,4,159,74,88,73,208,205,121,66,28,149,55,108,36,236,91,34,94,40,185,9,218,158,226,61,5,188,110]]",
              "sol": "[bytes32(stringToBytes32(\"46,193,231,140,215,131,127,141,198,138,150,153,192,193,220,102,140,132,173,139,211,181,91,17,193,32,190,174,20,50,111,247\")),bytes32(stringToBytes32(\"197,166,46,52,39,12,41,228,202,21,197,210,53,234,12,159,182,93,33,184,127,75,208,211,53,133,216,8,22,38,24,243\")),bytes32(stringToBytes32(\"186,42,57,155,46,184,117,77,224,10,197,53,128,181,202,147,89,148,28,236,233,105,89,13,142,123,91,173,33,202,80,2\")),bytes32(stringToBytes32(\"136,6,172,195,7,206,184,210,6,136,137,72,32,218,185,142,220,26,107,193,142,183,124,39,102,162,44,104,96,163,106,235\")),bytes32(stringToBytes32(\"202,77,18,164,170,255,46,36,8,198,69,220,89,94,175,84,8,188,97,201,210,16,175,112,143,26,47,128,2,71,97,162\")),bytes32(stringToBytes32(\"8,139,36,179,219,67,251,67,160,190,163,215,105,152,117,211,92,29,100,173,12,86,151,61,188,140,249,220,180,31,240,30\")),bytes32(stringToBytes32(\"207,252,132,107,4,159,74,88,73,208,205,121,66,28,149,55,108,36,236,91,34,94,40,185,9,218,158,226,61,5,188,110\"))]"
            },
            {
              "js": "[159,10,17,3,20,4,6]",
              "sol": "[uint8(159),uint8(10),uint8(17),uint8(3),uint8(20),uint8(4),uint8(6)]"
            },
            {
              "js": "[[49,186,126,112,37,17,15,111,96,107,69,40,228,148,179,33,22,179,187,40,201,19,30,58,217,190,205,128,254,32,61,27],[72,74,192,184,194,158,15,140,84,255,99,129,158,151,84,66,116,128,242,237,202,152,124,44,124,24,248,110,241,71,63,193],[13,90,24,59,186,152,119,247,30,59,106,147,231,196,101,31,241,105,129,100,52,53,65,208,133,116,240,30,48,223,27,58],[155,66,164,4,158,204,141,98,218,25,70,159,23,222,175,226,73,222,199,60,213,77,10,108,249,111,204,141,246,41,174,181],[72,252,153,145,134,255,59,240,223,218,23,151,46,71,93,107,242,28,67,92,35,166,216,155,84,125,200,90,145,185,136,194],[50,49,49,202,115,74,110,142,124,86,38,159,131,141,104,228,10,253,118,18,190,54,21,35,67,199,234,184,250,208,122,29],[199,85,52,87,103,117,174,16,80,149,205,95,181,211,40,17,245,195,216,231,40,228,123,185,138,216,121,27,65,232,196,50]]",
              "sol": "[bytes32(stringToBytes32(\"49,186,126,112,37,17,15,111,96,107,69,40,228,148,179,33,22,179,187,40,201,19,30,58,217,190,205,128,254,32,61,27\")),bytes32(stringToBytes32(\"72,74,192,184,194,158,15,140,84,255,99,129,158,151,84,66,116,128,242,237,202,152,124,44,124,24,248,110,241,71,63,193\")),bytes32(stringToBytes32(\"13,90,24,59,186,152,119,247,30,59,106,147,231,196,101,31,241,105,129,100,52,53,65,208,133,116,240,30,48,223,27,58\")),bytes32(stringToBytes32(\"155,66,164,4,158,204,141,98,218,25,70,159,23,222,175,226,73,222,199,60,213,77,10,108,249,111,204,141,246,41,174,181\")),bytes32(stringToBytes32(\"72,252,153,145,134,255,59,240,223,218,23,151,46,71,93,107,242,28,67,92,35,166,216,155,84,125,200,90,145,185,136,194\")),bytes32(stringToBytes32(\"50,49,49,202,115,74,110,142,124,86,38,159,131,141,104,228,10,253,118,18,190,54,21,35,67,199,234,184,250,208,122,29\")),bytes32(stringToBytes32(\"199,85,52,87,103,117,174,16,80,149,205,95,181,211,40,17,245,195,216,231,40,228,123,185,138,216,121,27,65,232,196,50\"))]"
            },
            {
              "js": "[[89,253,198,90,65,3,196,42,85,137,197,35,228,24,224,86,122,252,123,195,118,70,125,92,218,213,8,230,64,187,120,81],[230,122,23,39,50,154,222,19,126,54,149,18,77,161,222,76,120,216,53,250,33,238,233,72,73,183,156,79,139,48,168,198],[71,83,85,129,142,21,93,25,188,197,7,144,37,190,204,5,74,144,27,179,231,250,166,61,182,136,247,24,173,6,31,110],[78,160,89,76,252,106,145,119,93,169,215,20,135,202,1,151,216,154,70,146,83,73,244,157,3,70,25,123,176,106,13,49],[43,177,67,84,193,94,81,83,95,49,173,200,184,185,86,125,193,162,159,73,91,148,210,45,22,126,29,181,49,232,254,247],[141,193,87,131,68,175,103,70,123,28,131,32,21,12,7,242,125,190,100,128,70,201,130,158,238,86,171,46,2,121,93,57],[92,159,219,66,141,211,3,67,180,62,88,38,73,84,171,146,94,228,254,254,106,229,239,78,190,200,179,104,87,240,225,141]]",
              "sol": "[bytes32(stringToBytes32(\"89,253,198,90,65,3,196,42,85,137,197,35,228,24,224,86,122,252,123,195,118,70,125,92,218,213,8,230,64,187,120,81\")),bytes32(stringToBytes32(\"230,122,23,39,50,154,222,19,126,54,149,18,77,161,222,76,120,216,53,250,33,238,233,72,73,183,156,79,139,48,168,198\")),bytes32(stringToBytes32(\"71,83,85,129,142,21,93,25,188,197,7,144,37,190,204,5,74,144,27,179,231,250,166,61,182,136,247,24,173,6,31,110\")),bytes32(stringToBytes32(\"78,160,89,76,252,106,145,119,93,169,215,20,135,202,1,151,216,154,70,146,83,73,244,157,3,70,25,123,176,106,13,49\")),bytes32(stringToBytes32(\"43,177,67,84,193,94,81,83,95,49,173,200,184,185,86,125,193,162,159,73,91,148,210,45,22,126,29,181,49,232,254,247\")),bytes32(stringToBytes32(\"141,193,87,131,68,175,103,70,123,28,131,32,21,12,7,242,125,190,100,128,70,201,130,158,238,86,171,46,2,121,93,57\")),bytes32(stringToBytes32(\"92,159,219,66,141,211,3,67,180,62,88,38,73,84,171,146,94,228,254,254,106,229,239,78,190,200,179,104,87,240,225,141\"))]"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[10000,1337,82,10000,16,159,1000]",
                "sol": "[uint256(10000),uint256(1337),uint256(82),uint256(10000),uint256(16),uint256(159),uint256(1000)]"
              },
              {
                "js": "[[46,193,231,140,215,131,127,141,198,138,150,153,192,193,220,102,140,132,173,139,211,181,91,17,193,32,190,174,20,50,111,247],[197,166,46,52,39,12,41,228,202,21,197,210,53,234,12,159,182,93,33,184,127,75,208,211,53,133,216,8,22,38,24,243],[186,42,57,155,46,184,117,77,224,10,197,53,128,181,202,147,89,148,28,236,233,105,89,13,142,123,91,173,33,202,80,2],[136,6,172,195,7,206,184,210,6,136,137,72,32,218,185,142,220,26,107,193,142,183,124,39,102,162,44,104,96,163,106,235],[202,77,18,164,170,255,46,36,8,198,69,220,89,94,175,84,8,188,97,201,210,16,175,112,143,26,47,128,2,71,97,162],[8,139,36,179,219,67,251,67,160,190,163,215,105,152,117,211,92,29,100,173,12,86,151,61,188,140,249,220,180,31,240,30],[207,252,132,107,4,159,74,88,73,208,205,121,66,28,149,55,108,36,236,91,34,94,40,185,9,218,158,226,61,5,188,110]]",
                "sol": "[bytes32(stringToBytes32(\"46,193,231,140,215,131,127,141,198,138,150,153,192,193,220,102,140,132,173,139,211,181,91,17,193,32,190,174,20,50,111,247\")),bytes32(stringToBytes32(\"197,166,46,52,39,12,41,228,202,21,197,210,53,234,12,159,182,93,33,184,127,75,208,211,53,133,216,8,22,38,24,243\")),bytes32(stringToBytes32(\"186,42,57,155,46,184,117,77,224,10,197,53,128,181,202,147,89,148,28,236,233,105,89,13,142,123,91,173,33,202,80,2\")),bytes32(stringToBytes32(\"136,6,172,195,7,206,184,210,6,136,137,72,32,218,185,142,220,26,107,193,142,183,124,39,102,162,44,104,96,163,106,235\")),bytes32(stringToBytes32(\"202,77,18,164,170,255,46,36,8,198,69,220,89,94,175,84,8,188,97,201,210,16,175,112,143,26,47,128,2,71,97,162\")),bytes32(stringToBytes32(\"8,139,36,179,219,67,251,67,160,190,163,215,105,152,117,211,92,29,100,173,12,86,151,61,188,140,249,220,180,31,240,30\")),bytes32(stringToBytes32(\"207,252,132,107,4,159,74,88,73,208,205,121,66,28,149,55,108,36,236,91,34,94,40,185,9,218,158,226,61,5,188,110\"))]"
              },
              {
                "js": "[159,10,17,3,20,4,6]",
                "sol": "[uint8(159),uint8(10),uint8(17),uint8(3),uint8(20),uint8(4),uint8(6)]"
              },
              {
                "js": "[[49,186,126,112,37,17,15,111,96,107,69,40,228,148,179,33,22,179,187,40,201,19,30,58,217,190,205,128,254,32,61,27],[72,74,192,184,194,158,15,140,84,255,99,129,158,151,84,66,116,128,242,237,202,152,124,44,124,24,248,110,241,71,63,193],[13,90,24,59,186,152,119,247,30,59,106,147,231,196,101,31,241,105,129,100,52,53,65,208,133,116,240,30,48,223,27,58],[155,66,164,4,158,204,141,98,218,25,70,159,23,222,175,226,73,222,199,60,213,77,10,108,249,111,204,141,246,41,174,181],[72,252,153,145,134,255,59,240,223,218,23,151,46,71,93,107,242,28,67,92,35,166,216,155,84,125,200,90,145,185,136,194],[50,49,49,202,115,74,110,142,124,86,38,159,131,141,104,228,10,253,118,18,190,54,21,35,67,199,234,184,250,208,122,29],[199,85,52,87,103,117,174,16,80,149,205,95,181,211,40,17,245,195,216,231,40,228,123,185,138,216,121,27,65,232,196,50]]",
                "sol": "[bytes32(stringToBytes32(\"49,186,126,112,37,17,15,111,96,107,69,40,228,148,179,33,22,179,187,40,201,19,30,58,217,190,205,128,254,32,61,27\")),bytes32(stringToBytes32(\"72,74,192,184,194,158,15,140,84,255,99,129,158,151,84,66,116,128,242,237,202,152,124,44,124,24,248,110,241,71,63,193\")),bytes32(stringToBytes32(\"13,90,24,59,186,152,119,247,30,59,106,147,231,196,101,31,241,105,129,100,52,53,65,208,133,116,240,30,48,223,27,58\")),bytes32(stringToBytes32(\"155,66,164,4,158,204,141,98,218,25,70,159,23,222,175,226,73,222,199,60,213,77,10,108,249,111,204,141,246,41,174,181\")),bytes32(stringToBytes32(\"72,252,153,145,134,255,59,240,223,218,23,151,46,71,93,107,242,28,67,92,35,166,216,155,84,125,200,90,145,185,136,194\")),bytes32(stringToBytes32(\"50,49,49,202,115,74,110,142,124,86,38,159,131,141,104,228,10,253,118,18,190,54,21,35,67,199,234,184,250,208,122,29\")),bytes32(stringToBytes32(\"199,85,52,87,103,117,174,16,80,149,205,95,181,211,40,17,245,195,216,231,40,228,123,185,138,216,121,27,65,232,196,50\"))]"
              },
              {
                "js": "[[89,253,198,90,65,3,196,42,85,137,197,35,228,24,224,86,122,252,123,195,118,70,125,92,218,213,8,230,64,187,120,81],[230,122,23,39,50,154,222,19,126,54,149,18,77,161,222,76,120,216,53,250,33,238,233,72,73,183,156,79,139,48,168,198],[71,83,85,129,142,21,93,25,188,197,7,144,37,190,204,5,74,144,27,179,231,250,166,61,182,136,247,24,173,6,31,110],[78,160,89,76,252,106,145,119,93,169,215,20,135,202,1,151,216,154,70,146,83,73,244,157,3,70,25,123,176,106,13,49],[43,177,67,84,193,94,81,83,95,49,173,200,184,185,86,125,193,162,159,73,91,148,210,45,22,126,29,181,49,232,254,247],[141,193,87,131,68,175,103,70,123,28,131,32,21,12,7,242,125,190,100,128,70,201,130,158,238,86,171,46,2,121,93,57],[92,159,219,66,141,211,3,67,180,62,88,38,73,84,171,146,94,228,254,254,106,229,239,78,190,200,179,104,87,240,225,141]]",
                "sol": "[bytes32(stringToBytes32(\"89,253,198,90,65,3,196,42,85,137,197,35,228,24,224,86,122,252,123,195,118,70,125,92,218,213,8,230,64,187,120,81\")),bytes32(stringToBytes32(\"230,122,23,39,50,154,222,19,126,54,149,18,77,161,222,76,120,216,53,250,33,238,233,72,73,183,156,79,139,48,168,198\")),bytes32(stringToBytes32(\"71,83,85,129,142,21,93,25,188,197,7,144,37,190,204,5,74,144,27,179,231,250,166,61,182,136,247,24,173,6,31,110\")),bytes32(stringToBytes32(\"78,160,89,76,252,106,145,119,93,169,215,20,135,202,1,151,216,154,70,146,83,73,244,157,3,70,25,123,176,106,13,49\")),bytes32(stringToBytes32(\"43,177,67,84,193,94,81,83,95,49,173,200,184,185,86,125,193,162,159,73,91,148,210,45,22,126,29,181,49,232,254,247\")),bytes32(stringToBytes32(\"141,193,87,131,68,175,103,70,123,28,131,32,21,12,7,242,125,190,100,128,70,201,130,158,238,86,171,46,2,121,93,57\")),bytes32(stringToBytes32(\"92,159,219,66,141,211,3,67,180,62,88,38,73,84,171,146,94,228,254,254,106,229,239,78,190,200,179,104,87,240,225,141\"))]"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[11,1001,18,5,1336,20,100,257]",
                "sol": "[9999,83,83,1,6,19,21,18]"
              },
              {
                "js": "[[46,193,231,140,215,131,127,141,198,138,150,153,192,193,220,102,140,132,173,139,211,181,91,17,193,32,190,174,20,50,111,247],[197,166,46,52,39,12,41,228,202,21,197,210,53,234,12,159,182,93,33,184,127,75,208,211,53,133,216,8,22,38,24,243],[186,42,57,155,46,184,117,77,224,10,197,53,128,181,202,147,89,148,28,236,233,105,89,13,142,123,91,173,33,202,80,2],[136,6,172,195,7,206,184,210,6,136,137,72,32,218,185,142,220,26,107,193,142,183,124,39,102,162,44,104,96,163,106,235],[202,77,18,164,170,255,46,36,8,198,69,220,89,94,175,84,8,188,97,201,210,16,175,112,143,26,47,128,2,71,97,162],[8,139,36,179,219,67,251,67,160,190,163,215,105,152,117,211,92,29,100,173,12,86,151,61,188,140,249,220,180,31,240,30],[207,252,132,107,4,159,74,88,73,208,205,121,66,28,149,55,108,36,236,91,34,94,40,185,9,218,158,226,61,5,188,110]]",
                "sol": "[bytes32(stringToBytes32(\"46,193,231,140,215,131,127,141,198,138,150,153,192,193,220,102,140,132,173,139,211,181,91,17,193,32,190,174,20,50,111,247\")),bytes32(stringToBytes32(\"197,166,46,52,39,12,41,228,202,21,197,210,53,234,12,159,182,93,33,184,127,75,208,211,53,133,216,8,22,38,24,243\")),bytes32(stringToBytes32(\"186,42,57,155,46,184,117,77,224,10,197,53,128,181,202,147,89,148,28,236,233,105,89,13,142,123,91,173,33,202,80,2\")),bytes32(stringToBytes32(\"136,6,172,195,7,206,184,210,6,136,137,72,32,218,185,142,220,26,107,193,142,183,124,39,102,162,44,104,96,163,106,235\")),bytes32(stringToBytes32(\"202,77,18,164,170,255,46,36,8,198,69,220,89,94,175,84,8,188,97,201,210,16,175,112,143,26,47,128,2,71,97,162\")),bytes32(stringToBytes32(\"8,139,36,179,219,67,251,67,160,190,163,215,105,152,117,211,92,29,100,173,12,86,151,61,188,140,249,220,180,31,240,30\")),bytes32(stringToBytes32(\"207,252,132,107,4,159,74,88,73,208,205,121,66,28,149,55,108,36,236,91,34,94,40,185,9,218,158,226,61,5,188,110\"))]"
              },
              {
                "js": "[159,10,17,3,20,4,6]",
                "sol": "[uint8(159),uint8(10),uint8(17),uint8(3),uint8(20),uint8(4),uint8(6)]"
              },
              {
                "js": "[[49,186,126,112,37,17,15,111,96,107,69,40,228,148,179,33,22,179,187,40,201,19,30,58,217,190,205,128,254,32,61,27],[72,74,192,184,194,158,15,140,84,255,99,129,158,151,84,66,116,128,242,237,202,152,124,44,124,24,248,110,241,71,63,193],[13,90,24,59,186,152,119,247,30,59,106,147,231,196,101,31,241,105,129,100,52,53,65,208,133,116,240,30,48,223,27,58],[155,66,164,4,158,204,141,98,218,25,70,159,23,222,175,226,73,222,199,60,213,77,10,108,249,111,204,141,246,41,174,181],[72,252,153,145,134,255,59,240,223,218,23,151,46,71,93,107,242,28,67,92,35,166,216,155,84,125,200,90,145,185,136,194],[50,49,49,202,115,74,110,142,124,86,38,159,131,141,104,228,10,253,118,18,190,54,21,35,67,199,234,184,250,208,122,29],[199,85,52,87,103,117,174,16,80,149,205,95,181,211,40,17,245,195,216,231,40,228,123,185,138,216,121,27,65,232,196,50]]",
                "sol": "[bytes32(stringToBytes32(\"49,186,126,112,37,17,15,111,96,107,69,40,228,148,179,33,22,179,187,40,201,19,30,58,217,190,205,128,254,32,61,27\")),bytes32(stringToBytes32(\"72,74,192,184,194,158,15,140,84,255,99,129,158,151,84,66,116,128,242,237,202,152,124,44,124,24,248,110,241,71,63,193\")),bytes32(stringToBytes32(\"13,90,24,59,186,152,119,247,30,59,106,147,231,196,101,31,241,105,129,100,52,53,65,208,133,116,240,30,48,223,27,58\")),bytes32(stringToBytes32(\"155,66,164,4,158,204,141,98,218,25,70,159,23,222,175,226,73,222,199,60,213,77,10,108,249,111,204,141,246,41,174,181\")),bytes32(stringToBytes32(\"72,252,153,145,134,255,59,240,223,218,23,151,46,71,93,107,242,28,67,92,35,166,216,155,84,125,200,90,145,185,136,194\")),bytes32(stringToBytes32(\"50,49,49,202,115,74,110,142,124,86,38,159,131,141,104,228,10,253,118,18,190,54,21,35,67,199,234,184,250,208,122,29\")),bytes32(stringToBytes32(\"199,85,52,87,103,117,174,16,80,149,205,95,181,211,40,17,245,195,216,231,40,228,123,185,138,216,121,27,65,232,196,50\"))]"
              },
              {
                "js": "[[89,253,198,90,65,3,196,42,85,137,197,35,228,24,224,86,122,252,123,195,118,70,125,92,218,213,8,230,64,187,120,81],[230,122,23,39,50,154,222,19,126,54,149,18,77,161,222,76,120,216,53,250,33,238,233,72,73,183,156,79,139,48,168,198],[71,83,85,129,142,21,93,25,188,197,7,144,37,190,204,5,74,144,27,179,231,250,166,61,182,136,247,24,173,6,31,110],[78,160,89,76,252,106,145,119,93,169,215,20,135,202,1,151,216,154,70,146,83,73,244,157,3,70,25,123,176,106,13,49],[43,177,67,84,193,94,81,83,95,49,173,200,184,185,86,125,193,162,159,73,91,148,210,45,22,126,29,181,49,232,254,247],[141,193,87,131,68,175,103,70,123,28,131,32,21,12,7,242,125,190,100,128,70,201,130,158,238,86,171,46,2,121,93,57],[92,159,219,66,141,211,3,67,180,62,88,38,73,84,171,146,94,228,254,254,106,229,239,78,190,200,179,104,87,240,225,141]]",
                "sol": "[bytes32(stringToBytes32(\"89,253,198,90,65,3,196,42,85,137,197,35,228,24,224,86,122,252,123,195,118,70,125,92,218,213,8,230,64,187,120,81\")),bytes32(stringToBytes32(\"230,122,23,39,50,154,222,19,126,54,149,18,77,161,222,76,120,216,53,250,33,238,233,72,73,183,156,79,139,48,168,198\")),bytes32(stringToBytes32(\"71,83,85,129,142,21,93,25,188,197,7,144,37,190,204,5,74,144,27,179,231,250,166,61,182,136,247,24,173,6,31,110\")),bytes32(stringToBytes32(\"78,160,89,76,252,106,145,119,93,169,215,20,135,202,1,151,216,154,70,146,83,73,244,157,3,70,25,123,176,106,13,49\")),bytes32(stringToBytes32(\"43,177,67,84,193,94,81,83,95,49,173,200,184,185,86,125,193,162,159,73,91,148,210,45,22,126,29,181,49,232,254,247\")),bytes32(stringToBytes32(\"141,193,87,131,68,175,103,70,123,28,131,32,21,12,7,242,125,190,100,128,70,201,130,158,238,86,171,46,2,121,93,57\")),bytes32(stringToBytes32(\"92,159,219,66,141,211,3,67,180,62,88,38,73,84,171,146,94,228,254,254,106,229,239,78,190,200,179,104,87,240,225,141\"))]"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[81,1337,160,20,10000,1338,10000,11]",
                "sol": "[21,14,99,255,101,256,15,14]"
              },
              {
                "js": "[[46,193,231,140,215,131,127,141,198,138,150,153,192,193,220,102,140,132,173,139,211,181,91,17,193,32,190,174,20,50,111,247],[197,166,46,52,39,12,41,228,202,21,197,210,53,234,12,159,182,93,33,184,127,75,208,211,53,133,216,8,22,38,24,243],[186,42,57,155,46,184,117,77,224,10,197,53,128,181,202,147,89,148,28,236,233,105,89,13,142,123,91,173,33,202,80,2],[136,6,172,195,7,206,184,210,6,136,137,72,32,218,185,142,220,26,107,193,142,183,124,39,102,162,44,104,96,163,106,235],[202,77,18,164,170,255,46,36,8,198,69,220,89,94,175,84,8,188,97,201,210,16,175,112,143,26,47,128,2,71,97,162],[8,139,36,179,219,67,251,67,160,190,163,215,105,152,117,211,92,29,100,173,12,86,151,61,188,140,249,220,180,31,240,30],[207,252,132,107,4,159,74,88,73,208,205,121,66,28,149,55,108,36,236,91,34,94,40,185,9,218,158,226,61,5,188,110]]",
                "sol": "[bytes32(stringToBytes32(\"46,193,231,140,215,131,127,141,198,138,150,153,192,193,220,102,140,132,173,139,211,181,91,17,193,32,190,174,20,50,111,247\")),bytes32(stringToBytes32(\"197,166,46,52,39,12,41,228,202,21,197,210,53,234,12,159,182,93,33,184,127,75,208,211,53,133,216,8,22,38,24,243\")),bytes32(stringToBytes32(\"186,42,57,155,46,184,117,77,224,10,197,53,128,181,202,147,89,148,28,236,233,105,89,13,142,123,91,173,33,202,80,2\")),bytes32(stringToBytes32(\"136,6,172,195,7,206,184,210,6,136,137,72,32,218,185,142,220,26,107,193,142,183,124,39,102,162,44,104,96,163,106,235\")),bytes32(stringToBytes32(\"202,77,18,164,170,255,46,36,8,198,69,220,89,94,175,84,8,188,97,201,210,16,175,112,143,26,47,128,2,71,97,162\")),bytes32(stringToBytes32(\"8,139,36,179,219,67,251,67,160,190,163,215,105,152,117,211,92,29,100,173,12,86,151,61,188,140,249,220,180,31,240,30\")),bytes32(stringToBytes32(\"207,252,132,107,4,159,74,88,73,208,205,121,66,28,149,55,108,36,236,91,34,94,40,185,9,218,158,226,61,5,188,110\"))]"
              },
              {
                "js": "[159,10,17,3,20,4,6]",
                "sol": "[uint8(159),uint8(10),uint8(17),uint8(3),uint8(20),uint8(4),uint8(6)]"
              },
              {
                "js": "[[49,186,126,112,37,17,15,111,96,107,69,40,228,148,179,33,22,179,187,40,201,19,30,58,217,190,205,128,254,32,61,27],[72,74,192,184,194,158,15,140,84,255,99,129,158,151,84,66,116,128,242,237,202,152,124,44,124,24,248,110,241,71,63,193],[13,90,24,59,186,152,119,247,30,59,106,147,231,196,101,31,241,105,129,100,52,53,65,208,133,116,240,30,48,223,27,58],[155,66,164,4,158,204,141,98,218,25,70,159,23,222,175,226,73,222,199,60,213,77,10,108,249,111,204,141,246,41,174,181],[72,252,153,145,134,255,59,240,223,218,23,151,46,71,93,107,242,28,67,92,35,166,216,155,84,125,200,90,145,185,136,194],[50,49,49,202,115,74,110,142,124,86,38,159,131,141,104,228,10,253,118,18,190,54,21,35,67,199,234,184,250,208,122,29],[199,85,52,87,103,117,174,16,80,149,205,95,181,211,40,17,245,195,216,231,40,228,123,185,138,216,121,27,65,232,196,50]]",
                "sol": "[bytes32(stringToBytes32(\"49,186,126,112,37,17,15,111,96,107,69,40,228,148,179,33,22,179,187,40,201,19,30,58,217,190,205,128,254,32,61,27\")),bytes32(stringToBytes32(\"72,74,192,184,194,158,15,140,84,255,99,129,158,151,84,66,116,128,242,237,202,152,124,44,124,24,248,110,241,71,63,193\")),bytes32(stringToBytes32(\"13,90,24,59,186,152,119,247,30,59,106,147,231,196,101,31,241,105,129,100,52,53,65,208,133,116,240,30,48,223,27,58\")),bytes32(stringToBytes32(\"155,66,164,4,158,204,141,98,218,25,70,159,23,222,175,226,73,222,199,60,213,77,10,108,249,111,204,141,246,41,174,181\")),bytes32(stringToBytes32(\"72,252,153,145,134,255,59,240,223,218,23,151,46,71,93,107,242,28,67,92,35,166,216,155,84,125,200,90,145,185,136,194\")),bytes32(stringToBytes32(\"50,49,49,202,115,74,110,142,124,86,38,159,131,141,104,228,10,253,118,18,190,54,21,35,67,199,234,184,250,208,122,29\")),bytes32(stringToBytes32(\"199,85,52,87,103,117,174,16,80,149,205,95,181,211,40,17,245,195,216,231,40,228,123,185,138,216,121,27,65,232,196,50\"))]"
              },
              {
                "js": "[[89,253,198,90,65,3,196,42,85,137,197,35,228,24,224,86,122,252,123,195,118,70,125,92,218,213,8,230,64,187,120,81],[230,122,23,39,50,154,222,19,126,54,149,18,77,161,222,76,120,216,53,250,33,238,233,72,73,183,156,79,139,48,168,198],[71,83,85,129,142,21,93,25,188,197,7,144,37,190,204,5,74,144,27,179,231,250,166,61,182,136,247,24,173,6,31,110],[78,160,89,76,252,106,145,119,93,169,215,20,135,202,1,151,216,154,70,146,83,73,244,157,3,70,25,123,176,106,13,49],[43,177,67,84,193,94,81,83,95,49,173,200,184,185,86,125,193,162,159,73,91,148,210,45,22,126,29,181,49,232,254,247],[141,193,87,131,68,175,103,70,123,28,131,32,21,12,7,242,125,190,100,128,70,201,130,158,238,86,171,46,2,121,93,57],[92,159,219,66,141,211,3,67,180,62,88,38,73,84,171,146,94,228,254,254,106,229,239,78,190,200,179,104,87,240,225,141]]",
                "sol": "[bytes32(stringToBytes32(\"89,253,198,90,65,3,196,42,85,137,197,35,228,24,224,86,122,252,123,195,118,70,125,92,218,213,8,230,64,187,120,81\")),bytes32(stringToBytes32(\"230,122,23,39,50,154,222,19,126,54,149,18,77,161,222,76,120,216,53,250,33,238,233,72,73,183,156,79,139,48,168,198\")),bytes32(stringToBytes32(\"71,83,85,129,142,21,93,25,188,197,7,144,37,190,204,5,74,144,27,179,231,250,166,61,182,136,247,24,173,6,31,110\")),bytes32(stringToBytes32(\"78,160,89,76,252,106,145,119,93,169,215,20,135,202,1,151,216,154,70,146,83,73,244,157,3,70,25,123,176,106,13,49\")),bytes32(stringToBytes32(\"43,177,67,84,193,94,81,83,95,49,173,200,184,185,86,125,193,162,159,73,91,148,210,45,22,126,29,181,49,232,254,247\")),bytes32(stringToBytes32(\"141,193,87,131,68,175,103,70,123,28,131,32,21,12,7,242,125,190,100,128,70,201,130,158,238,86,171,46,2,121,93,57\")),bytes32(stringToBytes32(\"92,159,219,66,141,211,3,67,180,62,88,38,73,84,171,146,94,228,254,254,106,229,239,78,190,200,179,104,87,240,225,141\"))]"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[10000,256,99,1001,83,81,19,83]",
                "sol": "[14,20,20,1338,255,82,5,6]"
              },
              {
                "js": "[[46,193,231,140,215,131,127,141,198,138,150,153,192,193,220,102,140,132,173,139,211,181,91,17,193,32,190,174,20,50,111,247],[197,166,46,52,39,12,41,228,202,21,197,210,53,234,12,159,182,93,33,184,127,75,208,211,53,133,216,8,22,38,24,243],[186,42,57,155,46,184,117,77,224,10,197,53,128,181,202,147,89,148,28,236,233,105,89,13,142,123,91,173,33,202,80,2],[136,6,172,195,7,206,184,210,6,136,137,72,32,218,185,142,220,26,107,193,142,183,124,39,102,162,44,104,96,163,106,235],[202,77,18,164,170,255,46,36,8,198,69,220,89,94,175,84,8,188,97,201,210,16,175,112,143,26,47,128,2,71,97,162],[8,139,36,179,219,67,251,67,160,190,163,215,105,152,117,211,92,29,100,173,12,86,151,61,188,140,249,220,180,31,240,30],[207,252,132,107,4,159,74,88,73,208,205,121,66,28,149,55,108,36,236,91,34,94,40,185,9,218,158,226,61,5,188,110]]",
                "sol": "[bytes32(stringToBytes32(\"46,193,231,140,215,131,127,141,198,138,150,153,192,193,220,102,140,132,173,139,211,181,91,17,193,32,190,174,20,50,111,247\")),bytes32(stringToBytes32(\"197,166,46,52,39,12,41,228,202,21,197,210,53,234,12,159,182,93,33,184,127,75,208,211,53,133,216,8,22,38,24,243\")),bytes32(stringToBytes32(\"186,42,57,155,46,184,117,77,224,10,197,53,128,181,202,147,89,148,28,236,233,105,89,13,142,123,91,173,33,202,80,2\")),bytes32(stringToBytes32(\"136,6,172,195,7,206,184,210,6,136,137,72,32,218,185,142,220,26,107,193,142,183,124,39,102,162,44,104,96,163,106,235\")),bytes32(stringToBytes32(\"202,77,18,164,170,255,46,36,8,198,69,220,89,94,175,84,8,188,97,201,210,16,175,112,143,26,47,128,2,71,97,162\")),bytes32(stringToBytes32(\"8,139,36,179,219,67,251,67,160,190,163,215,105,152,117,211,92,29,100,173,12,86,151,61,188,140,249,220,180,31,240,30\")),bytes32(stringToBytes32(\"207,252,132,107,4,159,74,88,73,208,205,121,66,28,149,55,108,36,236,91,34,94,40,185,9,218,158,226,61,5,188,110\"))]"
              },
              {
                "js": "[159,10,17,3,20,4,6]",
                "sol": "[uint8(159),uint8(10),uint8(17),uint8(3),uint8(20),uint8(4),uint8(6)]"
              },
              {
                "js": "[[49,186,126,112,37,17,15,111,96,107,69,40,228,148,179,33,22,179,187,40,201,19,30,58,217,190,205,128,254,32,61,27],[72,74,192,184,194,158,15,140,84,255,99,129,158,151,84,66,116,128,242,237,202,152,124,44,124,24,248,110,241,71,63,193],[13,90,24,59,186,152,119,247,30,59,106,147,231,196,101,31,241,105,129,100,52,53,65,208,133,116,240,30,48,223,27,58],[155,66,164,4,158,204,141,98,218,25,70,159,23,222,175,226,73,222,199,60,213,77,10,108,249,111,204,141,246,41,174,181],[72,252,153,145,134,255,59,240,223,218,23,151,46,71,93,107,242,28,67,92,35,166,216,155,84,125,200,90,145,185,136,194],[50,49,49,202,115,74,110,142,124,86,38,159,131,141,104,228,10,253,118,18,190,54,21,35,67,199,234,184,250,208,122,29],[199,85,52,87,103,117,174,16,80,149,205,95,181,211,40,17,245,195,216,231,40,228,123,185,138,216,121,27,65,232,196,50]]",
                "sol": "[bytes32(stringToBytes32(\"49,186,126,112,37,17,15,111,96,107,69,40,228,148,179,33,22,179,187,40,201,19,30,58,217,190,205,128,254,32,61,27\")),bytes32(stringToBytes32(\"72,74,192,184,194,158,15,140,84,255,99,129,158,151,84,66,116,128,242,237,202,152,124,44,124,24,248,110,241,71,63,193\")),bytes32(stringToBytes32(\"13,90,24,59,186,152,119,247,30,59,106,147,231,196,101,31,241,105,129,100,52,53,65,208,133,116,240,30,48,223,27,58\")),bytes32(stringToBytes32(\"155,66,164,4,158,204,141,98,218,25,70,159,23,222,175,226,73,222,199,60,213,77,10,108,249,111,204,141,246,41,174,181\")),bytes32(stringToBytes32(\"72,252,153,145,134,255,59,240,223,218,23,151,46,71,93,107,242,28,67,92,35,166,216,155,84,125,200,90,145,185,136,194\")),bytes32(stringToBytes32(\"50,49,49,202,115,74,110,142,124,86,38,159,131,141,104,228,10,253,118,18,190,54,21,35,67,199,234,184,250,208,122,29\")),bytes32(stringToBytes32(\"199,85,52,87,103,117,174,16,80,149,205,95,181,211,40,17,245,195,216,231,40,228,123,185,138,216,121,27,65,232,196,50\"))]"
              },
              {
                "js": "[[89,253,198,90,65,3,196,42,85,137,197,35,228,24,224,86,122,252,123,195,118,70,125,92,218,213,8,230,64,187,120,81],[230,122,23,39,50,154,222,19,126,54,149,18,77,161,222,76,120,216,53,250,33,238,233,72,73,183,156,79,139,48,168,198],[71,83,85,129,142,21,93,25,188,197,7,144,37,190,204,5,74,144,27,179,231,250,166,61,182,136,247,24,173,6,31,110],[78,160,89,76,252,106,145,119,93,169,215,20,135,202,1,151,216,154,70,146,83,73,244,157,3,70,25,123,176,106,13,49],[43,177,67,84,193,94,81,83,95,49,173,200,184,185,86,125,193,162,159,73,91,148,210,45,22,126,29,181,49,232,254,247],[141,193,87,131,68,175,103,70,123,28,131,32,21,12,7,242,125,190,100,128,70,201,130,158,238,86,171,46,2,121,93,57],[92,159,219,66,141,211,3,67,180,62,88,38,73,84,171,146,94,228,254,254,106,229,239,78,190,200,179,104,87,240,225,141]]",
                "sol": "[bytes32(stringToBytes32(\"89,253,198,90,65,3,196,42,85,137,197,35,228,24,224,86,122,252,123,195,118,70,125,92,218,213,8,230,64,187,120,81\")),bytes32(stringToBytes32(\"230,122,23,39,50,154,222,19,126,54,149,18,77,161,222,76,120,216,53,250,33,238,233,72,73,183,156,79,139,48,168,198\")),bytes32(stringToBytes32(\"71,83,85,129,142,21,93,25,188,197,7,144,37,190,204,5,74,144,27,179,231,250,166,61,182,136,247,24,173,6,31,110\")),bytes32(stringToBytes32(\"78,160,89,76,252,106,145,119,93,169,215,20,135,202,1,151,216,154,70,146,83,73,244,157,3,70,25,123,176,106,13,49\")),bytes32(stringToBytes32(\"43,177,67,84,193,94,81,83,95,49,173,200,184,185,86,125,193,162,159,73,91,148,210,45,22,126,29,181,49,232,254,247\")),bytes32(stringToBytes32(\"141,193,87,131,68,175,103,70,123,28,131,32,21,12,7,242,125,190,100,128,70,201,130,158,238,86,171,46,2,121,93,57\")),bytes32(stringToBytes32(\"92,159,219,66,141,211,3,67,180,62,88,38,73,84,171,146,94,228,254,254,106,229,239,78,190,200,179,104,87,240,225,141\"))]"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[9999,256,2,83,82,0,83,160]",
                "sol": "[19,11,6,81,10,18,20,99]"
              },
              {
                "js": "[[46,193,231,140,215,131,127,141,198,138,150,153,192,193,220,102,140,132,173,139,211,181,91,17,193,32,190,174,20,50,111,247],[197,166,46,52,39,12,41,228,202,21,197,210,53,234,12,159,182,93,33,184,127,75,208,211,53,133,216,8,22,38,24,243],[186,42,57,155,46,184,117,77,224,10,197,53,128,181,202,147,89,148,28,236,233,105,89,13,142,123,91,173,33,202,80,2],[136,6,172,195,7,206,184,210,6,136,137,72,32,218,185,142,220,26,107,193,142,183,124,39,102,162,44,104,96,163,106,235],[202,77,18,164,170,255,46,36,8,198,69,220,89,94,175,84,8,188,97,201,210,16,175,112,143,26,47,128,2,71,97,162],[8,139,36,179,219,67,251,67,160,190,163,215,105,152,117,211,92,29,100,173,12,86,151,61,188,140,249,220,180,31,240,30],[207,252,132,107,4,159,74,88,73,208,205,121,66,28,149,55,108,36,236,91,34,94,40,185,9,218,158,226,61,5,188,110]]",
                "sol": "[bytes32(stringToBytes32(\"46,193,231,140,215,131,127,141,198,138,150,153,192,193,220,102,140,132,173,139,211,181,91,17,193,32,190,174,20,50,111,247\")),bytes32(stringToBytes32(\"197,166,46,52,39,12,41,228,202,21,197,210,53,234,12,159,182,93,33,184,127,75,208,211,53,133,216,8,22,38,24,243\")),bytes32(stringToBytes32(\"186,42,57,155,46,184,117,77,224,10,197,53,128,181,202,147,89,148,28,236,233,105,89,13,142,123,91,173,33,202,80,2\")),bytes32(stringToBytes32(\"136,6,172,195,7,206,184,210,6,136,137,72,32,218,185,142,220,26,107,193,142,183,124,39,102,162,44,104,96,163,106,235\")),bytes32(stringToBytes32(\"202,77,18,164,170,255,46,36,8,198,69,220,89,94,175,84,8,188,97,201,210,16,175,112,143,26,47,128,2,71,97,162\")),bytes32(stringToBytes32(\"8,139,36,179,219,67,251,67,160,190,163,215,105,152,117,211,92,29,100,173,12,86,151,61,188,140,249,220,180,31,240,30\")),bytes32(stringToBytes32(\"207,252,132,107,4,159,74,88,73,208,205,121,66,28,149,55,108,36,236,91,34,94,40,185,9,218,158,226,61,5,188,110\"))]"
              },
              {
                "js": "[159,10,17,3,20,4,6]",
                "sol": "[uint8(159),uint8(10),uint8(17),uint8(3),uint8(20),uint8(4),uint8(6)]"
              },
              {
                "js": "[[49,186,126,112,37,17,15,111,96,107,69,40,228,148,179,33,22,179,187,40,201,19,30,58,217,190,205,128,254,32,61,27],[72,74,192,184,194,158,15,140,84,255,99,129,158,151,84,66,116,128,242,237,202,152,124,44,124,24,248,110,241,71,63,193],[13,90,24,59,186,152,119,247,30,59,106,147,231,196,101,31,241,105,129,100,52,53,65,208,133,116,240,30,48,223,27,58],[155,66,164,4,158,204,141,98,218,25,70,159,23,222,175,226,73,222,199,60,213,77,10,108,249,111,204,141,246,41,174,181],[72,252,153,145,134,255,59,240,223,218,23,151,46,71,93,107,242,28,67,92,35,166,216,155,84,125,200,90,145,185,136,194],[50,49,49,202,115,74,110,142,124,86,38,159,131,141,104,228,10,253,118,18,190,54,21,35,67,199,234,184,250,208,122,29],[199,85,52,87,103,117,174,16,80,149,205,95,181,211,40,17,245,195,216,231,40,228,123,185,138,216,121,27,65,232,196,50]]",
                "sol": "[bytes32(stringToBytes32(\"49,186,126,112,37,17,15,111,96,107,69,40,228,148,179,33,22,179,187,40,201,19,30,58,217,190,205,128,254,32,61,27\")),bytes32(stringToBytes32(\"72,74,192,184,194,158,15,140,84,255,99,129,158,151,84,66,116,128,242,237,202,152,124,44,124,24,248,110,241,71,63,193\")),bytes32(stringToBytes32(\"13,90,24,59,186,152,119,247,30,59,106,147,231,196,101,31,241,105,129,100,52,53,65,208,133,116,240,30,48,223,27,58\")),bytes32(stringToBytes32(\"155,66,164,4,158,204,141,98,218,25,70,159,23,222,175,226,73,222,199,60,213,77,10,108,249,111,204,141,246,41,174,181\")),bytes32(stringToBytes32(\"72,252,153,145,134,255,59,240,223,218,23,151,46,71,93,107,242,28,67,92,35,166,216,155,84,125,200,90,145,185,136,194\")),bytes32(stringToBytes32(\"50,49,49,202,115,74,110,142,124,86,38,159,131,141,104,228,10,253,118,18,190,54,21,35,67,199,234,184,250,208,122,29\")),bytes32(stringToBytes32(\"199,85,52,87,103,117,174,16,80,149,205,95,181,211,40,17,245,195,216,231,40,228,123,185,138,216,121,27,65,232,196,50\"))]"
              },
              {
                "js": "[[89,253,198,90,65,3,196,42,85,137,197,35,228,24,224,86,122,252,123,195,118,70,125,92,218,213,8,230,64,187,120,81],[230,122,23,39,50,154,222,19,126,54,149,18,77,161,222,76,120,216,53,250,33,238,233,72,73,183,156,79,139,48,168,198],[71,83,85,129,142,21,93,25,188,197,7,144,37,190,204,5,74,144,27,179,231,250,166,61,182,136,247,24,173,6,31,110],[78,160,89,76,252,106,145,119,93,169,215,20,135,202,1,151,216,154,70,146,83,73,244,157,3,70,25,123,176,106,13,49],[43,177,67,84,193,94,81,83,95,49,173,200,184,185,86,125,193,162,159,73,91,148,210,45,22,126,29,181,49,232,254,247],[141,193,87,131,68,175,103,70,123,28,131,32,21,12,7,242,125,190,100,128,70,201,130,158,238,86,171,46,2,121,93,57],[92,159,219,66,141,211,3,67,180,62,88,38,73,84,171,146,94,228,254,254,106,229,239,78,190,200,179,104,87,240,225,141]]",
                "sol": "[bytes32(stringToBytes32(\"89,253,198,90,65,3,196,42,85,137,197,35,228,24,224,86,122,252,123,195,118,70,125,92,218,213,8,230,64,187,120,81\")),bytes32(stringToBytes32(\"230,122,23,39,50,154,222,19,126,54,149,18,77,161,222,76,120,216,53,250,33,238,233,72,73,183,156,79,139,48,168,198\")),bytes32(stringToBytes32(\"71,83,85,129,142,21,93,25,188,197,7,144,37,190,204,5,74,144,27,179,231,250,166,61,182,136,247,24,173,6,31,110\")),bytes32(stringToBytes32(\"78,160,89,76,252,106,145,119,93,169,215,20,135,202,1,151,216,154,70,146,83,73,244,157,3,70,25,123,176,106,13,49\")),bytes32(stringToBytes32(\"43,177,67,84,193,94,81,83,95,49,173,200,184,185,86,125,193,162,159,73,91,148,210,45,22,126,29,181,49,232,254,247\")),bytes32(stringToBytes32(\"141,193,87,131,68,175,103,70,123,28,131,32,21,12,7,242,125,190,100,128,70,201,130,158,238,86,171,46,2,121,93,57\")),bytes32(stringToBytes32(\"92,159,219,66,141,211,3,67,180,62,88,38,73,84,171,146,94,228,254,254,106,229,239,78,190,200,179,104,87,240,225,141\"))]"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.408ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "[130,231,104,19,81,73,44,247,125,82,143,66,180,178,127,239,215,199,231,83,24,203,88,118,10,108,80,106,255,26,106,7]",
              "sol": "stringToBytes32(\"130,231,104,19,81,73,44,247,125,82,143,66,180,178,127,239,215,199,231,83,24,203,88,118,10,108,80,106,255,26,106,7\")"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "[166,124,123,206,12,238,122,211,65,105,220,242,198,134,247,177,252,252,251,46,167,23,81,81,163,229,107,125,59,152,38,246]",
              "sol": "stringToBytes32(\"166,124,123,206,12,238,122,211,65,105,220,242,198,134,247,177,252,252,251,46,167,23,81,81,163,229,107,125,59,152,38,246\")"
            },
            {
              "js": "[176,46,24,131,54,177,177,177,146,150,120,101,252,158,233,167,84,51,216,252,123,52,154,193,42,86,197,206,52,41,208,218]",
              "sol": "stringToBytes32(\"176,46,24,131,54,177,177,177,146,150,120,101,252,158,233,167,84,51,216,252,123,52,154,193,42,86,197,206,52,41,208,218\")"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "[130,231,104,19,81,73,44,247,125,82,143,66,180,178,127,239,215,199,231,83,24,203,88,118,10,108,80,106,255,26,106,7]",
                "sol": "stringToBytes32(\"130,231,104,19,81,73,44,247,125,82,143,66,180,178,127,239,215,199,231,83,24,203,88,118,10,108,80,106,255,26,106,7\")"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "[166,124,123,206,12,238,122,211,65,105,220,242,198,134,247,177,252,252,251,46,167,23,81,81,163,229,107,125,59,152,38,246]",
                "sol": "stringToBytes32(\"166,124,123,206,12,238,122,211,65,105,220,242,198,134,247,177,252,252,251,46,167,23,81,81,163,229,107,125,59,152,38,246\")"
              },
              {
                "js": "[176,46,24,131,54,177,177,177,146,150,120,101,252,158,233,167,84,51,216,252,123,52,154,193,42,86,197,206,52,41,208,218]",
                "sol": "stringToBytes32(\"176,46,24,131,54,177,177,177,146,150,120,101,252,158,233,167,84,51,216,252,123,52,154,193,42,86,197,206,52,41,208,218\")"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "[130,231,104,19,81,73,44,247,125,82,143,66,180,178,127,239,215,199,231,83,24,203,88,118,10,108,80,106,255,26,106,7]",
                "sol": "stringToBytes32(\"130,231,104,19,81,73,44,247,125,82,143,66,180,178,127,239,215,199,231,83,24,203,88,118,10,108,80,106,255,26,106,7\")"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "[166,124,123,206,12,238,122,211,65,105,220,242,198,134,247,177,252,252,251,46,167,23,81,81,163,229,107,125,59,152,38,246]",
                "sol": "stringToBytes32(\"166,124,123,206,12,238,122,211,65,105,220,242,198,134,247,177,252,252,251,46,167,23,81,81,163,229,107,125,59,152,38,246\")"
              },
              {
                "js": "[176,46,24,131,54,177,177,177,146,150,120,101,252,158,233,167,84,51,216,252,123,52,154,193,42,86,197,206,52,41,208,218]",
                "sol": "stringToBytes32(\"176,46,24,131,54,177,177,177,146,150,120,101,252,158,233,167,84,51,216,252,123,52,154,193,42,86,197,206,52,41,208,218\")"
              },
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.409ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.410ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "[218,132,197,233,203,245,32,56,39,159,15,35,105,221,21,173,51,79,85,226,177,123,129,46,236,204,89,147,148,174,188,82]",
              "sol": "stringToBytes32(\"218,132,197,233,203,245,32,56,39,159,15,35,105,221,21,173,51,79,85,226,177,123,129,46,236,204,89,147,148,174,188,82\")"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "[227,143,229,43,109,50,107,168,124,52,31,56,10,11,17,137,245,113,180,162,209,208,19,42,97,186,53,236,226,187,161,157]",
              "sol": "stringToBytes32(\"227,143,229,43,109,50,107,168,124,52,31,56,10,11,17,137,245,113,180,162,209,208,19,42,97,186,53,236,226,187,161,157\")"
            },
            {
              "js": "[249,49,137,201,156,4,227,250,130,232,253,187,44,229,107,95,85,205,218,236,240,36,245,172,250,183,23,149,66,69,231,181]",
              "sol": "stringToBytes32(\"249,49,137,201,156,4,227,250,130,232,253,187,44,229,107,95,85,205,218,236,240,36,245,172,250,183,23,149,66,69,231,181\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.410ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.411ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:08:01.411ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:08:01.411ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}