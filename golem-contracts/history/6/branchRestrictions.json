,{
  "2020-11-10T16:05:01.837ZGNTAllocation.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:08.094ZGolemNetworkToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint256,uint256) WHEN _golemFactory!=0x0000000000000000000000000000000000000000,_migrationMaster!=0x0000000000000000000000000000000000000000,_fundingStartBlock>block.number,_fundingEndBlock>_fundingStartBlock",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+7",
              "sol": "block.number+7"
            },
            {
              "js": "(await web3.eth.getBlockNumber())+7+876",
              "sol": "block.number+7+876"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _golemFactory != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+7",
                "sol": "block.number+7"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+7+876",
                "sol": "block.number+7+876"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _migrationMaster != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+7",
                "sol": "block.number+7"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+7+876",
                "sol": "block.number+7+876"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingStartBlock > (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())",
                "sol": "block.number"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+7+876",
                "sol": "block.number+7+876"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address,address,uint256,uint256) when NOT comply with: _fundingEndBlock > _fundingStartBlock",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+7",
                "sol": "block.number+7"
              },
              {
                "js": "(await web3.eth.getBlockNumber())+7",
                "sol": "block.number+7"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:14.565ZGNTPaymentChannels.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:21.175ZFaucet.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address)",
          "parameters": [
            {
              "js": "contractGolemNetworkToken.address",
              "sol": "contractGolemNetworkToken.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:27.638ZTokenProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractBasicToken.address",
              "sol": "contractBasicToken"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:34.127ZGate.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic,address)",
          "parameters": [
            {
              "js": "contractBasicToken.address",
              "sol": "contractBasicToken"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:40.775ZGolemNetworkTokenBatching.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(ERC20Basic)",
          "parameters": [
            {
              "js": "contractTokenProxy.address",
              "sol": "contractTokenProxy"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:47.603ZGNTDeposit.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(GolemNetworkTokenBatching,address,address,uint256)",
          "parameters": [
            {
              "js": "contractGolemNetworkTokenBatching.address",
              "sol": "contractGolemNetworkTokenBatching"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "82",
              "sol": "82"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.349ZProxySafeMath.testmul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "14-16",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmul(uint256,uint256) WHEN a!=0",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.350ZProxySafeMath.testdiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiv(uint256,uint256)",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.350ZProxySafeMath.testsub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsub(uint256,uint256) WHEN b<=a",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsub(uint256,uint256) when NOT comply with: b <= a",
            "parameters": [
              {
                "js": "99",
                "sol": "99"
              },
              {
                "js": 100,
                "sol": 100
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.351ZProxySafeMath.testadd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testadd(uint256,uint256)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.352ZBasicToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.353ZBasicToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.354ZBasicToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.354ZStandardToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN _to!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: _to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.356ZStandardToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.356ZStandardToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.356ZStandardToken.increaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute increaseApproval(address,uint)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.357ZStandardToken.decreaseApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "92-96",
          "restrictions": [
            "_subtractedValue > oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue>oldValue",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "94-96",
          "restrictions": [
            "_subtractedValue <= oldValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute decreaseApproval(address,uint) WHEN _subtractedValue<=oldValue",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.358ZBurnableToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256) WHEN _value<=balances",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.360ZGolemNetworkToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-84",
          "restrictions": [
            "senderBalance >= _value",
            "_value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance>=_value,_value>0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "senderBalance < _value"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN senderBalance<_value",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.361ZGolemNetworkToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.361ZGolemNetworkToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.361ZGolemNetworkToken.migrate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute migrate(uint256) WHEN migrationAgent!=0x0000000000000000000000000000000000000000,_value!=0,_value<=balances",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: migrationAgent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail migrate(uint256) when NOT comply with: _value != 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.363ZGolemNetworkToken.setMigrationAgent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationAgent(address) WHEN migrationAgent==0x0000000000000000000000000000000000000000,msg.sender==migrationMaster",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationAgent(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.364ZGolemNetworkToken.setMigrationMaster": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMigrationMaster(address) WHEN msg.sender==migrationMaster,_master!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: msg.sender == migrationMaster",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setMigrationMaster(address) when NOT comply with: _master != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.365ZGolemNetworkToken.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create() WHEN funding==true,(await web3.eth.getBlockNumber())>=fundingStartBlock,(await web3.eth.getBlockNumber())<=fundingEndBlock,msg.value!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:9999}",
              "sol": "{\"from\":\"0x0\",\"value\":\"9999\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0],value:9999}",
                "sol": "{\"from\":\"0x0\",\"value\":\"9999\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail create() when NOT comply with: msg.value != 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.369ZGolemNetworkToken.finalize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalize() WHEN funding==true,totalTokens>=tokenCreationCap,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.370ZGolemNetworkToken.refund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute refund() WHEN funding==true,(await web3.eth.getBlockNumber())>fundingEndBlock,totalTokens<tokenCreationMin,gntValue!=0,FunctionCall==true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail refund() when NOT comply with: funding == true",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.374ZGNTPaymentChannels.getDeposited": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getDeposited(address,address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.374ZGNTPaymentChannels.getWithdrawn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getWithdrawn(address,address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.375ZGNTPaymentChannels.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.375ZGNTPaymentChannels.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address,address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.375ZGNTPaymentChannels.isValidSig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isValidSig(address,address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "[57,245,168,27,135,102,255,81,173,14,197,105,156,231,102,60,46,59,168,2,66,71,98,255,14,143,132,55,38,225,182,59]",
              "sol": "stringToBytes32(\"57,245,168,27,135,102,255,81,173,14,197,105,156,231,102,60,46,59,168,2,66,71,98,255,14,143,132,55,38,225,182,59\")"
            },
            {
              "js": "[181,13,171,87,48,47,99,157,216,16,91,82,19,60,165,172,164,233,65,25,112,125,100,172,2,86,33,6,188,132,181,176]",
              "sol": "stringToBytes32(\"181,13,171,87,48,47,99,157,216,16,91,82,19,60,165,172,164,233,65,25,112,125,100,172,2,86,33,6,188,132,181,176\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.375ZGNTPaymentChannels.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN _data.length==20",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "[236,243,184,206,70,182,103,75,152,135,203,218,81,65,119,30,132,44,94,8]",
              "sol": "abi.encode(\"236,243,184,206,70,182,103,75,152,135,203,218,81,65,119,30,132,44,94,8\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail onTokenReceived(address,uint256,bytes) when NOT comply with: _data.length == 20",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "[200,230,63,83,94,212,105,158,152,18,130,179,132,73,57,25,199,195,21,142,143]",
                "sol": "bytes21(\"200,230,63,83,94,212,105,158,152,18,130,179,132,73,57,25,199,195,21,142,143\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.376ZGNTPaymentChannels.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address,uint256,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "[32,134,70,68,173,37,23,76,68,28,144,23,108,70,211,198,2,59,77,76,28,127,35,167,43,64,74,124,116,167,162,141]",
              "sol": "stringToBytes32(\"32,134,70,68,173,37,23,76,68,28,144,23,108,70,211,198,2,59,77,76,28,127,35,167,43,64,74,124,116,167,162,141\")"
            },
            {
              "js": "[98,110,234,238,147,179,66,51,31,239,193,44,252,202,145,242,8,63,231,57,79,181,62,254,105,158,146,186,68,70,125,41]",
              "sol": "stringToBytes32(\"98,110,234,238,147,179,66,51,31,239,193,44,252,202,145,242,8,63,231,57,79,181,62,254,105,158,146,186,68,70,125,41\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.377ZGNTPaymentChannels.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.377ZGNTPaymentChannels.close": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute close(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.378ZFaucet.create": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute create()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.379ZTokenProxy.getGateAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getGateAddress(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.380ZTokenProxy.openGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute openGate() WHEN gates==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.380ZTokenProxy.transferFromGate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFromGate() WHEN gate!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.380ZTokenProxy.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(uint256) WHEN _value>0,msg.sender!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "1001",
              "sol": "1001"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdraw(uint256) when NOT comply with: msg.sender != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1001",
                "sol": "1001"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.381ZTokenProxy.withdrawTo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdrawTo(uint256,address) WHEN _value>0,_destination!=0x0000000000000000000000000000000000000000,_value<=balances",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _value > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail withdrawTo(uint256,address) when NOT comply with: _destination != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.383ZGate.transferToProxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferToProxy(uint256) WHEN msg.sender==PROXY",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferToProxy(uint256) when NOT comply with: msg.sender == PROXY",
            "parameters": [
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.384ZGolemNetworkTokenBatching.batchTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute batchTransfer(bytes32[],uint64) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=closureTime",
          "parameters": [
            {
              "js": "[[41,21,168,229,184,67,127,142,230,62,234,240,247,211,1,26,109,14,235,185,194,199,218,86,34,7,198,75,215,60,190,110],[76,151,224,98,76,178,120,142,142,8,228,71,224,13,75,128,39,103,201,142,205,6,239,96,238,111,152,134,94,1,185,190],[197,122,3,99,25,15,73,201,92,61,128,250,37,169,114,181,6,29,83,143,116,174,139,49,233,64,87,72,148,205,110,214],[239,171,19,246,187,118,106,6,166,77,117,40,174,198,242,182,231,140,219,129,191,134,2,147,24,227,54,202,212,150,89,7],[117,8,206,131,137,185,94,200,63,168,160,245,223,132,141,5,25,49,159,127,136,169,235,124,74,50,176,190,102,230,118,245],[162,149,147,80,169,193,230,231,5,243,5,11,211,140,237,217,101,101,184,78,142,5,144,201,78,103,80,29,24,153,84,85],[211,132,181,82,255,109,205,111,8,124,183,33,130,102,153,157,178,197,78,91,201,155,34,222,216,225,98,253,215,191,165,163],[215,69,148,252,253,232,121,142,242,71,141,68,99,164,197,19,106,198,71,205,47,220,163,121,16,49,223,244,177,165,44,44],[252,18,12,19,188,141,67,24,137,243,254,198,107,101,254,119,7,123,128,171,178,191,136,169,68,145,19,153,9,100,25,60],[59,74,213,218,10,25,220,92,51,173,7,130,96,202,131,110,71,31,138,79,194,252,219,220,46,64,13,127,8,231,147,245]]",
              "sol": "[bytes32(stringToBytes32(\"41,21,168,229,184,67,127,142,230,62,234,240,247,211,1,26,109,14,235,185,194,199,218,86,34,7,198,75,215,60,190,110\")),bytes32(stringToBytes32(\"76,151,224,98,76,178,120,142,142,8,228,71,224,13,75,128,39,103,201,142,205,6,239,96,238,111,152,134,94,1,185,190\")),bytes32(stringToBytes32(\"197,122,3,99,25,15,73,201,92,61,128,250,37,169,114,181,6,29,83,143,116,174,139,49,233,64,87,72,148,205,110,214\")),bytes32(stringToBytes32(\"239,171,19,246,187,118,106,6,166,77,117,40,174,198,242,182,231,140,219,129,191,134,2,147,24,227,54,202,212,150,89,7\")),bytes32(stringToBytes32(\"117,8,206,131,137,185,94,200,63,168,160,245,223,132,141,5,25,49,159,127,136,169,235,124,74,50,176,190,102,230,118,245\")),bytes32(stringToBytes32(\"162,149,147,80,169,193,230,231,5,243,5,11,211,140,237,217,101,101,184,78,142,5,144,201,78,103,80,29,24,153,84,85\")),bytes32(stringToBytes32(\"211,132,181,82,255,109,205,111,8,124,183,33,130,102,153,157,178,197,78,91,201,155,34,222,216,225,98,253,215,191,165,163\")),bytes32(stringToBytes32(\"215,69,148,252,253,232,121,142,242,71,141,68,99,164,197,19,106,198,71,205,47,220,163,121,16,49,223,244,177,165,44,44\")),bytes32(stringToBytes32(\"252,18,12,19,188,141,67,24,137,243,254,198,107,101,254,119,7,123,128,171,178,191,136,169,68,145,19,153,9,100,25,60\")),bytes32(stringToBytes32(\"59,74,213,218,10,25,220,92,51,173,7,130,96,202,131,110,71,31,138,79,194,252,219,220,46,64,13,127,8,231,147,245\"))]"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-434",
              "sol": "block.timestamp-434"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail batchTransfer(bytes32[],uint64) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp >= closureTime",
            "parameters": [
              {
                "js": "[[41,21,168,229,184,67,127,142,230,62,234,240,247,211,1,26,109,14,235,185,194,199,218,86,34,7,198,75,215,60,190,110],[76,151,224,98,76,178,120,142,142,8,228,71,224,13,75,128,39,103,201,142,205,6,239,96,238,111,152,134,94,1,185,190],[197,122,3,99,25,15,73,201,92,61,128,250,37,169,114,181,6,29,83,143,116,174,139,49,233,64,87,72,148,205,110,214],[239,171,19,246,187,118,106,6,166,77,117,40,174,198,242,182,231,140,219,129,191,134,2,147,24,227,54,202,212,150,89,7],[117,8,206,131,137,185,94,200,63,168,160,245,223,132,141,5,25,49,159,127,136,169,235,124,74,50,176,190,102,230,118,245],[162,149,147,80,169,193,230,231,5,243,5,11,211,140,237,217,101,101,184,78,142,5,144,201,78,103,80,29,24,153,84,85],[211,132,181,82,255,109,205,111,8,124,183,33,130,102,153,157,178,197,78,91,201,155,34,222,216,225,98,253,215,191,165,163],[215,69,148,252,253,232,121,142,242,71,141,68,99,164,197,19,106,198,71,205,47,220,163,121,16,49,223,244,177,165,44,44],[252,18,12,19,188,141,67,24,137,243,254,198,107,101,254,119,7,123,128,171,178,191,136,169,68,145,19,153,9,100,25,60],[59,74,213,218,10,25,220,92,51,173,7,130,96,202,131,110,71,31,138,79,194,252,219,220,46,64,13,127,8,231,147,245]]",
                "sol": "[bytes32(stringToBytes32(\"41,21,168,229,184,67,127,142,230,62,234,240,247,211,1,26,109,14,235,185,194,199,218,86,34,7,198,75,215,60,190,110\")),bytes32(stringToBytes32(\"76,151,224,98,76,178,120,142,142,8,228,71,224,13,75,128,39,103,201,142,205,6,239,96,238,111,152,134,94,1,185,190\")),bytes32(stringToBytes32(\"197,122,3,99,25,15,73,201,92,61,128,250,37,169,114,181,6,29,83,143,116,174,139,49,233,64,87,72,148,205,110,214\")),bytes32(stringToBytes32(\"239,171,19,246,187,118,106,6,166,77,117,40,174,198,242,182,231,140,219,129,191,134,2,147,24,227,54,202,212,150,89,7\")),bytes32(stringToBytes32(\"117,8,206,131,137,185,94,200,63,168,160,245,223,132,141,5,25,49,159,127,136,169,235,124,74,50,176,190,102,230,118,245\")),bytes32(stringToBytes32(\"162,149,147,80,169,193,230,231,5,243,5,11,211,140,237,217,101,101,184,78,142,5,144,201,78,103,80,29,24,153,84,85\")),bytes32(stringToBytes32(\"211,132,181,82,255,109,205,111,8,124,183,33,130,102,153,157,178,197,78,91,201,155,34,222,216,225,98,253,215,191,165,163\")),bytes32(stringToBytes32(\"215,69,148,252,253,232,121,142,242,71,141,68,99,164,197,19,106,198,71,205,47,220,163,121,16,49,223,244,177,165,44,44\")),bytes32(stringToBytes32(\"252,18,12,19,188,141,67,24,137,243,254,198,107,101,254,119,7,123,128,171,178,191,136,169,68,145,19,153,9,100,25,60\")),bytes32(stringToBytes32(\"59,74,213,218,10,25,220,92,51,173,7,130,96,202,131,110,71,31,138,79,194,252,219,220,46,64,13,127,8,231,147,245\"))]"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.385ZGolemNetworkTokenBatching.transferAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferAndCall(address,uint256,bytes) WHEN to!=0x0000000000000000000000000000000000000000,value<=balances",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "[229,130,0,188,171,212,221,223,0,9,27,203,22,123,123,88,252,113,233,246,163,35,7,132,34,13,200,175,93,107,107,24]",
              "sol": "abi.encode(\"229,130,0,188,171,212,221,223,0,9,27,203,22,123,123,88,252,113,233,246,163,35,7,132,34,13,200,175,93,107,107,24\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferAndCall(address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "[229,130,0,188,171,212,221,223,0,9,27,203,22,123,123,88,252,113,233,246,163,35,7,132,34,13,200,175,93,107,107,24]",
                "sol": "abi.encode(\"229,130,0,188,171,212,221,223,0,9,27,203,22,123,123,88,252,113,233,246,163,35,7,132,34,13,200,175,93,107,107,24\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.386ZGNTDeposit.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.387ZGNTDeposit.isLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isLocked(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.387ZGNTDeposit.isTimeLocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isTimeLocked(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.387ZGNTDeposit.isUnlocked": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isUnlocked(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.388ZGNTDeposit.getTimelock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTimelock(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.388ZGNTDeposit.isDepositPossible": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isDepositPossible(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.388ZGNTDeposit.transferConcent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferConcent(address) WHEN msg.sender==_owner,_newConcent!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferConcent(address) when NOT comply with: _newConcent != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.389ZGNTDeposit.transferColdwallet": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferColdwallet(address) WHEN msg.sender==_owner,_newColdwallet!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferColdwallet(address) when NOT comply with: _newColdwallet != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.390ZGNTDeposit.setMaximumDepositsTotal": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositsTotal(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositsTotal(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.390ZGNTDeposit.setMaximumDepositAmount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setMaximumDepositAmount(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setMaximumDepositAmount(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.391ZGNTDeposit.setDailyReimbursementLimit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setDailyReimbursementLimit(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setDailyReimbursementLimit(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.391ZGNTDeposit.unlock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute unlock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.391ZGNTDeposit.lock": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lock()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.392ZGNTDeposit.onTokenReceived": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute onTokenReceived(address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1000",
              "sol": "1000"
            },
            {
              "js": "[184,110,56,19,176,153,232,1,115,54,230,19,79,112,21,29,140,21,65,93,139,7,132,255,105,206,34,58,126,187,20,53]",
              "sol": "abi.encode(\"184,110,56,19,176,153,232,1,115,54,230,19,79,112,21,29,140,21,65,93,139,7,132,255,105,206,34,58,126,187,20,53\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.392ZGNTDeposit.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.392ZGNTDeposit.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "161-163",
          "restrictions": [
            "balances == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances==0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "balances != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(address,uint256) WHEN balances!=0,msg.sender==concent,balances>=_amount",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail burn(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.394ZGNTDeposit.reimburseForSubtask": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "999",
              "sol": "999"
            },
            {
              "js": "[133,204,7,19,214,0,198,37,110,147,247,6,151,84,94,192,163,213,152,116,122,168,214,205,171,220,98,94,155,142,205,95]",
              "sol": "stringToBytes32(\"133,204,7,19,214,0,198,37,110,147,247,6,151,84,94,192,163,213,152,116,122,168,214,205,171,220,98,94,155,142,205,95\")"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "[116,229,169,66,186,57,248,105,165,142,34,176,84,174,159,229,159,67,81,191,211,173,162,100,20,51,229,249,226,43,2,190]",
              "sol": "stringToBytes32(\"116,229,169,66,186,57,248,105,165,142,34,176,84,174,159,229,159,67,81,191,211,173,162,100,20,51,229,249,226,43,2,190\")"
            },
            {
              "js": "[212,253,97,33,175,192,168,138,171,118,240,100,183,245,132,252,44,19,147,251,74,111,29,193,50,181,247,17,74,100,121,183]",
              "sol": "stringToBytes32(\"212,253,97,33,175,192,168,138,171,118,240,100,183,245,132,252,44,19,147,251,74,111,29,193,50,181,247,17,74,100,121,183\")"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "[133,204,7,19,214,0,198,37,110,147,247,6,151,84,94,192,163,213,152,116,122,168,214,205,171,220,98,94,155,142,205,95]",
                "sol": "stringToBytes32(\"133,204,7,19,214,0,198,37,110,147,247,6,151,84,94,192,163,213,152,116,122,168,214,205,171,220,98,94,155,142,205,95\")"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "[116,229,169,66,186,57,248,105,165,142,34,176,84,174,159,229,159,67,81,191,211,173,162,100,20,51,229,249,226,43,2,190]",
                "sol": "stringToBytes32(\"116,229,169,66,186,57,248,105,165,142,34,176,84,174,159,229,159,67,81,191,211,173,162,100,20,51,229,249,226,43,2,190\")"
              },
              {
                "js": "[212,253,97,33,175,192,168,138,171,118,240,100,183,245,132,252,44,19,147,251,74,111,29,193,50,181,247,17,74,100,121,183]",
                "sol": "stringToBytes32(\"212,253,97,33,175,192,168,138,171,118,240,100,183,245,132,252,44,19,147,251,74,111,29,193,50,181,247,17,74,100,121,183\")"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForSubtask(address,address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "999",
                "sol": "999"
              },
              {
                "js": "[133,204,7,19,214,0,198,37,110,147,247,6,151,84,94,192,163,213,152,116,122,168,214,205,171,220,98,94,155,142,205,95]",
                "sol": "stringToBytes32(\"133,204,7,19,214,0,198,37,110,147,247,6,151,84,94,192,163,213,152,116,122,168,214,205,171,220,98,94,155,142,205,95\")"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "[116,229,169,66,186,57,248,105,165,142,34,176,84,174,159,229,159,67,81,191,211,173,162,100,20,51,229,249,226,43,2,190]",
                "sol": "stringToBytes32(\"116,229,169,66,186,57,248,105,165,142,34,176,84,174,159,229,159,67,81,191,211,173,162,100,20,51,229,249,226,43,2,190\")"
              },
              {
                "js": "[212,253,97,33,175,192,168,138,171,118,240,100,183,245,132,252,44,19,147,251,74,111,29,193,50,181,247,17,74,100,121,183]",
                "sol": "stringToBytes32(\"212,253,97,33,175,192,168,138,171,118,240,100,183,245,132,252,44,19,147,251,74,111,29,193,50,181,247,17,74,100,121,183\")"
              },
              {
                "js": 1000,
                "sol": 1000
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.395ZGNTDeposit.reimburseForNoPayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) WHEN msg.sender==concent,_amount.length==_subtask_id.length,_amount.length==_v.length,_amount.length==_r.length,_amount.length==_s.length,_reimburse_amount<=total_amount",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[81,18,82]",
              "sol": "[uint256(81),uint256(18),uint256(82)]"
            },
            {
              "js": "[[9,236,108,251,12,44,140,21,207,85,213,184,50,233,246,20,125,120,114,184,77,208,4,229,47,110,147,118,89,99,141,52],[47,30,202,101,165,144,24,49,83,24,229,239,131,148,156,210,245,170,0,77,217,191,158,47,248,14,100,126,103,236,37,156],[168,81,38,16,246,202,236,196,224,214,163,142,83,230,137,107,42,173,223,41,220,204,43,59,165,61,220,33,46,226,107,16]]",
              "sol": "[bytes32(stringToBytes32(\"9,236,108,251,12,44,140,21,207,85,213,184,50,233,246,20,125,120,114,184,77,208,4,229,47,110,147,118,89,99,141,52\")),bytes32(stringToBytes32(\"47,30,202,101,165,144,24,49,83,24,229,239,131,148,156,210,245,170,0,77,217,191,158,47,248,14,100,126,103,236,37,156\")),bytes32(stringToBytes32(\"168,81,38,16,246,202,236,196,224,214,163,142,83,230,137,107,42,173,223,41,220,204,43,59,165,61,220,33,46,226,107,16\"))]"
            },
            {
              "js": "[19,83,16]",
              "sol": "[uint8(19),uint8(83),uint8(16)]"
            },
            {
              "js": "[[150,209,131,133,218,229,49,186,195,139,194,40,56,134,103,133,235,249,26,231,60,12,120,195,237,48,182,46,250,156,29,3],[135,180,78,130,121,35,95,3,84,70,233,65,117,56,100,106,7,31,86,126,40,57,89,58,190,40,9,155,150,174,10,227],[99,240,15,73,61,193,62,2,198,34,216,2,169,2,216,44,22,135,63,92,36,142,159,177,151,5,130,197,248,163,187,161]]",
              "sol": "[bytes32(stringToBytes32(\"150,209,131,133,218,229,49,186,195,139,194,40,56,134,103,133,235,249,26,231,60,12,120,195,237,48,182,46,250,156,29,3\")),bytes32(stringToBytes32(\"135,180,78,130,121,35,95,3,84,70,233,65,117,56,100,106,7,31,86,126,40,57,89,58,190,40,9,155,150,174,10,227\")),bytes32(stringToBytes32(\"99,240,15,73,61,193,62,2,198,34,216,2,169,2,216,44,22,135,63,92,36,142,159,177,151,5,130,197,248,163,187,161\"))]"
            },
            {
              "js": "[[246,136,19,254,144,78,182,246,219,214,121,72,20,68,41,45,49,53,25,124,250,16,93,10,182,54,210,80,235,94,255,172],[80,56,247,179,178,98,72,228,28,234,32,85,241,164,160,125,111,83,19,200,137,241,56,249,241,35,180,148,175,4,76,211],[182,213,142,48,104,152,221,217,91,139,92,228,92,68,222,166,169,197,36,216,140,26,7,223,101,235,198,104,216,118,6,60]]",
              "sol": "[bytes32(stringToBytes32(\"246,136,19,254,144,78,182,246,219,214,121,72,20,68,41,45,49,53,25,124,250,16,93,10,182,54,210,80,235,94,255,172\")),bytes32(stringToBytes32(\"80,56,247,179,178,98,72,228,28,234,32,85,241,164,160,125,111,83,19,200,137,241,56,249,241,35,180,148,175,4,76,211\")),bytes32(stringToBytes32(\"182,213,142,48,104,152,221,217,91,139,92,228,92,68,222,166,169,197,36,216,140,26,7,223,101,235,198,104,216,118,6,60\"))]"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[81,18,82]",
                "sol": "[uint256(81),uint256(18),uint256(82)]"
              },
              {
                "js": "[[9,236,108,251,12,44,140,21,207,85,213,184,50,233,246,20,125,120,114,184,77,208,4,229,47,110,147,118,89,99,141,52],[47,30,202,101,165,144,24,49,83,24,229,239,131,148,156,210,245,170,0,77,217,191,158,47,248,14,100,126,103,236,37,156],[168,81,38,16,246,202,236,196,224,214,163,142,83,230,137,107,42,173,223,41,220,204,43,59,165,61,220,33,46,226,107,16]]",
                "sol": "[bytes32(stringToBytes32(\"9,236,108,251,12,44,140,21,207,85,213,184,50,233,246,20,125,120,114,184,77,208,4,229,47,110,147,118,89,99,141,52\")),bytes32(stringToBytes32(\"47,30,202,101,165,144,24,49,83,24,229,239,131,148,156,210,245,170,0,77,217,191,158,47,248,14,100,126,103,236,37,156\")),bytes32(stringToBytes32(\"168,81,38,16,246,202,236,196,224,214,163,142,83,230,137,107,42,173,223,41,220,204,43,59,165,61,220,33,46,226,107,16\"))]"
              },
              {
                "js": "[19,83,16]",
                "sol": "[uint8(19),uint8(83),uint8(16)]"
              },
              {
                "js": "[[150,209,131,133,218,229,49,186,195,139,194,40,56,134,103,133,235,249,26,231,60,12,120,195,237,48,182,46,250,156,29,3],[135,180,78,130,121,35,95,3,84,70,233,65,117,56,100,106,7,31,86,126,40,57,89,58,190,40,9,155,150,174,10,227],[99,240,15,73,61,193,62,2,198,34,216,2,169,2,216,44,22,135,63,92,36,142,159,177,151,5,130,197,248,163,187,161]]",
                "sol": "[bytes32(stringToBytes32(\"150,209,131,133,218,229,49,186,195,139,194,40,56,134,103,133,235,249,26,231,60,12,120,195,237,48,182,46,250,156,29,3\")),bytes32(stringToBytes32(\"135,180,78,130,121,35,95,3,84,70,233,65,117,56,100,106,7,31,86,126,40,57,89,58,190,40,9,155,150,174,10,227\")),bytes32(stringToBytes32(\"99,240,15,73,61,193,62,2,198,34,216,2,169,2,216,44,22,135,63,92,36,142,159,177,151,5,130,197,248,163,187,161\"))]"
              },
              {
                "js": "[[246,136,19,254,144,78,182,246,219,214,121,72,20,68,41,45,49,53,25,124,250,16,93,10,182,54,210,80,235,94,255,172],[80,56,247,179,178,98,72,228,28,234,32,85,241,164,160,125,111,83,19,200,137,241,56,249,241,35,180,148,175,4,76,211],[182,213,142,48,104,152,221,217,91,139,92,228,92,68,222,166,169,197,36,216,140,26,7,223,101,235,198,104,216,118,6,60]]",
                "sol": "[bytes32(stringToBytes32(\"246,136,19,254,144,78,182,246,219,214,121,72,20,68,41,45,49,53,25,124,250,16,93,10,182,54,210,80,235,94,255,172\")),bytes32(stringToBytes32(\"80,56,247,179,178,98,72,228,28,234,32,85,241,164,160,125,111,83,19,200,137,241,56,249,241,35,180,148,175,4,76,211\")),bytes32(stringToBytes32(\"182,213,142,48,104,152,221,217,91,139,92,228,92,68,222,166,169,197,36,216,140,26,7,223,101,235,198,104,216,118,6,60\"))]"
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _subtask_id.length",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[3,10000,257,21]",
                "sol": "[0,81,21,10000]"
              },
              {
                "js": "[[9,236,108,251,12,44,140,21,207,85,213,184,50,233,246,20,125,120,114,184,77,208,4,229,47,110,147,118,89,99,141,52],[47,30,202,101,165,144,24,49,83,24,229,239,131,148,156,210,245,170,0,77,217,191,158,47,248,14,100,126,103,236,37,156],[168,81,38,16,246,202,236,196,224,214,163,142,83,230,137,107,42,173,223,41,220,204,43,59,165,61,220,33,46,226,107,16]]",
                "sol": "[bytes32(stringToBytes32(\"9,236,108,251,12,44,140,21,207,85,213,184,50,233,246,20,125,120,114,184,77,208,4,229,47,110,147,118,89,99,141,52\")),bytes32(stringToBytes32(\"47,30,202,101,165,144,24,49,83,24,229,239,131,148,156,210,245,170,0,77,217,191,158,47,248,14,100,126,103,236,37,156\")),bytes32(stringToBytes32(\"168,81,38,16,246,202,236,196,224,214,163,142,83,230,137,107,42,173,223,41,220,204,43,59,165,61,220,33,46,226,107,16\"))]"
              },
              {
                "js": "[19,83,16]",
                "sol": "[uint8(19),uint8(83),uint8(16)]"
              },
              {
                "js": "[[150,209,131,133,218,229,49,186,195,139,194,40,56,134,103,133,235,249,26,231,60,12,120,195,237,48,182,46,250,156,29,3],[135,180,78,130,121,35,95,3,84,70,233,65,117,56,100,106,7,31,86,126,40,57,89,58,190,40,9,155,150,174,10,227],[99,240,15,73,61,193,62,2,198,34,216,2,169,2,216,44,22,135,63,92,36,142,159,177,151,5,130,197,248,163,187,161]]",
                "sol": "[bytes32(stringToBytes32(\"150,209,131,133,218,229,49,186,195,139,194,40,56,134,103,133,235,249,26,231,60,12,120,195,237,48,182,46,250,156,29,3\")),bytes32(stringToBytes32(\"135,180,78,130,121,35,95,3,84,70,233,65,117,56,100,106,7,31,86,126,40,57,89,58,190,40,9,155,150,174,10,227\")),bytes32(stringToBytes32(\"99,240,15,73,61,193,62,2,198,34,216,2,169,2,216,44,22,135,63,92,36,142,159,177,151,5,130,197,248,163,187,161\"))]"
              },
              {
                "js": "[[246,136,19,254,144,78,182,246,219,214,121,72,20,68,41,45,49,53,25,124,250,16,93,10,182,54,210,80,235,94,255,172],[80,56,247,179,178,98,72,228,28,234,32,85,241,164,160,125,111,83,19,200,137,241,56,249,241,35,180,148,175,4,76,211],[182,213,142,48,104,152,221,217,91,139,92,228,92,68,222,166,169,197,36,216,140,26,7,223,101,235,198,104,216,118,6,60]]",
                "sol": "[bytes32(stringToBytes32(\"246,136,19,254,144,78,182,246,219,214,121,72,20,68,41,45,49,53,25,124,250,16,93,10,182,54,210,80,235,94,255,172\")),bytes32(stringToBytes32(\"80,56,247,179,178,98,72,228,28,234,32,85,241,164,160,125,111,83,19,200,137,241,56,249,241,35,180,148,175,4,76,211\")),bytes32(stringToBytes32(\"182,213,142,48,104,152,221,217,91,139,92,228,92,68,222,166,169,197,36,216,140,26,7,223,101,235,198,104,216,118,6,60\"))]"
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _v.length",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[19,6,161,2]",
                "sol": "[17,100,19,10000]"
              },
              {
                "js": "[[9,236,108,251,12,44,140,21,207,85,213,184,50,233,246,20,125,120,114,184,77,208,4,229,47,110,147,118,89,99,141,52],[47,30,202,101,165,144,24,49,83,24,229,239,131,148,156,210,245,170,0,77,217,191,158,47,248,14,100,126,103,236,37,156],[168,81,38,16,246,202,236,196,224,214,163,142,83,230,137,107,42,173,223,41,220,204,43,59,165,61,220,33,46,226,107,16]]",
                "sol": "[bytes32(stringToBytes32(\"9,236,108,251,12,44,140,21,207,85,213,184,50,233,246,20,125,120,114,184,77,208,4,229,47,110,147,118,89,99,141,52\")),bytes32(stringToBytes32(\"47,30,202,101,165,144,24,49,83,24,229,239,131,148,156,210,245,170,0,77,217,191,158,47,248,14,100,126,103,236,37,156\")),bytes32(stringToBytes32(\"168,81,38,16,246,202,236,196,224,214,163,142,83,230,137,107,42,173,223,41,220,204,43,59,165,61,220,33,46,226,107,16\"))]"
              },
              {
                "js": "[19,83,16]",
                "sol": "[uint8(19),uint8(83),uint8(16)]"
              },
              {
                "js": "[[150,209,131,133,218,229,49,186,195,139,194,40,56,134,103,133,235,249,26,231,60,12,120,195,237,48,182,46,250,156,29,3],[135,180,78,130,121,35,95,3,84,70,233,65,117,56,100,106,7,31,86,126,40,57,89,58,190,40,9,155,150,174,10,227],[99,240,15,73,61,193,62,2,198,34,216,2,169,2,216,44,22,135,63,92,36,142,159,177,151,5,130,197,248,163,187,161]]",
                "sol": "[bytes32(stringToBytes32(\"150,209,131,133,218,229,49,186,195,139,194,40,56,134,103,133,235,249,26,231,60,12,120,195,237,48,182,46,250,156,29,3\")),bytes32(stringToBytes32(\"135,180,78,130,121,35,95,3,84,70,233,65,117,56,100,106,7,31,86,126,40,57,89,58,190,40,9,155,150,174,10,227\")),bytes32(stringToBytes32(\"99,240,15,73,61,193,62,2,198,34,216,2,169,2,216,44,22,135,63,92,36,142,159,177,151,5,130,197,248,163,187,161\"))]"
              },
              {
                "js": "[[246,136,19,254,144,78,182,246,219,214,121,72,20,68,41,45,49,53,25,124,250,16,93,10,182,54,210,80,235,94,255,172],[80,56,247,179,178,98,72,228,28,234,32,85,241,164,160,125,111,83,19,200,137,241,56,249,241,35,180,148,175,4,76,211],[182,213,142,48,104,152,221,217,91,139,92,228,92,68,222,166,169,197,36,216,140,26,7,223,101,235,198,104,216,118,6,60]]",
                "sol": "[bytes32(stringToBytes32(\"246,136,19,254,144,78,182,246,219,214,121,72,20,68,41,45,49,53,25,124,250,16,93,10,182,54,210,80,235,94,255,172\")),bytes32(stringToBytes32(\"80,56,247,179,178,98,72,228,28,234,32,85,241,164,160,125,111,83,19,200,137,241,56,249,241,35,180,148,175,4,76,211\")),bytes32(stringToBytes32(\"182,213,142,48,104,152,221,217,91,139,92,228,92,68,222,166,169,197,36,216,140,26,7,223,101,235,198,104,216,118,6,60\"))]"
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _r.length",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[1337,9999,257,11]",
                "sol": "[1,3,9,0]"
              },
              {
                "js": "[[9,236,108,251,12,44,140,21,207,85,213,184,50,233,246,20,125,120,114,184,77,208,4,229,47,110,147,118,89,99,141,52],[47,30,202,101,165,144,24,49,83,24,229,239,131,148,156,210,245,170,0,77,217,191,158,47,248,14,100,126,103,236,37,156],[168,81,38,16,246,202,236,196,224,214,163,142,83,230,137,107,42,173,223,41,220,204,43,59,165,61,220,33,46,226,107,16]]",
                "sol": "[bytes32(stringToBytes32(\"9,236,108,251,12,44,140,21,207,85,213,184,50,233,246,20,125,120,114,184,77,208,4,229,47,110,147,118,89,99,141,52\")),bytes32(stringToBytes32(\"47,30,202,101,165,144,24,49,83,24,229,239,131,148,156,210,245,170,0,77,217,191,158,47,248,14,100,126,103,236,37,156\")),bytes32(stringToBytes32(\"168,81,38,16,246,202,236,196,224,214,163,142,83,230,137,107,42,173,223,41,220,204,43,59,165,61,220,33,46,226,107,16\"))]"
              },
              {
                "js": "[19,83,16]",
                "sol": "[uint8(19),uint8(83),uint8(16)]"
              },
              {
                "js": "[[150,209,131,133,218,229,49,186,195,139,194,40,56,134,103,133,235,249,26,231,60,12,120,195,237,48,182,46,250,156,29,3],[135,180,78,130,121,35,95,3,84,70,233,65,117,56,100,106,7,31,86,126,40,57,89,58,190,40,9,155,150,174,10,227],[99,240,15,73,61,193,62,2,198,34,216,2,169,2,216,44,22,135,63,92,36,142,159,177,151,5,130,197,248,163,187,161]]",
                "sol": "[bytes32(stringToBytes32(\"150,209,131,133,218,229,49,186,195,139,194,40,56,134,103,133,235,249,26,231,60,12,120,195,237,48,182,46,250,156,29,3\")),bytes32(stringToBytes32(\"135,180,78,130,121,35,95,3,84,70,233,65,117,56,100,106,7,31,86,126,40,57,89,58,190,40,9,155,150,174,10,227\")),bytes32(stringToBytes32(\"99,240,15,73,61,193,62,2,198,34,216,2,169,2,216,44,22,135,63,92,36,142,159,177,151,5,130,197,248,163,187,161\"))]"
              },
              {
                "js": "[[246,136,19,254,144,78,182,246,219,214,121,72,20,68,41,45,49,53,25,124,250,16,93,10,182,54,210,80,235,94,255,172],[80,56,247,179,178,98,72,228,28,234,32,85,241,164,160,125,111,83,19,200,137,241,56,249,241,35,180,148,175,4,76,211],[182,213,142,48,104,152,221,217,91,139,92,228,92,68,222,166,169,197,36,216,140,26,7,223,101,235,198,104,216,118,6,60]]",
                "sol": "[bytes32(stringToBytes32(\"246,136,19,254,144,78,182,246,219,214,121,72,20,68,41,45,49,53,25,124,250,16,93,10,182,54,210,80,235,94,255,172\")),bytes32(stringToBytes32(\"80,56,247,179,178,98,72,228,28,234,32,85,241,164,160,125,111,83,19,200,137,241,56,249,241,35,180,148,175,4,76,211\")),bytes32(stringToBytes32(\"182,213,142,48,104,152,221,217,91,139,92,228,92,68,222,166,169,197,36,216,140,26,7,223,101,235,198,104,216,118,6,60\"))]"
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForNoPayment(address,address,uint256[],bytes32[],uint8[],bytes32[],bytes32[],uint256,uint256) when NOT comply with: _amount.length == _s.length",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[6,82,255,0]",
                "sol": "[99,5,17,16]"
              },
              {
                "js": "[[9,236,108,251,12,44,140,21,207,85,213,184,50,233,246,20,125,120,114,184,77,208,4,229,47,110,147,118,89,99,141,52],[47,30,202,101,165,144,24,49,83,24,229,239,131,148,156,210,245,170,0,77,217,191,158,47,248,14,100,126,103,236,37,156],[168,81,38,16,246,202,236,196,224,214,163,142,83,230,137,107,42,173,223,41,220,204,43,59,165,61,220,33,46,226,107,16]]",
                "sol": "[bytes32(stringToBytes32(\"9,236,108,251,12,44,140,21,207,85,213,184,50,233,246,20,125,120,114,184,77,208,4,229,47,110,147,118,89,99,141,52\")),bytes32(stringToBytes32(\"47,30,202,101,165,144,24,49,83,24,229,239,131,148,156,210,245,170,0,77,217,191,158,47,248,14,100,126,103,236,37,156\")),bytes32(stringToBytes32(\"168,81,38,16,246,202,236,196,224,214,163,142,83,230,137,107,42,173,223,41,220,204,43,59,165,61,220,33,46,226,107,16\"))]"
              },
              {
                "js": "[19,83,16]",
                "sol": "[uint8(19),uint8(83),uint8(16)]"
              },
              {
                "js": "[[150,209,131,133,218,229,49,186,195,139,194,40,56,134,103,133,235,249,26,231,60,12,120,195,237,48,182,46,250,156,29,3],[135,180,78,130,121,35,95,3,84,70,233,65,117,56,100,106,7,31,86,126,40,57,89,58,190,40,9,155,150,174,10,227],[99,240,15,73,61,193,62,2,198,34,216,2,169,2,216,44,22,135,63,92,36,142,159,177,151,5,130,197,248,163,187,161]]",
                "sol": "[bytes32(stringToBytes32(\"150,209,131,133,218,229,49,186,195,139,194,40,56,134,103,133,235,249,26,231,60,12,120,195,237,48,182,46,250,156,29,3\")),bytes32(stringToBytes32(\"135,180,78,130,121,35,95,3,84,70,233,65,117,56,100,106,7,31,86,126,40,57,89,58,190,40,9,155,150,174,10,227\")),bytes32(stringToBytes32(\"99,240,15,73,61,193,62,2,198,34,216,2,169,2,216,44,22,135,63,92,36,142,159,177,151,5,130,197,248,163,187,161\"))]"
              },
              {
                "js": "[[246,136,19,254,144,78,182,246,219,214,121,72,20,68,41,45,49,53,25,124,250,16,93,10,182,54,210,80,235,94,255,172],[80,56,247,179,178,98,72,228,28,234,32,85,241,164,160,125,111,83,19,200,137,241,56,249,241,35,180,148,175,4,76,211],[182,213,142,48,104,152,221,217,91,139,92,228,92,68,222,166,169,197,36,216,140,26,7,223,101,235,198,104,216,118,6,60]]",
                "sol": "[bytes32(stringToBytes32(\"246,136,19,254,144,78,182,246,219,214,121,72,20,68,41,45,49,53,25,124,250,16,93,10,182,54,210,80,235,94,255,172\")),bytes32(stringToBytes32(\"80,56,247,179,178,98,72,228,28,234,32,85,241,164,160,125,111,83,19,200,137,241,56,249,241,35,180,148,175,4,76,211\")),bytes32(stringToBytes32(\"182,213,142,48,104,152,221,217,91,139,92,228,92,68,222,166,169,197,36,216,140,26,7,223,101,235,198,104,216,118,6,60\"))]"
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.405ZGNTDeposit.reimburseForVerificationCosts": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) WHEN msg.sender==concent,_reimburse_amount<=_amount",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "[110,218,80,48,183,199,251,198,210,112,50,43,100,247,202,130,26,147,18,132,169,38,67,211,247,187,21,200,23,52,234,149]",
              "sol": "stringToBytes32(\"110,218,80,48,183,199,251,198,210,112,50,43,100,247,202,130,26,147,18,132,169,38,67,211,247,187,21,200,23,52,234,149\")"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "[194,75,127,255,124,99,104,114,232,66,68,86,209,214,254,89,193,174,192,19,187,8,169,154,130,151,203,210,120,229,253,244]",
              "sol": "stringToBytes32(\"194,75,127,255,124,99,104,114,232,66,68,86,209,214,254,89,193,174,192,19,187,8,169,154,130,151,203,210,120,229,253,244\")"
            },
            {
              "js": "[150,217,60,84,212,151,93,92,143,10,137,101,22,33,45,79,75,80,170,122,197,65,102,124,83,243,219,139,17,15,187,187]",
              "sol": "stringToBytes32(\"150,217,60,84,212,151,93,92,143,10,137,101,22,33,45,79,75,80,170,122,197,65,102,124,83,243,219,139,17,15,187,187\")"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "[110,218,80,48,183,199,251,198,210,112,50,43,100,247,202,130,26,147,18,132,169,38,67,211,247,187,21,200,23,52,234,149]",
                "sol": "stringToBytes32(\"110,218,80,48,183,199,251,198,210,112,50,43,100,247,202,130,26,147,18,132,169,38,67,211,247,187,21,200,23,52,234,149\")"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "[194,75,127,255,124,99,104,114,232,66,68,86,209,214,254,89,193,174,192,19,187,8,169,154,130,151,203,210,120,229,253,244]",
                "sol": "stringToBytes32(\"194,75,127,255,124,99,104,114,232,66,68,86,209,214,254,89,193,174,192,19,187,8,169,154,130,151,203,210,120,229,253,244\")"
              },
              {
                "js": "[150,217,60,84,212,151,93,92,143,10,137,101,22,33,45,79,75,80,170,122,197,65,102,124,83,243,219,139,17,15,187,187]",
                "sol": "stringToBytes32(\"150,217,60,84,212,151,93,92,143,10,137,101,22,33,45,79,75,80,170,122,197,65,102,124,83,243,219,139,17,15,187,187\")"
              },
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail reimburseForVerificationCosts(address,uint256,bytes32,uint8,bytes32,bytes32,uint256) when NOT comply with: _reimburse_amount <= _amount",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "[110,218,80,48,183,199,251,198,210,112,50,43,100,247,202,130,26,147,18,132,169,38,67,211,247,187,21,200,23,52,234,149]",
                "sol": "stringToBytes32(\"110,218,80,48,183,199,251,198,210,112,50,43,100,247,202,130,26,147,18,132,169,38,67,211,247,187,21,200,23,52,234,149\")"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "[194,75,127,255,124,99,104,114,232,66,68,86,209,214,254,89,193,174,192,19,187,8,169,154,130,151,203,210,120,229,253,244]",
                "sol": "stringToBytes32(\"194,75,127,255,124,99,104,114,232,66,68,86,209,214,254,89,193,174,192,19,187,8,169,154,130,151,203,210,120,229,253,244\")"
              },
              {
                "js": "[150,217,60,84,212,151,93,92,143,10,137,101,22,33,45,79,75,80,170,122,197,65,102,124,83,243,219,139,17,15,187,187]",
                "sol": "stringToBytes32(\"150,217,60,84,212,151,93,92,143,10,137,101,22,33,45,79,75,80,170,122,197,65,102,124,83,243,219,139,17,15,187,187\")"
              },
              {
                "js": 10002,
                "sol": 10002
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.407ZGNTDeposit.reimburseForCommunication": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute reimburseForCommunication(address,uint256) WHEN msg.sender==concent",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail reimburseForCommunication(address,uint256) when NOT comply with: msg.sender == concent",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.408ZGNTDeposit._isValidSignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute _isValidSignature(address,address,uint256,bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "[28,146,199,253,100,129,1,77,83,45,39,84,12,249,1,98,116,74,172,66,133,119,229,193,131,225,170,128,98,58,239,244]",
              "sol": "stringToBytes32(\"28,146,199,253,100,129,1,77,83,45,39,84,12,249,1,98,116,74,172,66,133,119,229,193,131,225,170,128,98,58,239,244\")"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "[97,74,50,207,21,107,35,213,28,48,13,101,117,22,160,150,199,210,212,196,221,6,138,105,220,119,158,86,81,13,77,127]",
              "sol": "stringToBytes32(\"97,74,50,207,21,107,35,213,28,48,13,101,117,22,160,150,199,210,212,196,221,6,138,105,220,119,158,86,81,13,77,127\")"
            },
            {
              "js": "[235,247,54,113,160,119,54,53,250,64,249,236,202,111,82,219,27,110,35,55,0,228,35,18,147,198,85,77,230,14,123,72]",
              "sol": "stringToBytes32(\"235,247,54,113,160,119,54,53,250,64,249,236,202,111,82,219,27,110,35,55,0,228,35,18,147,198,85,77,230,14,123,72\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.411ZGNTDeposit.owner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute owner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.411ZGNTDeposit.isOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:05:54.412ZGNTDeposit.renounceOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute renounceOwnership() WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail renounceOwnership() when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:05:54.412ZGNTDeposit.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}