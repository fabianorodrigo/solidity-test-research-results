,{
  "2020-11-10T05:17:59.392ZControlled.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:18:03.350ZMiniMeToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint,string,uint8,string,bool)",
          "parameters": [
            {
              "js": "contractMiniMeTokenFactory.address",
              "sol": "contractMiniMeTokenFactory.address"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "\"3z2tja\"",
              "sol": "\"3z2tja\""
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:18:07.342ZMiniMeTokenFactory.createCloneToken": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createCloneToken(address,uint,string,uint8,string,bool)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "\"MMT_0.2\"",
              "sol": "\"MMT_0.2\""
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"jt44pe\"",
              "sol": "\"jt44pe\""
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:18:07.343ZControlled.changeController": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute changeController(address) WHEN msg.sender==controller",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail changeController(address) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:18:07.344ZMiniMeToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN transfersEnabled==true,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: transfersEnabled == true",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:18:07.348ZMiniMeToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-156",
          "restrictions": [
            "msg.sender != controller"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN msg.sender!=controller,transfersEnabled==true,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: transfersEnabled == true",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "msg.sender == controller"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN msg.sender==controller,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:18:07.353ZMiniMeToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:18:07.354ZMiniMeToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "228-230",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN FunctionCall==true,transfersEnabled==true",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: transfersEnabled == true",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN FunctionCall!=true,transfersEnabled==true",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: transfersEnabled == true",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:18:07.358ZMiniMeToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:18:07.359ZMiniMeToken.approveAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approveAndCall(address,uint256,bytes)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "[225,199,22,183,165,123,169,90,166,255,109,26,224,221,132,213,35,75,80,20,162,248,102,138,32,96,228,142,91,154,134,178]",
              "sol": "abi.encode(\"225,199,22,183,165,123,169,90,166,255,109,26,224,221,132,213,35,75,80,20,162,248,102,138,32,96,228,142,91,154,134,178\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:18:07.359ZMiniMeToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:18:07.360ZMiniMeToken.balanceOfAt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOfAt(address,uint)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:18:07.360ZMiniMeToken.totalSupplyAt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupplyAt(uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:18:07.360ZMiniMeToken.createCloneToken": {
    "branches": {
      "0": {
        "branch": {
          "loc": "351-351",
          "restrictions": [
            "_snapshotBlock == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createCloneToken(string,uint8,string,uint,bool) WHEN _snapshotBlock==0",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "\"MMT_0.2\"",
              "sol": "\"MMT_0.2\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_snapshotBlock != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createCloneToken(string,uint8,string,uint,bool) WHEN _snapshotBlock!=0",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:18:07.361ZMiniMeToken.generateTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute generateTokens(address,uint) WHEN msg.sender==controller",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail generateTokens(address,uint) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:18:07.362ZMiniMeToken.destroyTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute destroyTokens(address,uint) WHEN msg.sender==controller,curTotalSupply>=_amount,previousBalanceFrom>=_amount",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail destroyTokens(address,uint) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:18:07.362ZMiniMeToken.enableTransfers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute enableTransfers(bool) WHEN msg.sender==controller",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail enableTransfers(bool) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:18:07.363ZMiniMeToken.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:18:07.363ZMiniMeToken.claimTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "498-501",
          "restrictions": [
            "_token == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute claimTokens(address) WHEN _token==0x0000000000000000000000000000000000000000,msg.sender==controller",
          "parameters": [
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail claimTokens(address) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_token != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute claimTokens(address) WHEN _token!=0x0000000000000000000000000000000000000000,msg.sender==controller",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail claimTokens(address) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:18:07.367ZProxyMiniMeToken.testdoTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "170-173",
          "restrictions": [
            "_amount == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdoTransfer(address,address,uint) WHEN _amount==0,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdoTransfer(address,address,uint) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_amount != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdoTransfer(address,address,uint) WHEN _amount!=0,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdoTransfer(address,address,uint) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "187-189",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdoTransfer(address,address,uint) WHEN FunctionCall==true,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdoTransfer(address,address,uint) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "_amount != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdoTransfer(address,address,uint) WHEN FunctionCall!=true,_amount!=0,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdoTransfer(address,address,uint) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:18:07.374ZProxyMiniMeToken.testgetValueAt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "426-426",
          "restrictions": [
            "checkpoints.length == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetValueAt(MiniMeToken.Checkpoint[],uint) WHEN checkpoints.length==0",
          "parameters": [
            {
              "js": "[]",
              "sol": "[]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "checkpoints.length != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetValueAt(MiniMeToken.Checkpoint[],uint) WHEN checkpoints.length!=0",
          "parameters": [
            {
              "js": "[{\"fromBlock\": 256,\"value\": 2014223716},{\"fromBlock\": 95,\"value\": 17},{\"fromBlock\": 0,\"value\": 96},{\"fromBlock\": 0,\"value\": 254},{\"fromBlock\": 5,\"value\": 257},{\"fromBlock\": 2,\"value\": 2014223714},{\"fromBlock\": 10000,\"value\": 28},{\"fromBlock\": 29,\"value\": 257},{\"fromBlock\": 17,\"value\": 65},{\"fromBlock\": 2014223716,\"value\": 19},{\"fromBlock\": 95,\"value\": 10001},{\"fromBlock\": 254,\"value\": 2},{\"fromBlock\": 256,\"value\": 0},{\"fromBlock\": 1532892064,\"value\": 17},{\"fromBlock\": 29,\"value\": 29},{\"fromBlock\": 96,\"value\": 4},{\"fromBlock\": 66,\"value\": 28},{\"fromBlock\": 17,\"value\": 19},{\"fromBlock\": 95,\"value\": 29},{\"fromBlock\": 29,\"value\": 257},{\"fromBlock\": 5,\"value\": 26},{\"fromBlock\": 29,\"value\": 9999},{\"fromBlock\": 1338,\"value\": 27},{\"fromBlock\": 1336,\"value\": 1338},{\"fromBlock\": 64,\"value\": 26},{\"fromBlock\": 1,\"value\": 254},{\"fromBlock\": 1336,\"value\": 19},{\"fromBlock\": 66,\"value\": 256},{\"fromBlock\": 18,\"value\": 257},{\"fromBlock\": 18,\"value\": 254},{\"fromBlock\": 2014223715,\"value\": 1336},{\"fromBlock\": 257,\"value\": 1},{\"fromBlock\": 10001,\"value\": 28},{\"fromBlock\": 257,\"value\": 17},{\"fromBlock\": 64,\"value\": 9999},{\"fromBlock\": 17,\"value\": 96},{\"fromBlock\": 256,\"value\": 5},{\"fromBlock\": 97,\"value\": 97},{\"fromBlock\": 2014223716,\"value\": 1337},{\"fromBlock\": 1337,\"value\": 9999},{\"fromBlock\": 66,\"value\": 27},{\"fromBlock\": 29,\"value\": 17},{\"fromBlock\": 65,\"value\": 2},{\"fromBlock\": 1338,\"value\": 97},{\"fromBlock\": 256,\"value\": 66},{\"fromBlock\": 2014223715,\"value\": 6},{\"fromBlock\": 2014223716,\"value\": 4},{\"fromBlock\": 1532892064,\"value\": 9999},{\"fromBlock\": 10000,\"value\": 17},{\"fromBlock\": 97,\"value\": 1532892062},{\"fromBlock\": 1532892064,\"value\": 1532892062},{\"fromBlock\": 1336,\"value\": 256},{\"fromBlock\": 1338,\"value\": 17},{\"fromBlock\": 1336,\"value\": 2},{\"fromBlock\": 64,\"value\": 29},{\"fromBlock\": 3,\"value\": 9999},{\"fromBlock\": 17,\"value\": 1532892062},{\"fromBlock\": 96,\"value\": 2014223714},{\"fromBlock\": 10000,\"value\": 96},{\"fromBlock\": 256,\"value\": 65},{\"fromBlock\": 4,\"value\": 1532892064},{\"fromBlock\": 95,\"value\": 1532892062},{\"fromBlock\": 1,\"value\": 1},{\"fromBlock\": 19,\"value\": 9999},{\"fromBlock\": 4,\"value\": 255},{\"fromBlock\": 65,\"value\": 28},{\"fromBlock\": 257,\"value\": 27},{\"fromBlock\": 17,\"value\": 1336},{\"fromBlock\": 27,\"value\": 5},{\"fromBlock\": 2014223715,\"value\": 2014223716},{\"fromBlock\": 9999,\"value\": 5},{\"fromBlock\": 255,\"value\": 5},{\"fromBlock\": 5,\"value\": 1},{\"fromBlock\": 1532892064,\"value\": 95},{\"fromBlock\": 1532892062,\"value\": 19},{\"fromBlock\": 0,\"value\": 255},{\"fromBlock\": 1,\"value\": 28},{\"fromBlock\": 5,\"value\": 1337},{\"fromBlock\": 255,\"value\": 18},{\"fromBlock\": 26,\"value\": 0},{\"fromBlock\": 1532892064,\"value\": 29},{\"fromBlock\": 6,\"value\": 27},{\"fromBlock\": 2014223716,\"value\": 4},{\"fromBlock\": 3,\"value\": 257},{\"fromBlock\": 0,\"value\": 19},{\"fromBlock\": 1338,\"value\": 28},{\"fromBlock\": 2014223716,\"value\": 5},{\"fromBlock\": 2014223714,\"value\": 17},{\"fromBlock\": 18,\"value\": 27},{\"fromBlock\": 27,\"value\": 1532892063},{\"fromBlock\": 2014223716,\"value\": 5},{\"fromBlock\": 1336,\"value\": 1337},{\"fromBlock\": 97,\"value\": 1532892062},{\"fromBlock\": 2,\"value\": 10000},{\"fromBlock\": 27,\"value\": 29},{\"fromBlock\": 1532892064,\"value\": 64}]",
              "sol": "[MiniMeToken.Checkpoint(256,2014223716),MiniMeToken.Checkpoint(95,17),MiniMeToken.Checkpoint(0,96),MiniMeToken.Checkpoint(0,254),MiniMeToken.Checkpoint(5,257),MiniMeToken.Checkpoint(2,2014223714),MiniMeToken.Checkpoint(10000,28),MiniMeToken.Checkpoint(29,257),MiniMeToken.Checkpoint(17,65),MiniMeToken.Checkpoint(2014223716,19),MiniMeToken.Checkpoint(95,10001),MiniMeToken.Checkpoint(254,2),MiniMeToken.Checkpoint(256,0),MiniMeToken.Checkpoint(1532892064,17),MiniMeToken.Checkpoint(29,29),MiniMeToken.Checkpoint(96,4),MiniMeToken.Checkpoint(66,28),MiniMeToken.Checkpoint(17,19),MiniMeToken.Checkpoint(95,29),MiniMeToken.Checkpoint(29,257),MiniMeToken.Checkpoint(5,26),MiniMeToken.Checkpoint(29,9999),MiniMeToken.Checkpoint(1338,27),MiniMeToken.Checkpoint(1336,1338),MiniMeToken.Checkpoint(64,26),MiniMeToken.Checkpoint(1,254),MiniMeToken.Checkpoint(1336,19),MiniMeToken.Checkpoint(66,256),MiniMeToken.Checkpoint(18,257),MiniMeToken.Checkpoint(18,254),MiniMeToken.Checkpoint(2014223715,1336),MiniMeToken.Checkpoint(257,1),MiniMeToken.Checkpoint(10001,28),MiniMeToken.Checkpoint(257,17),MiniMeToken.Checkpoint(64,9999),MiniMeToken.Checkpoint(17,96),MiniMeToken.Checkpoint(256,5),MiniMeToken.Checkpoint(97,97),MiniMeToken.Checkpoint(2014223716,1337),MiniMeToken.Checkpoint(1337,9999),MiniMeToken.Checkpoint(66,27),MiniMeToken.Checkpoint(29,17),MiniMeToken.Checkpoint(65,2),MiniMeToken.Checkpoint(1338,97),MiniMeToken.Checkpoint(256,66),MiniMeToken.Checkpoint(2014223715,6),MiniMeToken.Checkpoint(2014223716,4),MiniMeToken.Checkpoint(1532892064,9999),MiniMeToken.Checkpoint(10000,17),MiniMeToken.Checkpoint(97,1532892062),MiniMeToken.Checkpoint(1532892064,1532892062),MiniMeToken.Checkpoint(1336,256),MiniMeToken.Checkpoint(1338,17),MiniMeToken.Checkpoint(1336,2),MiniMeToken.Checkpoint(64,29),MiniMeToken.Checkpoint(3,9999),MiniMeToken.Checkpoint(17,1532892062),MiniMeToken.Checkpoint(96,2014223714),MiniMeToken.Checkpoint(10000,96),MiniMeToken.Checkpoint(256,65),MiniMeToken.Checkpoint(4,1532892064),MiniMeToken.Checkpoint(95,1532892062),MiniMeToken.Checkpoint(1,1),MiniMeToken.Checkpoint(19,9999),MiniMeToken.Checkpoint(4,255),MiniMeToken.Checkpoint(65,28),MiniMeToken.Checkpoint(257,27),MiniMeToken.Checkpoint(17,1336),MiniMeToken.Checkpoint(27,5),MiniMeToken.Checkpoint(2014223715,2014223716),MiniMeToken.Checkpoint(9999,5),MiniMeToken.Checkpoint(255,5),MiniMeToken.Checkpoint(5,1),MiniMeToken.Checkpoint(1532892064,95),MiniMeToken.Checkpoint(1532892062,19),MiniMeToken.Checkpoint(0,255),MiniMeToken.Checkpoint(1,28),MiniMeToken.Checkpoint(5,1337),MiniMeToken.Checkpoint(255,18),MiniMeToken.Checkpoint(26,0),MiniMeToken.Checkpoint(1532892064,29),MiniMeToken.Checkpoint(6,27),MiniMeToken.Checkpoint(2014223716,4),MiniMeToken.Checkpoint(3,257),MiniMeToken.Checkpoint(0,19),MiniMeToken.Checkpoint(1338,28),MiniMeToken.Checkpoint(2014223716,5),MiniMeToken.Checkpoint(2014223714,17),MiniMeToken.Checkpoint(18,27),MiniMeToken.Checkpoint(27,1532892063),MiniMeToken.Checkpoint(2014223716,5),MiniMeToken.Checkpoint(1336,1337),MiniMeToken.Checkpoint(97,1532892062),MiniMeToken.Checkpoint(2,10000),MiniMeToken.Checkpoint(27,29),MiniMeToken.Checkpoint(1532892064,64)]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:18:07.380ZProxyMiniMeToken.testupdateValueAtNow": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testupdateValueAtNow(MiniMeToken.Checkpoint[],uint)",
          "parameters": [
            {
              "js": "[{\"fromBlock\": 65,\"value\": 66}]",
              "sol": "[MiniMeToken.Checkpoint(65,66)]"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:18:07.381ZProxyMiniMeToken.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "469-469",
          "restrictions": [
            "_addr == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address) WHEN _addr==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_addr != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address) WHEN _addr!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:18:07.381ZProxyMiniMeToken.testmin": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmin(uint,uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}