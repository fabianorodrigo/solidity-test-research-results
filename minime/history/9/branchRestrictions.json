,{
  "2020-11-10T22:59:31.332ZControlled.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:59:35.406ZMiniMeToken.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,address,uint,string,uint8,string,bool)",
          "parameters": [
            {
              "js": "contractMiniMeTokenFactory.address",
              "sol": "contractMiniMeTokenFactory.address"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:59:39.345ZMiniMeTokenFactory.createCloneToken": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createCloneToken(address,uint,string,uint8,string,bool)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:59:39.347ZControlled.changeController": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute changeController(address) WHEN msg.sender==controller",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail changeController(address) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T22:59:39.348ZMiniMeToken.transfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transfer(address,uint256) WHEN transfersEnabled==true,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: transfersEnabled == true",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transfer(address,uint256) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T22:59:39.351ZMiniMeToken.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-156",
          "restrictions": [
            "msg.sender != controller"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN msg.sender!=controller,transfersEnabled==true,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: transfersEnabled == true",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "msg.sender == controller"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN msg.sender==controller,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T22:59:39.372ZMiniMeToken.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:59:39.373ZMiniMeToken.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "228-230",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN FunctionCall==true,transfersEnabled==true",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: transfersEnabled == true",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN FunctionCall!=true,transfersEnabled==true",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: transfersEnabled == true",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T22:59:39.379ZMiniMeToken.allowance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allowance(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:59:39.379ZMiniMeToken.approveAndCall": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approveAndCall(address,uint256,bytes)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "[12,217,64,125,4,111,100,210,240,178,130,192,188,87,254,151,183,100,247,50,76,158,128,47,121,220,145,237,101,42,229,175]",
              "sol": "abi.encode(\"12,217,64,125,4,111,100,210,240,178,130,192,188,87,254,151,183,100,247,50,76,158,128,47,121,220,145,237,101,42,229,175\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:59:39.380ZMiniMeToken.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:59:39.380ZMiniMeToken.balanceOfAt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOfAt(address,uint)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:59:39.380ZMiniMeToken.totalSupplyAt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupplyAt(uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:59:39.381ZMiniMeToken.createCloneToken": {
    "branches": {
      "0": {
        "branch": {
          "loc": "351-351",
          "restrictions": [
            "_snapshotBlock == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createCloneToken(string,uint8,string,uint,bool) WHEN _snapshotBlock==0",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"MMT_0.2\"",
              "sol": "\"MMT_0.2\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_snapshotBlock != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createCloneToken(string,uint8,string,uint,bool) WHEN _snapshotBlock!=0",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:59:39.381ZMiniMeToken.generateTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute generateTokens(address,uint) WHEN msg.sender==controller",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail generateTokens(address,uint) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T22:59:39.382ZMiniMeToken.destroyTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute destroyTokens(address,uint) WHEN msg.sender==controller,curTotalSupply>=_amount,previousBalanceFrom>=_amount",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail destroyTokens(address,uint) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T22:59:39.383ZMiniMeToken.enableTransfers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute enableTransfers(bool) WHEN msg.sender==controller",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail enableTransfers(bool) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T22:59:39.384ZMiniMeToken.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:59:39.384ZMiniMeToken.claimTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "498-501",
          "restrictions": [
            "_token == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute claimTokens(address) WHEN _token==0x0000000000000000000000000000000000000000,msg.sender==controller",
          "parameters": [
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail claimTokens(address) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_token != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute claimTokens(address) WHEN _token!=0x0000000000000000000000000000000000000000,msg.sender==controller",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail claimTokens(address) when NOT comply with: msg.sender == controller",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T22:59:39.390ZProxyMiniMeToken.testdoTransfer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "170-173",
          "restrictions": [
            "_amount == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdoTransfer(address,address,uint) WHEN _amount==0,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdoTransfer(address,address,uint) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_amount != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdoTransfer(address,address,uint) WHEN _amount!=0,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdoTransfer(address,address,uint) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "187-189",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdoTransfer(address,address,uint) WHEN FunctionCall==true,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdoTransfer(address,address,uint) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "_amount != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdoTransfer(address,address,uint) WHEN FunctionCall!=true,_amount!=0,parentSnapShotBlock<block.number",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdoTransfer(address,address,uint) when NOT comply with: parentSnapShotBlock < (await web3.eth.getBlockNumber())",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T22:59:39.395ZProxyMiniMeToken.testgetValueAt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "426-426",
          "restrictions": [
            "checkpoints.length == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetValueAt(MiniMeToken.Checkpoint[],uint) WHEN checkpoints.length==0",
          "parameters": [
            {
              "js": "[]",
              "sol": "[]"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "checkpoints.length != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetValueAt(MiniMeToken.Checkpoint[],uint) WHEN checkpoints.length!=0",
          "parameters": [
            {
              "js": "[{\"fromBlock\": 66,\"value\": 2014223716},{\"fromBlock\": 2014223714,\"value\": 19},{\"fromBlock\": 1532892063,\"value\": 64},{\"fromBlock\": 97,\"value\": 27},{\"fromBlock\": 10000,\"value\": 10000},{\"fromBlock\": 5,\"value\": 2014223716},{\"fromBlock\": 3,\"value\": 17},{\"fromBlock\": 10000,\"value\": 256},{\"fromBlock\": 26,\"value\": 2},{\"fromBlock\": 1338,\"value\": 28},{\"fromBlock\": 27,\"value\": 29},{\"fromBlock\": 10001,\"value\": 10000},{\"fromBlock\": 17,\"value\": 1},{\"fromBlock\": 1336,\"value\": 257},{\"fromBlock\": 27,\"value\": 96},{\"fromBlock\": 9999,\"value\": 1532892064},{\"fromBlock\": 5,\"value\": 18},{\"fromBlock\": 1532892063,\"value\": 28},{\"fromBlock\": 95,\"value\": 2},{\"fromBlock\": 97,\"value\": 257},{\"fromBlock\": 1,\"value\": 1338},{\"fromBlock\": 1338,\"value\": 1336},{\"fromBlock\": 5,\"value\": 19},{\"fromBlock\": 2014223714,\"value\": 28},{\"fromBlock\": 27,\"value\": 19},{\"fromBlock\": 66,\"value\": 18},{\"fromBlock\": 1337,\"value\": 1337},{\"fromBlock\": 2,\"value\": 17},{\"fromBlock\": 29,\"value\": 255},{\"fromBlock\": 255,\"value\": 2},{\"fromBlock\": 26,\"value\": 17},{\"fromBlock\": 257,\"value\": 0},{\"fromBlock\": 19,\"value\": 2014223714},{\"fromBlock\": 64,\"value\": 19},{\"fromBlock\": 1532892064,\"value\": 1337},{\"fromBlock\": 256,\"value\": 64},{\"fromBlock\": 1338,\"value\": 1532892062},{\"fromBlock\": 257,\"value\": 18},{\"fromBlock\": 19,\"value\": 1532892062},{\"fromBlock\": 255,\"value\": 10000},{\"fromBlock\": 6,\"value\": 95},{\"fromBlock\": 29,\"value\": 65},{\"fromBlock\": 18,\"value\": 2},{\"fromBlock\": 65,\"value\": 19},{\"fromBlock\": 254,\"value\": 1338},{\"fromBlock\": 1336,\"value\": 2},{\"fromBlock\": 65,\"value\": 6},{\"fromBlock\": 2,\"value\": 4},{\"fromBlock\": 5,\"value\": 257},{\"fromBlock\": 66,\"value\": 9999},{\"fromBlock\": 10000,\"value\": 4},{\"fromBlock\": 6,\"value\": 27},{\"fromBlock\": 5,\"value\": 18},{\"fromBlock\": 65,\"value\": 2014223714},{\"fromBlock\": 1,\"value\": 2014223715},{\"fromBlock\": 96,\"value\": 1},{\"fromBlock\": 257,\"value\": 27},{\"fromBlock\": 65,\"value\": 1338},{\"fromBlock\": 64,\"value\": 1336},{\"fromBlock\": 2,\"value\": 1},{\"fromBlock\": 2014223715,\"value\": 26},{\"fromBlock\": 1,\"value\": 1},{\"fromBlock\": 257,\"value\": 254},{\"fromBlock\": 1532892064,\"value\": 9999},{\"fromBlock\": 1532892063,\"value\": 1336},{\"fromBlock\": 29,\"value\": 28},{\"fromBlock\": 6,\"value\": 6},{\"fromBlock\": 254,\"value\": 1338},{\"fromBlock\": 64,\"value\": 2014223714},{\"fromBlock\": 2014223716,\"value\": 1336},{\"fromBlock\": 18,\"value\": 66},{\"fromBlock\": 1336,\"value\": 19},{\"fromBlock\": 19,\"value\": 95},{\"fromBlock\": 2,\"value\": 254},{\"fromBlock\": 95,\"value\": 28},{\"fromBlock\": 5,\"value\": 29},{\"fromBlock\": 1532892063,\"value\": 1338},{\"fromBlock\": 10001,\"value\": 256},{\"fromBlock\": 255,\"value\": 66},{\"fromBlock\": 65,\"value\": 65},{\"fromBlock\": 255,\"value\": 96},{\"fromBlock\": 1,\"value\": 10000},{\"fromBlock\": 65,\"value\": 2014223715},{\"fromBlock\": 254,\"value\": 1336},{\"fromBlock\": 2014223714,\"value\": 5},{\"fromBlock\": 97,\"value\": 1532892063},{\"fromBlock\": 1,\"value\": 10000},{\"fromBlock\": 96,\"value\": 1},{\"fromBlock\": 1336,\"value\": 2014223716},{\"fromBlock\": 29,\"value\": 1532892064},{\"fromBlock\": 1,\"value\": 1532892064},{\"fromBlock\": 2014223714,\"value\": 1336},{\"fromBlock\": 2,\"value\": 0},{\"fromBlock\": 2,\"value\": 66},{\"fromBlock\": 26,\"value\": 257},{\"fromBlock\": 1338,\"value\": 19},{\"fromBlock\": 1337,\"value\": 1532892062}]",
              "sol": "[MiniMeToken.Checkpoint(66,2014223716),MiniMeToken.Checkpoint(2014223714,19),MiniMeToken.Checkpoint(1532892063,64),MiniMeToken.Checkpoint(97,27),MiniMeToken.Checkpoint(10000,10000),MiniMeToken.Checkpoint(5,2014223716),MiniMeToken.Checkpoint(3,17),MiniMeToken.Checkpoint(10000,256),MiniMeToken.Checkpoint(26,2),MiniMeToken.Checkpoint(1338,28),MiniMeToken.Checkpoint(27,29),MiniMeToken.Checkpoint(10001,10000),MiniMeToken.Checkpoint(17,1),MiniMeToken.Checkpoint(1336,257),MiniMeToken.Checkpoint(27,96),MiniMeToken.Checkpoint(9999,1532892064),MiniMeToken.Checkpoint(5,18),MiniMeToken.Checkpoint(1532892063,28),MiniMeToken.Checkpoint(95,2),MiniMeToken.Checkpoint(97,257),MiniMeToken.Checkpoint(1,1338),MiniMeToken.Checkpoint(1338,1336),MiniMeToken.Checkpoint(5,19),MiniMeToken.Checkpoint(2014223714,28),MiniMeToken.Checkpoint(27,19),MiniMeToken.Checkpoint(66,18),MiniMeToken.Checkpoint(1337,1337),MiniMeToken.Checkpoint(2,17),MiniMeToken.Checkpoint(29,255),MiniMeToken.Checkpoint(255,2),MiniMeToken.Checkpoint(26,17),MiniMeToken.Checkpoint(257,0),MiniMeToken.Checkpoint(19,2014223714),MiniMeToken.Checkpoint(64,19),MiniMeToken.Checkpoint(1532892064,1337),MiniMeToken.Checkpoint(256,64),MiniMeToken.Checkpoint(1338,1532892062),MiniMeToken.Checkpoint(257,18),MiniMeToken.Checkpoint(19,1532892062),MiniMeToken.Checkpoint(255,10000),MiniMeToken.Checkpoint(6,95),MiniMeToken.Checkpoint(29,65),MiniMeToken.Checkpoint(18,2),MiniMeToken.Checkpoint(65,19),MiniMeToken.Checkpoint(254,1338),MiniMeToken.Checkpoint(1336,2),MiniMeToken.Checkpoint(65,6),MiniMeToken.Checkpoint(2,4),MiniMeToken.Checkpoint(5,257),MiniMeToken.Checkpoint(66,9999),MiniMeToken.Checkpoint(10000,4),MiniMeToken.Checkpoint(6,27),MiniMeToken.Checkpoint(5,18),MiniMeToken.Checkpoint(65,2014223714),MiniMeToken.Checkpoint(1,2014223715),MiniMeToken.Checkpoint(96,1),MiniMeToken.Checkpoint(257,27),MiniMeToken.Checkpoint(65,1338),MiniMeToken.Checkpoint(64,1336),MiniMeToken.Checkpoint(2,1),MiniMeToken.Checkpoint(2014223715,26),MiniMeToken.Checkpoint(1,1),MiniMeToken.Checkpoint(257,254),MiniMeToken.Checkpoint(1532892064,9999),MiniMeToken.Checkpoint(1532892063,1336),MiniMeToken.Checkpoint(29,28),MiniMeToken.Checkpoint(6,6),MiniMeToken.Checkpoint(254,1338),MiniMeToken.Checkpoint(64,2014223714),MiniMeToken.Checkpoint(2014223716,1336),MiniMeToken.Checkpoint(18,66),MiniMeToken.Checkpoint(1336,19),MiniMeToken.Checkpoint(19,95),MiniMeToken.Checkpoint(2,254),MiniMeToken.Checkpoint(95,28),MiniMeToken.Checkpoint(5,29),MiniMeToken.Checkpoint(1532892063,1338),MiniMeToken.Checkpoint(10001,256),MiniMeToken.Checkpoint(255,66),MiniMeToken.Checkpoint(65,65),MiniMeToken.Checkpoint(255,96),MiniMeToken.Checkpoint(1,10000),MiniMeToken.Checkpoint(65,2014223715),MiniMeToken.Checkpoint(254,1336),MiniMeToken.Checkpoint(2014223714,5),MiniMeToken.Checkpoint(97,1532892063),MiniMeToken.Checkpoint(1,10000),MiniMeToken.Checkpoint(96,1),MiniMeToken.Checkpoint(1336,2014223716),MiniMeToken.Checkpoint(29,1532892064),MiniMeToken.Checkpoint(1,1532892064),MiniMeToken.Checkpoint(2014223714,1336),MiniMeToken.Checkpoint(2,0),MiniMeToken.Checkpoint(2,66),MiniMeToken.Checkpoint(26,257),MiniMeToken.Checkpoint(1338,19),MiniMeToken.Checkpoint(1337,1532892062)]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:59:39.401ZProxyMiniMeToken.testupdateValueAtNow": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testupdateValueAtNow(MiniMeToken.Checkpoint[],uint)",
          "parameters": [
            {
              "js": "[{\"fromBlock\": 6,\"value\": 0},{\"fromBlock\": 1336,\"value\": 18},{\"fromBlock\": 10000,\"value\": 2},{\"fromBlock\": 256,\"value\": 3},{\"fromBlock\": 2014223714,\"value\": 255},{\"fromBlock\": 26,\"value\": 2014223716},{\"fromBlock\": 97,\"value\": 19},{\"fromBlock\": 96,\"value\": 96},{\"fromBlock\": 95,\"value\": 64}]",
              "sol": "[MiniMeToken.Checkpoint(6,0),MiniMeToken.Checkpoint(1336,18),MiniMeToken.Checkpoint(10000,2),MiniMeToken.Checkpoint(256,3),MiniMeToken.Checkpoint(2014223714,255),MiniMeToken.Checkpoint(26,2014223716),MiniMeToken.Checkpoint(97,19),MiniMeToken.Checkpoint(96,96),MiniMeToken.Checkpoint(95,64)]"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:59:39.402ZProxyMiniMeToken.testisContract": {
    "branches": {
      "0": {
        "branch": {
          "loc": "469-469",
          "restrictions": [
            "_addr == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address) WHEN _addr==0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "\"0x0000000000000000000000000000000000000000\"",
              "sol": "0x0000000000000000000000000000000000000000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_addr != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisContract(address) WHEN _addr!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:59:39.402ZProxyMiniMeToken.testmin": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmin(uint,uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}