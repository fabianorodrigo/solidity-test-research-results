,{
  "2020-11-10T22:00:08.841ZMetaTxProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:00:13.503ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[114,179,82,229,21,21,147,22,15,246,192,237,58,32,157,122,157,147,137,194,220,54,199,174,234,171,0,150,4,175,128,158]",
              "sol": "stringToBytes32(\"114,179,82,229,21,21,147,22,15,246,192,237,58,32,157,122,157,147,137,194,220,54,199,174,234,171,0,150,4,175,128,158\")"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[143,241,113,164,255,165,70,104,243,173,22,220,18,68,90,35,223,11,44,205,67,203,94,206,75,13,2,208,244,116,120,204]",
              "sol": "stringToBytes32(\"143,241,113,164,255,165,70,104,243,173,22,220,18,68,90,35,223,11,44,205,67,203,94,206,75,13,2,208,244,116,120,204\")"
            },
            {
              "js": "[54,209,29,228,119,89,13,17,68,203,62,179,190,125,96,247,72,230,110,86,116,22,119,97,76,65,3,192,58,1,205,150,3,80,39,30,255,193,135,2,182,120,174,84,86,39,77,237,56,166,68,237,72,237,255,112,221,38,43,75,166,118,231,25,112]",
              "sol": "abi.encode(\"54,209,29,228,119,89,13,17,68,203,62,179,190,125,96,247,72,230,110,86,116,22,119,97,76,65,3,192,58,1,205,150,3,80,39,30,255,193,135,2,182,120,174,84,86,39,77,237,56,166,68,237,72,237,255,112,221,38,43,75,166,118,231,25,112\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:00:13.505ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[221,74,83,96,110,62,102,45,22,196,30,103,134,41,95,227,127,50,157,233,23,105,135,16,19,70,170,112,73,54,235,159]",
              "sol": "stringToBytes32(\"221,74,83,96,110,62,102,45,22,196,30,103,134,41,95,227,127,50,157,233,23,105,135,16,19,70,170,112,73,54,235,159\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:00:13.506ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[69,39,166,82,68,105,93,145,236,30,146,201,244,120,174,112,171,237,133,132,229,225,127,162,110,27,60,39,164,148,117,202]",
              "sol": "stringToBytes32(\"69,39,166,82,68,105,93,145,236,30,146,201,244,120,174,112,171,237,133,132,229,225,127,162,110,27,60,39,164,148,117,202\")"
            },
            {
              "js": "[86,13,104,141,58,41,131,5,47,106,90,218,201,168,157,15,198,189,128,207,185,28,170,79,134,229,153,184,205,205,165,216]",
              "sol": "abi.encode(\"86,13,104,141,58,41,131,5,47,106,90,218,201,168,157,15,198,189,128,207,185,28,170,79,134,229,153,184,205,205,165,216\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:00:13.507ZExternalContract.updateValue": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateValue(uint256)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:00:13.508ZMetaTxProxy.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:00:13.508ZMetaTxProxy.getTransactionHashNonce": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTransactionHashNonce(bytes32)",
          "parameters": [
            {
              "js": "[112,187,61,114,140,34,52,61,57,83,128,148,27,212,209,204,182,46,125,117,88,69,217,162,17,227,58,49,144,230,92,23]",
              "sol": "stringToBytes32(\"112,187,61,114,140,34,52,61,57,83,128,148,27,212,209,204,182,46,125,117,88,69,217,162,17,227,58,49,144,230,92,23\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:00:13.509ZMetaTxProxy.getTransactionHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getTransactionHash(address,uint256,bytes,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "[3,216,85,46,138,80,30,23,30,219,98,110,179,147,44,70,133,70,101,163,159,53,193,96,234,236,48,30,88,10,10,40]",
              "sol": "abi.encode(\"3,216,85,46,138,80,30,23,30,219,98,110,179,147,44,70,133,70,101,163,159,53,193,96,234,236,48,30,88,10,10,40\")"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:00:13.509ZMetaTxProxy.getSigner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSigner(bytes32,bytes)",
          "parameters": [
            {
              "js": "[111,128,12,191,232,164,63,55,113,207,138,4,196,13,99,82,126,92,102,51,251,75,153,38,223,241,21,112,246,132,166,181]",
              "sol": "stringToBytes32(\"111,128,12,191,232,164,63,55,113,207,138,4,196,13,99,82,126,92,102,51,251,75,153,38,223,241,21,112,246,132,166,181\")"
            },
            {
              "js": "[105,41,137,226,44,96,212,234,92,10,210,153,40,36,251,130,163,193,195,134,210,147,41,173,114,83,186,187,197,170,35,249]",
              "sol": "abi.encode(\"105,41,137,226,44,96,212,234,92,10,210,153,40,36,251,130,163,193,195,134,210,147,41,173,114,83,186,187,197,170,35,249\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:00:13.509ZMetaTxProxy.executeTransaction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute executeTransaction(address,uint256,bytes,uint256,uint256,bytes)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "[35,227,36,77,119,50,60,201,163,14,100,207,164,148,7,244,227,27,128,141,66,92,68,54,229,206,175,83,174,8,20,43]",
              "sol": "abi.encode(\"35,227,36,77,119,50,60,201,163,14,100,207,164,148,7,244,227,27,128,141,66,92,68,54,229,206,175,83,174,8,20,43\")"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "[170,134,85,214,51,156,124,26,168,210,224,146,128,38,167,140,242,43,188,88,208,6,11,63,179,23,138,121,224,2,88,148]",
              "sol": "abi.encode(\"170,134,85,214,51,156,124,26,168,210,224,146,128,38,167,140,242,43,188,88,208,6,11,63,179,23,138,121,224,2,88,148\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T22:00:13.510ZMetaTxProxy.verifySignature": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySignature(address,uint256,bytes,uint256,bytes) WHEN signer==_signer",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "[203,42,109,80,67,230,202,226,179,6,240,11,15,44,107,23,127,218,13,179,140,14,158,126,105,253,147,82,149,33,78,30]",
              "sol": "abi.encode(\"203,42,109,80,67,230,202,226,179,6,240,11,15,44,107,23,127,218,13,179,140,14,158,126,105,253,147,82,149,33,78,30\")"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "[25,123,91,142,117,67,66,62,126,43,109,43,24,93,109,23,11,86,213,238,7,236,254,164,118,115,85,165,42,192,200,153]",
              "sol": "abi.encode(\"25,123,91,142,117,67,66,62,126,43,109,43,24,93,109,23,11,86,213,238,7,236,254,164,118,115,85,165,42,192,200,153\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}