{ truffleProjectHome:
   '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action',
  contracts:
   { IAction:
      { projectGraph: [Circular],
        name: 'IAction',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IAction',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'execute',
                parameters: [],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canExecute',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 17, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/contracts/IAction.sol' },
     ActionTest:
      { projectGraph: [Circular],
        name: 'ActionTest',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address[],address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           execute:
            [ { name: 'execute',
                signature: 'execute()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           canExecute:
            [ { name: 'canExecute',
                signature: 'canExecute()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { protocolAddresses:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: true,
              contractAddressOf: [ [Object], [Object] ] },
           receiverAccount:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'receiverAccount',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IAction:
            { projectGraph: [Circular],
              name: 'IAction',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IAction',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/contracts/IAction.sol' },
           TokenProportionalCappedTest:
            { projectGraph: [Circular],
              name: 'TokenProportionalCappedTest',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 canVote: [Array],
                 getVoterBaseDenominator: [Array] },
              modifiers: { isValidVoter: [Object], isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object],
                 token: [Object],
                 capPercent: [Object],
                 capWeight: [Object] },
              dependencies:
               { TokenProportionalCapped: [Object],
                 IERC1261: [Object],
                 IERC1261Metadata: [Object] },
              inheritsFrom:
               { TokenProportionalCapped: [Object],
                 BasePoll: [Object],
                 IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TokenProportionalCappedTest',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/testContracts/TokenProportionalCappedTest.sol' },
           TokenProportionalUncappedTest:
            { projectGraph: [Circular],
              name: 'TokenProportionalUncappedTest',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 canVote: [Array],
                 getVoterBaseDenominator: [Array] },
              modifiers: { isValidVoter: [Object], isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object],
                 token: [Object] },
              dependencies:
               { TokenProportionalUncapped: [Object],
                 IERC1261: [Object],
                 IERC1261Metadata: [Object] },
              inheritsFrom:
               { TokenProportionalUncapped: [Object],
                 BasePoll: [Object],
                 IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TokenProportionalUncappedTest',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/testContracts/TokenProportionalUncappedTest.sol' },
           Protocol:
            { projectGraph: [Circular],
              name: 'Protocol',
              kind: 'contract',
              isAbstract: false,
              functions: { constructor: [Array] },
              modifiers: { isCurrentHolder: [Object], onlyOwner: [Object] },
              stateVariables:
               { orgName: [Object],
                 orgSymbol: [Object],
                 attributeValueCollection: [Object],
                 attributeNames: [Object],
                 currentHolders: [Object],
                 pendingRequests: [Object],
                 allHolders: [Object],
                 currentMemberCount: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _owner: [Object] },
              dependencies: { ERC1261MetaData: [Object] },
              inheritsFrom:
               { ERC1261MetaData: [Object],
                 MembershipVerificationToken: [Object],
                 IERC1261: [Object],
                 Ownable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC1261Metadata: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Protocol',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/protocol/Protocol.sol' } },
        inheritsFrom:
         { IAction:
            { contract:
               { projectGraph: [Circular],
                 name: 'IAction',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/contracts/IAction.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ActionTest',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'EtherReceived',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'execute',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canExecute',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 38, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/contracts/testContracts/ActionTest.sol' },
     FreezableTestToken:
      { projectGraph: [Circular],
        name: 'FreezableTestToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyBeforeMintingFinished:
            { name: 'onlyBeforeMintingFinished',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyBeforeMintingFinished',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           canTransfer:
            { name: 'canTransfer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'canTransfer',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] } },
        stateVariables:
         { _mintingFinished:
            { functionsWrite: {},
              contract: [Circular],
              name: '_mintingFinished',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalMintableSupply:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'totalMintableSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           frozenAccounts:
            { functionsWrite: {},
              contract: [Circular],
              name: 'frozenAccounts',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>FreezableToken.FreezablePolls)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { FreezableToken:
            { projectGraph: [Circular],
              name: 'FreezableToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { isFrozen: [Array],
                 freezeAccount: [Array],
                 unFreezeAccount: [Array],
                 transfer: [Array],
                 transferFrom: [Array],
                 getTotalMintableSupply: [Array],
                 mintingFinished: [Array],
                 mint: [Array],
                 finishMinting: [Array] },
              modifiers:
               { onlyBeforeMintingFinished: [Object], canTransfer: [Object] },
              stateVariables:
               { _mintingFinished: [Object],
                 totalMintableSupply: [Object],
                 frozenAccounts: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object] },
              dependencies: { ERC20: [Object], IFreezableToken: [Object] },
              inheritsFrom:
               { ERC20: [Object], IERC20: [Object], IFreezableToken: [Object] },
              structs: { FreezablePolls: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'FreezableToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/FreezableToken.sol' } },
        inheritsFrom:
         { FreezableToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'FreezableToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/FreezableToken.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 2 },
           IFreezableToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'IFreezableToken',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/IFreezableToken.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'FreezableTestToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 10, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/contracts/testContracts/FreezableTestToken.sol' },
     Authorizable:
      { projectGraph: [Circular],
        name: 'Authorizable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { isAuthorized:
            [ { name: 'isAuthorized',
                signature: 'isAuthorized(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addAuthorized:
            [ { name: 'addAuthorized',
                signature: 'addAuthorized(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           removeAuthorized:
            [ { name: 'removeAuthorized',
                signature: 'removeAuthorized(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           selfRemoveAuthorized:
            [ { name: 'selfRemoveAuthorized',
                signature: 'selfRemoveAuthorized()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferAuthorization:
            [ { name: 'transferAuthorization',
                signature: 'transferAuthorization(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyAuthorized:
            { name: 'onlyAuthorized',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyAuthorized',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { authorized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'authorized',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>bool)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { _owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Authorizable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyAuthorized',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isAuthorized',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addAuthorized',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeAuthorized',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'selfRemoveAuthorized',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferAuthorization',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 40, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/ownership/Authorizable.sol' },
     BasePoll:
      { projectGraph: [Circular],
        name: 'BasePoll',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           getName:
            [ { name: 'getName',
                signature: 'getName()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getPollType:
            [ { name: 'getPollType',
                signature: 'getPollType()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoterBaseLogic:
            [ { name: 'getVoterBaseLogic',
                signature: 'getVoterBaseLogic()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getProtocolAddresses:
            [ { name: 'getProtocolAddresses',
                signature: 'getProtocolAddresses()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getStartTime:
            [ { name: 'getStartTime',
                signature: 'getStartTime()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getEndTime:
            [ { name: 'getEndTime',
                signature: 'getEndTime()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getProposals:
            [ { name: 'getProposals',
                signature: 'getProposals()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoteTally:
            [ { name: 'getVoteTally',
                signature: 'getVoteTally(uint)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoteTallies:
            [ { name: 'getVoteTallies',
                signature: 'getVoteTallies()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoterCount:
            [ { name: 'getVoterCount',
                signature: 'getVoterCount(uint)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoterCounts:
            [ { name: 'getVoterCounts',
                signature: 'getVoterCounts()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           winningProposal:
            [ { name: 'winningProposal',
                signature: 'winningProposal()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           hasPollStarted:
            [ { name: 'hasPollStarted',
                signature: 'hasPollStarted()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC1261:
            { projectGraph: [Circular],
              name: 'IERC1261',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           IERC1261Metadata:
            { projectGraph: [Circular],
              name: 'IERC1261Metadata',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261Metadata',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           IPoll:
            { projectGraph: [Circular],
              name: 'IPoll',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IPoll',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' } },
        inheritsFrom:
         { IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 0 } },
        structs:
         { Proposal:
            { name: 'Proposal',
              contract: [Circular],
              parameters: [ [Object], [Object], [Object] ] },
           Voter:
            { name: 'Voter',
              contract: [Circular],
              parameters: [ [Object], [Object], [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'BasePoll',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StructDefinition',
                name: 'Proposal',
                members: [Array],
                loc: [Object],
                parentName: 'BasePoll' },
              { type: 'StructDefinition',
                name: 'Voter',
                members: [Array],
                loc: [Object],
                parentName: 'BasePoll' },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TriedToVote',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'CastVote',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RevokedVote',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'isValidVoter',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'isPollStarted',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'vote',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeVote',
                parameters: [],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getName',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getPollType',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterBaseLogic',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getProtocolAddresses',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getStartTime',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getEndTime',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getProposals',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoteTally',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoteTallies',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterCount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterCounts',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'winningProposal',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'hasPollStarted',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canVote',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'calculateVoteWeight',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterBaseDenominator',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 156, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
     BasePollBound:
      { projectGraph: [Circular],
        name: 'BasePollBound',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isPollValid:
            [ { name: 'isPollValid',
                signature: 'isPollValid()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           hasPollEnded:
            [ { name: 'hasPollEnded',
                signature: 'hasPollEnded()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { checkTime:
            { name: 'checkTime',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'checkTime',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BasePoll:
            { projectGraph: [Circular],
              name: 'BasePoll',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 getName: [Array],
                 getPollType: [Array],
                 getVoterBaseLogic: [Array],
                 getProtocolAddresses: [Array],
                 getStartTime: [Array],
                 getEndTime: [Array],
                 getProposals: [Array],
                 getVoteTally: [Array],
                 getVoteTallies: [Array],
                 getVoterCount: [Array],
                 getVoterCounts: [Array],
                 winningProposal: [Array],
                 hasPollStarted: [Array] },
              modifiers: { isValidVoter: [Object], isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies:
               { IERC1261: [Object],
                 IERC1261Metadata: [Object],
                 IPoll: [Object] },
              inheritsFrom: { IPoll: [Object] },
              structs: { Proposal: [Object], Voter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasePoll',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' } },
        inheritsFrom:
         { BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 0 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'BasePollBound',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'ModifierDefinition',
                name: 'checkTime',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isPollValid',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'hasPollEnded',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 30, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' },
     DelegatedVote:
      { projectGraph: [Circular],
        name: 'DelegatedVote',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           vote:
            [ { name: 'vote',
                signature: 'vote(uint8)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revokeVote:
            [ { name: 'revokeVote',
                signature: 'revokeVote()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           delegate:
            [ { name: 'delegate',
                signature: 'delegate(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           calculateVoteWeight:
            [ { name: 'calculateVoteWeight',
                signature: 'calculateVoteWeight(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BasePoll:
            { projectGraph: [Circular],
              name: 'BasePoll',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 getName: [Array],
                 getPollType: [Array],
                 getVoterBaseLogic: [Array],
                 getProtocolAddresses: [Array],
                 getStartTime: [Array],
                 getEndTime: [Array],
                 getProposals: [Array],
                 getVoteTally: [Array],
                 getVoteTallies: [Array],
                 getVoterCount: [Array],
                 getVoterCounts: [Array],
                 winningProposal: [Array],
                 hasPollStarted: [Array] },
              modifiers: { isValidVoter: [Object], isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies:
               { IERC1261: [Object],
                 IERC1261Metadata: [Object],
                 IPoll: [Object] },
              inheritsFrom: { IPoll: [Object] },
              structs: { Proposal: [Object], Voter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasePoll',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' } },
        inheritsFrom:
         { BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 0 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'DelegatedVote',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'vote',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeVote',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'delegate',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'calculateVoteWeight',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 76, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/DelegatedVote.sol' },
     DelegatedVoteBound:
      { projectGraph: [Circular],
        name: 'DelegatedVoteBound',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           vote:
            [ { name: 'vote',
                signature: 'vote(uint8)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revokeVote:
            [ { name: 'revokeVote',
                signature: 'revokeVote()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           delegate:
            [ { name: 'delegate',
                signature: 'delegate(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           calculateVoteWeight:
            [ { name: 'calculateVoteWeight',
                signature: 'calculateVoteWeight(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { checkTime:
            { name: 'checkTime',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'checkTime',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BasePollBound:
            { projectGraph: [Circular],
              name: 'BasePollBound',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 isPollValid: [Array],
                 hasPollEnded: [Array] },
              modifiers:
               { checkTime: [Object],
                 isValidVoter: [Object],
                 isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies: { BasePoll: [Object] },
              inheritsFrom: { BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasePollBound',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' } },
        inheritsFrom:
         { BasePollBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePollBound',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' },
              parameters: [],
              level: 0 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 1 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'DelegatedVoteBound',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'vote',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeVote',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'delegate',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'calculateVoteWeight',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 80, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/DelegatedVoteBound.sol' },
     IPoll:
      { projectGraph: [Circular],
        name: 'IPoll',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IPoll',
           baseContracts: [],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'TriedToVote',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'CastVote',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RevokedVote',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'vote',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeVote',
                parameters: [],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getProposals',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canVote',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoteTally',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterCount',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'calculateVoteWeight',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'winningProposal',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getName',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getPollType',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterBaseLogic',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getStartTime',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getEndTime',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getProtocolAddresses',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoteTallies',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterCounts',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterBaseDenominator',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 120, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
     KarmaVote:
      { projectGraph: [Circular],
        name: 'KarmaVote',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           vote:
            [ { name: 'vote',
                signature: 'vote(uint8)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revokeVote:
            [ { name: 'revokeVote',
                signature: 'revokeVote()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { BasePoll:
            { projectGraph: [Circular],
              name: 'BasePoll',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 getName: [Array],
                 getPollType: [Array],
                 getVoterBaseLogic: [Array],
                 getProtocolAddresses: [Array],
                 getStartTime: [Array],
                 getEndTime: [Array],
                 getProposals: [Array],
                 getVoteTally: [Array],
                 getVoteTallies: [Array],
                 getVoterCount: [Array],
                 getVoterCounts: [Array],
                 winningProposal: [Array],
                 hasPollStarted: [Array] },
              modifiers: { isValidVoter: [Object], isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies:
               { IERC1261: [Object],
                 IERC1261Metadata: [Object],
                 IPoll: [Object] },
              inheritsFrom: { IPoll: [Object] },
              structs: { Proposal: [Object], Voter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasePoll',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' } },
        inheritsFrom:
         { BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 0 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'KarmaVote',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'vote',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeVote',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'calculateVoteWeight',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 50, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/KarmaVote.sol' },
     KarmaVoteBound:
      { projectGraph: [Circular],
        name: 'KarmaVoteBound',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           vote:
            [ { name: 'vote',
                signature: 'vote(uint8)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revokeVote:
            [ { name: 'revokeVote',
                signature: 'revokeVote()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { checkTime:
            { name: 'checkTime',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'checkTime',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { BasePollBound:
            { projectGraph: [Circular],
              name: 'BasePollBound',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 isPollValid: [Array],
                 hasPollEnded: [Array] },
              modifiers:
               { checkTime: [Object],
                 isValidVoter: [Object],
                 isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies: { BasePoll: [Object] },
              inheritsFrom: { BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasePollBound',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' } },
        inheritsFrom:
         { BasePollBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePollBound',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' },
              parameters: [],
              level: 0 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 1 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'KarmaVoteBound',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'vote',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeVote',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'calculateVoteWeight',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 53, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/KarmaVoteBound.sol' },
     OnePersonOneVote:
      { projectGraph: [Circular],
        name: 'OnePersonOneVote',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           vote:
            [ { name: 'vote',
                signature: 'vote(uint8)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revokeVote:
            [ { name: 'revokeVote',
                signature: 'revokeVote()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           calculateVoteWeight:
            [ { name: 'calculateVoteWeight',
                signature: 'calculateVoteWeight(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BasePoll:
            { projectGraph: [Circular],
              name: 'BasePoll',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 getName: [Array],
                 getPollType: [Array],
                 getVoterBaseLogic: [Array],
                 getProtocolAddresses: [Array],
                 getStartTime: [Array],
                 getEndTime: [Array],
                 getProposals: [Array],
                 getVoteTally: [Array],
                 getVoteTallies: [Array],
                 getVoterCount: [Array],
                 getVoterCounts: [Array],
                 winningProposal: [Array],
                 hasPollStarted: [Array] },
              modifiers: { isValidVoter: [Object], isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies:
               { IERC1261: [Object],
                 IERC1261Metadata: [Object],
                 IPoll: [Object] },
              inheritsFrom: { IPoll: [Object] },
              structs: { Proposal: [Object], Voter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasePoll',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' } },
        inheritsFrom:
         { BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 0 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'OnePersonOneVote',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'vote',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeVote',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'calculateVoteWeight',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 50, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/OnePersonOneVote.sol' },
     OnePersonOneVoteBound:
      { projectGraph: [Circular],
        name: 'OnePersonOneVoteBound',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           vote:
            [ { name: 'vote',
                signature: 'vote(uint8)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revokeVote:
            [ { name: 'revokeVote',
                signature: 'revokeVote()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           calculateVoteWeight:
            [ { name: 'calculateVoteWeight',
                signature: 'calculateVoteWeight(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { checkTime:
            { name: 'checkTime',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'checkTime',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BasePollBound:
            { projectGraph: [Circular],
              name: 'BasePollBound',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 isPollValid: [Array],
                 hasPollEnded: [Array] },
              modifiers:
               { checkTime: [Object],
                 isValidVoter: [Object],
                 isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies: { BasePoll: [Object] },
              inheritsFrom: { BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasePollBound',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' } },
        inheritsFrom:
         { BasePollBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePollBound',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' },
              parameters: [],
              level: 0 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 1 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'OnePersonOneVoteBound',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'vote',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeVote',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'calculateVoteWeight',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 53, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/OnePersonOneVoteBound.sol' },
     TokenProportionalCapped:
      { projectGraph: [Circular],
        name: 'TokenProportionalCapped',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],address,uint,bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           vote:
            [ { name: 'vote',
                signature: 'vote(uint8)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revokeVote:
            [ { name: 'revokeVote',
                signature: 'revokeVote()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           calculateVoteWeight:
            [ { name: 'calculateVoteWeight',
                signature: 'calculateVoteWeight(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { token:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'FreezableToken',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           capPercent:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'capPercent',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           capWeight:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'capWeight',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BasePoll:
            { projectGraph: [Circular],
              name: 'BasePoll',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 getName: [Array],
                 getPollType: [Array],
                 getVoterBaseLogic: [Array],
                 getProtocolAddresses: [Array],
                 getStartTime: [Array],
                 getEndTime: [Array],
                 getProposals: [Array],
                 getVoteTally: [Array],
                 getVoteTallies: [Array],
                 getVoterCount: [Array],
                 getVoterCounts: [Array],
                 winningProposal: [Array],
                 hasPollStarted: [Array] },
              modifiers: { isValidVoter: [Object], isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies:
               { IERC1261: [Object],
                 IERC1261Metadata: [Object],
                 IPoll: [Object] },
              inheritsFrom: { IPoll: [Object] },
              structs: { Proposal: [Object], Voter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasePoll',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           FreezableToken:
            { projectGraph: [Circular],
              name: 'FreezableToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { isFrozen: [Array],
                 freezeAccount: [Array],
                 unFreezeAccount: [Array],
                 transfer: [Array],
                 transferFrom: [Array],
                 getTotalMintableSupply: [Array],
                 mintingFinished: [Array],
                 mint: [Array],
                 finishMinting: [Array] },
              modifiers:
               { onlyBeforeMintingFinished: [Object], canTransfer: [Object] },
              stateVariables:
               { _mintingFinished: [Object],
                 totalMintableSupply: [Object],
                 frozenAccounts: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object] },
              dependencies: { ERC20: [Object], IFreezableToken: [Object] },
              inheritsFrom:
               { ERC20: [Object], IERC20: [Object], IFreezableToken: [Object] },
              structs: { FreezablePolls: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'FreezableToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/FreezableToken.sol' } },
        inheritsFrom:
         { BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 0 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenProportionalCapped',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'vote',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeVote',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'calculateVoteWeight',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 68, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/TokenProportionalCapped.sol' },
     TokenProportionalCappedBound:
      { projectGraph: [Circular],
        name: 'TokenProportionalCappedBound',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],address,uint,bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           vote:
            [ { name: 'vote',
                signature: 'vote(uint8)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revokeVote:
            [ { name: 'revokeVote',
                signature: 'revokeVote()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           unFreezeTokens:
            [ { name: 'unFreezeTokens',
                signature: 'unFreezeTokens()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           calculateVoteWeight:
            [ { name: 'calculateVoteWeight',
                signature: 'calculateVoteWeight(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { checkTime:
            { name: 'checkTime',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'checkTime',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { token:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'FreezableToken',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           capPercent:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'capPercent',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           capWeight:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'capWeight',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BasePollBound:
            { projectGraph: [Circular],
              name: 'BasePollBound',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 isPollValid: [Array],
                 hasPollEnded: [Array] },
              modifiers:
               { checkTime: [Object],
                 isValidVoter: [Object],
                 isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies: { BasePoll: [Object] },
              inheritsFrom: { BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasePollBound',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           FreezableToken:
            { projectGraph: [Circular],
              name: 'FreezableToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { isFrozen: [Array],
                 freezeAccount: [Array],
                 unFreezeAccount: [Array],
                 transfer: [Array],
                 transferFrom: [Array],
                 getTotalMintableSupply: [Array],
                 mintingFinished: [Array],
                 mint: [Array],
                 finishMinting: [Array] },
              modifiers:
               { onlyBeforeMintingFinished: [Object], canTransfer: [Object] },
              stateVariables:
               { _mintingFinished: [Object],
                 totalMintableSupply: [Object],
                 frozenAccounts: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object] },
              dependencies: { ERC20: [Object], IFreezableToken: [Object] },
              inheritsFrom:
               { ERC20: [Object], IERC20: [Object], IFreezableToken: [Object] },
              structs: { FreezablePolls: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'FreezableToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/FreezableToken.sol' } },
        inheritsFrom:
         { BasePollBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePollBound',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' },
              parameters: [],
              level: 0 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 1 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenProportionalCappedBound',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'vote',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeVote',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'unFreezeTokens',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'calculateVoteWeight',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 72, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/TokenProportionalCappedBound.sol' },
     TokenProportionalUncapped:
      { projectGraph: [Circular],
        name: 'TokenProportionalUncapped',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],address,bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           vote:
            [ { name: 'vote',
                signature: 'vote(uint8)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revokeVote:
            [ { name: 'revokeVote',
                signature: 'revokeVote()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           calculateVoteWeight:
            [ { name: 'calculateVoteWeight',
                signature: 'calculateVoteWeight(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { token:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'FreezableToken',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BasePoll:
            { projectGraph: [Circular],
              name: 'BasePoll',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 getName: [Array],
                 getPollType: [Array],
                 getVoterBaseLogic: [Array],
                 getProtocolAddresses: [Array],
                 getStartTime: [Array],
                 getEndTime: [Array],
                 getProposals: [Array],
                 getVoteTally: [Array],
                 getVoteTallies: [Array],
                 getVoterCount: [Array],
                 getVoterCounts: [Array],
                 winningProposal: [Array],
                 hasPollStarted: [Array] },
              modifiers: { isValidVoter: [Object], isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies:
               { IERC1261: [Object],
                 IERC1261Metadata: [Object],
                 IPoll: [Object] },
              inheritsFrom: { IPoll: [Object] },
              structs: { Proposal: [Object], Voter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasePoll',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
           FreezableToken:
            { projectGraph: [Circular],
              name: 'FreezableToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { isFrozen: [Array],
                 freezeAccount: [Array],
                 unFreezeAccount: [Array],
                 transfer: [Array],
                 transferFrom: [Array],
                 getTotalMintableSupply: [Array],
                 mintingFinished: [Array],
                 mint: [Array],
                 finishMinting: [Array] },
              modifiers:
               { onlyBeforeMintingFinished: [Object], canTransfer: [Object] },
              stateVariables:
               { _mintingFinished: [Object],
                 totalMintableSupply: [Object],
                 frozenAccounts: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object] },
              dependencies: { ERC20: [Object], IFreezableToken: [Object] },
              inheritsFrom:
               { ERC20: [Object], IERC20: [Object], IFreezableToken: [Object] },
              structs: { FreezablePolls: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'FreezableToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/FreezableToken.sol' } },
        inheritsFrom:
         { BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 0 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenProportionalUncapped',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'vote',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeVote',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'calculateVoteWeight',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 60, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/TokenProportionalUncapped.sol' },
     TokenProportionalUncappedBound:
      { projectGraph: [Circular],
        name: 'TokenProportionalUncappedBound',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],address,bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           vote:
            [ { name: 'vote',
                signature: 'vote(uint8)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revokeVote:
            [ { name: 'revokeVote',
                signature: 'revokeVote()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           unFreezeTokens:
            [ { name: 'unFreezeTokens',
                signature: 'unFreezeTokens()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           calculateVoteWeight:
            [ { name: 'calculateVoteWeight',
                signature: 'calculateVoteWeight(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { checkTime:
            { name: 'checkTime',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'checkTime',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { token:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'FreezableToken',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BasePollBound:
            { projectGraph: [Circular],
              name: 'BasePollBound',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 isPollValid: [Array],
                 hasPollEnded: [Array] },
              modifiers:
               { checkTime: [Object],
                 isValidVoter: [Object],
                 isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies: { BasePoll: [Object] },
              inheritsFrom: { BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasePollBound',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' },
           FreezableToken:
            { projectGraph: [Circular],
              name: 'FreezableToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { isFrozen: [Array],
                 freezeAccount: [Array],
                 unFreezeAccount: [Array],
                 transfer: [Array],
                 transferFrom: [Array],
                 getTotalMintableSupply: [Array],
                 mintingFinished: [Array],
                 mint: [Array],
                 finishMinting: [Array] },
              modifiers:
               { onlyBeforeMintingFinished: [Object], canTransfer: [Object] },
              stateVariables:
               { _mintingFinished: [Object],
                 totalMintableSupply: [Object],
                 frozenAccounts: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object] },
              dependencies: { ERC20: [Object], IFreezableToken: [Object] },
              inheritsFrom:
               { ERC20: [Object], IERC20: [Object], IFreezableToken: [Object] },
              structs: { FreezablePolls: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'FreezableToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/FreezableToken.sol' } },
        inheritsFrom:
         { BasePollBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePollBound',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' },
              parameters: [],
              level: 0 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 1 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenProportionalUncappedBound',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'vote',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeVote',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'unFreezeTokens',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'calculateVoteWeight',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 63, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/TokenProportionalUncappedBound.sol' },
     KarmaProtocol:
      { projectGraph: [Circular],
        name: 'KarmaProtocol',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(bytes32,bytes32)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getCurrentKarma:
            [ { name: 'getCurrentKarma',
                signature: 'getCurrentKarma(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getTotalKarma:
            [ { name: 'getTotalKarma',
                signature: 'getTotalKarma()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           upvote:
            [ { name: 'upvote',
                signature: 'upvote(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           downvote:
            [ { name: 'downvote',
                signature: 'downvote(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isCurrentHolder:
            { name: 'isCurrentHolder',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isCurrentHolder',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { karma:
            { functionsWrite: {},
              contract: [Circular],
              name: 'karma',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>KarmaProtocol.KarmaData)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalKarmaPresent:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalKarmaPresent',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           orgName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'orgName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           orgSymbol:
            { functionsWrite: {},
              contract: [Circular],
              name: 'orgSymbol',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           attributeValueCollection:
            { functionsWrite: {},
              contract: [Circular],
              name: 'attributeValueCollection',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint=>bytes32[])})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           attributeNames:
            { functionsWrite: {},
              contract: [Circular],
              name: 'attributeNames',
              isArray: true,
              initialValue: [],
              type: 'bytes32[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           currentHolders:
            { functionsWrite: {},
              contract: [Circular],
              name: 'currentHolders',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>MembershipVerificationToken.MemberData)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pendingRequests:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pendingRequests',
              isArray: false,
              initialValue: null,
              type:
               'mapping(address=>MembershipVerificationToken.PendingRequest)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allHolders:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allHolders',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           currentMemberCount:
            { functionsWrite: {},
              contract: [Circular],
              name: 'currentMemberCount',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC1261MetaData:
            { projectGraph: [Circular],
              name: 'ERC1261MetaData',
              kind: 'contract',
              isAbstract: false,
              functions: { constructor: [Array], name: [Array], symbol: [Array] },
              modifiers: { isCurrentHolder: [Object], onlyOwner: [Object] },
              stateVariables:
               { orgName: [Object],
                 orgSymbol: [Object],
                 attributeValueCollection: [Object],
                 attributeNames: [Object],
                 currentHolders: [Object],
                 pendingRequests: [Object],
                 allHolders: [Object],
                 currentMemberCount: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _owner: [Object] },
              dependencies:
               { MembershipVerificationToken: [Object],
                 IERC1261: [Object],
                 IERC1261Metadata: [Object] },
              inheritsFrom:
               { MembershipVerificationToken: [Object],
                 IERC1261: [Object],
                 Ownable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC1261Metadata: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC1261MetaData',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/ERC1261MetaData.sol' } },
        inheritsFrom:
         { ERC1261MetaData:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC1261MetaData',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/ERC1261MetaData.sol' },
              parameters: [],
              level: 0 },
           MembershipVerificationToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'MembershipVerificationToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/MembershipVerificationToken.sol' },
              parameters: [],
              level: 1 },
           IERC1261:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC1261',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              parameters: [],
              level: 2 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 2 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 2 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 3 },
           IERC1261Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC1261Metadata',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              parameters: [],
              level: 1 } },
        structs:
         { KarmaData:
            { name: 'KarmaData',
              contract: [Circular],
              parameters: [ [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'KarmaProtocol',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StructDefinition',
                name: 'KarmaData',
                members: [Array],
                loc: [Object],
                parentName: 'KarmaProtocol' },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getCurrentKarma',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getTotalKarma',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'upvote',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'downvote',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 46, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/protocol/KarmaProtocol.sol' },
     Protocol:
      { projectGraph: [Circular],
        name: 'Protocol',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(bytes32,bytes32)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isCurrentHolder:
            { name: 'isCurrentHolder',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isCurrentHolder',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { orgName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'orgName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           orgSymbol:
            { functionsWrite: {},
              contract: [Circular],
              name: 'orgSymbol',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           attributeValueCollection:
            { functionsWrite: {},
              contract: [Circular],
              name: 'attributeValueCollection',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint=>bytes32[])})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           attributeNames:
            { functionsWrite: {},
              contract: [Circular],
              name: 'attributeNames',
              isArray: true,
              initialValue: [],
              type: 'bytes32[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           currentHolders:
            { functionsWrite: {},
              contract: [Circular],
              name: 'currentHolders',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>MembershipVerificationToken.MemberData)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pendingRequests:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pendingRequests',
              isArray: false,
              initialValue: null,
              type:
               'mapping(address=>MembershipVerificationToken.PendingRequest)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allHolders:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allHolders',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           currentMemberCount:
            { functionsWrite: {},
              contract: [Circular],
              name: 'currentMemberCount',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC1261MetaData:
            { projectGraph: [Circular],
              name: 'ERC1261MetaData',
              kind: 'contract',
              isAbstract: false,
              functions: { constructor: [Array], name: [Array], symbol: [Array] },
              modifiers: { isCurrentHolder: [Object], onlyOwner: [Object] },
              stateVariables:
               { orgName: [Object],
                 orgSymbol: [Object],
                 attributeValueCollection: [Object],
                 attributeNames: [Object],
                 currentHolders: [Object],
                 pendingRequests: [Object],
                 allHolders: [Object],
                 currentMemberCount: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _owner: [Object] },
              dependencies:
               { MembershipVerificationToken: [Object],
                 IERC1261: [Object],
                 IERC1261Metadata: [Object] },
              inheritsFrom:
               { MembershipVerificationToken: [Object],
                 IERC1261: [Object],
                 Ownable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC1261Metadata: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC1261MetaData',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/ERC1261MetaData.sol' } },
        inheritsFrom:
         { ERC1261MetaData:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC1261MetaData',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/ERC1261MetaData.sol' },
              parameters: [],
              level: 0 },
           MembershipVerificationToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'MembershipVerificationToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/MembershipVerificationToken.sol' },
              parameters: [],
              level: 1 },
           IERC1261:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC1261',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              parameters: [],
              level: 2 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 2 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 2 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 3 },
           IERC1261Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC1261Metadata',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Protocol',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/protocol/Protocol.sol' },
     DelegatedVoteBoundTest:
      { projectGraph: [Circular],
        name: 'DelegatedVoteBoundTest',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           canVote:
            [ { name: 'canVote',
                signature: 'canVote(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoterBaseDenominator:
            [ { name: 'getVoterBaseDenominator',
                signature: 'getVoterBaseDenominator()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { checkTime:
            { name: 'checkTime',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'checkTime',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: true,
              contractAddressOf: [ [Object] ] },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { DelegatedVoteBound:
            { projectGraph: [Circular],
              name: 'DelegatedVoteBound',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 vote: [Array],
                 revokeVote: [Array],
                 delegate: [Array],
                 calculateVoteWeight: [Array] },
              modifiers:
               { checkTime: [Object],
                 isValidVoter: [Object],
                 isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies: { BasePollBound: [Object] },
              inheritsFrom:
               { BasePollBound: [Object], BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'DelegatedVoteBound',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/DelegatedVoteBound.sol' },
           IERC1261:
            { projectGraph: [Circular],
              name: 'IERC1261',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           IERC1261Metadata:
            { projectGraph: [Circular],
              name: 'IERC1261Metadata',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261Metadata',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' } },
        inheritsFrom:
         { DelegatedVoteBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'DelegatedVoteBound',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/DelegatedVoteBound.sol' },
              parameters: [],
              level: 0 },
           BasePollBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePollBound',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' },
              parameters: [],
              level: 1 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 2 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 3 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'DelegatedVoteBoundTest',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canVote',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterBaseDenominator',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 42, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/testContracts/DelegatedVoteBoundTest.sol' },
     DelegatedVoteTest:
      { projectGraph: [Circular],
        name: 'DelegatedVoteTest',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           canVote:
            [ { name: 'canVote',
                signature: 'canVote(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoterBaseDenominator:
            [ { name: 'getVoterBaseDenominator',
                signature: 'getVoterBaseDenominator()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: true,
              contractAddressOf: [ [Object] ] },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { DelegatedVote:
            { projectGraph: [Circular],
              name: 'DelegatedVote',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 vote: [Array],
                 revokeVote: [Array],
                 delegate: [Array],
                 calculateVoteWeight: [Array] },
              modifiers: { isValidVoter: [Object], isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies: { BasePoll: [Object] },
              inheritsFrom: { BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'DelegatedVote',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/DelegatedVote.sol' },
           IERC1261:
            { projectGraph: [Circular],
              name: 'IERC1261',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           IERC1261Metadata:
            { projectGraph: [Circular],
              name: 'IERC1261Metadata',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261Metadata',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' } },
        inheritsFrom:
         { DelegatedVote:
            { contract:
               { projectGraph: [Circular],
                 name: 'DelegatedVote',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/DelegatedVote.sol' },
              parameters: [],
              level: 0 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 1 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'DelegatedVoteTest',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canVote',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterBaseDenominator',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 42, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/testContracts/DelegatedVoteTest.sol' },
     KarmaVoteBoundTest:
      { projectGraph: [Circular],
        name: 'KarmaVoteBoundTest',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           canVote:
            [ { name: 'canVote',
                signature: 'canVote(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           calculateVoteWeight:
            [ { name: 'calculateVoteWeight',
                signature: 'calculateVoteWeight(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoterBaseDenominator:
            [ { name: 'getVoterBaseDenominator',
                signature: 'getVoterBaseDenominator()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { checkTime:
            { name: 'checkTime',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'checkTime',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: true,
              contractAddressOf: [ [Object] ] },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { KarmaVoteBound:
            { projectGraph: [Circular],
              name: 'KarmaVoteBound',
              kind: 'contract',
              isAbstract: true,
              functions: { constructor: [Array], vote: [Array], revokeVote: [Array] },
              modifiers:
               { checkTime: [Object],
                 isValidVoter: [Object],
                 isPollStarted: [Object] },
              stateVariables: {},
              dependencies: { BasePollBound: [Object] },
              inheritsFrom:
               { BasePollBound: [Object], BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'KarmaVoteBound',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/KarmaVoteBound.sol' },
           IERC1261:
            { projectGraph: [Circular],
              name: 'IERC1261',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           IERC1261Metadata:
            { projectGraph: [Circular],
              name: 'IERC1261Metadata',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261Metadata',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           KarmaProtocol:
            { projectGraph: [Circular],
              name: 'KarmaProtocol',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 getCurrentKarma: [Array],
                 getTotalKarma: [Array],
                 upvote: [Array],
                 downvote: [Array] },
              modifiers: { isCurrentHolder: [Object], onlyOwner: [Object] },
              stateVariables:
               { karma: [Object],
                 totalKarmaPresent: [Object],
                 orgName: [Object],
                 orgSymbol: [Object],
                 attributeValueCollection: [Object],
                 attributeNames: [Object],
                 currentHolders: [Object],
                 pendingRequests: [Object],
                 allHolders: [Object],
                 currentMemberCount: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _owner: [Object] },
              dependencies: { ERC1261MetaData: [Object] },
              inheritsFrom:
               { ERC1261MetaData: [Object],
                 MembershipVerificationToken: [Object],
                 IERC1261: [Object],
                 Ownable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC1261Metadata: [Object] },
              structs: { KarmaData: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'KarmaProtocol',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/protocol/KarmaProtocol.sol' } },
        inheritsFrom:
         { KarmaVoteBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'KarmaVoteBound',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/KarmaVoteBound.sol' },
              parameters: [],
              level: 0 },
           BasePollBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePollBound',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' },
              parameters: [],
              level: 1 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 2 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 3 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'KarmaVoteBoundTest',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canVote',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'calculateVoteWeight',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterBaseDenominator',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 44, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/testContracts/KarmaVoteBoundTest.sol' },
     KarmaVoteTest:
      { projectGraph: [Circular],
        name: 'KarmaVoteTest',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           canVote:
            [ { name: 'canVote',
                signature: 'canVote(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           calculateVoteWeight:
            [ { name: 'calculateVoteWeight',
                signature: 'calculateVoteWeight(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoterBaseDenominator:
            [ { name: 'getVoterBaseDenominator',
                signature: 'getVoterBaseDenominator()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: true,
              contractAddressOf: [ [Object] ] },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { KarmaVote:
            { projectGraph: [Circular],
              name: 'KarmaVote',
              kind: 'contract',
              isAbstract: true,
              functions: { constructor: [Array], vote: [Array], revokeVote: [Array] },
              modifiers: { isValidVoter: [Object], isPollStarted: [Object] },
              stateVariables: {},
              dependencies: { BasePoll: [Object] },
              inheritsFrom: { BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'KarmaVote',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/KarmaVote.sol' },
           IERC1261:
            { projectGraph: [Circular],
              name: 'IERC1261',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           IERC1261Metadata:
            { projectGraph: [Circular],
              name: 'IERC1261Metadata',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261Metadata',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           KarmaProtocol:
            { projectGraph: [Circular],
              name: 'KarmaProtocol',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 getCurrentKarma: [Array],
                 getTotalKarma: [Array],
                 upvote: [Array],
                 downvote: [Array] },
              modifiers: { isCurrentHolder: [Object], onlyOwner: [Object] },
              stateVariables:
               { karma: [Object],
                 totalKarmaPresent: [Object],
                 orgName: [Object],
                 orgSymbol: [Object],
                 attributeValueCollection: [Object],
                 attributeNames: [Object],
                 currentHolders: [Object],
                 pendingRequests: [Object],
                 allHolders: [Object],
                 currentMemberCount: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _owner: [Object] },
              dependencies: { ERC1261MetaData: [Object] },
              inheritsFrom:
               { ERC1261MetaData: [Object],
                 MembershipVerificationToken: [Object],
                 IERC1261: [Object],
                 Ownable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC1261Metadata: [Object] },
              structs: { KarmaData: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'KarmaProtocol',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/protocol/KarmaProtocol.sol' } },
        inheritsFrom:
         { KarmaVote:
            { contract:
               { projectGraph: [Circular],
                 name: 'KarmaVote',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/KarmaVote.sol' },
              parameters: [],
              level: 0 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 1 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'KarmaVoteTest',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canVote',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'calculateVoteWeight',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterBaseDenominator',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 44, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/testContracts/KarmaVoteTest.sol' },
     OnePersonOneVoteBoundTest:
      { projectGraph: [Circular],
        name: 'OnePersonOneVoteBoundTest',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           canVote:
            [ { name: 'canVote',
                signature: 'canVote(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoterBaseDenominator:
            [ { name: 'getVoterBaseDenominator',
                signature: 'getVoterBaseDenominator()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { checkTime:
            { name: 'checkTime',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'checkTime',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: true,
              contractAddressOf: [ [Object] ] },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { OnePersonOneVoteBound:
            { projectGraph: [Circular],
              name: 'OnePersonOneVoteBound',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 vote: [Array],
                 revokeVote: [Array],
                 calculateVoteWeight: [Array] },
              modifiers:
               { checkTime: [Object],
                 isValidVoter: [Object],
                 isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies: { BasePollBound: [Object] },
              inheritsFrom:
               { BasePollBound: [Object], BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OnePersonOneVoteBound',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/OnePersonOneVoteBound.sol' },
           IERC1261:
            { projectGraph: [Circular],
              name: 'IERC1261',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           IERC1261Metadata:
            { projectGraph: [Circular],
              name: 'IERC1261Metadata',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261Metadata',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' } },
        inheritsFrom:
         { OnePersonOneVoteBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'OnePersonOneVoteBound',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/OnePersonOneVoteBound.sol' },
              parameters: [],
              level: 0 },
           BasePollBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePollBound',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' },
              parameters: [],
              level: 1 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 2 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 3 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'OnePersonOneVoteBoundTest',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canVote',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterBaseDenominator',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 42, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/testContracts/OnePersonOneVoteBoundTest.sol' },
     OnePersonOneVoteTest:
      { projectGraph: [Circular],
        name: 'OnePersonOneVoteTest',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           canVote:
            [ { name: 'canVote',
                signature: 'canVote(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoterBaseDenominator:
            [ { name: 'getVoterBaseDenominator',
                signature: 'getVoterBaseDenominator()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyAuthorized:
            { name: 'onlyAuthorized',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyAuthorized',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { authorized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'authorized',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>bool)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: true,
              contractAddressOf: [ [Object] ] },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { OnePersonOneVote:
            { projectGraph: [Circular],
              name: 'OnePersonOneVote',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 vote: [Array],
                 revokeVote: [Array],
                 calculateVoteWeight: [Array] },
              modifiers: { isValidVoter: [Object], isPollStarted: [Object] },
              stateVariables:
               { pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies: { BasePoll: [Object] },
              inheritsFrom: { BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'OnePersonOneVote',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/OnePersonOneVote.sol' },
           IERC1261:
            { projectGraph: [Circular],
              name: 'IERC1261',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           IERC1261Metadata:
            { projectGraph: [Circular],
              name: 'IERC1261Metadata',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261Metadata',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           Authorizable:
            { projectGraph: [Circular],
              name: 'Authorizable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { isAuthorized: [Array],
                 addAuthorized: [Array],
                 removeAuthorized: [Array],
                 selfRemoveAuthorized: [Array],
                 transferAuthorization: [Array] },
              modifiers: { onlyAuthorized: [Object], onlyOwner: [Object] },
              stateVariables: { authorized: [Object], _owner: [Object] },
              dependencies: { Ownable: [Object] },
              inheritsFrom: { Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Authorizable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/ownership/Authorizable.sol' } },
        inheritsFrom:
         { OnePersonOneVote:
            { contract:
               { projectGraph: [Circular],
                 name: 'OnePersonOneVote',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/OnePersonOneVote.sol' },
              parameters: [],
              level: 0 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 1 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 2 },
           Authorizable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Authorizable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/ownership/Authorizable.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'OnePersonOneVoteTest',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canVote',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterBaseDenominator',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/testContracts/OnePersonOneVoteTest.sol' },
     TokenProportionalCappedBoundTest:
      { projectGraph: [Circular],
        name: 'TokenProportionalCappedBoundTest',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],address,uint,bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           canVote:
            [ { name: 'canVote',
                signature: 'canVote(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoterBaseDenominator:
            [ { name: 'getVoterBaseDenominator',
                signature: 'getVoterBaseDenominator()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { checkTime:
            { name: 'checkTime',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'checkTime',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: true,
              contractAddressOf: [ [Object] ] },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           token:
            { functionsWrite: {},
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'FreezableToken',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           capPercent:
            { functionsWrite: {},
              contract: [Circular],
              name: 'capPercent',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           capWeight:
            { functionsWrite: {},
              contract: [Circular],
              name: 'capWeight',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { TokenProportionalCappedBound:
            { projectGraph: [Circular],
              name: 'TokenProportionalCappedBound',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 vote: [Array],
                 revokeVote: [Array],
                 unFreezeTokens: [Array],
                 calculateVoteWeight: [Array] },
              modifiers:
               { checkTime: [Object],
                 isValidVoter: [Object],
                 isPollStarted: [Object] },
              stateVariables:
               { token: [Object],
                 capPercent: [Object],
                 capWeight: [Object],
                 pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies:
               { BasePollBound: [Object],
                 SafeMath: [Object],
                 FreezableToken: [Object] },
              inheritsFrom:
               { BasePollBound: [Object], BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TokenProportionalCappedBound',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/TokenProportionalCappedBound.sol' },
           IERC1261:
            { projectGraph: [Circular],
              name: 'IERC1261',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           IERC1261Metadata:
            { projectGraph: [Circular],
              name: 'IERC1261Metadata',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261Metadata',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' } },
        inheritsFrom:
         { TokenProportionalCappedBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'TokenProportionalCappedBound',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/TokenProportionalCappedBound.sol' },
              parameters: [],
              level: 0 },
           BasePollBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePollBound',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' },
              parameters: [],
              level: 1 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 2 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 3 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenProportionalCappedBoundTest',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canVote',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterBaseDenominator',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 52, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/testContracts/TokenProportionalCappedBoundTest.sol' },
     TokenProportionalCappedTest:
      { projectGraph: [Circular],
        name: 'TokenProportionalCappedTest',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],address,uint,bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           canVote:
            [ { name: 'canVote',
                signature: 'canVote(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoterBaseDenominator:
            [ { name: 'getVoterBaseDenominator',
                signature: 'getVoterBaseDenominator()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: true,
              contractAddressOf: [ [Object] ] },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           token:
            { functionsWrite: {},
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'FreezableToken',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           capPercent:
            { functionsWrite: {},
              contract: [Circular],
              name: 'capPercent',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           capWeight:
            { functionsWrite: {},
              contract: [Circular],
              name: 'capWeight',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { TokenProportionalCapped:
            { projectGraph: [Circular],
              name: 'TokenProportionalCapped',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 vote: [Array],
                 revokeVote: [Array],
                 calculateVoteWeight: [Array] },
              modifiers: { isValidVoter: [Object], isPollStarted: [Object] },
              stateVariables:
               { token: [Object],
                 capPercent: [Object],
                 capWeight: [Object],
                 pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies:
               { BasePoll: [Object],
                 SafeMath: [Object],
                 FreezableToken: [Object] },
              inheritsFrom: { BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TokenProportionalCapped',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/TokenProportionalCapped.sol' },
           IERC1261:
            { projectGraph: [Circular],
              name: 'IERC1261',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           IERC1261Metadata:
            { projectGraph: [Circular],
              name: 'IERC1261Metadata',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261Metadata',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' } },
        inheritsFrom:
         { TokenProportionalCapped:
            { contract:
               { projectGraph: [Circular],
                 name: 'TokenProportionalCapped',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/TokenProportionalCapped.sol' },
              parameters: [],
              level: 0 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 1 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenProportionalCappedTest',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canVote',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterBaseDenominator',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 52, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/testContracts/TokenProportionalCappedTest.sol' },
     TokenProportionalUncappedBoundTest:
      { projectGraph: [Circular],
        name: 'TokenProportionalUncappedBoundTest',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],address,bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           canVote:
            [ { name: 'canVote',
                signature: 'canVote(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoterBaseDenominator:
            [ { name: 'getVoterBaseDenominator',
                signature: 'getVoterBaseDenominator()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { checkTime:
            { name: 'checkTime',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'checkTime',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: true,
              contractAddressOf: [ [Object] ] },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           token:
            { functionsWrite: {},
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'FreezableToken',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { TokenProportionalUncappedBound:
            { projectGraph: [Circular],
              name: 'TokenProportionalUncappedBound',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 vote: [Array],
                 revokeVote: [Array],
                 unFreezeTokens: [Array],
                 calculateVoteWeight: [Array] },
              modifiers:
               { checkTime: [Object],
                 isValidVoter: [Object],
                 isPollStarted: [Object] },
              stateVariables:
               { token: [Object],
                 pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies: { BasePollBound: [Object], FreezableToken: [Object] },
              inheritsFrom:
               { BasePollBound: [Object], BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TokenProportionalUncappedBound',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/TokenProportionalUncappedBound.sol' },
           IERC1261:
            { projectGraph: [Circular],
              name: 'IERC1261',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           IERC1261Metadata:
            { projectGraph: [Circular],
              name: 'IERC1261Metadata',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261Metadata',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' } },
        inheritsFrom:
         { TokenProportionalUncappedBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'TokenProportionalUncappedBound',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/TokenProportionalUncappedBound.sol' },
              parameters: [],
              level: 0 },
           BasePollBound:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePollBound',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePollBound.sol' },
              parameters: [],
              level: 1 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 2 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 3 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenProportionalUncappedBoundTest',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canVote',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterBaseDenominator',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 50, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/testContracts/TokenProportionalUncappedBoundTest.sol' },
     TokenProportionalUncappedTest:
      { projectGraph: [Circular],
        name: 'TokenProportionalUncappedTest',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature:
                 'constructor(address[],bytes32[],address,bytes32,bytes32,bytes32,uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           canVote:
            [ { name: 'canVote',
                signature: 'canVote(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getVoterBaseDenominator:
            [ { name: 'getVoterBaseDenominator',
                signature: 'getVoterBaseDenominator()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isValidVoter:
            { name: 'isValidVoter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isValidVoter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           isPollStarted:
            { name: 'isPollStarted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isPollStarted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pollName:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pollType:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pollType',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           voterBaseLogic:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voterBaseLogic',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           startTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'startTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           endTime:
            { functionsWrite: {},
              contract: [Circular],
              name: 'endTime',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           proposals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'proposals',
              isArray: true,
              initialValue: [],
              type: 'BasePoll.Proposal[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           protocolAddresses:
            { functionsWrite: {},
              contract: [Circular],
              name: 'protocolAddresses',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: true,
              contractAddressOf: [ [Object] ] },
           voters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'voters',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>BasePoll.Voter)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           token:
            { functionsWrite: {},
              contract: [Circular],
              name: 'token',
              isArray: false,
              initialValue: null,
              type: 'FreezableToken',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { TokenProportionalUncapped:
            { projectGraph: [Circular],
              name: 'TokenProportionalUncapped',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 vote: [Array],
                 revokeVote: [Array],
                 calculateVoteWeight: [Array] },
              modifiers: { isValidVoter: [Object], isPollStarted: [Object] },
              stateVariables:
               { token: [Object],
                 pollName: [Object],
                 pollType: [Object],
                 voterBaseLogic: [Object],
                 startTime: [Object],
                 endTime: [Object],
                 proposals: [Object],
                 protocolAddresses: [Object],
                 voters: [Object] },
              dependencies: { BasePoll: [Object], FreezableToken: [Object] },
              inheritsFrom: { BasePoll: [Object], IPoll: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TokenProportionalUncapped',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/TokenProportionalUncapped.sol' },
           IERC1261:
            { projectGraph: [Circular],
              name: 'IERC1261',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           IERC1261Metadata:
            { projectGraph: [Circular],
              name: 'IERC1261Metadata',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261Metadata',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' } },
        inheritsFrom:
         { TokenProportionalUncapped:
            { contract:
               { projectGraph: [Circular],
                 name: 'TokenProportionalUncapped',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/TokenProportionalUncapped.sol' },
              parameters: [],
              level: 0 },
           BasePoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasePoll',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
              parameters: [],
              level: 1 },
           IPoll:
            { contract:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenProportionalUncappedTest',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canVote',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVoterBaseDenominator',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 41, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/testContracts/TokenProportionalUncappedTest.sol' },
     FreezableToken:
      { projectGraph: [Circular],
        name: 'FreezableToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { isFrozen:
            [ { name: 'isFrozen',
                signature: 'isFrozen(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           freezeAccount:
            [ { name: 'freezeAccount',
                signature: 'freezeAccount(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           unFreezeAccount:
            [ { name: 'unFreezeAccount',
                signature: 'unFreezeAccount(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getTotalMintableSupply:
            [ { name: 'getTotalMintableSupply',
                signature: 'getTotalMintableSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           mintingFinished:
            [ { name: 'mintingFinished',
                signature: 'mintingFinished()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           finishMinting:
            [ { name: 'finishMinting',
                signature: 'finishMinting()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyBeforeMintingFinished:
            { name: 'onlyBeforeMintingFinished',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyBeforeMintingFinished',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           canTransfer:
            { name: 'canTransfer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'canTransfer',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] } },
        stateVariables:
         { _mintingFinished:
            { functionsWrite: { finishMinting: [Array] },
              contract: [Circular],
              name: '_mintingFinished',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalMintableSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalMintableSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           frozenAccounts:
            { functionsWrite: {},
              contract: [Circular],
              name: 'frozenAccounts',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>FreezableToken.FreezablePolls)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 allowance: [Array],
                 transfer: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _burnFrom: [Array] },
              modifiers: {},
              stateVariables:
               { _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object] },
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
           IFreezableToken:
            { projectGraph: [Circular],
              name: 'IFreezableToken',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IFreezableToken',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/IFreezableToken.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 },
           IFreezableToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'IFreezableToken',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/IFreezableToken.sol' },
              parameters: [],
              level: 0 } },
        structs:
         { FreezablePolls:
            { name: 'FreezablePolls',
              contract: [Circular],
              parameters: [ [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'FreezableToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StructDefinition',
                name: 'FreezablePolls',
                members: [Array],
                loc: [Object],
                parentName: 'FreezableToken' },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'MintingFinish',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'FrozenFunds',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyBeforeMintingFinished',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'canTransfer',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isFrozen',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'freezeAccount',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'unFreezeAccount',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getTotalMintableSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mintingFinished',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finishMinting',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 80, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/FreezableToken.sol' },
     IFreezableToken:
      { projectGraph: [Circular],
        name: 'IFreezableToken',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IFreezableToken',
           baseContracts: [],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'FrozenFunds',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'freezeAccount',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'unFreezeAccount',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isFrozen',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/IFreezableToken.sol' },
     ERC1261MetaData:
      { projectGraph: [Circular],
        name: 'ERC1261MetaData',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(bytes32,bytes32)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           name:
            [ { name: 'name',
                signature: 'name()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           symbol:
            [ { name: 'symbol',
                signature: 'symbol()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isCurrentHolder:
            { name: 'isCurrentHolder',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isCurrentHolder',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { orgName:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'orgName',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           orgSymbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'orgSymbol',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           attributeValueCollection:
            { functionsWrite: {},
              contract: [Circular],
              name: 'attributeValueCollection',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint=>bytes32[])})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           attributeNames:
            { functionsWrite: {},
              contract: [Circular],
              name: 'attributeNames',
              isArray: true,
              initialValue: [],
              type: 'bytes32[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           currentHolders:
            { functionsWrite: {},
              contract: [Circular],
              name: 'currentHolders',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>MembershipVerificationToken.MemberData)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pendingRequests:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pendingRequests',
              isArray: false,
              initialValue: null,
              type:
               'mapping(address=>MembershipVerificationToken.PendingRequest)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allHolders:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allHolders',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           currentMemberCount:
            { functionsWrite: {},
              contract: [Circular],
              name: 'currentMemberCount',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { MembershipVerificationToken:
            { projectGraph: [Circular],
              name: 'MembershipVerificationToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 requestMembership: [Array],
                 forfeitMembership: [Array],
                 approveRequest: [Array],
                 discardRequest: [Array],
                 assignTo: [Array],
                 revokeFrom: [Array],
                 addAttributeSet: [Array],
                 modifyAttributeByIndex: [Array],
                 getAllMembers: [Array],
                 getCurrentMemberCount: [Array],
                 getAttributeNames: [Array],
                 getAttributes: [Array],
                 getAttributeExhaustiveCollection: [Array],
                 getAttributeByIndex: [Array],
                 isCurrentMember: [Array],
                 _assign: [Array],
                 _revoke: [Array] },
              modifiers: { isCurrentHolder: [Object], onlyOwner: [Object] },
              stateVariables:
               { attributeValueCollection: [Object],
                 attributeNames: [Object],
                 currentHolders: [Object],
                 pendingRequests: [Object],
                 allHolders: [Object],
                 currentMemberCount: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _owner: [Object] },
              dependencies:
               { Ownable: [Object],
                 ERC165: [Object],
                 IERC1261: [Object],
                 IERC1261Metadata: [Object] },
              inheritsFrom:
               { IERC1261: [Object],
                 Ownable: [Object],
                 ERC165: [Object],
                 IERC165: [Object] },
              structs: { MemberData: [Object], PendingRequest: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MembershipVerificationToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/MembershipVerificationToken.sol' },
           IERC1261:
            { projectGraph: [Circular],
              name: 'IERC1261',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           IERC1261Metadata:
            { projectGraph: [Circular],
              name: 'IERC1261Metadata',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261Metadata',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' } },
        inheritsFrom:
         { MembershipVerificationToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'MembershipVerificationToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/MembershipVerificationToken.sol' },
              parameters: [],
              level: 0 },
           IERC1261:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC1261',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              parameters: [],
              level: 1 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC1261Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC1261Metadata',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC1261MetaData',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 24, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/ERC1261MetaData.sol' },
     MembershipVerificationToken:
      { projectGraph: [Circular],
        name: 'MembershipVerificationToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           requestMembership:
            [ { name: 'requestMembership',
                signature: 'requestMembership(uint[])',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           forfeitMembership:
            [ { name: 'forfeitMembership',
                signature: 'forfeitMembership()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           approveRequest:
            [ { name: 'approveRequest',
                signature: 'approveRequest(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           discardRequest:
            [ { name: 'discardRequest',
                signature: 'discardRequest(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           assignTo:
            [ { name: 'assignTo',
                signature: 'assignTo(address,uint[])',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           revokeFrom:
            [ { name: 'revokeFrom',
                signature: 'revokeFrom(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           addAttributeSet:
            [ { name: 'addAttributeSet',
                signature: 'addAttributeSet(bytes32,bytes32[])',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           modifyAttributeByIndex:
            [ { name: 'modifyAttributeByIndex',
                signature: 'modifyAttributeByIndex(address,uint,uint)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getAllMembers:
            [ { name: 'getAllMembers',
                signature: 'getAllMembers()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getCurrentMemberCount:
            [ { name: 'getCurrentMemberCount',
                signature: 'getCurrentMemberCount()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getAttributeNames:
            [ { name: 'getAttributeNames',
                signature: 'getAttributeNames()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getAttributes:
            [ { name: 'getAttributes',
                signature: 'getAttributes(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getAttributeExhaustiveCollection:
            [ { name: 'getAttributeExhaustiveCollection',
                signature: 'getAttributeExhaustiveCollection(uint)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getAttributeByIndex:
            [ { name: 'getAttributeByIndex',
                signature: 'getAttributeByIndex(address,uint)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isCurrentMember:
            [ { name: 'isCurrentMember',
                signature: 'isCurrentMember(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _assign:
            [ { name: '_assign',
                signature: '_assign(address,uint[])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _revoke:
            [ { name: '_revoke',
                signature: '_revoke(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isCurrentHolder:
            { name: 'isCurrentHolder',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isCurrentHolder',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { attributeValueCollection:
            { functionsWrite: {},
              contract: [Circular],
              name: 'attributeValueCollection',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint=>bytes32[])})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           attributeNames:
            { functionsWrite: { addAttributeSet: [Array] },
              contract: [Circular],
              name: 'attributeNames',
              isArray: true,
              initialValue: [],
              type: 'bytes32[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           currentHolders:
            { functionsWrite: {},
              contract: [Circular],
              name: 'currentHolders',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>MembershipVerificationToken.MemberData)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pendingRequests:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pendingRequests',
              isArray: false,
              initialValue: null,
              type:
               'mapping(address=>MembershipVerificationToken.PendingRequest)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allHolders:
            { functionsWrite: { _assign: [Array] },
              contract: [Circular],
              name: 'allHolders',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           currentMemberCount:
            { functionsWrite: {},
              contract: [Circular],
              name: 'currentMemberCount',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { _owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
           ERC165:
            { projectGraph: [Circular],
              name: 'ERC165',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 supportsInterface: [Array],
                 _registerInterface: [Array] },
              modifiers: {},
              stateVariables:
               { _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC165',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
           IERC1261:
            { projectGraph: [Circular],
              name: 'IERC1261',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
           IERC1261Metadata:
            { projectGraph: [Circular],
              name: 'IERC1261Metadata',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1261Metadata',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' } },
        inheritsFrom:
         { IERC1261:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC1261',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 0 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 1 } },
        structs:
         { MemberData:
            { name: 'MemberData',
              contract: [Circular],
              parameters: [ [Object], [Object] ] },
           PendingRequest:
            { name: 'PendingRequest',
              contract: [Circular],
              parameters: [ [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MembershipVerificationToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StructDefinition',
                name: 'MemberData',
                members: [Array],
                loc: [Object],
                parentName: 'MembershipVerificationToken' },
              { type: 'StructDefinition',
                name: 'PendingRequest',
                members: [Array],
                loc: [Object],
                parentName: 'MembershipVerificationToken' },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ApprovedMembership',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RequestedMembership',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Assigned',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Revoked',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Forfeited',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ModifiedAttributes',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'isCurrentHolder',
                parameters: null,
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'requestMembership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'forfeitMembership',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approveRequest',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'discardRequest',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'assignTo',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addAttributeSet',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'modifyAttributeByIndex',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getAllMembers',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getCurrentMemberCount',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getAttributeNames',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getAttributes',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getAttributeExhaustiveCollection',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getAttributeByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isCurrentMember',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_assign',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_revoke',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 198, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/MembershipVerificationToken.sol' },
     IERC1261:
      { projectGraph: [Circular],
        name: 'IERC1261',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC1261',
           baseContracts: [],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Assigned',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Revoked',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Forfeited',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ApprovedMembership',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RequestedMembership',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ModifiedAttributes',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addAttributeSet',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'modifyAttributeByIndex',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'requestMembership',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'forfeitMembership',
                parameters: [],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approveRequest',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'discardRequest',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'assignTo',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isCurrentMember',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getAttributeExhaustiveCollection',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getAllMembers',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getCurrentMemberCount',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getAttributeNames',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getAttributes',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getAttributeByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 163, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
     IERC1261Metadata:
      { projectGraph: [Circular],
        name: 'IERC1261Metadata',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC1261Metadata',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 168, column: 0 },
              end: { line: 175, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
     Roles:
      { projectGraph: [Circular],
        name: 'Roles',
        kind: 'library',
        isAbstract: false,
        functions:
         { add:
            [ { name: 'add',
                signature: 'add(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           remove:
            [ { name: 'remove',
                signature: 'remove(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           has:
            [ { name: 'has',
                signature: 'has(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs:
         { Role:
            { name: 'Role', contract: [Circular], parameters: [ [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Roles',
           baseContracts: [],
           subNodes:
            [ { type: 'StructDefinition',
                name: 'Role',
                members: [Array],
                loc: [Object],
                parentName: 'Roles' },
              { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'remove',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'has',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 44, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' },
     CapperRole:
      { projectGraph: [Circular],
        name: 'CapperRole',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isCapper:
            [ { name: 'isCapper',
                signature: 'isCapper(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addCapper:
            [ { name: 'addCapper',
                signature: 'addCapper(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceCapper:
            [ { name: 'renounceCapper',
                signature: 'renounceCapper()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addCapper:
            [ { name: '_addCapper',
                signature: '_addCapper(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeCapper:
            [ { name: '_removeCapper',
                signature: '_removeCapper(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyCapper:
            { name: 'onlyCapper',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyCapper',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { cappers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'cappers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CapperRole',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'CapperAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'CapperRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyCapper',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isCapper',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addCapper',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceCapper',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addCapper',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeCapper',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/CapperRole.sol' },
     MinterRole:
      { projectGraph: [Circular],
        name: 'MinterRole',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isMinter:
            [ { name: 'isMinter',
                signature: 'isMinter(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addMinter:
            [ { name: 'addMinter',
                signature: 'addMinter(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceMinter:
            [ { name: 'renounceMinter',
                signature: 'renounceMinter()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addMinter:
            [ { name: '_addMinter',
                signature: '_addMinter(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeMinter:
            [ { name: '_removeMinter',
                signature: '_removeMinter(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { minters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MinterRole',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'MinterAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'MinterRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyMinter',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isMinter',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceMinter',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
     PauserRole:
      { projectGraph: [Circular],
        name: 'PauserRole',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isPauser:
            [ { name: 'isPauser',
                signature: 'isPauser(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addPauser:
            [ { name: 'addPauser',
                signature: 'addPauser(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renouncePauser:
            [ { name: 'renouncePauser',
                signature: 'renouncePauser()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addPauser:
            [ { name: '_addPauser',
                signature: '_addPauser(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removePauser:
            [ { name: '_removePauser',
                signature: '_removePauser(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PauserRole',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PauserAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PauserRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyPauser',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isPauser',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addPauser',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renouncePauser',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addPauser',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removePauser',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol' },
     SignerRole:
      { projectGraph: [Circular],
        name: 'SignerRole',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isSigner:
            [ { name: 'isSigner',
                signature: 'isSigner(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addSigner:
            [ { name: 'addSigner',
                signature: 'addSigner(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceSigner:
            [ { name: 'renounceSigner',
                signature: 'renounceSigner()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addSigner:
            [ { name: '_addSigner',
                signature: '_addSigner(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeSigner:
            [ { name: '_removeSigner',
                signature: '_removeSigner(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlySigner:
            { name: 'onlySigner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlySigner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { signers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'signers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SignerRole',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'SignerAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'SignerRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlySigner',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isSigner',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addSigner',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceSigner',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addSigner',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeSigner',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/SignerRole.sol' },
     Crowdsale:
      { projectGraph: [Circular],
        name: 'Crowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,address,IERC20)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           token:
            [ { name: 'token',
                signature: 'token()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           wallet:
            [ { name: 'wallet',
                signature: 'wallet()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           rate:
            [ { name: 'rate',
                signature: 'rate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           weiRaised:
            [ { name: 'weiRaised',
                signature: 'weiRaised()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           buyTokens:
            [ { name: 'buyTokens',
                signature: 'buyTokens(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _postValidatePurchase:
            [ { name: '_postValidatePurchase',
                signature: '_postValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _processPurchase:
            [ { name: '_processPurchase',
                signature: '_processPurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _updatePurchasingState:
            [ { name: '_updatePurchasingState',
                signature: '_updatePurchasingState(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _getTokenAmount:
            [ { name: '_getTokenAmount',
                signature: '_getTokenAmount(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _forwardFunds:
            [ { name: '_forwardFunds',
                signature: '_forwardFunds()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _token:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: { buyTokens: [Array] },
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
           ReentrancyGuard:
            { projectGraph: [Circular],
              name: 'ReentrancyGuard',
              kind: 'contract',
              isAbstract: true,
              functions: { constructor: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables: { _guardCounter: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ReentrancyGuard',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' } },
        inheritsFrom:
         { ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Crowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TokensPurchased',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'token',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'wallet',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'rate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'weiRaised',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'buyTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_postValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_processPurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updatePurchasingState',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_getTokenAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_forwardFunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 20, column: 0 },
              end: { line: 241, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
     FinalizableCrowdsale:
      { projectGraph: [Circular],
        name: 'FinalizableCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           finalized:
            [ { name: 'finalized',
                signature: 'finalized()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           finalize:
            [ { name: 'finalize',
                signature: 'finalize()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _finalization:
            [ { name: '_finalization',
                signature: '_finalization()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _finalized:
            { functionsWrite: { constructor: [Array], finalize: [Array] },
              contract: [Circular],
              name: '_finalized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 openingTime: [Array],
                 closingTime: [Array],
                 isOpen: [Array],
                 hasClosed: [Array],
                 _preValidatePurchase: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _openingTime: [Object], _closingTime: [Object] },
              dependencies: { SafeMath: [Object], Crowdsale: [Object] },
              inheritsFrom: { Crowdsale: [Object], ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' } },
        inheritsFrom:
         { TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'FinalizableCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'CrowdsaleFinalized',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalized',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalize',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_finalization',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 50, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
     PostDeliveryCrowdsale:
      { projectGraph: [Circular],
        name: 'PostDeliveryCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           withdrawTokens:
            [ { name: 'withdrawTokens',
                signature: 'withdrawTokens(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _processPurchase:
            [ { name: '_processPurchase',
                signature: '_processPurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 openingTime: [Array],
                 closingTime: [Array],
                 isOpen: [Array],
                 hasClosed: [Array],
                 _preValidatePurchase: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _openingTime: [Object], _closingTime: [Object] },
              dependencies: { SafeMath: [Object], Crowdsale: [Object] },
              inheritsFrom: { Crowdsale: [Object], ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PostDeliveryCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_processPurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 50, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol' },
     RefundableCrowdsale:
      { projectGraph: [Circular],
        name: 'RefundableCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           goal:
            [ { name: 'goal',
                signature: 'goal()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           claimRefund:
            [ { name: 'claimRefund',
                signature: 'claimRefund(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           goalReached:
            [ { name: 'goalReached',
                signature: 'goalReached()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _finalization:
            [ { name: '_finalization',
                signature: '_finalization()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _forwardFunds:
            [ { name: '_forwardFunds',
                signature: '_forwardFunds()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _goal:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_goal',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _escrow:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_escrow',
              isArray: false,
              initialValue: null,
              type: 'RefundEscrow',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           FinalizableCrowdsale:
            { projectGraph: [Circular],
              name: 'FinalizableCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 finalized: [Array],
                 finalize: [Array],
                 _finalization: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _finalized: [Object] },
              dependencies: { SafeMath: [Object], TimedCrowdsale: [Object] },
              inheritsFrom:
               { TimedCrowdsale: [Object],
                 Crowdsale: [Object],
                 ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'FinalizableCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
           RefundEscrow:
            { projectGraph: [Circular],
              name: 'RefundEscrow',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 state: [Array],
                 beneficiary: [Array],
                 deposit: [Array],
                 close: [Array],
                 enableRefunds: [Array],
                 beneficiaryWithdraw: [Array],
                 withdrawalAllowed: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables:
               { _state: [Object],
                 _beneficiary: [Object],
                 _primary: [Object],
                 _deposits: [Object] },
              dependencies: { ConditionalEscrow: [Object] },
              inheritsFrom:
               { ConditionalEscrow: [Object],
                 Escrow: [Object],
                 Secondary: [Object] },
              structs: {},
              enums: { State: [Object] },
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RefundEscrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/escrow/RefundEscrow.sol' } },
        inheritsFrom:
         { FinalizableCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'FinalizableCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
              parameters: [],
              level: 0 },
           TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 2 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 3 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RefundableCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'goal',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'claimRefund',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'goalReached',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_finalization',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_forwardFunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 25, column: 0 }, end: { line: 91, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol' },
     AllowanceCrowdsale:
      { projectGraph: [Circular],
        name: 'AllowanceCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           tokenWallet:
            [ { name: 'tokenWallet',
                signature: 'tokenWallet()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           remainingTokens:
            [ { name: 'remainingTokens',
                signature: 'remainingTokens()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _tokenWallet:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_tokenWallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Math:
            { projectGraph: [Circular],
              name: 'Math',
              kind: 'library',
              isAbstract: false,
              functions: { max: [Array], min: [Array], average: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Math',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/Math.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'AllowanceCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenWallet',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'remainingTokens',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 59, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/emission/AllowanceCrowdsale.sol' },
     MintedCrowdsale:
      { projectGraph: [Circular],
        name: 'MintedCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           ERC20Mintable:
            { projectGraph: [Circular],
              name: 'ERC20Mintable',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables:
               { minters: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object] },
              dependencies: { ERC20: [Object], MinterRole: [Object] },
              inheritsFrom: { ERC20: [Object], IERC20: [Object], MinterRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Mintable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MintedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 29, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol' },
     IncreasingPriceCrowdsale:
      { projectGraph: [Circular],
        name: 'IncreasingPriceCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           rate:
            [ { name: 'rate',
                signature: 'rate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           initialRate:
            [ { name: 'initialRate',
                signature: 'initialRate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           finalRate:
            [ { name: 'finalRate',
                signature: 'finalRate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getCurrentRate:
            [ { name: 'getCurrentRate',
                signature: 'getCurrentRate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _getTokenAmount:
            [ { name: '_getTokenAmount',
                signature: '_getTokenAmount(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _initialRate:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_initialRate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _finalRate:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_finalRate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 openingTime: [Array],
                 closingTime: [Array],
                 isOpen: [Array],
                 hasClosed: [Array],
                 _preValidatePurchase: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _openingTime: [Object], _closingTime: [Object] },
              dependencies: { SafeMath: [Object], Crowdsale: [Object] },
              inheritsFrom: { Crowdsale: [Object], ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IncreasingPriceCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'rate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialRate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalRate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getCurrentRate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_getTokenAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 81, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/price/IncreasingPriceCrowdsale.sol' },
     CappedCrowdsale:
      { projectGraph: [Circular],
        name: 'CappedCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           cap:
            [ { name: 'cap',
                signature: 'cap()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           capReached:
            [ { name: 'capReached',
                signature: 'capReached()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _cap:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_cap',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CappedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'cap',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'capReached',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 55, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol' },
     IndividuallyCappedCrowdsale:
      { projectGraph: [Circular],
        name: 'IndividuallyCappedCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setCap:
            [ { name: 'setCap',
                signature: 'setCap(address,uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getCap:
            [ { name: 'getCap',
                signature: 'getCap(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getContribution:
            [ { name: 'getContribution',
                signature: 'getContribution(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _updatePurchasingState:
            [ { name: '_updatePurchasingState',
                signature: '_updatePurchasingState(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyCapper:
            { name: 'onlyCapper',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyCapper',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _contributions:
            { functionsWrite: {},
              contract: [Circular],
              name: '_contributions',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _caps:
            { functionsWrite: {},
              contract: [Circular],
              name: '_caps',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           CapperRole:
            { projectGraph: [Circular],
              name: 'CapperRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isCapper: [Array],
                 addCapper: [Array],
                 renounceCapper: [Array],
                 _addCapper: [Array],
                 _removeCapper: [Array] },
              modifiers: { onlyCapper: [Object] },
              stateVariables: { cappers: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'CapperRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/CapperRole.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 },
           CapperRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'CapperRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/CapperRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IndividuallyCappedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setCap',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getCap',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getContribution',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updatePurchasingState',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 81, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/IndividuallyCappedCrowdsale.sol' },
     TimedCrowdsale:
      { projectGraph: [Circular],
        name: 'TimedCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           openingTime:
            [ { name: 'openingTime',
                signature: 'openingTime()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           closingTime:
            [ { name: 'closingTime',
                signature: 'closingTime()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isOpen:
            [ { name: 'isOpen',
                signature: 'isOpen()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           hasClosed:
            [ { name: 'hasClosed',
                signature: 'hasClosed()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _openingTime:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _closingTime:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TimedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyWhileOpen',
                parameters: null,
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'openingTime',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'closingTime',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isOpen',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'hasClosed',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 85, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
     ECDSA:
      { projectGraph: [Circular],
        name: 'ECDSA',
        kind: 'library',
        isAbstract: false,
        functions:
         { recover:
            [ { name: 'recover',
                signature: 'recover(bytes32,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           toEthSignedMessageHash:
            [ { name: 'toEthSignedMessageHash',
                signature: 'toEthSignedMessageHash(bytes32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ECDSA',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'recover',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toEthSignedMessageHash',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 71, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/cryptography/ECDSA.sol' },
     MerkleProof:
      { projectGraph: [Circular],
        name: 'MerkleProof',
        kind: 'library',
        isAbstract: false,
        functions:
         { verify:
            [ { name: 'verify',
                signature: 'verify(bytes32[],bytes32,bytes32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MerkleProof',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'verify',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 42, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/cryptography/MerkleProof.sol' },
     Counter:
      { projectGraph: [Circular],
        name: 'Counter',
        kind: 'library',
        isAbstract: false,
        functions:
         { next:
            [ { name: 'next',
                signature: 'next(Counter.Counter)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs:
         { Counter:
            { name: 'Counter',
              contract: [Circular],
              parameters: [ [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Counter',
           baseContracts: [],
           subNodes:
            [ { type: 'StructDefinition',
                name: 'Counter',
                members: [Array],
                loc: [Object],
                parentName: 'Counter' },
              { type: 'FunctionDefinition',
                name: 'next',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 15, column: 0 }, end: { line: 28, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/drafts/Counter.sol' },
     ERC20TokenMetadata:
      { projectGraph: [Circular],
        name: 'ERC20TokenMetadata',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom:
         { IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20TokenMetadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 13, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/drafts/ERC1046/TokenMetadata.sol' },
     ERC20WithMetadata:
      { projectGraph: [Circular],
        name: 'ERC20WithMetadata',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           tokenURI:
            [ { name: 'tokenURI',
                signature: 'tokenURI()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _tokenURI:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_tokenURI',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom:
         { ERC20TokenMetadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20TokenMetadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/drafts/ERC1046/TokenMetadata.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20WithMetadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 15, column: 0 }, end: { line: 27, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/drafts/ERC1046/TokenMetadata.sol' },
     ERC20Migrator:
      { projectGraph: [Circular],
        name: 'ERC20Migrator',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           legacyToken:
            [ { name: 'legacyToken',
                signature: 'legacyToken()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           newToken:
            [ { name: 'newToken',
                signature: 'newToken()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           beginMigration:
            [ { name: 'beginMigration',
                signature: 'beginMigration(ERC20Mintable)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           migrate:
            [ { name: 'migrate',
                signature: 'migrate(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           migrateAll:
            [ { name: 'migrateAll',
                signature: 'migrateAll(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { _legacyToken:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_legacyToken',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _newToken:
            { functionsWrite: { beginMigration: [Array] },
              contract: [Circular],
              name: '_newToken',
              isArray: false,
              initialValue: null,
              type: 'ERC20Mintable',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           ERC20Mintable:
            { projectGraph: [Circular],
              name: 'ERC20Mintable',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables:
               { minters: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object] },
              dependencies: { ERC20: [Object], MinterRole: [Object] },
              inheritsFrom: { ERC20: [Object], IERC20: [Object], MinterRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Mintable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
           Math:
            { projectGraph: [Circular],
              name: 'Math',
              kind: 'library',
              isAbstract: false,
              functions: { max: [Array], min: [Array], average: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Math',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/Math.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Migrator',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'legacyToken',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'newToken',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beginMigration',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'migrate',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'migrateAll',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 34, column: 0 },
              end: { line: 100, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/drafts/ERC20Migrator.sol' },
     SignatureBouncer:
      { projectGraph: [Circular],
        name: 'SignatureBouncer',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _isValidSignature:
            [ { name: '_isValidSignature',
                signature: '_isValidSignature(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _isValidSignatureAndMethod:
            [ { name: '_isValidSignatureAndMethod',
                signature: '_isValidSignatureAndMethod(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _isValidSignatureAndData:
            [ { name: '_isValidSignatureAndData',
                signature: '_isValidSignatureAndData(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _isValidDataHash:
            [ { name: '_isValidDataHash',
                signature: '_isValidDataHash(bytes32,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyValidSignature:
            { name: 'onlyValidSignature',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignature',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlyValidSignatureAndMethod:
            { name: 'onlyValidSignatureAndMethod',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignatureAndMethod',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlyValidSignatureAndData:
            { name: 'onlyValidSignatureAndData',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignatureAndData',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlySigner:
            { name: 'onlySigner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlySigner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _METHOD_ID_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_METHOD_ID_SIZE',
              isArray: false,
              initialValue: 4,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _SIGNATURE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_SIGNATURE_SIZE',
              isArray: false,
              initialValue: 96,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { SignerRole:
            { projectGraph: [Circular],
              name: 'SignerRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isSigner: [Array],
                 addSigner: [Array],
                 renounceSigner: [Array],
                 _addSigner: [Array],
                 _removeSigner: [Array] },
              modifiers: { onlySigner: [Object] },
              stateVariables: { signers: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SignerRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/SignerRole.sol' },
           ECDSA:
            { projectGraph: [Circular],
              name: 'ECDSA',
              kind: 'library',
              isAbstract: false,
              functions: { recover: [Array], toEthSignedMessageHash: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ECDSA',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/cryptography/ECDSA.sol' } },
        inheritsFrom:
         { SignerRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'SignerRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/SignerRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SignatureBouncer',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'ECDSA',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignature',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignatureAndMethod',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignatureAndData',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidSignature',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidSignatureAndMethod',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidSignatureAndData',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidDataHash',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 37, column: 0 },
              end: { line: 146, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/drafts/SignatureBouncer.sol' },
     TokenVesting:
      { projectGraph: [Circular],
        name: 'TokenVesting',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address,uint256,uint256,uint256,bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiary:
            [ { name: 'beneficiary',
                signature: 'beneficiary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           cliff:
            [ { name: 'cliff',
                signature: 'cliff()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           start:
            [ { name: 'start',
                signature: 'start()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           duration:
            [ { name: 'duration',
                signature: 'duration()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revocable:
            [ { name: 'revocable',
                signature: 'revocable()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           released:
            [ { name: 'released',
                signature: 'released(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revoked:
            [ { name: 'revoked',
                signature: 'revoked(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           release:
            [ { name: 'release',
                signature: 'release(IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revoke:
            [ { name: 'revoke',
                signature: 'revoke(IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _releasableAmount:
            [ { name: '_releasableAmount',
                signature: '_releasableAmount(IERC20)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _vestedAmount:
            [ { name: '_vestedAmount',
                signature: '_vestedAmount(IERC20)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _beneficiary:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _cliff:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_cliff',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _start:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_start',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _duration:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_duration',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _revocable:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_revocable',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _released:
            { functionsWrite: {},
              contract: [Circular],
              name: '_released',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _revoked:
            { functionsWrite: {},
              contract: [Circular],
              name: '_revoked',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { _owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenVesting',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TokensReleased',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TokenVestingRevoked',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'cliff',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'start',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'duration',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revocable',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'released',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revoked',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'release',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revoke',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_releasableAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_vestedAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 15, column: 0 },
              end: { line: 175, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/drafts/TokenVesting.sol' },
     ERC165:
      { projectGraph: [Circular],
        name: 'ERC165',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           supportsInterface:
            [ { name: 'supportsInterface',
                signature: 'supportsInterface(bytes4)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _registerInterface:
            [ { name: '_registerInterface',
                signature: '_registerInterface(bytes4)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC165:
            { projectGraph: [Circular],
              name: 'IERC165',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC165',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' } },
        inheritsFrom:
         { IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC165',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'supportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_registerInterface',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 53, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
     ERC165Checker:
      { projectGraph: [Circular],
        name: 'ERC165Checker',
        kind: 'library',
        isAbstract: false,
        functions:
         { _supportsERC165:
            [ { name: '_supportsERC165',
                signature: '_supportsERC165(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _supportsInterface:
            [ { name: '_supportsInterface',
                signature: '_supportsInterface(address,bytes4)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _supportsAllInterfaces:
            [ { name: '_supportsAllInterfaces',
                signature: '_supportsAllInterfaces(address,bytes4[])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _supportsERC165Interface:
            [ { name: '_supportsERC165Interface',
                signature: '_supportsERC165Interface(address,bytes4)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _callERC165SupportsInterface:
            [ { name: '_callERC165SupportsInterface',
                signature: '_callERC165SupportsInterface(address,bytes4)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _InterfaceId_Invalid:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_Invalid',
              isArray: false,
              initialValue: 4294967295,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC165Checker',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_supportsERC165',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_supportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_supportsAllInterfaces',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_supportsERC165Interface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_callERC165SupportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 146, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165Checker.sol' },
     IERC165:
      { projectGraph: [Circular],
        name: 'IERC165',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC165',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'supportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 19, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
     Pausable:
      { projectGraph: [Circular],
        name: 'Pausable',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           paused:
            [ { name: 'paused',
                signature: 'paused()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           pause:
            [ { name: 'pause',
                signature: 'pause()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           unpause:
            [ { name: 'unpause',
                signature: 'unpause()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _paused:
            { functionsWrite: { constructor: [Array], pause: [Array], unpause: [Array] },
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { PauserRole:
            { projectGraph: [Circular],
              name: 'PauserRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isPauser: [Array],
                 addPauser: [Array],
                 renouncePauser: [Array],
                 _addPauser: [Array],
                 _removePauser: [Array] },
              modifiers: { onlyPauser: [Object] },
              stateVariables: { pausers: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'PauserRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol' } },
        inheritsFrom:
         { PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Pausable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Paused',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Unpaused',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'paused',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'whenNotPaused',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'whenPaused',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'pause',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'unpause',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 57, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol' },
     Math:
      { projectGraph: [Circular],
        name: 'Math',
        kind: 'library',
        isAbstract: false,
        functions:
         { max:
            [ { name: 'max',
                signature: 'max(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           min:
            [ { name: 'min',
                signature: 'min(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           average:
            [ { name: 'average',
                signature: 'average(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Math',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'max',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'min',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'average',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 31, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/Math.sol' },
     SafeMath:
      { projectGraph: [Circular],
        name: 'SafeMath',
        kind: 'library',
        isAbstract: false,
        functions:
         { mul:
            [ { name: 'mul',
                signature: 'mul(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           div:
            [ { name: 'div',
                signature: 'div(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sub:
            [ { name: 'sub',
                signature: 'sub(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           add:
            [ { name: 'add',
                signature: 'add(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           mod:
            [ { name: 'mod',
                signature: 'mod(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SafeMath',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'mul',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'div',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sub',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mod',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 65, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
     Ownable:
      { projectGraph: [Circular],
        name: 'Ownable',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           owner:
            [ { name: 'owner',
                signature: 'owner()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isOwner:
            [ { name: 'isOwner',
                signature: 'isOwner()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           renounceOwnership:
            [ { name: 'renounceOwnership',
                signature: 'renounceOwnership()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           transferOwnership:
            [ { name: 'transferOwnership',
                signature: 'transferOwnership(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _transferOwnership:
            [ { name: '_transferOwnership',
                signature: '_transferOwnership(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 _transferOwnership: [Array] },
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Ownable',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'OwnershipTransferred',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'owner',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyOwner',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isOwner',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceOwnership',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferOwnership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_transferOwnership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 75, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
     Secondary:
      { projectGraph: [Circular],
        name: 'Secondary',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           primary:
            [ { name: 'primary',
                signature: 'primary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferPrimary:
            [ { name: 'transferPrimary',
                signature: 'transferPrimary(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _primary:
            { functionsWrite: { constructor: [Array], transferPrimary: [Array] },
              contract: [Circular],
              name: '_primary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Secondary',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PrimaryTransferred',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyPrimary',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'primary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferPrimary',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 46, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
     ConditionalEscrow:
      { projectGraph: [Circular],
        name: 'ConditionalEscrow',
        kind: 'contract',
        isAbstract: true,
        functions:
         { withdraw:
            [ { name: 'withdraw',
                signature: 'withdraw(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { Escrow:
            { projectGraph: [Circular],
              name: 'Escrow',
              kind: 'contract',
              isAbstract: false,
              functions: { depositsOf: [Array], deposit: [Array], withdraw: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _deposits: [Object], _primary: [Object] },
              dependencies: { SafeMath: [Object], Secondary: [Object] },
              inheritsFrom: { Secondary: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Escrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' } },
        inheritsFrom:
         { Escrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'Escrow',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' },
              parameters: [],
              level: 0 },
           Secondary:
            { contract:
               { projectGraph: [Circular],
                 name: 'Secondary',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ConditionalEscrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'withdrawalAllowed',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdraw',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' },
     Escrow:
      { projectGraph: [Circular],
        name: 'Escrow',
        kind: 'contract',
        isAbstract: false,
        functions:
         { depositsOf:
            [ { name: 'depositsOf',
                signature: 'depositsOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           deposit:
            [ { name: 'deposit',
                signature: 'deposit(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           withdraw:
            [ { name: 'withdraw',
                signature: 'withdraw(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _deposits:
            { functionsWrite: {},
              contract: [Circular],
              name: '_deposits',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _primary:
            { functionsWrite: {},
              contract: [Circular],
              name: '_primary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Secondary:
            { projectGraph: [Circular],
              name: 'Secondary',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 primary: [Array],
                 transferPrimary: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _primary: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Secondary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' } },
        inheritsFrom:
         { Secondary:
            { contract:
               { projectGraph: [Circular],
                 name: 'Secondary',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Escrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Deposited',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Withdrawn',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'depositsOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'deposit',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdraw',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 18, column: 0 }, end: { line: 54, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' },
     RefundEscrow:
      { projectGraph: [Circular],
        name: 'RefundEscrow',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           state:
            [ { name: 'state',
                signature: 'state()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiary:
            [ { name: 'beneficiary',
                signature: 'beneficiary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           deposit:
            [ { name: 'deposit',
                signature: 'deposit(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           close:
            [ { name: 'close',
                signature: 'close()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           enableRefunds:
            [ { name: 'enableRefunds',
                signature: 'enableRefunds()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiaryWithdraw:
            [ { name: 'beneficiaryWithdraw',
                signature: 'beneficiaryWithdraw()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           withdrawalAllowed:
            [ { name: 'withdrawalAllowed',
                signature: 'withdrawalAllowed(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _state:
            { functionsWrite:
               { constructor: [Array], close: [Array], enableRefunds: [Array] },
              contract: [Circular],
              name: '_state',
              isArray: false,
              initialValue: null,
              type: 'State',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _beneficiary:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _primary:
            { functionsWrite: {},
              contract: [Circular],
              name: '_primary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _deposits:
            { functionsWrite: {},
              contract: [Circular],
              name: '_deposits',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ConditionalEscrow:
            { projectGraph: [Circular],
              name: 'ConditionalEscrow',
              kind: 'contract',
              isAbstract: true,
              functions: { withdraw: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: {},
              dependencies: { Escrow: [Object] },
              inheritsFrom: { Escrow: [Object], Secondary: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ConditionalEscrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' } },
        inheritsFrom:
         { ConditionalEscrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'ConditionalEscrow',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' },
              parameters: [],
              level: 0 },
           Escrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'Escrow',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' },
              parameters: [],
              level: 1 },
           Secondary:
            { contract:
               { projectGraph: [Circular],
                 name: 'Secondary',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums:
         { State:
            { name: 'State',
              contract: [Circular],
              members: [ 'Active', 'Refunding', 'Closed' ] } },
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RefundEscrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EnumDefinition',
                name: 'State',
                members: [Array],
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RefundsClosed',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RefundsEnabled',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'state',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'deposit',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'close',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'enableRefunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiaryWithdraw',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawalAllowed',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 16, column: 0 }, end: { line: 91, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/escrow/RefundEscrow.sol' },
     PaymentSplitter:
      { projectGraph: [Circular],
        name: 'PaymentSplitter',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address[],uint256[])',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalShares:
            [ { name: 'totalShares',
                signature: 'totalShares()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalReleased:
            [ { name: 'totalReleased',
                signature: 'totalReleased()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           shares:
            [ { name: 'shares',
                signature: 'shares(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           released:
            [ { name: 'released',
                signature: 'released(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           payee:
            [ { name: 'payee',
                signature: 'payee(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           release:
            [ { name: 'release',
                signature: 'release(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _addPayee:
            [ { name: '_addPayee',
                signature: '_addPayee(address,uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _totalShares:
            { functionsWrite: { _addPayee: [Array] },
              contract: [Circular],
              name: '_totalShares',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalReleased:
            { functionsWrite: { release: [Array] },
              contract: [Circular],
              name: '_totalReleased',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _shares:
            { functionsWrite: {},
              contract: [Circular],
              name: '_shares',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _released:
            { functionsWrite: {},
              contract: [Circular],
              name: '_released',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _payees:
            { functionsWrite: { _addPayee: [Array] },
              contract: [Circular],
              name: '_payees',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PaymentSplitter',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PayeeAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PaymentReleased',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PaymentReceived',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalShares',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalReleased',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'shares',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'released',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'payee',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'release',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addPayee',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 },
              end: { line: 116, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/PaymentSplitter.sol' },
     PullPayment:
      { projectGraph: [Circular],
        name: 'PullPayment',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           withdrawPayments:
            [ { name: 'withdrawPayments',
                signature: 'withdrawPayments(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           payments:
            [ { name: 'payments',
                signature: 'payments(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _asyncTransfer:
            [ { name: '_asyncTransfer',
                signature: '_asyncTransfer(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _escrow:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_escrow',
              isArray: false,
              initialValue: null,
              type: 'Escrow',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Escrow:
            { projectGraph: [Circular],
              name: 'Escrow',
              kind: 'contract',
              isAbstract: false,
              functions: { depositsOf: [Array], deposit: [Array], withdraw: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _deposits: [Object], _primary: [Object] },
              dependencies: { SafeMath: [Object], Secondary: [Object] },
              inheritsFrom: { Secondary: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Escrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PullPayment',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawPayments',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'payments',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_asyncTransfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 41, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/PullPayment.sol' },
     ERC20:
      { projectGraph: [Circular],
        name: 'ERC20',
        kind: 'contract',
        isAbstract: false,
        functions:
         { totalSupply:
            [ { name: 'totalSupply',
                signature: 'totalSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           increaseAllowance:
            [ { name: 'increaseAllowance',
                signature: 'increaseAllowance(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decreaseAllowance:
            [ { name: 'decreaseAllowance',
                signature: 'decreaseAllowance(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _transfer:
            [ { name: '_transfer',
                signature: '_transfer(address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _burnFrom:
            [ { name: '_burnFrom',
                signature: '_burnFrom(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: { _mint: [Array], _burn: [Array] },
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decreaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_transfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burnFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 },
              end: { line: 211, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
     ERC20Burnable:
      { projectGraph: [Circular],
        name: 'ERC20Burnable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { burn:
            [ { name: 'burn',
                signature: 'burn(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           burnFrom:
            [ { name: 'burnFrom',
                signature: 'burnFrom(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 allowance: [Array],
                 transfer: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _burnFrom: [Array] },
              modifiers: {},
              stateVariables:
               { _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object] },
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Burnable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'burnFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 27, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol' },
     ERC20Capped:
      { projectGraph: [Circular],
        name: 'ERC20Capped',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           cap:
            [ { name: 'cap',
                signature: 'cap()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _cap:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_cap',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           minters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20Mintable:
            { projectGraph: [Circular],
              name: 'ERC20Mintable',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables:
               { minters: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object] },
              dependencies: { ERC20: [Object], MinterRole: [Object] },
              inheritsFrom: { ERC20: [Object], IERC20: [Object], MinterRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Mintable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' } },
        inheritsFrom:
         { ERC20Mintable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Mintable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 2 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Capped',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'cap',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 31, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Capped.sol' },
     ERC20Detailed:
      { projectGraph: [Circular],
        name: 'ERC20Detailed',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string,uint8)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           name:
            [ { name: 'name',
                signature: 'name()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           symbol:
            [ { name: 'symbol',
                signature: 'symbol()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decimals:
            [ { name: 'decimals',
                signature: 'decimals()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _decimals:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom:
         { IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Detailed',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decimals',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 42, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol' },
     ERC20Mintable:
      { projectGraph: [Circular],
        name: 'ERC20Mintable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { minters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 allowance: [Array],
                 transfer: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _burnFrom: [Array] },
              modifiers: {},
              stateVariables:
               { _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object] },
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
           MinterRole:
            { projectGraph: [Circular],
              name: 'MinterRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isMinter: [Array],
                 addMinter: [Array],
                 renounceMinter: [Array],
                 _addMinter: [Array],
                 _removeMinter: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables: { minters: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MinterRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Mintable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 28, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' },
     ERC20Pausable:
      { projectGraph: [Circular],
        name: 'ERC20Pausable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           increaseAllowance:
            [ { name: 'increaseAllowance',
                signature: 'increaseAllowance(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decreaseAllowance:
            [ { name: 'decreaseAllowance',
                signature: 'decreaseAllowance(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 allowance: [Array],
                 transfer: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _burnFrom: [Array] },
              modifiers: {},
              stateVariables:
               { _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object] },
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
           Pausable:
            { projectGraph: [Circular],
              name: 'Pausable',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 paused: [Array],
                 pause: [Array],
                 unpause: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 whenPaused: [Object],
                 onlyPauser: [Object] },
              stateVariables: { _paused: [Object] },
              dependencies: { PauserRole: [Object] },
              inheritsFrom: { PauserRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol' },
              parameters: [],
              level: 0 },
           PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Pausable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decreaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 67, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol' },
     IERC20:
      { projectGraph: [Circular],
        name: 'IERC20',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC20',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 34, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
     SafeERC20:
      { projectGraph: [Circular],
        name: 'SafeERC20',
        kind: 'library',
        isAbstract: false,
        functions:
         { safeTransfer:
            [ { name: 'safeTransfer',
                signature: 'safeTransfer(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           safeTransferFrom:
            [ { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(IERC20,address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           safeApprove:
            [ { name: 'safeApprove',
                signature: 'safeApprove(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           safeIncreaseAllowance:
            [ { name: 'safeIncreaseAllowance',
                signature: 'safeIncreaseAllowance(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           safeDecreaseAllowance:
            [ { name: 'safeDecreaseAllowance',
                signature: 'safeDecreaseAllowance(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SafeERC20',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeApprove',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeIncreaseAllowance',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeDecreaseAllowance',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 72, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
     TokenTimelock:
      { projectGraph: [Circular],
        name: 'TokenTimelock',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           token:
            [ { name: 'token',
                signature: 'token()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiary:
            [ { name: 'beneficiary',
                signature: 'beneficiary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           releaseTime:
            [ { name: 'releaseTime',
                signature: 'releaseTime()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           release:
            [ { name: 'release',
                signature: 'release()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _token:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _beneficiary:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _releaseTime:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_releaseTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenTimelock',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'token',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'releaseTime',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'release',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 69, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/TokenTimelock.sol' },
     ERC721:
      { projectGraph: [Circular],
        name: 'ERC721',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           ownerOf:
            [ { name: 'ownerOf',
                signature: 'ownerOf(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getApproved:
            [ { name: 'getApproved',
                signature: 'getApproved(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setApprovalForAll:
            [ { name: 'setApprovalForAll',
                signature: 'setApprovalForAll(address,bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isApprovedForAll:
            [ { name: 'isApprovedForAll',
                signature: 'isApprovedForAll(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeTransferFrom:
            [ { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _exists:
            [ { name: '_exists',
                signature: '_exists(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _isApprovedOrOwner:
            [ { name: '_isApprovedOrOwner',
                signature: '_isApprovedOrOwner(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addTokenTo:
            [ { name: '_addTokenTo',
                signature: '_addTokenTo(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeTokenFrom:
            [ { name: '_removeTokenFrom',
                signature: '_removeTokenFrom(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _checkOnERC721Received:
            [ { name: '_checkOnERC721Received',
                signature: '_checkOnERC721Received(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _clearApproval:
            [ { name: '_clearApproval',
                signature: '_clearApproval(address,uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
           IERC721Receiver:
            { projectGraph: [Circular],
              name: 'IERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Address:
            { projectGraph: [Circular],
              name: 'Address',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Address',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' },
           ERC165:
            { projectGraph: [Circular],
              name: 'ERC165',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 supportsInterface: [Array],
                 _registerInterface: [Array] },
              modifiers: {},
              stateVariables:
               { _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC165',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' } },
        inheritsFrom:
         { ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 0 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 1 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Address',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ownerOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getApproved',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isApprovedForAll',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_exists',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isApprovedOrOwner',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addTokenTo',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeTokenFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_checkOnERC721Received',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_clearApproval',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 },
              end: { line: 330, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
     ERC721Burnable:
      { projectGraph: [Circular],
        name: 'ERC721Burnable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { burn:
            [ { name: 'burn',
                signature: 'burn(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers: {},
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom: { ERC165: [Object], IERC165: [Object], IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Burnable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 12, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Burnable.sol' },
     ERC721Enumerable:
      { projectGraph: [Circular],
        name: 'ERC721Enumerable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           tokenOfOwnerByIndex:
            [ { name: 'tokenOfOwnerByIndex',
                signature: 'tokenOfOwnerByIndex(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalSupply:
            [ { name: 'totalSupply',
                signature: 'totalSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           tokenByIndex:
            [ { name: 'tokenByIndex',
                signature: 'tokenByIndex(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _addTokenTo:
            [ { name: '_addTokenTo',
                signature: '_addTokenTo(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeTokenFrom:
            [ { name: '_removeTokenFrom',
                signature: '_removeTokenFrom(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _ownedTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokens',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256[])})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokens:
            { functionsWrite: { _mint: [Array] },
              contract: [Circular],
              name: '_allTokens',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721Enumerable:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721Enumerable',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { IERC721Enumerable:
            { projectGraph: [Circular],
              name: 'IERC721Enumerable',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC721: [Object] },
              inheritsFrom: { IERC721: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
           ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers: {},
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom: { ERC165: [Object], IERC165: [Object], IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           ERC165:
            { projectGraph: [Circular],
              name: 'ERC165',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 supportsInterface: [Array],
                 _registerInterface: [Array] },
              modifiers: {},
              stateVariables:
               { _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC165',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' } },
        inheritsFrom:
         { ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           IERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Enumerable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Enumerable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenOfOwnerByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addTokenTo',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeTokenFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 150, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol' },
     ERC721Full:
      { projectGraph: [Circular],
        name: 'ERC721Full',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _ownedTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokens',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256[])})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokens',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721Enumerable:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721Enumerable',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _name:
            { functionsWrite: {},
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           InterfaceId_ERC721Metadata:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Metadata',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers: {},
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom: { ERC165: [Object], IERC165: [Object], IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           ERC721Enumerable:
            { projectGraph: [Circular],
              name: 'ERC721Enumerable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 tokenOfOwnerByIndex: [Array],
                 totalSupply: [Array],
                 tokenByIndex: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _mint: [Array],
                 _burn: [Array] },
              modifiers: {},
              stateVariables:
               { _ownedTokens: [Object],
                 _ownedTokensIndex: [Object],
                 _allTokens: [Object],
                 _allTokensIndex: [Object],
                 _InterfaceId_ERC721Enumerable: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object] },
              dependencies:
               { IERC721Enumerable: [Object],
                 ERC721: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Enumerable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol' },
           ERC721Metadata:
            { projectGraph: [Circular],
              name: 'ERC721Metadata',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 name: [Array],
                 symbol: [Array],
                 tokenURI: [Array],
                 _setTokenURI: [Array],
                 _burn: [Array] },
              modifiers: {},
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _tokenURIs: [Object],
                 InterfaceId_ERC721Metadata: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object] },
              dependencies:
               { ERC721: [Object], IERC721Metadata: [Object], ERC165: [Object] },
              inheritsFrom:
               { ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Metadata: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 1 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 2 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 3 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 2 },
           ERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Enumerable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol' },
              parameters: [],
              level: 0 },
           IERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Enumerable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
              parameters: [],
              level: 1 },
           ERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol' },
              parameters: [],
              level: 0 },
           IERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Full',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 18, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol' },
     ERC721Holder:
      { projectGraph: [Circular],
        name: 'ERC721Holder',
        kind: 'contract',
        isAbstract: false,
        functions:
         { onERC721Received:
            [ { name: 'onERC721Received',
                signature: 'onERC721Received(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC721Receiver:
            { projectGraph: [Circular],
              name: 'IERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' } },
        inheritsFrom:
         { IERC721Receiver:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Receiver',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Holder',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'onERC721Received',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 17, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Holder.sol' },
     ERC721Metadata:
      { projectGraph: [Circular],
        name: 'ERC721Metadata',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           name:
            [ { name: 'name',
                signature: 'name()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           symbol:
            [ { name: 'symbol',
                signature: 'symbol()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           tokenURI:
            [ { name: 'tokenURI',
                signature: 'tokenURI(uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _setTokenURI:
            [ { name: '_setTokenURI',
                signature: '_setTokenURI(uint256,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           InterfaceId_ERC721Metadata:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Metadata',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers: {},
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom: { ERC165: [Object], IERC165: [Object], IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           IERC721Metadata:
            { projectGraph: [Circular],
              name: 'IERC721Metadata',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC721: [Object] },
              inheritsFrom: { IERC721: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' },
           ERC165:
            { projectGraph: [Circular],
              name: 'ERC165',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 supportsInterface: [Array],
                 _registerInterface: [Array] },
              modifiers: {},
              stateVariables:
               { _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC165',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' } },
        inheritsFrom:
         { ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           IERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Metadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_setTokenURI',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 87, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol' },
     ERC721MetadataMintable:
      { projectGraph: [Circular],
        name: 'ERC721MetadataMintable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { mintWithTokenURI:
            [ { name: 'mintWithTokenURI',
                signature: 'mintWithTokenURI(address,uint256,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { minters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _name:
            { functionsWrite: {},
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           InterfaceId_ERC721Metadata:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Metadata',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721Metadata:
            { projectGraph: [Circular],
              name: 'ERC721Metadata',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 name: [Array],
                 symbol: [Array],
                 tokenURI: [Array],
                 _setTokenURI: [Array],
                 _burn: [Array] },
              modifiers: {},
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _tokenURIs: [Object],
                 InterfaceId_ERC721Metadata: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object] },
              dependencies:
               { ERC721: [Object], IERC721Metadata: [Object], ERC165: [Object] },
              inheritsFrom:
               { ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Metadata: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol' },
           MinterRole:
            { projectGraph: [Circular],
              name: 'MinterRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isMinter: [Array],
                 addMinter: [Array],
                 renounceMinter: [Array],
                 _addMinter: [Array],
                 _removeMinter: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables: { minters: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MinterRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 1 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 2 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 3 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 2 },
           ERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol' },
              parameters: [],
              level: 0 },
           IERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' },
              parameters: [],
              level: 1 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721MetadataMintable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'mintWithTokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 32, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721MetadataMintable.sol' },
     ERC721Mintable:
      { projectGraph: [Circular],
        name: 'ERC721Mintable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { minters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers: {},
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom: { ERC165: [Object], IERC165: [Object], IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           MinterRole:
            { projectGraph: [Circular],
              name: 'MinterRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isMinter: [Array],
                 addMinter: [Array],
                 renounceMinter: [Array],
                 _addMinter: [Array],
                 _removeMinter: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables: { minters: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MinterRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Mintable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 28, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol' },
     ERC721Pausable:
      { projectGraph: [Circular],
        name: 'ERC721Pausable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setApprovalForAll:
            [ { name: 'setApprovalForAll',
                signature: 'setApprovalForAll(address,bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers: {},
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom: { ERC165: [Object], IERC165: [Object], IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           Pausable:
            { projectGraph: [Circular],
              name: 'Pausable',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 paused: [Array],
                 pause: [Array],
                 unpause: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 whenPaused: [Object],
                 onlyPauser: [Object] },
              stateVariables: { _paused: [Object] },
              dependencies: { PauserRole: [Object] },
              inheritsFrom: { PauserRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol' },
              parameters: [],
              level: 0 },
           PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Pausable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 41, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Pausable.sol' },
     IERC721:
      { projectGraph: [Circular],
        name: 'IERC721',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC165:
            { projectGraph: [Circular],
              name: 'IERC165',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC165',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' } },
        inheritsFrom:
         { IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ApprovalForAll',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ownerOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getApproved',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isApprovedForAll',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 49, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
     IERC721Enumerable:
      { projectGraph: [Circular],
        name: 'IERC721Enumerable',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' } },
        inheritsFrom:
         { IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 0 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Enumerable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenOfOwnerByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 20, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
     IERC721Full:
      { projectGraph: [Circular],
        name: 'IERC721Full',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
           IERC721Enumerable:
            { projectGraph: [Circular],
              name: 'IERC721Enumerable',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC721: [Object] },
              inheritsFrom: { IERC721: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
           IERC721Metadata:
            { projectGraph: [Circular],
              name: 'IERC721Metadata',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC721: [Object] },
              inheritsFrom: { IERC721: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' } },
        inheritsFrom:
         { IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Enumerable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
              parameters: [],
              level: 0 },
           IERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Full',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes: [],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 12, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Full.sol' },
     IERC721Metadata:
      { projectGraph: [Circular],
        name: 'IERC721Metadata',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' } },
        inheritsFrom:
         { IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 0 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Metadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 13, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' },
     IERC721Receiver:
      { projectGraph: [Circular],
        name: 'IERC721Receiver',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Receiver',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'onERC721Received',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 31, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
     Address:
      { projectGraph: [Circular],
        name: 'Address',
        kind: 'library',
        isAbstract: false,
        functions:
         { isContract:
            [ { name: 'isContract',
                signature: 'isContract(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Address',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'isContract',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 28, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' },
     Arrays:
      { projectGraph: [Circular],
        name: 'Arrays',
        kind: 'library',
        isAbstract: false,
        functions:
         { findUpperBound:
            [ { name: 'findUpperBound',
                signature: 'findUpperBound(uint256[],uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { Math:
            { projectGraph: [Circular],
              name: 'Math',
              kind: 'library',
              isAbstract: false,
              functions: { max: [Array], min: [Array], average: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Math',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/math/Math.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Arrays',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'findUpperBound',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 56, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/Arrays.sol' },
     ReentrancyGuard:
      { projectGraph: [Circular],
        name: 'ReentrancyGuard',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _guardCounter:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ReentrancyGuard',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'nonReentrant',
                parameters: [],
                body: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 34, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
     InnerLibrary:
      { projectGraph: [Circular],
        name: 'InnerLibrary',
        kind: 'library',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'InnerLibrary',
           baseContracts: [],
           subNodes: [],
           kind: 'library',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 6, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' },
     Contract:
      { projectGraph: [Circular],
        name: 'Contract',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { specialValue:
            { functionsWrite: {},
              contract: [Circular],
              name: 'specialValue',
              isArray: false,
              initialValue: 1337,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Contract',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 11, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' },
     RelativeImport:
      { projectGraph: [Circular],
        name: 'RelativeImport',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { InnerLibrary:
            { projectGraph: [Circular],
              name: 'InnerLibrary',
              kind: 'library',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'InnerLibrary',
                 baseContracts: [],
                 subNodes: [],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' },
           Contract:
            { projectGraph: [Circular],
              name: 'Contract',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { specialValue: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Contract',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' } },
        inheritsFrom:
         { Contract:
            { contract:
               { projectGraph: [Circular],
                 name: 'Contract',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RelativeImport',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes: [],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/contract_names/contracts/relative_import.sol' },
     Local:
      { projectGraph: [Circular],
        name: 'Local',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { local:
            { functionsWrite: {},
              contract: [Circular],
              name: 'local',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Local',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/ethpm/contracts/Local.sol' },
     PLCRVoting:
      { projectGraph: [Circular],
        name: 'PLCRVoting',
        kind: 'contract',
        isAbstract: false,
        functions:
         { isExpired:
            [ { name: 'isExpired',
                signature: 'isExpired(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           attrUUID:
            [ { name: 'attrUUID',
                signature: 'attrUUID(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { local:
            { functionsWrite: {},
              contract: [Circular],
              name: 'local',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           MAX_UINT256:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_UINT256',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           name:
            { functionsWrite: {},
              contract: [Circular],
              name: 'name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           decimals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: 'symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Local:
            { projectGraph: [Circular],
              name: 'Local',
              kind: 'contract',
              isAbstract: false,
              functions: { constructor: [Array] },
              modifiers: {},
              stateVariables: { local: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Local',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/ethpm/contracts/Local.sol' } },
        inheritsFrom:
         { EIP20:
            { contract:
               { projectGraph: [Circular],
                 name: 'EIP20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20.sol' },
              parameters: [],
              level: 0 },
           EIP20Interface:
            { contract:
               { projectGraph: [Circular],
                 name: 'EIP20Interface',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' },
              parameters: [],
              level: 1 },
           Local:
            { contract:
               { projectGraph: [Circular],
                 name: 'Local',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/ethpm/contracts/Local.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PLCRVoting',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'isExpired',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'attrUUID',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 15, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/ethpm/contracts/PLCRVoting.sol' },
     EIP20:
      { projectGraph: [Circular],
        name: 'EIP20',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,string,uint8,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { MAX_UINT256:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_UINT256',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           decimals:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { EIP20Interface:
            { projectGraph: [Circular],
              name: 'EIP20Interface',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { totalSupply: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'EIP20Interface',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' } },
        inheritsFrom:
         { EIP20Interface:
            { contract:
               { projectGraph: [Circular],
                 name: 'EIP20Interface',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EIP20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 78, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20.sol' },
     EIP20Factory:
      { projectGraph: [Circular],
        name: 'EIP20Factory',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           verifyEIP20:
            [ { name: 'verifyEIP20',
                signature: 'verifyEIP20(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           codeAt:
            [ { name: 'codeAt',
                signature: 'codeAt(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           createEIP20:
            [ { name: 'createEIP20',
                signature: 'createEIP20(uint256,string,uint8,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { created:
            { functionsWrite: {},
              contract: [Circular],
              name: 'created',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>address[])})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           isEIP20:
            { functionsWrite: {},
              contract: [Circular],
              name: 'isEIP20',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>bool)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           EIP20ByteCode:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'EIP20ByteCode',
              isArray: false,
              initialValue: null,
              type: 'bytes',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { EIP20:
            { projectGraph: [Circular],
              name: 'EIP20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 transfer: [Array],
                 transferFrom: [Array],
                 balanceOf: [Array],
                 approve: [Array],
                 allowance: [Array] },
              modifiers: {},
              stateVariables:
               { MAX_UINT256: [Object],
                 name: [Object],
                 decimals: [Object],
                 symbol: [Object],
                 balances: [Object],
                 allowed: [Object],
                 totalSupply: [Object] },
              dependencies: { EIP20Interface: [Object] },
              inheritsFrom: { EIP20Interface: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'EIP20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EIP20Factory',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'verifyEIP20',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'codeAt',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'createEIP20',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 62, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Factory.sol' },
     EIP20Interface:
      { projectGraph: [Circular],
        name: 'EIP20Interface',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EIP20Interface',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 48, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' },
     Executable:
      { projectGraph: [Circular],
        name: 'Executable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { x:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'x',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Executable',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 10, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/exec/contracts/Executable.sol' },
     ConvertLib:
      { projectGraph: [Circular],
        name: 'ConvertLib',
        kind: 'library',
        isAbstract: false,
        functions:
         { convert:
            [ { name: 'convert',
                signature: 'convert(uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ConvertLib',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'convert',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/external_compile/contracts/ConvertLib.sol' },
     MetaCoin:
      { projectGraph: [Circular],
        name: 'MetaCoin',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sendCoin:
            [ { name: 'sendCoin',
                signature: 'sendCoin(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getBalanceInEth:
            [ { name: 'getBalanceInEth',
                signature: 'getBalanceInEth(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getBalance:
            [ { name: 'getBalance',
                signature: 'getBalance(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ConvertLib:
            { projectGraph: [Circular],
              name: 'ConvertLib',
              kind: 'library',
              isAbstract: false,
              functions: { convert: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ConvertLib',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/external_compile/contracts/ConvertLib.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MetaCoin',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sendCoin',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getBalanceInEth',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getBalance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 34, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/external_compile/contracts/MetaCoin.sol' },
     Branch:
      { projectGraph: [Circular],
        name: 'Branch',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { branch:
            { functionsWrite: {},
              contract: [Circular],
              name: 'branch',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafA:
            { projectGraph: [Circular],
              name: 'LeafA',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafA: [Object] },
              dependencies: { LeafC: [Object] },
              inheritsFrom: { LeafC: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafA',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafA.sol' },
           LeafB:
            { projectGraph: [Circular],
              name: 'LeafB',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafB: [Object] },
              dependencies: { LeafC: [Object] },
              inheritsFrom: { LeafC: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafB',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafB.sol' } },
        inheritsFrom:
         { LeafA:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafA',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafA.sol' },
              parameters: [],
              level: 0 },
           LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 1 },
           LeafB:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafB',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafB.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Branch',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/Branch.sol' },
     LeafA:
      { projectGraph: [Circular],
        name: 'LeafA',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { leafA:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafA',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' } },
        inheritsFrom:
         { LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'LeafA',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafA.sol' },
     LeafB:
      { projectGraph: [Circular],
        name: 'LeafB',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { leafB:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafB',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' } },
        inheritsFrom:
         { LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'LeafB',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafB.sol' },
     LeafC:
      { projectGraph: [Circular],
        name: 'LeafC',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { leafC:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafC',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'LeafC',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 5, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
     LibraryA:
      { projectGraph: [Circular],
        name: 'LibraryA',
        kind: 'library',
        isAbstract: false,
        functions:
         { add:
            [ { name: 'add',
                signature: 'add(uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'LibraryA',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LibraryA.sol' },
     Root:
      { projectGraph: [Circular],
        name: 'Root',
        kind: 'contract',
        isAbstract: false,
        functions:
         { addToRoot:
            [ { name: 'addToRoot',
                signature: 'addToRoot(uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { root:
            { functionsWrite: { addToRoot: [Array] },
              contract: [Circular],
              name: 'root',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           branch:
            { functionsWrite: {},
              contract: [Circular],
              name: 'branch',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           leafA:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafA',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           leafB:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafB',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           leafC:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafC',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Branch:
            { projectGraph: [Circular],
              name: 'Branch',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { branch: [Object] },
              dependencies: { LeafA: [Object], LeafB: [Object] },
              inheritsFrom: { LeafA: [Object], LeafC: [Object], LeafB: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Branch',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/Branch.sol' },
           LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
           LibraryA:
            { projectGraph: [Circular],
              name: 'LibraryA',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LibraryA',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LibraryA.sol' } },
        inheritsFrom:
         { Branch:
            { contract:
               { projectGraph: [Circular],
                 name: 'Branch',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/Branch.sol' },
              parameters: [],
              level: 0 },
           LeafA:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafA',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafA.sol' },
              parameters: [],
              level: 1 },
           LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 2 },
           LeafB:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafB',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafB.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Root',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addToRoot',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 13, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/Root.sol' },
     SameFile1:
      { projectGraph: [Circular],
        name: 'SameFile1',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { samefile1:
            { functionsWrite: {},
              contract: [Circular],
              name: 'samefile1',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' } },
        inheritsFrom:
         { LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SameFile1',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/SameFile.sol' },
     SameFile2:
      { projectGraph: [Circular],
        name: 'SameFile2',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { samefile2:
            { functionsWrite: {},
              contract: [Circular],
              name: 'samefile2',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SameFile2',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 11, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/inheritance/contracts/SameFile.sol' },
     Abstract:
      { projectGraph: [Circular],
        name: 'Abstract',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Abstract',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'method',
                parameters: [],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 5, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/migrations/error/contracts/Abstract.sol' },
     Example:
      { projectGraph: [Circular],
        name: 'Example',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'Example',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Example',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/migrations/error/contracts/Example.sol' },
     ExampleAssert:
      { projectGraph: [Circular],
        name: 'ExampleAssert',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ExampleAssert',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/migrations/error/contracts/ExampleAssert.sol' },
     ExampleRevert:
      { projectGraph: [Circular],
        name: 'ExampleRevert',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ExampleRevert',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/migrations/error/contracts/ExampleRevert.sol' },
     Loops:
      { projectGraph: [Circular],
        name: 'Loops',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Loops',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 11, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/migrations/error/contracts/Loops.sol' },
     RevertWithReason:
      { projectGraph: [Circular],
        name: 'RevertWithReason',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'RevertWithReason',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RevertWithReason',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/migrations/error/contracts/RevertWithReason.sol' },
     UsesExample:
      { projectGraph: [Circular],
        name: 'UsesExample',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'UsesExample',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           other:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'other',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'UsesExample',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 10, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/migrations/error/contracts/UsesExample.sol' },
     IsLibrary:
      { projectGraph: [Circular],
        name: 'IsLibrary',
        kind: 'library',
        isAbstract: false,
        functions:
         { fireIsLibraryEvent:
            [ { name: 'fireIsLibraryEvent',
                signature: 'fireIsLibraryEvent(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'IsLibrary',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IsLibrary',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'IsLibraryEvent',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'fireIsLibraryEvent',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 10, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/migrations/fabric-evm/contracts/IsLibrary.sol' },
     PayableExample:
      { projectGraph: [Circular],
        name: 'PayableExample',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'PayableExample',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PayableExample',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/migrations/fabric-evm/contracts/PayableExample.sol' },
     UsesLibrary:
      { projectGraph: [Circular],
        name: 'UsesLibrary',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           fireIsLibraryEvent:
            [ { name: 'fireIsLibraryEvent',
                signature: 'fireIsLibraryEvent(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           fireUsesLibraryEvent:
            [ { name: 'fireUsesLibraryEvent',
                signature: 'fireUsesLibraryEvent(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IsLibrary:
            { projectGraph: [Circular],
              name: 'IsLibrary',
              kind: 'library',
              isAbstract: false,
              functions: { fireIsLibraryEvent: [Array] },
              modifiers: {},
              stateVariables: { id: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IsLibrary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/migrations/fabric-evm/contracts/IsLibrary.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'UsesLibrary',
           baseContracts: [],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'UsesLibraryEvent',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'fireIsLibraryEvent',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'fireUsesLibraryEvent',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 18, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/migrations/fabric-evm/contracts/UsesLibrary.sol' },
     Importer:
      { projectGraph: [Circular],
        name: 'Importer',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { local:
            { functionsWrite: {},
              contract: [Circular],
              name: 'local',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Importer',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/truffle/test/sources/monorepo/errorproject/contracts/Importer.sol' } },
  structs:
   { Proposal:
      { name: 'Proposal',
        contract:
         { projectGraph: [Circular],
           name: 'BasePoll',
           kind: 'contract',
           isAbstract: true,
           functions:
            { constructor: [ [Object] ],
              getName: [ [Object] ],
              getPollType: [ [Object] ],
              getVoterBaseLogic: [ [Object] ],
              getProtocolAddresses: [ [Object] ],
              getStartTime: [ [Object] ],
              getEndTime: [ [Object] ],
              getProposals: [ [Object] ],
              getVoteTally: [ [Object] ],
              getVoteTallies: [ [Object] ],
              getVoterCount: [ [Object] ],
              getVoterCounts: [ [Object] ],
              winningProposal: [ [Object] ],
              hasPollStarted: [ [Object] ] },
           modifiers:
            { isValidVoter:
               { name: 'isValidVoter',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              isPollStarted:
               { name: 'isPollStarted',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { pollName:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'pollName',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              pollType:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'pollType',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              voterBaseLogic:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'voterBaseLogic',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              startTime:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'startTime',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              endTime:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'endTime',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              proposals:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'proposals',
                 isArray: true,
                 initialValue: [],
                 type: 'BasePoll.Proposal[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              protocolAddresses:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'protocolAddresses',
                 isArray: true,
                 initialValue: [],
                 type: 'address[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              voters:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'voters',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>BasePoll.Voter)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { IERC1261:
               { projectGraph: [Circular],
                 name: 'IERC1261',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              IERC1261Metadata:
               { projectGraph: [Circular],
                 name: 'IERC1261Metadata',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              IPoll:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' } },
           inheritsFrom: { IPoll: { contract: [Object], parameters: [], level: 0 } },
           structs:
            { Proposal: [Circular],
              Voter: { name: 'Voter', contract: [Circular], parameters: [Array] } },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'BasePoll',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
        parameters:
         [ { name: 'voteCount',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'voteWeight',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'name',
             isUserDefinedType: false,
             type: 'bytes32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'BasePoll.Proposal':
      { name: 'Proposal',
        contract:
         { projectGraph: [Circular],
           name: 'BasePoll',
           kind: 'contract',
           isAbstract: true,
           functions:
            { constructor: [ [Object] ],
              getName: [ [Object] ],
              getPollType: [ [Object] ],
              getVoterBaseLogic: [ [Object] ],
              getProtocolAddresses: [ [Object] ],
              getStartTime: [ [Object] ],
              getEndTime: [ [Object] ],
              getProposals: [ [Object] ],
              getVoteTally: [ [Object] ],
              getVoteTallies: [ [Object] ],
              getVoterCount: [ [Object] ],
              getVoterCounts: [ [Object] ],
              winningProposal: [ [Object] ],
              hasPollStarted: [ [Object] ] },
           modifiers:
            { isValidVoter:
               { name: 'isValidVoter',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              isPollStarted:
               { name: 'isPollStarted',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { pollName:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'pollName',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              pollType:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'pollType',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              voterBaseLogic:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'voterBaseLogic',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              startTime:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'startTime',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              endTime:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'endTime',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              proposals:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'proposals',
                 isArray: true,
                 initialValue: [],
                 type: 'BasePoll.Proposal[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              protocolAddresses:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'protocolAddresses',
                 isArray: true,
                 initialValue: [],
                 type: 'address[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              voters:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'voters',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>BasePoll.Voter)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { IERC1261:
               { projectGraph: [Circular],
                 name: 'IERC1261',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              IERC1261Metadata:
               { projectGraph: [Circular],
                 name: 'IERC1261Metadata',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              IPoll:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' } },
           inheritsFrom: { IPoll: { contract: [Object], parameters: [], level: 0 } },
           structs:
            { Proposal: [Circular],
              Voter: { name: 'Voter', contract: [Circular], parameters: [Array] } },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'BasePoll',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
        parameters:
         [ { name: 'voteCount',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'voteWeight',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'name',
             isUserDefinedType: false,
             type: 'bytes32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Voter:
      { name: 'Voter',
        contract:
         { projectGraph: [Circular],
           name: 'BasePoll',
           kind: 'contract',
           isAbstract: true,
           functions:
            { constructor: [ [Object] ],
              getName: [ [Object] ],
              getPollType: [ [Object] ],
              getVoterBaseLogic: [ [Object] ],
              getProtocolAddresses: [ [Object] ],
              getStartTime: [ [Object] ],
              getEndTime: [ [Object] ],
              getProposals: [ [Object] ],
              getVoteTally: [ [Object] ],
              getVoteTallies: [ [Object] ],
              getVoterCount: [ [Object] ],
              getVoterCounts: [ [Object] ],
              winningProposal: [ [Object] ],
              hasPollStarted: [ [Object] ] },
           modifiers:
            { isValidVoter:
               { name: 'isValidVoter',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              isPollStarted:
               { name: 'isPollStarted',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { pollName:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'pollName',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              pollType:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'pollType',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              voterBaseLogic:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'voterBaseLogic',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              startTime:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'startTime',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              endTime:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'endTime',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              proposals:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'proposals',
                 isArray: true,
                 initialValue: [],
                 type: 'BasePoll.Proposal[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              protocolAddresses:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'protocolAddresses',
                 isArray: true,
                 initialValue: [],
                 type: 'address[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              voters:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'voters',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>BasePoll.Voter)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { IERC1261:
               { projectGraph: [Circular],
                 name: 'IERC1261',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              IERC1261Metadata:
               { projectGraph: [Circular],
                 name: 'IERC1261Metadata',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              IPoll:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' } },
           inheritsFrom: { IPoll: { contract: [Object], parameters: [], level: 0 } },
           structs:
            { Proposal:
               { name: 'Proposal', contract: [Circular], parameters: [Array] },
              Voter: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'BasePoll',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
        parameters:
         [ { name: 'voted',
             isUserDefinedType: false,
             type: 'bool',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'vote',
             isUserDefinedType: false,
             type: 'uint8',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'delegate',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'weight',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'BasePoll.Voter':
      { name: 'Voter',
        contract:
         { projectGraph: [Circular],
           name: 'BasePoll',
           kind: 'contract',
           isAbstract: true,
           functions:
            { constructor: [ [Object] ],
              getName: [ [Object] ],
              getPollType: [ [Object] ],
              getVoterBaseLogic: [ [Object] ],
              getProtocolAddresses: [ [Object] ],
              getStartTime: [ [Object] ],
              getEndTime: [ [Object] ],
              getProposals: [ [Object] ],
              getVoteTally: [ [Object] ],
              getVoteTallies: [ [Object] ],
              getVoterCount: [ [Object] ],
              getVoterCounts: [ [Object] ],
              winningProposal: [ [Object] ],
              hasPollStarted: [ [Object] ] },
           modifiers:
            { isValidVoter:
               { name: 'isValidVoter',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              isPollStarted:
               { name: 'isPollStarted',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { pollName:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'pollName',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              pollType:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'pollType',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              voterBaseLogic:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'voterBaseLogic',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              startTime:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'startTime',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              endTime:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'endTime',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              proposals:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'proposals',
                 isArray: true,
                 initialValue: [],
                 type: 'BasePoll.Proposal[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              protocolAddresses:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'protocolAddresses',
                 isArray: true,
                 initialValue: [],
                 type: 'address[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              voters:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'voters',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>BasePoll.Voter)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { IERC1261:
               { projectGraph: [Circular],
                 name: 'IERC1261',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              IERC1261Metadata:
               { projectGraph: [Circular],
                 name: 'IERC1261Metadata',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              IPoll:
               { projectGraph: [Circular],
                 name: 'IPoll',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/IPoll.sol' } },
           inheritsFrom: { IPoll: { contract: [Object], parameters: [], level: 0 } },
           structs:
            { Proposal:
               { name: 'Proposal', contract: [Circular], parameters: [Array] },
              Voter: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'BasePoll',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/poll/BasePoll.sol' },
        parameters:
         [ { name: 'voted',
             isUserDefinedType: false,
             type: 'bool',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'vote',
             isUserDefinedType: false,
             type: 'uint8',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'delegate',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'weight',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     KarmaData:
      { name: 'KarmaData',
        contract:
         { projectGraph: [Circular],
           name: 'KarmaProtocol',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              getCurrentKarma: [ [Object] ],
              getTotalKarma: [ [Object] ],
              upvote: [ [Object] ],
              downvote: [ [Object] ] },
           modifiers:
            { isCurrentHolder:
               { name: 'isCurrentHolder',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { karma:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'karma',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>KarmaProtocol.KarmaData)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              totalKarmaPresent:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'totalKarmaPresent',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              orgName:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'orgName',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'internal',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              orgSymbol:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'orgSymbol',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'internal',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              attributeValueCollection:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'attributeValueCollection',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint=>bytes32[])})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              attributeNames:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'attributeNames',
                 isArray: true,
                 initialValue: [],
                 type: 'bytes32[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              currentHolders:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'currentHolders',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>MembershipVerificationToken.MemberData)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              pendingRequests:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'pendingRequests',
                 isArray: false,
                 initialValue: null,
                 type:
                  'mapping(address=>MembershipVerificationToken.PendingRequest)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              allHolders:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'allHolders',
                 isArray: true,
                 initialValue: [],
                 type: 'address[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              currentMemberCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'currentMemberCount',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _InterfaceId_ERC165:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_InterfaceId_ERC165',
                 isArray: false,
                 initialValue: 33540519,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              _supportedInterfaces:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_supportedInterfaces',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes4=>bool)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { ERC1261MetaData:
               { projectGraph: [Circular],
                 name: 'ERC1261MetaData',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/ERC1261MetaData.sol' } },
           inheritsFrom:
            { ERC1261MetaData: { contract: [Object], parameters: [], level: 0 },
              MembershipVerificationToken: { contract: [Object], parameters: [], level: 1 },
              IERC1261: { contract: [Object], parameters: [], level: 2 },
              Ownable: { contract: [Object], parameters: [], level: 2 },
              ERC165: { contract: [Object], parameters: [], level: 2 },
              IERC165: { contract: [Object], parameters: [], level: 3 },
              IERC1261Metadata: { contract: [Object], parameters: [], level: 1 } },
           structs: { KarmaData: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'KarmaProtocol',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/protocol/KarmaProtocol.sol' },
        parameters:
         [ { name: 'currentKarma',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'givenFrom',
             isUserDefinedType: false,
             type: 'mapping(address=>bool)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'KarmaProtocol.KarmaData':
      { name: 'KarmaData',
        contract:
         { projectGraph: [Circular],
           name: 'KarmaProtocol',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              getCurrentKarma: [ [Object] ],
              getTotalKarma: [ [Object] ],
              upvote: [ [Object] ],
              downvote: [ [Object] ] },
           modifiers:
            { isCurrentHolder:
               { name: 'isCurrentHolder',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { karma:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'karma',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>KarmaProtocol.KarmaData)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              totalKarmaPresent:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'totalKarmaPresent',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              orgName:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'orgName',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'internal',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              orgSymbol:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'orgSymbol',
                 isArray: false,
                 initialValue: null,
                 type: 'bytes32',
                 visibility: 'internal',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              attributeValueCollection:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'attributeValueCollection',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint=>bytes32[])})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              attributeNames:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'attributeNames',
                 isArray: true,
                 initialValue: [],
                 type: 'bytes32[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              currentHolders:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'currentHolders',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>MembershipVerificationToken.MemberData)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              pendingRequests:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'pendingRequests',
                 isArray: false,
                 initialValue: null,
                 type:
                  'mapping(address=>MembershipVerificationToken.PendingRequest)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              allHolders:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'allHolders',
                 isArray: true,
                 initialValue: [],
                 type: 'address[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              currentMemberCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'currentMemberCount',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _InterfaceId_ERC165:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_InterfaceId_ERC165',
                 isArray: false,
                 initialValue: 33540519,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              _supportedInterfaces:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_supportedInterfaces',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes4=>bool)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { ERC1261MetaData:
               { projectGraph: [Circular],
                 name: 'ERC1261MetaData',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/ERC1261MetaData.sol' } },
           inheritsFrom:
            { ERC1261MetaData: { contract: [Object], parameters: [], level: 0 },
              MembershipVerificationToken: { contract: [Object], parameters: [], level: 1 },
              IERC1261: { contract: [Object], parameters: [], level: 2 },
              Ownable: { contract: [Object], parameters: [], level: 2 },
              ERC165: { contract: [Object], parameters: [], level: 2 },
              IERC165: { contract: [Object], parameters: [], level: 3 },
              IERC1261Metadata: { contract: [Object], parameters: [], level: 1 } },
           structs: { KarmaData: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'KarmaProtocol',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/protocol/KarmaProtocol.sol' },
        parameters:
         [ { name: 'currentKarma',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'givenFrom',
             isUserDefinedType: false,
             type: 'mapping(address=>bool)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     FreezablePolls:
      { name: 'FreezablePolls',
        contract:
         { projectGraph: [Circular],
           name: 'FreezableToken',
           kind: 'contract',
           isAbstract: false,
           functions:
            { isFrozen: [ [Object] ],
              freezeAccount: [ [Object] ],
              unFreezeAccount: [ [Object] ],
              transfer: [ [Object] ],
              transferFrom: [ [Object] ],
              getTotalMintableSupply: [ [Object] ],
              mintingFinished: [ [Object] ],
              mint: [ [Object] ],
              finishMinting: [ [Object] ] },
           modifiers:
            { onlyBeforeMintingFinished:
               { name: 'onlyBeforeMintingFinished',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              canTransfer:
               { name: 'canTransfer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] } },
           stateVariables:
            { _mintingFinished:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_mintingFinished',
                 isArray: false,
                 initialValue: false,
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              totalMintableSupply:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'totalMintableSupply',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              frozenAccounts:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'frozenAccounts',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>FreezableToken.FreezablePolls)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _balances:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_balances',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _allowed:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_allowed',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>mapping(address=>uint256)}))})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _totalSupply:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_totalSupply',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { ERC20:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              IFreezableToken:
               { projectGraph: [Circular],
                 name: 'IFreezableToken',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/IFreezableToken.sol' } },
           inheritsFrom:
            { ERC20: { contract: [Object], parameters: [], level: 0 },
              IERC20: { contract: [Object], parameters: [], level: 1 },
              IFreezableToken: { contract: [Object], parameters: [], level: 0 } },
           structs: { FreezablePolls: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'FreezableToken',
              baseContracts: [ [Object], [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/FreezableToken.sol' },
        parameters:
         [ { name: 'currentPollsParticipating',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'pollAddress',
             isUserDefinedType: false,
             type: 'mapping(address=>bool)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'FreezableToken.FreezablePolls':
      { name: 'FreezablePolls',
        contract:
         { projectGraph: [Circular],
           name: 'FreezableToken',
           kind: 'contract',
           isAbstract: false,
           functions:
            { isFrozen: [ [Object] ],
              freezeAccount: [ [Object] ],
              unFreezeAccount: [ [Object] ],
              transfer: [ [Object] ],
              transferFrom: [ [Object] ],
              getTotalMintableSupply: [ [Object] ],
              mintingFinished: [ [Object] ],
              mint: [ [Object] ],
              finishMinting: [ [Object] ] },
           modifiers:
            { onlyBeforeMintingFinished:
               { name: 'onlyBeforeMintingFinished',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              canTransfer:
               { name: 'canTransfer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [Array] } },
           stateVariables:
            { _mintingFinished:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_mintingFinished',
                 isArray: false,
                 initialValue: false,
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              totalMintableSupply:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'totalMintableSupply',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              frozenAccounts:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'frozenAccounts',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>FreezableToken.FreezablePolls)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _balances:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_balances',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _allowed:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_allowed',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>mapping(address=>uint256)}))})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _totalSupply:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_totalSupply',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { ERC20:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              IFreezableToken:
               { projectGraph: [Circular],
                 name: 'IFreezableToken',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/IFreezableToken.sol' } },
           inheritsFrom:
            { ERC20: { contract: [Object], parameters: [], level: 0 },
              IERC20: { contract: [Object], parameters: [], level: 1 },
              IFreezableToken: { contract: [Object], parameters: [], level: 0 } },
           structs: { FreezablePolls: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'FreezableToken',
              baseContracts: [ [Object], [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/electusvoting/contracts/Token/FreezableToken.sol' },
        parameters:
         [ { name: 'currentPollsParticipating',
             isUserDefinedType: false,
             type: 'uint',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'pollAddress',
             isUserDefinedType: false,
             type: 'mapping(address=>bool)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     MemberData:
      { name: 'MemberData',
        contract:
         { projectGraph: [Circular],
           name: 'MembershipVerificationToken',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              requestMembership: [ [Object] ],
              forfeitMembership: [ [Object] ],
              approveRequest: [ [Object] ],
              discardRequest: [ [Object] ],
              assignTo: [ [Object] ],
              revokeFrom: [ [Object] ],
              addAttributeSet: [ [Object] ],
              modifyAttributeByIndex: [ [Object] ],
              getAllMembers: [ [Object] ],
              getCurrentMemberCount: [ [Object] ],
              getAttributeNames: [ [Object] ],
              getAttributes: [ [Object] ],
              getAttributeExhaustiveCollection: [ [Object] ],
              getAttributeByIndex: [ [Object] ],
              isCurrentMember: [ [Object] ],
              _assign: [ [Object] ],
              _revoke: [ [Object] ] },
           modifiers:
            { isCurrentHolder:
               { name: 'isCurrentHolder',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { attributeValueCollection:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'attributeValueCollection',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint=>bytes32[])})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              attributeNames:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'attributeNames',
                 isArray: true,
                 initialValue: [],
                 type: 'bytes32[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              currentHolders:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'currentHolders',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>MembershipVerificationToken.MemberData)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              pendingRequests:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'pendingRequests',
                 isArray: false,
                 initialValue: null,
                 type:
                  'mapping(address=>MembershipVerificationToken.PendingRequest)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              allHolders:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'allHolders',
                 isArray: true,
                 initialValue: [],
                 type: 'address[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              currentMemberCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'currentMemberCount',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _InterfaceId_ERC165:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_InterfaceId_ERC165',
                 isArray: false,
                 initialValue: 33540519,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              _supportedInterfaces:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_supportedInterfaces',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes4=>bool)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
              ERC165:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              IERC1261:
               { projectGraph: [Circular],
                 name: 'IERC1261',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              IERC1261Metadata:
               { projectGraph: [Circular],
                 name: 'IERC1261Metadata',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' } },
           inheritsFrom:
            { IERC1261: { contract: [Object], parameters: [], level: 0 },
              Ownable: { contract: [Object], parameters: [], level: 0 },
              ERC165: { contract: [Object], parameters: [], level: 0 },
              IERC165: { contract: [Object], parameters: [], level: 1 } },
           structs:
            { MemberData: [Circular],
              PendingRequest:
               { name: 'PendingRequest',
                 contract: [Circular],
                 parameters: [Array] } },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'MembershipVerificationToken',
              baseContracts: [ [Object], [Object], [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/MembershipVerificationToken.sol' },
        parameters:
         [ { name: 'hasToken',
             isUserDefinedType: false,
             type: 'bool',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'data',
             isUserDefinedType: false,
             type: 'uint[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'MembershipVerificationToken.MemberData':
      { name: 'MemberData',
        contract:
         { projectGraph: [Circular],
           name: 'MembershipVerificationToken',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              requestMembership: [ [Object] ],
              forfeitMembership: [ [Object] ],
              approveRequest: [ [Object] ],
              discardRequest: [ [Object] ],
              assignTo: [ [Object] ],
              revokeFrom: [ [Object] ],
              addAttributeSet: [ [Object] ],
              modifyAttributeByIndex: [ [Object] ],
              getAllMembers: [ [Object] ],
              getCurrentMemberCount: [ [Object] ],
              getAttributeNames: [ [Object] ],
              getAttributes: [ [Object] ],
              getAttributeExhaustiveCollection: [ [Object] ],
              getAttributeByIndex: [ [Object] ],
              isCurrentMember: [ [Object] ],
              _assign: [ [Object] ],
              _revoke: [ [Object] ] },
           modifiers:
            { isCurrentHolder:
               { name: 'isCurrentHolder',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { attributeValueCollection:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'attributeValueCollection',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint=>bytes32[])})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              attributeNames:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'attributeNames',
                 isArray: true,
                 initialValue: [],
                 type: 'bytes32[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              currentHolders:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'currentHolders',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>MembershipVerificationToken.MemberData)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              pendingRequests:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'pendingRequests',
                 isArray: false,
                 initialValue: null,
                 type:
                  'mapping(address=>MembershipVerificationToken.PendingRequest)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              allHolders:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'allHolders',
                 isArray: true,
                 initialValue: [],
                 type: 'address[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              currentMemberCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'currentMemberCount',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _InterfaceId_ERC165:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_InterfaceId_ERC165',
                 isArray: false,
                 initialValue: 33540519,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              _supportedInterfaces:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_supportedInterfaces',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes4=>bool)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
              ERC165:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              IERC1261:
               { projectGraph: [Circular],
                 name: 'IERC1261',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              IERC1261Metadata:
               { projectGraph: [Circular],
                 name: 'IERC1261Metadata',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' } },
           inheritsFrom:
            { IERC1261: { contract: [Object], parameters: [], level: 0 },
              Ownable: { contract: [Object], parameters: [], level: 0 },
              ERC165: { contract: [Object], parameters: [], level: 0 },
              IERC165: { contract: [Object], parameters: [], level: 1 } },
           structs:
            { MemberData: [Circular],
              PendingRequest:
               { name: 'PendingRequest',
                 contract: [Circular],
                 parameters: [Array] } },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'MembershipVerificationToken',
              baseContracts: [ [Object], [Object], [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/MembershipVerificationToken.sol' },
        parameters:
         [ { name: 'hasToken',
             isUserDefinedType: false,
             type: 'bool',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'data',
             isUserDefinedType: false,
             type: 'uint[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     PendingRequest:
      { name: 'PendingRequest',
        contract:
         { projectGraph: [Circular],
           name: 'MembershipVerificationToken',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              requestMembership: [ [Object] ],
              forfeitMembership: [ [Object] ],
              approveRequest: [ [Object] ],
              discardRequest: [ [Object] ],
              assignTo: [ [Object] ],
              revokeFrom: [ [Object] ],
              addAttributeSet: [ [Object] ],
              modifyAttributeByIndex: [ [Object] ],
              getAllMembers: [ [Object] ],
              getCurrentMemberCount: [ [Object] ],
              getAttributeNames: [ [Object] ],
              getAttributes: [ [Object] ],
              getAttributeExhaustiveCollection: [ [Object] ],
              getAttributeByIndex: [ [Object] ],
              isCurrentMember: [ [Object] ],
              _assign: [ [Object] ],
              _revoke: [ [Object] ] },
           modifiers:
            { isCurrentHolder:
               { name: 'isCurrentHolder',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { attributeValueCollection:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'attributeValueCollection',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint=>bytes32[])})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              attributeNames:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'attributeNames',
                 isArray: true,
                 initialValue: [],
                 type: 'bytes32[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              currentHolders:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'currentHolders',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>MembershipVerificationToken.MemberData)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              pendingRequests:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'pendingRequests',
                 isArray: false,
                 initialValue: null,
                 type:
                  'mapping(address=>MembershipVerificationToken.PendingRequest)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              allHolders:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'allHolders',
                 isArray: true,
                 initialValue: [],
                 type: 'address[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              currentMemberCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'currentMemberCount',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _InterfaceId_ERC165:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_InterfaceId_ERC165',
                 isArray: false,
                 initialValue: 33540519,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              _supportedInterfaces:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_supportedInterfaces',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes4=>bool)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
              ERC165:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              IERC1261:
               { projectGraph: [Circular],
                 name: 'IERC1261',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              IERC1261Metadata:
               { projectGraph: [Circular],
                 name: 'IERC1261Metadata',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' } },
           inheritsFrom:
            { IERC1261: { contract: [Object], parameters: [], level: 0 },
              Ownable: { contract: [Object], parameters: [], level: 0 },
              ERC165: { contract: [Object], parameters: [], level: 0 },
              IERC165: { contract: [Object], parameters: [], level: 1 } },
           structs:
            { MemberData:
               { name: 'MemberData', contract: [Circular], parameters: [Array] },
              PendingRequest: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'MembershipVerificationToken',
              baseContracts: [ [Object], [Object], [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/MembershipVerificationToken.sol' },
        parameters:
         [ { name: 'isPending',
             isUserDefinedType: false,
             type: 'bool',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'attributes',
             isUserDefinedType: false,
             type: 'uint[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'MembershipVerificationToken.PendingRequest':
      { name: 'PendingRequest',
        contract:
         { projectGraph: [Circular],
           name: 'MembershipVerificationToken',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              requestMembership: [ [Object] ],
              forfeitMembership: [ [Object] ],
              approveRequest: [ [Object] ],
              discardRequest: [ [Object] ],
              assignTo: [ [Object] ],
              revokeFrom: [ [Object] ],
              addAttributeSet: [ [Object] ],
              modifyAttributeByIndex: [ [Object] ],
              getAllMembers: [ [Object] ],
              getCurrentMemberCount: [ [Object] ],
              getAttributeNames: [ [Object] ],
              getAttributes: [ [Object] ],
              getAttributeExhaustiveCollection: [ [Object] ],
              getAttributeByIndex: [ [Object] ],
              isCurrentMember: [ [Object] ],
              _assign: [ [Object] ],
              _revoke: [ [Object] ] },
           modifiers:
            { isCurrentHolder:
               { name: 'isCurrentHolder',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { attributeValueCollection:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'attributeValueCollection',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint=>bytes32[])})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              attributeNames:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'attributeNames',
                 isArray: true,
                 initialValue: [],
                 type: 'bytes32[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              currentHolders:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'currentHolders',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>MembershipVerificationToken.MemberData)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              pendingRequests:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'pendingRequests',
                 isArray: false,
                 initialValue: null,
                 type:
                  'mapping(address=>MembershipVerificationToken.PendingRequest)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              allHolders:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'allHolders',
                 isArray: true,
                 initialValue: [],
                 type: 'address[]',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              currentMemberCount:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'currentMemberCount',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _InterfaceId_ERC165:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_InterfaceId_ERC165',
                 isArray: false,
                 initialValue: 33540519,
                 type: 'bytes4',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              _supportedInterfaces:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_supportedInterfaces',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes4=>bool)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
              ERC165:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              IERC1261:
               { projectGraph: [Circular],
                 name: 'IERC1261',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' },
              IERC1261Metadata:
               { projectGraph: [Circular],
                 name: 'IERC1261Metadata',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/Protocol/IERC1261.sol' } },
           inheritsFrom:
            { IERC1261: { contract: [Object], parameters: [], level: 0 },
              Ownable: { contract: [Object], parameters: [], level: 0 },
              ERC165: { contract: [Object], parameters: [], level: 0 },
              IERC165: { contract: [Object], parameters: [], level: 1 } },
           structs:
            { MemberData:
               { name: 'MemberData', contract: [Circular], parameters: [Array] },
              PendingRequest: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'MembershipVerificationToken',
              baseContracts: [ [Object], [Object], [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/membershipverificationtoken/contracts/MembershipVerificationToken.sol' },
        parameters:
         [ { name: 'isPending',
             isUserDefinedType: false,
             type: 'bool',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'attributes',
             isUserDefinedType: false,
             type: 'uint[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Role:
      { name: 'Role',
        contract:
         { projectGraph: [Circular],
           name: 'Roles',
           kind: 'library',
           isAbstract: false,
           functions:
            { add: [ [Object] ], remove: [ [Object] ], has: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Role: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Roles',
              baseContracts: [],
              subNodes: [ [Object], [Object], [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' },
        parameters:
         [ { name: 'bearer',
             isUserDefinedType: false,
             type: 'mapping(address=>bool)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Roles.Role':
      { name: 'Role',
        contract:
         { projectGraph: [Circular],
           name: 'Roles',
           kind: 'library',
           isAbstract: false,
           functions:
            { add: [ [Object] ], remove: [ [Object] ], has: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Role: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Roles',
              baseContracts: [],
              subNodes: [ [Object], [Object], [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' },
        parameters:
         [ { name: 'bearer',
             isUserDefinedType: false,
             type: 'mapping(address=>bool)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Counter:
      { name: 'Counter',
        contract:
         { projectGraph: [Circular],
           name: 'Counter',
           kind: 'library',
           isAbstract: false,
           functions: { next: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Counter: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Counter',
              baseContracts: [],
              subNodes: [ [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/drafts/Counter.sol' },
        parameters:
         [ { name: 'current',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Counter.Counter':
      { name: 'Counter',
        contract:
         { projectGraph: [Circular],
           name: 'Counter',
           kind: 'library',
           isAbstract: false,
           functions: { next: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Counter: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Counter',
              baseContracts: [],
              subNodes: [ [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/drafts/Counter.sol' },
        parameters:
         [ { name: 'current',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] } },
  enums:
   { State:
      { name: 'State',
        contract:
         { projectGraph: [Circular],
           name: 'RefundEscrow',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              state: [ [Object] ],
              beneficiary: [ [Object] ],
              deposit: [ [Object] ],
              close: [ [Object] ],
              enableRefunds: [ [Object] ],
              beneficiaryWithdraw: [ [Object] ],
              withdrawalAllowed: [ [Object] ] },
           modifiers:
            { onlyPrimary:
               { name: 'onlyPrimary',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { _state:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_state',
                 isArray: false,
                 initialValue: null,
                 type: 'State',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _beneficiary:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_beneficiary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _primary:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_primary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _deposits:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_deposits',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { ConditionalEscrow:
               { projectGraph: [Circular],
                 name: 'ConditionalEscrow',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' } },
           inheritsFrom:
            { ConditionalEscrow: { contract: [Object], parameters: [], level: 0 },
              Escrow: { contract: [Object], parameters: [], level: 1 },
              Secondary: { contract: [Object], parameters: [], level: 2 } },
           structs: {},
           enums: { State: [Circular] },
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'RefundEscrow',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/escrow/RefundEscrow.sol' },
        members: [ 'Active', 'Refunding', 'Closed' ] },
     'RefundEscrow.State':
      { name: 'State',
        contract:
         { projectGraph: [Circular],
           name: 'RefundEscrow',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              state: [ [Object] ],
              beneficiary: [ [Object] ],
              deposit: [ [Object] ],
              close: [ [Object] ],
              enableRefunds: [ [Object] ],
              beneficiaryWithdraw: [ [Object] ],
              withdrawalAllowed: [ [Object] ] },
           modifiers:
            { onlyPrimary:
               { name: 'onlyPrimary',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { _state:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_state',
                 isArray: false,
                 initialValue: null,
                 type: 'State',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _beneficiary:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_beneficiary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _primary:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_primary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _deposits:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_deposits',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { ConditionalEscrow:
               { projectGraph: [Circular],
                 name: 'ConditionalEscrow',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' } },
           inheritsFrom:
            { ConditionalEscrow: { contract: [Object], parameters: [], level: 0 },
              Escrow: { contract: [Object], parameters: [], level: 1 },
              Secondary: { contract: [Object], parameters: [], level: 2 } },
           structs: {},
           enums: { State: [Circular] },
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'RefundEscrow',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/Action/node_modules/openzeppelin-solidity/contracts/payment/escrow/RefundEscrow.sol' },
        members: [ 'Active', 'Refunding', 'Closed' ] } } }