const truffleAssert = require('truffle-assertions');
const ActionTest = artifacts.require("ActionTest");
const FreezableTestToken = artifacts.require("FreezableTestToken");
const TokenProportionalCapped = artifacts.require("electusvoting/contracts/poll/TokenProportionalCapped.sol");
const TokenProportionalUncapped = artifacts.require("electusvoting/contracts/poll/TokenProportionalUncapped.sol");
const Protocol = artifacts.require("electusvoting/contracts/protocol/Protocol.sol");
const TokenProportionalCappedTest = artifacts.require("electusvoting/contracts/testContracts/TokenProportionalCappedTest.sol");
const TokenProportionalUncappedTest = artifacts.require("electusvoting/contracts/testContracts/TokenProportionalUncappedTest.sol");
const FreezableToken = artifacts.require("electusvoting/contracts/Token/FreezableToken.sol");
const ERC1261MetaData = artifacts.require("membershipverificationtoken/contracts/ERC1261MetaData.sol");
const MembershipVerificationToken = artifacts.require("membershipverificationtoken/contracts/MembershipVerificationToken.sol");
const SafeMath = artifacts.require("openzeppelin-solidity/contracts/math/SafeMath.sol");
const ERC20 = artifacts.require("openzeppelin-solidity/contracts/token/ERC20/ERC20.sol");

contract("ActionTest",(accounts)=>{
  let trace = false;
  let contractSafeMath = null;
  let contractERC20 = null;
  let contractFreezableToken = null;
  let contractProtocol = null;
  let contractERC1261MetaData = null;
  let contractMembershipVerificationToken = null;
  let contractTokenProportionalCapped = null;
  let contractTokenProportionalUncapped = null;
  let contractTokenProportionalUncappedTest = null;
  let contractTokenProportionalCappedTest = null;
  let contractFreezableTestToken = null;
  let contractActionTest = null;
  beforeEach(async () => {
    contractSafeMath = await SafeMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');
    ERC20.link("SafeMath",contractSafeMath.address);
    contractERC20 = await ERC20.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ERC20.new({from: accounts[0]}');
    contractFreezableToken = await FreezableToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: FreezableToken.new({from: accounts[0]}');
    contractProtocol = await Protocol.new([104,105,53,83,53,119,194,61,62,231,142,140,105,229,91,175,26,196,245,150,66,135,65,43,94,150,98,239,73,199,49,28],[7,125,22,208,246,114,92,181,155,206,82,218,254,152,111,206,76,99,189,230,160,52,252,215,56,203,244,250,122,218,53,111],{from:accounts[0]});
    if(trace) console.log('SUCESSO: Protocol.new([104,105,53,83,53,119,194,61,62,231,142,140,105,229,91,175,26,196,245,150,66,135,65,43,94,150,98,239,73,199,49,28],[7,125,22,208,246,114,92,181,155,206,82,218,254,152,111,206,76,99,189,230,160,52,252,215,56,203,244,250,122,218,53,111],{from:accounts[0]}');
    contractERC1261MetaData = await ERC1261MetaData.new([181,189,153,216,73,232,252,91,255,65,206,247,195,78,48,6,56,197,62,238,2,196,60,102,209,155,106,37,169,101,35,232],[217,109,216,85,38,93,97,222,126,2,140,26,64,162,237,155,202,65,20,62,159,12,129,194,105,85,62,189,58,56,101,37],{from:accounts[0]});
    if(trace) console.log('SUCESSO: ERC1261MetaData.new([181,189,153,216,73,232,252,91,255,65,206,247,195,78,48,6,56,197,62,238,2,196,60,102,209,155,106,37,169,101,35,232],[217,109,216,85,38,93,97,222,126,2,140,26,64,162,237,155,202,65,20,62,159,12,129,194,105,85,62,189,58,56,101,37],{from:accounts[0]}');
    contractMembershipVerificationToken = await MembershipVerificationToken.new({from:accounts[0]});
    if(trace) console.log('SUCESSO: MembershipVerificationToken.new({from:accounts[0]}');
    contractTokenProportionalUncappedTest = await TokenProportionalUncappedTest.new([contractERC1261MetaData.address,contractERC1261MetaData.address],[[181,69,54,165,75,16,133,200,73,232,177,107,101,226,246,160,86,49,124,233,79,162,124,125,20,66,9,164,90,60,232,92]],contractFreezableToken.address,[33,11,105,181,118,164,62,231,227,223,51,143,90,25,55,157,69,191,228,108,212,38,210,206,84,76,24,216,137,142,150,170],[110,56,119,9,40,161,82,130,14,215,164,224,178,148,78,172,174,230,150,244,193,196,63,56,116,182,66,160,253,44,172,75],[167,117,28,248,49,165,171,221,209,215,123,221,216,248,66,93,214,179,84,0,225,77,215,244,144,158,219,8,124,180,215,120],100001,2014223715,{from:accounts[0]});
    if(trace) console.log('SUCESSO: TokenProportionalUncappedTest.new([contractERC1261MetaData.address,contractERC1261MetaData.address],[[181,69,54,165,75,16,133,200,73,232,177,107,101,226,246,160,86,49,124,233,79,162,124,125,20,66,9,164,90,60,232,92]],contractFreezableToken.address,[33,11,105,181,118,164,62,231,227,223,51,143,90,25,55,157,69,191,228,108,212,38,210,206,84,76,24,216,137,142,150,170],[110,56,119,9,40,161,82,130,14,215,164,224,178,148,78,172,174,230,150,244,193,196,63,56,116,182,66,160,253,44,172,75],[167,117,28,248,49,165,171,221,209,215,123,221,216,248,66,93,214,179,84,0,225,77,215,244,144,158,219,8,124,180,215,120],100001,2014223715,{from:accounts[0]}');
    contractTokenProportionalCappedTest = await TokenProportionalCappedTest.new([contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address],[[46,161,140,62,73,76,234,169,195,111,49,247,85,189,186,216,161,181,245,182,247,162,64,121,246,253,172,77,212,118,86,157],[45,144,114,143,184,117,114,158,7,118,106,223,48,118,57,11,87,91,14,56,111,60,135,133,209,191,124,197,56,132,18,181],[61,49,243,232,70,183,147,123,215,63,112,12,145,93,41,238,56,115,160,188,71,231,27,19,122,92,64,26,22,182,253,247],[131,140,235,3,70,22,14,188,95,80,231,73,70,227,13,94,21,188,40,244,133,98,122,21,6,174,158,31,75,178,100,156],[252,232,65,27,5,28,44,29,33,205,189,150,232,72,36,95,246,89,206,131,77,242,188,160,80,170,176,65,201,18,144,4],[254,99,194,122,86,250,207,92,238,70,25,18,75,203,205,12,60,27,194,133,220,188,195,101,170,167,59,120,177,140,247,102],[237,222,136,203,128,75,68,62,127,237,138,232,242,147,8,189,25,85,208,36,169,246,90,12,90,26,38,223,11,164,232,18],[200,109,173,86,184,68,114,177,243,120,40,33,28,224,180,170,117,80,80,28,4,213,141,251,242,165,241,104,140,207,210,173],[153,183,94,37,214,101,110,152,35,159,100,201,6,54,232,179,26,148,74,59,21,178,134,22,125,211,110,147,254,19,164,250],[145,208,149,8,195,58,91,38,204,106,79,178,216,45,185,8,128,57,181,70,76,110,107,253,43,99,231,196,139,6,84,93],[102,24,161,9,143,114,210,224,210,107,13,213,15,209,165,27,244,132,216,144,213,65,35,133,90,236,126,18,232,75,67,22],[23,1,113,168,245,27,19,75,175,55,156,248,43,108,165,246,24,232,154,14,96,124,154,184,8,146,74,192,191,177,12,101],[45,92,234,217,215,126,36,198,22,42,48,25,134,101,45,244,38,60,133,39,145,187,201,172,241,159,140,55,100,207,218,45],[97,198,68,247,238,137,188,246,81,254,49,223,216,231,10,13,142,68,236,84,182,104,197,83,237,248,211,37,75,205,72,168],[175,168,195,45,57,239,84,92,231,144,232,8,168,201,198,224,220,79,17,98,46,7,13,190,168,188,16,76,2,251,89,238],[85,73,208,233,229,55,63,202,121,175,201,74,221,154,134,182,152,103,240,208,15,36,130,36,27,136,95,96,192,134,213,163],[8,156,212,175,21,217,213,212,206,95,102,46,131,67,21,71,26,34,32,110,119,59,80,59,67,152,242,114,120,251,252,99],[153,44,31,60,216,125,191,151,172,6,254,105,48,50,244,116,45,210,25,82,181,216,124,112,165,159,103,215,131,75,185,41],[17,57,32,69,246,125,160,167,214,169,128,130,223,140,207,20,14,167,52,74,75,252,6,148,103,225,192,241,158,117,143,0],[64,43,116,59,220,113,74,13,101,91,129,206,192,211,24,111,41,55,35,70,44,107,83,171,160,166,134,24,193,96,185,149],[31,71,141,74,171,132,64,145,12,214,201,174,242,214,157,206,25,26,135,135,55,137,40,168,11,95,140,242,142,90,88,103],[78,104,215,191,112,203,117,109,38,59,146,66,84,95,182,72,217,178,68,42,201,191,252,102,19,7,62,160,133,199,204,101],[75,84,54,28,42,125,99,30,189,217,223,210,130,51,216,68,43,223,162,115,105,184,0,82,36,150,3,54,251,39,254,14],[61,202,23,222,102,197,38,236,23,192,134,251,20,245,128,81,214,114,229,164,192,162,167,244,138,81,28,205,221,27,237,55],[8,34,155,133,23,159,179,112,154,154,217,181,199,48,213,190,196,49,41,105,118,63,30,7,160,217,11,87,203,106,177,82],[49,241,213,136,110,65,248,7,251,95,43,108,98,95,91,160,253,115,165,233,238,202,144,210,189,156,184,219,42,92,79,12],[159,135,207,171,176,55,138,124,254,245,183,80,66,187,218,177,97,41,128,38,169,237,234,167,73,251,101,124,120,245,205,61]],contractFreezableToken.address,97,[186,19,48,200,29,69,68,109,212,152,138,164,186,40,173,209,46,121,237,5,196,183,24,239,23,210,123,69,79,223,88,241],[16,157,93,220,9,239,42,56,27,133,31,166,163,104,66,238,90,56,60,112,105,233,26,225,143,99,105,203,244,150,109,122],[10,11,227,135,87,85,68,213,198,157,71,114,19,33,180,36,62,70,117,246,147,22,157,255,58,118,35,71,205,20,84,64],29,2014223714,{from:accounts[0]});
    if(trace) console.log('SUCESSO: TokenProportionalCappedTest.new([contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address,contractMembershipVerificationToken.address],[[46,161,140,62,73,76,234,169,195,111,49,247,85,189,186,216,161,181,245,182,247,162,64,121,246,253,172,77,212,118,86,157],[45,144,114,143,184,117,114,158,7,118,106,223,48,118,57,11,87,91,14,56,111,60,135,133,209,191,124,197,56,132,18,181],[61,49,243,232,70,183,147,123,215,63,112,12,145,93,41,238,56,115,160,188,71,231,27,19,122,92,64,26,22,182,253,247],[131,140,235,3,70,22,14,188,95,80,231,73,70,227,13,94,21,188,40,244,133,98,122,21,6,174,158,31,75,178,100,156],[252,232,65,27,5,28,44,29,33,205,189,150,232,72,36,95,246,89,206,131,77,242,188,160,80,170,176,65,201,18,144,4],[254,99,194,122,86,250,207,92,238,70,25,18,75,203,205,12,60,27,194,133,220,188,195,101,170,167,59,120,177,140,247,102],[237,222,136,203,128,75,68,62,127,237,138,232,242,147,8,189,25,85,208,36,169,246,90,12,90,26,38,223,11,164,232,18],[200,109,173,86,184,68,114,177,243,120,40,33,28,224,180,170,117,80,80,28,4,213,141,251,242,165,241,104,140,207,210,173],[153,183,94,37,214,101,110,152,35,159,100,201,6,54,232,179,26,148,74,59,21,178,134,22,125,211,110,147,254,19,164,250],[145,208,149,8,195,58,91,38,204,106,79,178,216,45,185,8,128,57,181,70,76,110,107,253,43,99,231,196,139,6,84,93],[102,24,161,9,143,114,210,224,210,107,13,213,15,209,165,27,244,132,216,144,213,65,35,133,90,236,126,18,232,75,67,22],[23,1,113,168,245,27,19,75,175,55,156,248,43,108,165,246,24,232,154,14,96,124,154,184,8,146,74,192,191,177,12,101],[45,92,234,217,215,126,36,198,22,42,48,25,134,101,45,244,38,60,133,39,145,187,201,172,241,159,140,55,100,207,218,45],[97,198,68,247,238,137,188,246,81,254,49,223,216,231,10,13,142,68,236,84,182,104,197,83,237,248,211,37,75,205,72,168],[175,168,195,45,57,239,84,92,231,144,232,8,168,201,198,224,220,79,17,98,46,7,13,190,168,188,16,76,2,251,89,238],[85,73,208,233,229,55,63,202,121,175,201,74,221,154,134,182,152,103,240,208,15,36,130,36,27,136,95,96,192,134,213,163],[8,156,212,175,21,217,213,212,206,95,102,46,131,67,21,71,26,34,32,110,119,59,80,59,67,152,242,114,120,251,252,99],[153,44,31,60,216,125,191,151,172,6,254,105,48,50,244,116,45,210,25,82,181,216,124,112,165,159,103,215,131,75,185,41],[17,57,32,69,246,125,160,167,214,169,128,130,223,140,207,20,14,167,52,74,75,252,6,148,103,225,192,241,158,117,143,0],[64,43,116,59,220,113,74,13,101,91,129,206,192,211,24,111,41,55,35,70,44,107,83,171,160,166,134,24,193,96,185,149],[31,71,141,74,171,132,64,145,12,214,201,174,242,214,157,206,25,26,135,135,55,137,40,168,11,95,140,242,142,90,88,103],[78,104,215,191,112,203,117,109,38,59,146,66,84,95,182,72,217,178,68,42,201,191,252,102,19,7,62,160,133,199,204,101],[75,84,54,28,42,125,99,30,189,217,223,210,130,51,216,68,43,223,162,115,105,184,0,82,36,150,3,54,251,39,254,14],[61,202,23,222,102,197,38,236,23,192,134,251,20,245,128,81,214,114,229,164,192,162,167,244,138,81,28,205,221,27,237,55],[8,34,155,133,23,159,179,112,154,154,217,181,199,48,213,190,196,49,41,105,118,63,30,7,160,217,11,87,203,106,177,82],[49,241,213,136,110,65,248,7,251,95,43,108,98,95,91,160,253,115,165,233,238,202,144,210,189,156,184,219,42,92,79,12],[159,135,207,171,176,55,138,124,254,245,183,80,66,187,218,177,97,41,128,38,169,237,234,167,73,251,101,124,120,245,205,61]],contractFreezableToken.address,97,[186,19,48,200,29,69,68,109,212,152,138,164,186,40,173,209,46,121,237,5,196,183,24,239,23,210,123,69,79,223,88,241],[16,157,93,220,9,239,42,56,27,133,31,166,163,104,66,238,90,56,60,112,105,233,26,225,143,99,105,203,244,150,109,122],[10,11,227,135,87,85,68,213,198,157,71,114,19,33,180,36,62,70,117,246,147,22,157,255,58,118,35,71,205,20,84,64],29,2014223714,{from:accounts[0]}');
    contractFreezableTestToken = await FreezableTestToken.new({from:accounts[8]});
    if(trace) console.log('SUCESSO: FreezableTestToken.new({from:accounts[8]}');
    contractActionTest = await ActionTest.new([contractTokenProportionalCappedTest.address,contractTokenProportionalCappedTest.address,contractTokenProportionalUncappedTest.address,contractTokenProportionalCappedTest.address,contractTokenProportionalCappedTest.address],accounts[1],{from:accounts[0]});
    if(trace) console.log('SUCESSO: ActionTest.new([contractTokenProportionalCappedTest.address,contractTokenProportionalCappedTest.address,contractTokenProportionalUncappedTest.address,contractTokenProportionalCappedTest.address,contractTokenProportionalCappedTest.address],accounts[1],{from:accounts[0]}');
  });
  
  it('Should execute fallback()', async () => {
    let result = await contractActionTest.sendTransaction({from: accounts[0]});
  });
  it('Should execute execute()', async () => {
    let result = await contractActionTest.execute({from: accounts[0]});
  });
  it('Should execute canExecute()', async () => {
    let result = await contractActionTest.canExecute({from: accounts[0]});
  });
});
