,{
  "2020-11-10T16:14:50.832ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[184,38,86,246,213,193,147,5,75,108,191,249,33,3,1,247,114,255,156,209,225,80,223,181,145,63,230,129,211,131,206,109]",
              "sol": "abi.encode(\"184,38,86,246,213,193,147,5,75,108,191,249,33,3,1,247,114,255,156,209,225,80,223,181,145,63,230,129,211,131,206,109\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:14:59.962ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[25,185,233,197,88,49,250,71,230,152,26,230,228,196,206,44,246,218,92,25,113,174,13,115,54,173,134,0,26,121,186,214]",
              "sol": "abi.encode(\"25,185,233,197,88,49,250,71,230,152,26,230,228,196,206,44,246,218,92,25,113,174,13,115,54,173,134,0,26,121,186,214\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:15:09.078ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[133,184,11,167,61,221,101,91,88,81,125,171,98,54,33,174,36,245,25,231,247,56,227,141,8,130,17,39,17,104,63,253]",
              "sol": "abi.encode(\"133,184,11,167,61,221,101,91,88,81,125,171,98,54,33,174,36,245,25,231,247,56,227,141,8,130,17,39,17,104,63,253\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:15:18.355ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[152,58,203,64,241,152,147,19,238,151,227,76,211,150,69,16,57,67,93,242,255,251,14,33,19,60,142,130,34,159,56,129]",
              "sol": "abi.encode(\"152,58,203,64,241,152,147,19,238,151,227,76,211,150,69,16,57,67,93,242,255,251,14,33,19,60,142,130,34,159,56,129\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:15:27.650ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[150,216,72,215,183,250,216,99,234,229,234,94,14,107,153,203,132,141,242,249,10,162,142,225,46,172,214,167,205,221,183,176]",
              "sol": "abi.encode(\"150,216,72,215,183,250,216,99,234,229,234,94,14,107,153,203,132,141,242,249,10,162,142,225,46,172,214,167,205,221,183,176\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:15:36.788ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[56,27,53,76,49,209,84,21,167,186,123,171,33,243,217,232,34,128,203,178,11,231,31,66,13,109,221,89,62,51,25,78]",
              "sol": "abi.encode(\"56,27,53,76,49,209,84,21,167,186,123,171,33,243,217,232,34,128,203,178,11,231,31,66,13,109,221,89,62,51,25,78\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:15:45.993ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[5,149,222,76,40,14,34,14,81,47,23,11,137,86,84,168,58,127,185,165,22,31,146,173,14,9,208,167,45,45,41,95]",
              "sol": "abi.encode(\"5,149,222,76,40,14,34,14,81,47,23,11,137,86,84,168,58,127,185,165,22,31,146,173,14,9,208,167,45,45,41,95\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:15:55.137ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[181,239,2,86,162,25,208,148,209,65,88,246,152,78,191,112,156,82,98,188,2,211,153,137,227,8,31,19,198,181,24,82,99,99,90,135,124,52,254,147,67,5,225,135,167,130,211,54,63,33,164,122,140,94,31,10,125,148,224,22,14,83,114,191,154]",
              "sol": "abi.encode(\"181,239,2,86,162,25,208,148,209,65,88,246,152,78,191,112,156,82,98,188,2,211,153,137,227,8,31,19,198,181,24,82,99,99,90,135,124,52,254,147,67,5,225,135,167,130,211,54,63,33,164,122,140,94,31,10,125,148,224,22,14,83,114,191,154\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:16:04.471ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[155,167,21,69,108,199,17,132,234,78]",
              "sol": "abi.encode(\"155,167,21,69,108,199,17,132,234,78\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:16:13.843ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[151,178]",
              "sol": "abi.encode(\"151,178\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:16:23.196ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[5,77,166,254,3,19,150,35,236,7,43,220,110,109,123,26,103,201,137,81,23,231,51,199,93,198]",
              "sol": "abi.encode(\"5,77,166,254,3,19,150,35,236,7,43,220,110,109,123,26,103,201,137,81,23,231,51,199,93,198\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:16:32.387ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[188,177,119,195,169,46,177,89,254,60,147,216,95,203,51,200,247,43,183,20,203,33,90,175,173,124]",
              "sol": "abi.encode(\"188,177,119,195,169,46,177,89,254,60,147,216,95,203,51,200,247,43,183,20,203,33,90,175,173,124\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:16:41.534ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[121,18,64,8,164]",
              "sol": "abi.encode(\"121,18,64,8,164\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:16:50.681ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[21,90,152,109,118,186,124,172,189,149,106,38,189,207,48,228,180,239,224,221,93,120,126,38,157,32,3,50,202,190,238,249,98,146,252,0,132,139,114,27,34,113,140,107,16,84,220,136,101,39,127,132,176,207,79,244,159,154,102,159,161,135,60,169,88,73,169,173,53,191,60,130,16,84,160,41,190,100,70,207,181,9,252,113,143,57,53,244,122,183,115,12,253,98,231,202,203]",
              "sol": "abi.encode(\"21,90,152,109,118,186,124,172,189,149,106,38,189,207,48,228,180,239,224,221,93,120,126,38,157,32,3,50,202,190,238,249,98,146,252,0,132,139,114,27,34,113,140,107,16,84,220,136,101,39,127,132,176,207,79,244,159,154,102,159,161,135,60,169,88,73,169,173,53,191,60,130,16,84,160,41,190,100,70,207,181,9,252,113,143,57,53,244,122,183,115,12,253,98,231,202,203\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:17:30.429ZMockERC20.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256) WHEN msg.sender!=0",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:17:38.312ZAccount.proxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute proxy(address,bytes) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[26,187,176,35,186,4,230,63,153,57,52,99,63,90,115,0,165,216,32,186,137,31,151,156,161,231,85,33,95,131,49,167]",
              "sol": "abi.encode(\"26,187,176,35,186,4,230,63,153,57,52,99,63,90,115,0,165,216,32,186,137,31,151,156,161,231,85,33,95,131,49,167\")"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail proxy(address,bytes) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[26,187,176,35,186,4,230,63,153,57,52,99,63,90,115,0,165,216,32,186,137,31,151,156,161,231,85,33,95,131,49,167]",
                "sol": "abi.encode(\"26,187,176,35,186,4,230,63,153,57,52,99,63,90,115,0,165,216,32,186,137,31,151,156,161,231,85,33,95,131,49,167\")"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:17:38.334ZAccount.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string,address) WHEN initialized!=true",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "[157,100,239,85,19,92,204,35,11,128,205,232,183,192,5,171,201,58,181,197,242,206,206,106,123,88,214,197,8,34,237,58]",
              "sol": "stringToBytes32(\"157,100,239,85,19,92,204,35,11,128,205,232,183,192,5,171,201,58,181,197,242,206,206,106,123,88,214,197,8,34,237,58\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:17:38.336ZAccount.addService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addService(uint256) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addService(uint256) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:17:38.344ZAccount.removeService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute removeService(uint8) WHEN msg.sender==beneficiary,services!=0",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail removeService(uint8) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:17:38.352ZAccount.updateMetadata": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateMetadata(bytes32) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "[203,128,166,80,43,72,242,93,248,239,48,162,147,119,183,222,213,56,14,72,63,177,107,123,171,175,212,85,215,119,215,96]",
              "sol": "stringToBytes32(\"203,128,166,80,43,72,242,93,248,239,48,162,147,119,183,222,213,56,14,72,63,177,107,123,171,175,212,85,215,119,215,96\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateMetadata(bytes32) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "[203,128,166,80,43,72,242,93,248,239,48,162,147,119,183,222,213,56,14,72,63,177,107,123,171,175,212,85,215,119,215,96]",
                "sol": "stringToBytes32(\"203,128,166,80,43,72,242,93,248,239,48,162,147,119,183,222,213,56,14,72,63,177,107,123,171,175,212,85,215,119,215,96\")"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:17:38.358ZAccount.requestService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute requestService(uint256,string) WHEN msg.sender!=0",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail requestService(uint256,string) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "\"Example\"",
                "sol": "\"Example\""
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:17:38.359ZAccount.creator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute creator()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:17:38.360ZConvergentBeta.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address) WHEN initialized!=true",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:17:38.361ZConvergentBeta.setBaseAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setBaseAccount(address) WHEN msg.sender==_owner,_newBaseAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setBaseAccount(address) when NOT comply with: _newBaseAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:17:38.365ZConvergentBeta.createAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createAccount(address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "[74,35,149,255,171,143,78,75,233,203,7,49,244,252,142,20,102,127,137,233,186,48,69,34,223,3,143,125,162,173,248,181]",
              "sol": "stringToBytes32(\"74,35,149,255,171,143,78,75,233,203,7,49,244,252,142,20,102,127,137,233,186,48,69,34,223,3,143,125,162,173,248,181\")"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:17:38.366ZConvergentBeta.upgradeAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute upgradeAccount(address) WHEN msg.sender==accountToCreator",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:0}",
              "sol": "{\"from\":\"0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:17:38.366ZConvergentBeta.getImplementationForAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getImplementationForAccount(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:17:38.367ZDoubleCurveToken.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:17:38.368ZDoubleCurveToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "59-61",
          "restrictions": [
            "_preMint > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,string,string,address) WHEN _preMint>0,initialized!=true",
          "parameters": [
            {
              "js": "contractDoubleCurveToken.address",
              "sol": "contractDoubleCurveToken.address"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"minter\"",
              "sol": "\"minter\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "contractGasPriceOracle.address",
              "sol": "contractGasPriceOracle.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_preMint <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,string,string,address) WHEN _preMint<=0,initialized!=true",
          "parameters": [
            {
              "js": "contractMockERC20.address",
              "sol": "contractMockERC20.address"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "contractGasPriceOracle.address",
              "sol": "contractGasPriceOracle.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:17:38.373ZDoubleCurveToken.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-82",
          "restrictions": [
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN reserveAsset==0x0000000000000000000000000000000000000000,contributions>0",
          "parameters": [
            {
              "js": "{from:accounts[9],gasPrice:5}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"5\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: contributions > 0",
            "parameters": [
              {
                "js": "{from:accounts[9],gasPrice:5}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"5\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "80-82",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN reserveAsset!=0x0000000000000000000000000000000000000000,contributions>0",
          "parameters": [
            {
              "js": "{from:accounts[5],gasPrice:28}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"28\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: contributions > 0",
            "parameters": [
              {
                "js": "{from:accounts[5],gasPrice:28}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"28\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:17:38.389ZDoubleCurveToken.buy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "104-106",
          "restrictions": [
            "msg.value > cost",
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN msg.value>cost,reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0],value:1337,gasPrice:27}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"1337\",\"gasPrice\":\"27\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:1337,gasPrice:27}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":1337,\"gasPrice\":27}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "msg.value <= cost",
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN msg.value<=cost,reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[3],value:9999,gasPrice:1}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"9999\",\"gasPrice\":\"1\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:9999,gasPrice:1}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":9999,\"gasPrice\":1}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "107-110",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN reserveAsset!=0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[8],gasPrice:19}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"19\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:19}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":19}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:17:38.407ZDoubleCurveToken.sell": {
    "branches": {
      "0": {
        "branch": {
          "loc": "135-139",
          "restrictions": [
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute sell(uint256,uint256) WHEN reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,amountReturned>=_minReturn,msg.sender!=0,_tokens<=_balances",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[4],gasPrice:10}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"10\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail sell(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:10}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":10}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "137-139",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute sell(uint256,uint256) WHEN reserveAsset!=0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,amountReturned>=_minReturn,msg.sender!=0,_tokens<=_balances",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[1],gasPrice:29}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"29\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail sell(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:29}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":29}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:17:38.416ZDoubleCurveToken.priceToBuy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute priceToBuy(uint256)",
          "parameters": [
            {
              "js": "4038714810",
              "sol": "4038714810"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:17:38.417ZDoubleCurveToken.returnForSell": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute returnForSell(uint256)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:17:38.417ZDoubleCurveToken.amountToReserve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amountToReserve(uint256) WHEN spreadD>0",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail amountToReserve(uint256) when NOT comply with: spreadD > 0",
            "parameters": [
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:17:38.423ZDoubleCurveToken.currentPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute currentPrice() WHEN slopeD>0",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail currentPrice() when NOT comply with: slopeD > 0",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:17:38.427ZDoubleCurveToken.marketCap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute marketCap() WHEN NumberLiteral ** NumberLiteral>0",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:17:38.428ZProxyDoubleCurveToken.testsolveForY": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsolveForY(uint256) WHEN slopeD>0",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsolveForY(uint256) when NOT comply with: slopeD > 0",
            "parameters": [
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:17:38.435ZProxyDoubleCurveToken.testcurveIntegral": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcurveIntegral(uint256) WHEN NumberLiteral ** NumberLiteral>0",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:17:38.437ZGasPriceOracle.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:17:38.438ZGasPriceOracle.setGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setGasPrice(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}