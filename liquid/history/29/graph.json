{ truffleProjectHome:
   '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid',
  contracts:
   { Account:
      { projectGraph: [Circular],
        name: 'Account',
        kind: 'contract',
        isAbstract: false,
        functions:
         { proxy:
            [ { name: 'proxy',
                signature: 'proxy(address,bytes)',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           initialize:
            [ { name: 'initialize',
                signature:
                 'initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           addService:
            [ { name: 'addService',
                signature: 'addService(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           removeService:
            [ { name: 'removeService',
                signature: 'removeService(uint8)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           updateMetadata:
            [ { name: 'updateMetadata',
                signature: 'updateMetadata(bytes32)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           requestService:
            [ { name: 'requestService',
                signature: 'requestService(uint256,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           creator:
            [ { name: 'creator',
                signature: 'creator()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyCreator:
            { name: 'onlyCreator',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyCreator',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           validateGasPrice:
            { name: 'validateGasPrice',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'validateGasPrice',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { metadata:
            { functionsWrite: { initialize: [Array], updateMetadata: [Array] },
              contract: [Circular],
              name: 'metadata',
              isArray: false,
              initialValue: null,
              type: 'bytes32',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           curServiceIndex:
            { functionsWrite: { addService: [Array] },
              contract: [Circular],
              name: 'curServiceIndex',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           services:
            { functionsWrite: {},
              contract: [Circular],
              name: 'services',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           reserveAsset:
            { functionsWrite: {},
              contract: [Circular],
              name: 'reserveAsset',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           reserve:
            { functionsWrite: {},
              contract: [Circular],
              name: 'reserve',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           beneficiary:
            { functionsWrite: {},
              contract: [Circular],
              name: 'beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           contributions:
            { functionsWrite: {},
              contract: [Circular],
              name: 'contributions',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           slopeN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'slopeN',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           slopeD:
            { functionsWrite: {},
              contract: [Circular],
              name: 'slopeD',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           exponent:
            { functionsWrite: {},
              contract: [Circular],
              name: 'exponent',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           spreadN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'spreadN',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           spreadD:
            { functionsWrite: {},
              contract: [Circular],
              name: 'spreadD',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           gpo:
            { functionsWrite: {},
              contract: [Circular],
              name: 'gpo',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: true,
              contractAddressOf: [ [Object] ] },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _name:
            { functionsWrite: {},
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _decimals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           AdminUpgradeabilityProxy:
            { projectGraph: [Circular],
              name: 'AdminUpgradeabilityProxy',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 admin: [Array],
                 implementation: [Array],
                 changeAdmin: [Array],
                 upgradeTo: [Array],
                 upgradeToAndCall: [Array],
                 _admin: [Array],
                 _setAdmin: [Array],
                 _willFallback: [Array] },
              modifiers: { ifAdmin: [Object] },
              stateVariables: { ADMIN_SLOT: [Object], IMPLEMENTATION_SLOT: [Object] },
              dependencies: { UpgradeabilityProxy: [Object] },
              inheritsFrom: { UpgradeabilityProxy: [Object], Proxy: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'AdminUpgradeabilityProxy',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/upgradeability/AdminUpgradeabilityProxy.sol' },
           CurveEvents:
            { projectGraph: [Circular],
              name: 'CurveEvents',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies:
               { ERC20: [Object],
                 ERC20Detailed: [Object],
                 Ownable: [Object],
                 SafeMath: [Object],
                 Initializable: [Object],
                 GasPriceOracle: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'CurveEvents',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/contracts/DoubleCurveToken.sol' },
           DoubleCurveToken:
            { projectGraph: [Circular],
              name: 'DoubleCurveToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { '': [Array],
                 initialize: [Array],
                 withdraw: [Array],
                 buy: [Array],
                 sell: [Array],
                 priceToBuy: [Array],
                 returnForSell: [Array],
                 amountToReserve: [Array],
                 currentPrice: [Array],
                 marketCap: [Array],
                 solveForY: [Array],
                 curveIntegral: [Array] },
              modifiers: { validateGasPrice: [Object], initializer: [Object] },
              stateVariables:
               { reserveAsset: [Object],
                 reserve: [Object],
                 beneficiary: [Object],
                 contributions: [Object],
                 slopeN: [Object],
                 slopeD: [Object],
                 exponent: [Object],
                 spreadN: [Object],
                 spreadD: [Object],
                 gpo: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 _name: [Object],
                 _symbol: [Object],
                 _decimals: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { ERC20: [Object],
                 ERC20Detailed: [Object],
                 Ownable: [Object],
                 SafeMath: [Object],
                 Initializable: [Object],
                 GasPriceOracle: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 CurveEvents: [Object],
                 ERC20: [Object],
                 IERC20: [Object],
                 ERC20Detailed: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'DoubleCurveToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/contracts/DoubleCurveToken.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           DoubleCurveToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'DoubleCurveToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/contracts/DoubleCurveToken.sol' },
              parameters: [],
              level: 0 },
           CurveEvents:
            { contract:
               { projectGraph: [Circular],
                 name: 'CurveEvents',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/contracts/DoubleCurveToken.sol' },
              parameters: [],
              level: 1 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 2 },
           ERC20Detailed:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Detailed',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Detailed.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Account',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'MetadataUpdated',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ServiceRequested',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'proxy',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addService',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeService',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'updateMetadata',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'requestService',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'creator',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyCreator',
                parameters: [],
                body: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 },
              end: { line: 132, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/contracts/Account.sol' },
     ConvergentBeta:
      { projectGraph: [Circular],
        name: 'ConvergentBeta',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           setBaseAccount:
            [ { name: 'setBaseAccount',
                signature: 'setBaseAccount(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           createAccount:
            [ { name: 'createAccount',
                signature:
                 'createAccount(address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           upgradeAccount:
            [ { name: 'upgradeAccount',
                signature: 'upgradeAccount(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getImplementationForAccount:
            [ { name: 'getImplementationForAccount',
                signature: 'getImplementationForAccount(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyCreator:
            { name: 'onlyCreator',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyCreator',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { baseAccount:
            { functionsWrite: { initialize: [Array], setBaseAccount: [Array] },
              contract: [Circular],
              name: 'baseAccount',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           gasPriceOracle:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: 'gasPriceOracle',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           accountToCreator:
            { functionsWrite: {},
              contract: [Circular],
              name: 'accountToCreator',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>address)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
           Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           AdminUpgradeabilityProxy:
            { projectGraph: [Circular],
              name: 'AdminUpgradeabilityProxy',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 admin: [Array],
                 implementation: [Array],
                 changeAdmin: [Array],
                 upgradeTo: [Array],
                 upgradeToAndCall: [Array],
                 _admin: [Array],
                 _setAdmin: [Array],
                 _willFallback: [Array] },
              modifiers: { ifAdmin: [Object] },
              stateVariables: { ADMIN_SLOT: [Object], IMPLEMENTATION_SLOT: [Object] },
              dependencies: { UpgradeabilityProxy: [Object] },
              inheritsFrom: { UpgradeabilityProxy: [Object], Proxy: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'AdminUpgradeabilityProxy',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/upgradeability/AdminUpgradeabilityProxy.sol' },
           Account:
            { projectGraph: [Circular],
              name: 'Account',
              kind: 'contract',
              isAbstract: false,
              functions:
               { proxy: [Array],
                 initialize: [Array],
                 addService: [Array],
                 removeService: [Array],
                 updateMetadata: [Array],
                 requestService: [Array],
                 creator: [Array] },
              modifiers:
               { onlyCreator: [Object],
                 initializer: [Object],
                 validateGasPrice: [Object] },
              stateVariables:
               { metadata: [Object],
                 curServiceIndex: [Object],
                 services: [Object],
                 reserveAsset: [Object],
                 reserve: [Object],
                 beneficiary: [Object],
                 contributions: [Object],
                 slopeN: [Object],
                 slopeD: [Object],
                 exponent: [Object],
                 spreadN: [Object],
                 spreadD: [Object],
                 gpo: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 _name: [Object],
                 _symbol: [Object],
                 _decimals: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 AdminUpgradeabilityProxy: [Object],
                 CurveEvents: [Object],
                 DoubleCurveToken: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 DoubleCurveToken: [Object],
                 CurveEvents: [Object],
                 ERC20: [Object],
                 IERC20: [Object],
                 ERC20Detailed: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Account',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/contracts/Account.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ConvergentBeta',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'NewAccount',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setBaseAccount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'createAccount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyCreator',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'upgradeAccount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getImplementationForAccount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 },
              end: { line: 110, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/contracts/ConvergentBeta.sol' },
     CurveEvents:
      { projectGraph: [Circular],
        name: 'CurveEvents',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 allowance: [Array],
                 transfer: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _burnFrom: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object], IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { Initializable: [Object], IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
           ERC20Detailed:
            { projectGraph: [Circular],
              name: 'ERC20Detailed',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 name: [Array],
                 symbol: [Array],
                 decimals: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _decimals: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], IERC20: [Object] },
              inheritsFrom: { Initializable: [Object], IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Detailed',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Detailed.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
           Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           GasPriceOracle:
            { projectGraph: [Circular],
              name: 'GasPriceOracle',
              kind: 'contract',
              isAbstract: false,
              functions: { initialize: [Array], setGasPrice: [Array] },
              modifiers: { initializer: [Object], onlyOwner: [Object] },
              stateVariables:
               { maxGas: [Object],
                 _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Ownable: [Object], Initializable: [Object] },
              inheritsFrom: { Initializable: [Object], Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'GasPriceOracle',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/contracts/GasPriceOracle.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CurveEvents',
           baseContracts: [],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Bought',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Contributed',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Sold',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 17, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/contracts/DoubleCurveToken.sol' },
     DoubleCurveToken:
      { projectGraph: [Circular],
        name: 'DoubleCurveToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           initialize:
            [ { name: 'initialize',
                signature:
                 'initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,string,string,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           withdraw:
            [ { name: 'withdraw',
                signature: 'withdraw()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           buy:
            [ { name: 'buy',
                signature: 'buy(uint256,uint256)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           sell:
            [ { name: 'sell',
                signature: 'sell(uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           priceToBuy:
            [ { name: 'priceToBuy',
                signature: 'priceToBuy(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           returnForSell:
            [ { name: 'returnForSell',
                signature: 'returnForSell(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           amountToReserve:
            [ { name: 'amountToReserve',
                signature: 'amountToReserve(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           currentPrice:
            [ { name: 'currentPrice',
                signature: 'currentPrice()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           marketCap:
            [ { name: 'marketCap',
                signature: 'marketCap()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           solveForY:
            [ { name: 'solveForY',
                signature: 'solveForY(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           curveIntegral:
            [ { name: 'curveIntegral',
                signature: 'curveIntegral(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { validateGasPrice:
            { name: 'validateGasPrice',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'validateGasPrice',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { reserveAsset:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: 'reserveAsset',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: true,
              contractAddressOf: [ [Object] ] },
           reserve:
            { functionsWrite: { buy: [Array], sell: [Array] },
              contract: [Circular],
              name: 'reserve',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           beneficiary:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: 'beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           contributions:
            { functionsWrite: { buy: [Array] },
              contract: [Circular],
              name: 'contributions',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           slopeN:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: 'slopeN',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           slopeD:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: 'slopeD',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           exponent:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: 'exponent',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           spreadN:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: 'spreadN',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           spreadD:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: 'spreadD',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           gpo:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: 'gpo',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: true,
              contractAddressOf: [ [Object] ] },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _name:
            { functionsWrite: {},
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _decimals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 allowance: [Array],
                 transfer: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _burnFrom: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object], IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { Initializable: [Object], IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
           ERC20Detailed:
            { projectGraph: [Circular],
              name: 'ERC20Detailed',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 name: [Array],
                 symbol: [Array],
                 decimals: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _decimals: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], IERC20: [Object] },
              inheritsFrom: { Initializable: [Object], IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Detailed',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Detailed.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
           Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           GasPriceOracle:
            { projectGraph: [Circular],
              name: 'GasPriceOracle',
              kind: 'contract',
              isAbstract: false,
              functions: { initialize: [Array], setGasPrice: [Array] },
              modifiers: { initializer: [Object], onlyOwner: [Object] },
              stateVariables:
               { maxGas: [Object],
                 _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Ownable: [Object], Initializable: [Object] },
              inheritsFrom: { Initializable: [Object], Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'GasPriceOracle',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/contracts/GasPriceOracle.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           CurveEvents:
            { contract:
               { projectGraph: [Circular],
                 name: 'CurveEvents',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/contracts/DoubleCurveToken.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 },
           ERC20Detailed:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Detailed',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Detailed.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'DoubleCurveToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdraw',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'buy',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sell',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'priceToBuy',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'returnForSell',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'amountToReserve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'currentPrice',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'marketCap',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'solveForY',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'curveIntegral',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'validateGasPrice',
                parameters: null,
                body: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 20, column: 0 },
              end: { line: 207, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/contracts/DoubleCurveToken.sol' },
     GasPriceOracle:
      { projectGraph: [Circular],
        name: 'GasPriceOracle',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           setGasPrice:
            [ { name: 'setGasPrice',
                signature: 'setGasPrice(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { maxGas:
            { functionsWrite: { initialize: [Array], setGasPrice: [Array] },
              contract: [Circular],
              name: 'maxGas',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
           Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'GasPriceOracle',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setGasPrice',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 29, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/contracts/GasPriceOracle.sol' },
     MockERC20:
      { projectGraph: [Circular],
        name: 'MockERC20',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 allowance: [Array],
                 transfer: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _burnFrom: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object], IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { Initializable: [Object], IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MockERC20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/contracts/Test/MockERC20.sol' },
     Roles:
      { projectGraph: [Circular],
        name: 'Roles',
        kind: 'library',
        isAbstract: false,
        functions:
         { add:
            [ { name: 'add',
                signature: 'add(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           remove:
            [ { name: 'remove',
                signature: 'remove(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           has:
            [ { name: 'has',
                signature: 'has(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs:
         { Role:
            { name: 'Role', contract: [Circular], parameters: [ [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Roles',
           baseContracts: [],
           subNodes:
            [ { type: 'StructDefinition',
                name: 'Role',
                members: [Array],
                loc: [Object],
                parentName: 'Roles' },
              { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'remove',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'has',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 41, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/Roles.sol' },
     CapperRole:
      { projectGraph: [Circular],
        name: 'CapperRole',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           isCapper:
            [ { name: 'isCapper',
                signature: 'isCapper(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addCapper:
            [ { name: 'addCapper',
                signature: 'addCapper(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceCapper:
            [ { name: 'renounceCapper',
                signature: 'renounceCapper()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addCapper:
            [ { name: '_addCapper',
                signature: '_addCapper(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeCapper:
            [ { name: '_removeCapper',
                signature: '_removeCapper(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyCapper:
            { name: 'onlyCapper',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyCapper',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { cappers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'cappers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/Roles.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CapperRole',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'CapperAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'CapperRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyCapper',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isCapper',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addCapper',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceCapper',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addCapper',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeCapper',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 49, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/CapperRole.sol' },
     MinterRole:
      { projectGraph: [Circular],
        name: 'MinterRole',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           isMinter:
            [ { name: 'isMinter',
                signature: 'isMinter(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addMinter:
            [ { name: 'addMinter',
                signature: 'addMinter(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceMinter:
            [ { name: 'renounceMinter',
                signature: 'renounceMinter()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addMinter:
            [ { name: '_addMinter',
                signature: '_addMinter(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeMinter:
            [ { name: '_removeMinter',
                signature: '_removeMinter(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { minters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/Roles.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MinterRole',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'MinterAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'MinterRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyMinter',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isMinter',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceMinter',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 49, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/MinterRole.sol' },
     PauserRole:
      { projectGraph: [Circular],
        name: 'PauserRole',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           isPauser:
            [ { name: 'isPauser',
                signature: 'isPauser(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addPauser:
            [ { name: 'addPauser',
                signature: 'addPauser(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renouncePauser:
            [ { name: 'renouncePauser',
                signature: 'renouncePauser()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addPauser:
            [ { name: '_addPauser',
                signature: '_addPauser(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removePauser:
            [ { name: '_removePauser',
                signature: '_removePauser(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/Roles.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PauserRole',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PauserAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PauserRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyPauser',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isPauser',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addPauser',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renouncePauser',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addPauser',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removePauser',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 49, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/PauserRole.sol' },
     SignerRole:
      { projectGraph: [Circular],
        name: 'SignerRole',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           isSigner:
            [ { name: 'isSigner',
                signature: 'isSigner(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addSigner:
            [ { name: 'addSigner',
                signature: 'addSigner(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceSigner:
            [ { name: 'renounceSigner',
                signature: 'renounceSigner()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addSigner:
            [ { name: '_addSigner',
                signature: '_addSigner(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeSigner:
            [ { name: '_removeSigner',
                signature: '_removeSigner(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlySigner:
            { name: 'onlySigner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlySigner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { signers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'signers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/Roles.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SignerRole',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'SignerAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'SignerRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlySigner',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isSigner',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addSigner',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceSigner',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addSigner',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeSigner',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 49, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/SignerRole.sol' },
     Crowdsale:
      { projectGraph: [Circular],
        name: 'Crowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(uint256,address,IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           token:
            [ { name: 'token',
                signature: 'token()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           wallet:
            [ { name: 'wallet',
                signature: 'wallet()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           rate:
            [ { name: 'rate',
                signature: 'rate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           weiRaised:
            [ { name: 'weiRaised',
                signature: 'weiRaised()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           buyTokens:
            [ { name: 'buyTokens',
                signature: 'buyTokens(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _hasBeenInitialized:
            [ { name: '_hasBeenInitialized',
                signature: '_hasBeenInitialized()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _postValidatePurchase:
            [ { name: '_postValidatePurchase',
                signature: '_postValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _processPurchase:
            [ { name: '_processPurchase',
                signature: '_processPurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _updatePurchasingState:
            [ { name: '_updatePurchasingState',
                signature: '_updatePurchasingState(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _getTokenAmount:
            [ { name: '_getTokenAmount',
                signature: '_getTokenAmount(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _forwardFunds:
            [ { name: '_forwardFunds',
                signature: '_forwardFunds()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _token:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: { buyTokens: [Array] },
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20: [Object], IERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/SafeERC20.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Crowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TokensPurchased',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'token',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'wallet',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'rate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'weiRaised',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'buyTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_hasBeenInitialized',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_postValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_processPurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updatePurchasingState',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_getTokenAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_forwardFunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 21, column: 0 },
              end: { line: 241, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
     FinalizableCrowdsale:
      { projectGraph: [Circular],
        name: 'FinalizableCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { finalized:
            [ { name: 'finalized',
                signature: 'finalized()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           finalize:
            [ { name: 'finalize',
                signature: 'finalize()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _finalization:
            [ { name: '_finalization',
                signature: '_finalization()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _finalized:
            { functionsWrite: { finalize: [Array] },
              contract: [Circular],
              name: '_finalized',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _openingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _closingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
           TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 openingTime: [Array],
                 closingTime: [Array],
                 isOpen: [Array],
                 hasClosed: [Array],
                 _hasBeenInitialized: [Array],
                 _preValidatePurchase: [Array] },
              modifiers: { onlyWhileOpen: [Object], initializer: [Object] },
              stateVariables:
               { _openingTime: [Object],
                 _closingTime: [Object],
                 ______gap: [Object],
                 _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 SafeMath: [Object],
                 Crowdsale: [Object] },
              inheritsFrom: { Initializable: [Object], Crowdsale: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/validation/TimedCrowdsale.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'FinalizableCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'CrowdsaleFinalized',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalized',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalize',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_finalization',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 51, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
     PostDeliveryCrowdsale:
      { projectGraph: [Circular],
        name: 'PostDeliveryCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { withdrawTokens:
            [ { name: 'withdrawTokens',
                signature: 'withdrawTokens(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _processPurchase:
            [ { name: '_processPurchase',
                signature: '_processPurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _openingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _closingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 openingTime: [Array],
                 closingTime: [Array],
                 isOpen: [Array],
                 hasClosed: [Array],
                 _hasBeenInitialized: [Array],
                 _preValidatePurchase: [Array] },
              modifiers: { onlyWhileOpen: [Object], initializer: [Object] },
              stateVariables:
               { _openingTime: [Object],
                 _closingTime: [Object],
                 ______gap: [Object],
                 _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 SafeMath: [Object],
                 Crowdsale: [Object] },
              inheritsFrom: { Initializable: [Object], Crowdsale: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/validation/TimedCrowdsale.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PostDeliveryCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_processPurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 53, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol' },
     RefundableCrowdsale:
      { projectGraph: [Circular],
        name: 'RefundableCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           goal:
            [ { name: 'goal',
                signature: 'goal()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           claimRefund:
            [ { name: 'claimRefund',
                signature: 'claimRefund(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           goalReached:
            [ { name: 'goalReached',
                signature: 'goalReached()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _finalization:
            [ { name: '_finalization',
                signature: '_finalization()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _forwardFunds:
            [ { name: '_forwardFunds',
                signature: '_forwardFunds()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _goal:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_goal',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _escrow:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_escrow',
              isArray: false,
              initialValue: null,
              type: 'RefundEscrow',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _finalized:
            { functionsWrite: {},
              contract: [Circular],
              name: '_finalized',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _openingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _closingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
           FinalizableCrowdsale:
            { projectGraph: [Circular],
              name: 'FinalizableCrowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { finalized: [Array], finalize: [Array], _finalization: [Array] },
              modifiers: { initializer: [Object], onlyWhileOpen: [Object] },
              stateVariables:
               { _finalized: [Object],
                 ______gap: [Object],
                 _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _openingTime: [Object],
                 _closingTime: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 SafeMath: [Object],
                 TimedCrowdsale: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 TimedCrowdsale: [Object],
                 Crowdsale: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'FinalizableCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
           RefundEscrow:
            { projectGraph: [Circular],
              name: 'RefundEscrow',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 state: [Array],
                 beneficiary: [Array],
                 deposit: [Array],
                 close: [Array],
                 enableRefunds: [Array],
                 beneficiaryWithdraw: [Array],
                 withdrawalAllowed: [Array] },
              modifiers: { initializer: [Object], onlyPrimary: [Object] },
              stateVariables:
               { _state: [Object],
                 _beneficiary: [Object],
                 ______gap: [Object],
                 _primary: [Object],
                 _deposits: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], ConditionalEscrow: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ConditionalEscrow: [Object],
                 Escrow: [Object],
                 Secondary: [Object] },
              structs: {},
              enums: { State: [Object] },
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RefundEscrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/RefundEscrow.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 3 },
           FinalizableCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'FinalizableCrowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
              parameters: [],
              level: 0 },
           TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RefundableCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'goal',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'claimRefund',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'goalReached',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_finalization',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_forwardFunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 15, column: 0 }, end: { line: 92, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/distribution/RefundableCrowdsale.sol' },
     AllowanceCrowdsale:
      { projectGraph: [Circular],
        name: 'AllowanceCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           tokenWallet:
            [ { name: 'tokenWallet',
                signature: 'tokenWallet()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           remainingTokens:
            [ { name: 'remainingTokens',
                signature: 'remainingTokens()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _tokenWallet:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_tokenWallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _hasBeenInitialized: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20: [Object], IERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/SafeERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'AllowanceCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenWallet',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'remainingTokens',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 }, end: { line: 61, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/emission/AllowanceCrowdsale.sol' },
     MintedCrowdsale:
      { projectGraph: [Circular],
        name: 'MintedCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _hasBeenInitialized: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
           ERC20Mintable:
            { projectGraph: [Circular],
              name: 'ERC20Mintable',
              kind: 'contract',
              isAbstract: false,
              functions: { initialize: [Array], mint: [Array] },
              modifiers: { initializer: [Object], onlyMinter: [Object] },
              stateVariables:
               { ______gap: [Object],
                 minters: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 ERC20: [Object],
                 MinterRole: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC20: [Object],
                 IERC20: [Object],
                 MinterRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Mintable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Mintable.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MintedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 32, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/emission/MintedCrowdsale.sol' },
     IncreasingPriceCrowdsale:
      { projectGraph: [Circular],
        name: 'IncreasingPriceCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           initialRate:
            [ { name: 'initialRate',
                signature: 'initialRate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           finalRate:
            [ { name: 'finalRate',
                signature: 'finalRate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getCurrentRate:
            [ { name: 'getCurrentRate',
                signature: 'getCurrentRate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _getTokenAmount:
            [ { name: '_getTokenAmount',
                signature: '_getTokenAmount(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _initialRate:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_initialRate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _finalRate:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_finalRate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _openingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _closingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 openingTime: [Array],
                 closingTime: [Array],
                 isOpen: [Array],
                 hasClosed: [Array],
                 _hasBeenInitialized: [Array],
                 _preValidatePurchase: [Array] },
              modifiers: { onlyWhileOpen: [Object], initializer: [Object] },
              stateVariables:
               { _openingTime: [Object],
                 _closingTime: [Object],
                 ______gap: [Object],
                 _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 SafeMath: [Object],
                 Crowdsale: [Object] },
              inheritsFrom: { Initializable: [Object], Crowdsale: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/validation/TimedCrowdsale.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IncreasingPriceCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialRate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalRate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getCurrentRate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_getTokenAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 }, end: { line: 75, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/price/IncreasingPriceCrowdsale.sol' },
     CappedCrowdsale:
      { projectGraph: [Circular],
        name: 'CappedCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           cap:
            [ { name: 'cap',
                signature: 'cap()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           capReached:
            [ { name: 'capReached',
                signature: 'capReached()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _cap:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_cap',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _hasBeenInitialized: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CappedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'cap',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'capReached',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 60, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/validation/CappedCrowdsale.sol' },
     IndividuallyCappedCrowdsale:
      { projectGraph: [Circular],
        name: 'IndividuallyCappedCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           setCap:
            [ { name: 'setCap',
                signature: 'setCap(address,uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getCap:
            [ { name: 'getCap',
                signature: 'getCap(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getContribution:
            [ { name: 'getContribution',
                signature: 'getContribution(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _updatePurchasingState:
            [ { name: '_updatePurchasingState',
                signature: '_updatePurchasingState(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyCapper:
            { name: 'onlyCapper',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyCapper',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _contributions:
            { functionsWrite: {},
              contract: [Circular],
              name: '_contributions',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _caps:
            { functionsWrite: {},
              contract: [Circular],
              name: '_caps',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           cappers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'cappers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _hasBeenInitialized: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
           CapperRole:
            { projectGraph: [Circular],
              name: 'CapperRole',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 isCapper: [Array],
                 addCapper: [Array],
                 renounceCapper: [Array],
                 _addCapper: [Array],
                 _removeCapper: [Array] },
              modifiers: { onlyCapper: [Object], initializer: [Object] },
              stateVariables:
               { cappers: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], Roles: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'CapperRole',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/CapperRole.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           CapperRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'CapperRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/CapperRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IndividuallyCappedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setCap',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getCap',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getContribution',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updatePurchasingState',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 88, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/validation/IndividuallyCappedCrowdsale.sol' },
     TimedCrowdsale:
      { projectGraph: [Circular],
        name: 'TimedCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           openingTime:
            [ { name: 'openingTime',
                signature: 'openingTime()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           closingTime:
            [ { name: 'closingTime',
                signature: 'closingTime()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isOpen:
            [ { name: 'isOpen',
                signature: 'isOpen()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           hasClosed:
            [ { name: 'hasClosed',
                signature: 'hasClosed()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _hasBeenInitialized:
            [ { name: '_hasBeenInitialized',
                signature: '_hasBeenInitialized()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _openingTime:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _closingTime:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _hasBeenInitialized: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TimedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyWhileOpen',
                parameters: null,
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'openingTime',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'closingTime',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isOpen',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'hasClosed',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_hasBeenInitialized',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 94, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/validation/TimedCrowdsale.sol' },
     ECDSA:
      { projectGraph: [Circular],
        name: 'ECDSA',
        kind: 'library',
        isAbstract: false,
        functions:
         { recover:
            [ { name: 'recover',
                signature: 'recover(bytes32,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           toEthSignedMessageHash:
            [ { name: 'toEthSignedMessageHash',
                signature: 'toEthSignedMessageHash(bytes32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ECDSA',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'recover',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toEthSignedMessageHash',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 72, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/cryptography/ECDSA.sol' },
     MerkleProof:
      { projectGraph: [Circular],
        name: 'MerkleProof',
        kind: 'library',
        isAbstract: false,
        functions:
         { verify:
            [ { name: 'verify',
                signature: 'verify(bytes32[],bytes32,bytes32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MerkleProof',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'verify',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/cryptography/MerkleProof.sol' },
     Counter:
      { projectGraph: [Circular],
        name: 'Counter',
        kind: 'library',
        isAbstract: false,
        functions:
         { next:
            [ { name: 'next',
                signature: 'next(Counter.Counter)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs:
         { Counter:
            { name: 'Counter',
              contract: [Circular],
              parameters: [ [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Counter',
           baseContracts: [],
           subNodes:
            [ { type: 'StructDefinition',
                name: 'Counter',
                members: [Array],
                loc: [Object],
                parentName: 'Counter' },
              { type: 'FunctionDefinition',
                name: 'next',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 16, column: 0 }, end: { line: 29, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/drafts/Counter.sol' },
     ERC20TokenMetadata:
      { projectGraph: [Circular],
        name: 'ERC20TokenMetadata',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20TokenMetadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 17, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/drafts/ERC1046/TokenMetadata.sol' },
     ERC20WithMetadata:
      { projectGraph: [Circular],
        name: 'ERC20WithMetadata',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           tokenURI:
            [ { name: 'tokenURI',
                signature: 'tokenURI()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _tokenURI:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_tokenURI',
              isArray: false,
              initialValue: '',
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           ERC20TokenMetadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20TokenMetadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/drafts/ERC1046/TokenMetadata.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20WithMetadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 20, column: 0 }, end: { line: 35, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/drafts/ERC1046/TokenMetadata.sol' },
     ERC20Migrator:
      { projectGraph: [Circular],
        name: 'ERC20Migrator',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           legacyToken:
            [ { name: 'legacyToken',
                signature: 'legacyToken()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           newToken:
            [ { name: 'newToken',
                signature: 'newToken()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           beginMigration:
            [ { name: 'beginMigration',
                signature: 'beginMigration(ERC20Mintable)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           migrate:
            [ { name: 'migrate',
                signature: 'migrate(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           migrateAll:
            [ { name: 'migrateAll',
                signature: 'migrateAll(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _legacyToken:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_legacyToken',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _newToken:
            { functionsWrite: { beginMigration: [Array] },
              contract: [Circular],
              name: '_newToken',
              isArray: false,
              initialValue: null,
              type: 'ERC20Mintable',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
           ERC20Mintable:
            { projectGraph: [Circular],
              name: 'ERC20Mintable',
              kind: 'contract',
              isAbstract: false,
              functions: { initialize: [Array], mint: [Array] },
              modifiers: { initializer: [Object], onlyMinter: [Object] },
              stateVariables:
               { ______gap: [Object],
                 minters: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 ERC20: [Object],
                 MinterRole: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC20: [Object],
                 IERC20: [Object],
                 MinterRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Mintable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Mintable.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20: [Object], IERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/SafeERC20.sol' },
           Math:
            { projectGraph: [Circular],
              name: 'Math',
              kind: 'library',
              isAbstract: false,
              functions: { max: [Array], min: [Array], average: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Math',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/Math.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Migrator',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'legacyToken',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'newToken',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beginMigration',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'migrate',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'migrateAll',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 36, column: 0 },
              end: { line: 104, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/drafts/ERC20Migrator.sol' },
     SignatureBouncer:
      { projectGraph: [Circular],
        name: 'SignatureBouncer',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _isValidSignature:
            [ { name: '_isValidSignature',
                signature: '_isValidSignature(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _isValidSignatureAndMethod:
            [ { name: '_isValidSignatureAndMethod',
                signature: '_isValidSignatureAndMethod(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _isValidSignatureAndData:
            [ { name: '_isValidSignatureAndData',
                signature: '_isValidSignatureAndData(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _isValidDataHash:
            [ { name: '_isValidDataHash',
                signature: '_isValidDataHash(bytes32,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyValidSignature:
            { name: 'onlyValidSignature',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignature',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlyValidSignatureAndMethod:
            { name: 'onlyValidSignatureAndMethod',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignatureAndMethod',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlyValidSignatureAndData:
            { name: 'onlyValidSignatureAndData',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignatureAndData',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlySigner:
            { name: 'onlySigner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlySigner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _METHOD_ID_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_METHOD_ID_SIZE',
              isArray: false,
              initialValue: 4,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _SIGNATURE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_SIGNATURE_SIZE',
              isArray: false,
              initialValue: 96,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           signers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'signers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           SignerRole:
            { projectGraph: [Circular],
              name: 'SignerRole',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 isSigner: [Array],
                 addSigner: [Array],
                 renounceSigner: [Array],
                 _addSigner: [Array],
                 _removeSigner: [Array] },
              modifiers: { onlySigner: [Object], initializer: [Object] },
              stateVariables:
               { signers: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], Roles: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SignerRole',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/SignerRole.sol' },
           ECDSA:
            { projectGraph: [Circular],
              name: 'ECDSA',
              kind: 'library',
              isAbstract: false,
              functions: { recover: [Array], toEthSignedMessageHash: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ECDSA',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/cryptography/ECDSA.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           SignerRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'SignerRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/SignerRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SignatureBouncer',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'ECDSA',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignature',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignatureAndMethod',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignatureAndData',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidSignature',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidSignatureAndMethod',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidSignatureAndData',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidDataHash',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 32, column: 0 },
              end: { line: 145, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/drafts/SignatureBouncer.sol' },
     TokenVesting:
      { projectGraph: [Circular],
        name: 'TokenVesting',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address,uint256,uint256,uint256,bool,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           beneficiary:
            [ { name: 'beneficiary',
                signature: 'beneficiary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           cliff:
            [ { name: 'cliff',
                signature: 'cliff()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           start:
            [ { name: 'start',
                signature: 'start()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           duration:
            [ { name: 'duration',
                signature: 'duration()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revocable:
            [ { name: 'revocable',
                signature: 'revocable()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           released:
            [ { name: 'released',
                signature: 'released(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revoked:
            [ { name: 'revoked',
                signature: 'revoked(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           release:
            [ { name: 'release',
                signature: 'release(IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revoke:
            [ { name: 'revoke',
                signature: 'revoke(IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           releasableAmount:
            [ { name: 'releasableAmount',
                signature: 'releasableAmount(IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           vestedAmount:
            [ { name: 'vestedAmount',
                signature: 'vestedAmount(IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _beneficiary:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _cliff:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_cliff',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _start:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_start',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _duration:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_duration',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _revocable:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_revocable',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _released:
            { functionsWrite: {},
              contract: [Circular],
              name: '_released',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _revoked:
            { functionsWrite: {},
              contract: [Circular],
              name: '_revoked',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20: [Object], IERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/SafeERC20.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenVesting',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Released',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Revoked',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'cliff',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'start',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'duration',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revocable',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'released',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revoked',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'release',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revoke',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'releasableAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'vestedAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 17, column: 0 },
              end: { line: 181, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/drafts/TokenVesting.sol' },
     ERC165:
      { projectGraph: [Circular],
        name: 'ERC165',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           supportsInterface:
            [ { name: 'supportsInterface',
                signature: 'supportsInterface(bytes4)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _registerInterface:
            [ { name: '_registerInterface',
                signature: '_registerInterface(bytes4)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           IERC165:
            { projectGraph: [Circular],
              name: 'IERC165',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC165',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC165',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'supportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_registerInterface',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 58, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' },
     ERC165Checker:
      { projectGraph: [Circular],
        name: 'ERC165Checker',
        kind: 'library',
        isAbstract: false,
        functions:
         { supportsERC165:
            [ { name: 'supportsERC165',
                signature: 'supportsERC165(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           supportsInterface:
            [ { name: 'supportsInterface',
                signature: 'supportsInterface(address,bytes4)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           supportsInterfaces:
            [ { name: 'supportsInterfaces',
                signature: 'supportsInterfaces(address,bytes4[])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           supportsERC165Interface:
            [ { name: 'supportsERC165Interface',
                signature: 'supportsERC165Interface(address,bytes4)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           callERC165SupportsInterface:
            [ { name: 'callERC165SupportsInterface',
                signature: 'callERC165SupportsInterface(address,bytes4)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _InterfaceId_Invalid:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_Invalid',
              isArray: false,
              initialValue: 4294967295,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC165Checker',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'supportsERC165',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'supportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'supportsInterfaces',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'supportsERC165Interface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'callERC165SupportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 148, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165Checker.sol' },
     IERC165:
      { projectGraph: [Circular],
        name: 'IERC165',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC165',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'supportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 20, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
     Pausable:
      { projectGraph: [Circular],
        name: 'Pausable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           paused:
            [ { name: 'paused',
                signature: 'paused()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           pause:
            [ { name: 'pause',
                signature: 'pause()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           unpause:
            [ { name: 'unpause',
                signature: 'unpause()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _paused:
            { functionsWrite: { pause: [Array], unpause: [Array] },
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           PauserRole:
            { projectGraph: [Circular],
              name: 'PauserRole',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 isPauser: [Array],
                 addPauser: [Array],
                 renouncePauser: [Array],
                 _addPauser: [Array],
                 _removePauser: [Array] },
              modifiers: { onlyPauser: [Object], initializer: [Object] },
              stateVariables:
               { pausers: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], Roles: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'PauserRole',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/PauserRole.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Pausable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Paused',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Unpaused',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'paused',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'whenNotPaused',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'whenPaused',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'pause',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'unpause',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 61, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/lifecycle/Pausable.sol' },
     Math:
      { projectGraph: [Circular],
        name: 'Math',
        kind: 'library',
        isAbstract: false,
        functions:
         { max:
            [ { name: 'max',
                signature: 'max(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           min:
            [ { name: 'min',
                signature: 'min(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           average:
            [ { name: 'average',
                signature: 'average(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Math',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'max',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'min',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'average',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 21, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/Math.sol' },
     SafeMath:
      { projectGraph: [Circular],
        name: 'SafeMath',
        kind: 'library',
        isAbstract: false,
        functions:
         { mul:
            [ { name: 'mul',
                signature: 'mul(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           div:
            [ { name: 'div',
                signature: 'div(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sub:
            [ { name: 'sub',
                signature: 'sub(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           add:
            [ { name: 'add',
                signature: 'add(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           mod:
            [ { name: 'mod',
                signature: 'mod(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SafeMath',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'mul',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'div',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sub',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mod',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 66, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
     Ownable:
      { projectGraph: [Circular],
        name: 'Ownable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           owner:
            [ { name: 'owner',
                signature: 'owner()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isOwner:
            [ { name: 'isOwner',
                signature: 'isOwner()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           renounceOwnership:
            [ { name: 'renounceOwnership',
                signature: 'renounceOwnership()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           transferOwnership:
            [ { name: 'transferOwnership',
                signature: 'transferOwnership(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _transferOwnership:
            [ { name: '_transferOwnership',
                signature: '_transferOwnership(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite:
               { initialize: [Array],
                 renounceOwnership: [Array],
                 _transferOwnership: [Array] },
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Ownable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'OwnershipRenounced',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'OwnershipTransferred',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'owner',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyOwner',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isOwner',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceOwnership',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferOwnership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_transferOwnership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 81, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
     Secondary:
      { projectGraph: [Circular],
        name: 'Secondary',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           primary:
            [ { name: 'primary',
                signature: 'primary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferPrimary:
            [ { name: 'transferPrimary',
                signature: 'transferPrimary(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _primary:
            { functionsWrite: { initialize: [Array], transferPrimary: [Array] },
              contract: [Circular],
              name: '_primary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Secondary',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyPrimary',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'primary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferPrimary',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 38, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Secondary.sol' },
     ConditionalEscrow:
      { projectGraph: [Circular],
        name: 'ConditionalEscrow',
        kind: 'contract',
        isAbstract: true,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           withdraw:
            [ { name: 'withdraw',
                signature: 'withdraw(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           Escrow:
            { projectGraph: [Circular],
              name: 'Escrow',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 depositsOf: [Array],
                 deposit: [Array],
                 withdraw: [Array] },
              modifiers: { initializer: [Object], onlyPrimary: [Object] },
              stateVariables:
               { _deposits: [Object],
                 ______gap: [Object],
                 _primary: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 SafeMath: [Object],
                 Secondary: [Object] },
              inheritsFrom: { Initializable: [Object], Secondary: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Escrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/Escrow.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           Escrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'Escrow',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/Escrow.sol' },
              parameters: [],
              level: 0 },
           Secondary:
            { contract:
               { projectGraph: [Circular],
                 name: 'Secondary',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Secondary.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ConditionalEscrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawalAllowed',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdraw',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 29, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/ConditionalEscrow.sol' },
     Escrow:
      { projectGraph: [Circular],
        name: 'Escrow',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           depositsOf:
            [ { name: 'depositsOf',
                signature: 'depositsOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           deposit:
            [ { name: 'deposit',
                signature: 'deposit(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           withdraw:
            [ { name: 'withdraw',
                signature: 'withdraw(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _deposits:
            { functionsWrite: {},
              contract: [Circular],
              name: '_deposits',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _primary:
            { functionsWrite: {},
              contract: [Circular],
              name: '_primary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
           Secondary:
            { projectGraph: [Circular],
              name: 'Secondary',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 primary: [Array],
                 transferPrimary: [Array] },
              modifiers: { onlyPrimary: [Object], initializer: [Object] },
              stateVariables:
               { _primary: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Secondary',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Secondary.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           Secondary:
            { contract:
               { projectGraph: [Circular],
                 name: 'Secondary',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Secondary.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Escrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Deposited',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Withdrawn',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'depositsOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'deposit',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdraw',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 15, column: 0 }, end: { line: 57, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/Escrow.sol' },
     PullPayment:
      { projectGraph: [Circular],
        name: 'PullPayment',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           withdrawPayments:
            [ { name: 'withdrawPayments',
                signature: 'withdrawPayments(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           payments:
            [ { name: 'payments',
                signature: 'payments(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _asyncTransfer:
            [ { name: '_asyncTransfer',
                signature: '_asyncTransfer(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _escrow:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_escrow',
              isArray: false,
              initialValue: null,
              type: 'Escrow',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           Escrow:
            { projectGraph: [Circular],
              name: 'Escrow',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 depositsOf: [Array],
                 deposit: [Array],
                 withdraw: [Array] },
              modifiers: { initializer: [Object], onlyPrimary: [Object] },
              stateVariables:
               { _deposits: [Object],
                 ______gap: [Object],
                 _primary: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 SafeMath: [Object],
                 Secondary: [Object] },
              inheritsFrom: { Initializable: [Object], Secondary: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Escrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/Escrow.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PullPayment',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawPayments',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'payments',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_asyncTransfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 49, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/PullPayment.sol' },
     RefundEscrow:
      { projectGraph: [Circular],
        name: 'RefundEscrow',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           state:
            [ { name: 'state',
                signature: 'state()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiary:
            [ { name: 'beneficiary',
                signature: 'beneficiary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           deposit:
            [ { name: 'deposit',
                signature: 'deposit(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           close:
            [ { name: 'close',
                signature: 'close()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           enableRefunds:
            [ { name: 'enableRefunds',
                signature: 'enableRefunds()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiaryWithdraw:
            [ { name: 'beneficiaryWithdraw',
                signature: 'beneficiaryWithdraw()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           withdrawalAllowed:
            [ { name: 'withdrawalAllowed',
                signature: 'withdrawalAllowed(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _state:
            { functionsWrite:
               { initialize: [Array], close: [Array], enableRefunds: [Array] },
              contract: [Circular],
              name: '_state',
              isArray: false,
              initialValue: null,
              type: 'State',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _beneficiary:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _primary:
            { functionsWrite: {},
              contract: [Circular],
              name: '_primary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _deposits:
            { functionsWrite: {},
              contract: [Circular],
              name: '_deposits',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           ConditionalEscrow:
            { projectGraph: [Circular],
              name: 'ConditionalEscrow',
              kind: 'contract',
              isAbstract: true,
              functions: { initialize: [Array], withdraw: [Array] },
              modifiers: { initializer: [Object], onlyPrimary: [Object] },
              stateVariables: { ______gap: [Object] },
              dependencies: { Initializable: [Object], Escrow: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 Escrow: [Object],
                 Secondary: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ConditionalEscrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/ConditionalEscrow.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 3 },
           ConditionalEscrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'ConditionalEscrow',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/ConditionalEscrow.sol' },
              parameters: [],
              level: 0 },
           Escrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'Escrow',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/Escrow.sol' },
              parameters: [],
              level: 1 },
           Secondary:
            { contract:
               { projectGraph: [Circular],
                 name: 'Secondary',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Secondary.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums:
         { State:
            { name: 'State',
              contract: [Circular],
              members: [ 'Active', 'Refunding', 'Closed' ] } },
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RefundEscrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EnumDefinition',
                name: 'State',
                members: [Array],
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Closed',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RefundsEnabled',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'state',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'deposit',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'close',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'enableRefunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiaryWithdraw',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawalAllowed',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 92, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/RefundEscrow.sol' },
     SplitPayment:
      { projectGraph: [Circular],
        name: 'SplitPayment',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address[],uint256[])',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalShares:
            [ { name: 'totalShares',
                signature: 'totalShares()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalReleased:
            [ { name: 'totalReleased',
                signature: 'totalReleased()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           shares:
            [ { name: 'shares',
                signature: 'shares(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           released:
            [ { name: 'released',
                signature: 'released(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           payee:
            [ { name: 'payee',
                signature: 'payee(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           release:
            [ { name: 'release',
                signature: 'release(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _addPayee:
            [ { name: '_addPayee',
                signature: '_addPayee(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _totalShares:
            { functionsWrite: { _addPayee: [Array] },
              contract: [Circular],
              name: '_totalShares',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalReleased:
            { functionsWrite: { release: [Array] },
              contract: [Circular],
              name: '_totalReleased',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _shares:
            { functionsWrite: {},
              contract: [Circular],
              name: '_shares',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _released:
            { functionsWrite: {},
              contract: [Circular],
              name: '_released',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _payees:
            { functionsWrite: { _addPayee: [Array] },
              contract: [Circular],
              name: '_payees',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SplitPayment',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalShares',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalReleased',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'shares',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'released',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'payee',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'release',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addPayee',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 },
              end: { line: 112, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/SplitPayment.sol' },
     ERC20:
      { projectGraph: [Circular],
        name: 'ERC20',
        kind: 'contract',
        isAbstract: false,
        functions:
         { totalSupply:
            [ { name: 'totalSupply',
                signature: 'totalSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           increaseAllowance:
            [ { name: 'increaseAllowance',
                signature: 'increaseAllowance(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decreaseAllowance:
            [ { name: 'decreaseAllowance',
                signature: 'decreaseAllowance(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _transfer:
            [ { name: '_transfer',
                signature: '_transfer(address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _burnFrom:
            [ { name: '_burnFrom',
                signature: '_burnFrom(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: { _mint: [Array], _burn: [Array] },
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decreaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_transfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burnFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 15, column: 0 },
              end: { line: 215, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
     ERC20Burnable:
      { projectGraph: [Circular],
        name: 'ERC20Burnable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { burn:
            [ { name: 'burn',
                signature: 'burn(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           burnFrom:
            [ { name: 'burnFrom',
                signature: 'burnFrom(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 allowance: [Array],
                 transfer: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _burnFrom: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object], IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { Initializable: [Object], IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Burnable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'burnFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 31, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Burnable.sol' },
     ERC20Capped:
      { projectGraph: [Circular],
        name: 'ERC20Capped',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(uint256,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           cap:
            [ { name: 'cap',
                signature: 'cap()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _cap:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_cap',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           minters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           ERC20Mintable:
            { projectGraph: [Circular],
              name: 'ERC20Mintable',
              kind: 'contract',
              isAbstract: false,
              functions: { initialize: [Array], mint: [Array] },
              modifiers: { initializer: [Object], onlyMinter: [Object] },
              stateVariables:
               { ______gap: [Object],
                 minters: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 ERC20: [Object],
                 MinterRole: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC20: [Object],
                 IERC20: [Object],
                 MinterRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Mintable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Mintable.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           ERC20Mintable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Mintable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Mintable.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 2 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Capped',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'cap',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 52, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Capped.sol' },
     ERC20Detailed:
      { projectGraph: [Circular],
        name: 'ERC20Detailed',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(string,string,uint8)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           name:
            [ { name: 'name',
                signature: 'name()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           symbol:
            [ { name: 'symbol',
                signature: 'symbol()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decimals:
            [ { name: 'decimals',
                signature: 'decimals()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _name:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _decimals:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Detailed',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decimals',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 46, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Detailed.sol' },
     ERC20Mintable:
      { projectGraph: [Circular],
        name: 'ERC20Mintable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           minters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 allowance: [Array],
                 transfer: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _burnFrom: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object], IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { Initializable: [Object], IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
           MinterRole:
            { projectGraph: [Circular],
              name: 'MinterRole',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 isMinter: [Array],
                 addMinter: [Array],
                 renounceMinter: [Array],
                 _addMinter: [Array],
                 _removeMinter: [Array] },
              modifiers: { onlyMinter: [Object], initializer: [Object] },
              stateVariables:
               { minters: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], Roles: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MinterRole',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/MinterRole.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Mintable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 36, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Mintable.sol' },
     ERC20Pausable:
      { projectGraph: [Circular],
        name: 'ERC20Pausable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           increaseAllowance:
            [ { name: 'increaseAllowance',
                signature: 'increaseAllowance(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decreaseAllowance:
            [ { name: 'decreaseAllowance',
                signature: 'decreaseAllowance(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 allowance: [Array],
                 transfer: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _burnFrom: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object], IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { Initializable: [Object], IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
           Pausable:
            { projectGraph: [Circular],
              name: 'Pausable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 paused: [Array],
                 pause: [Array],
                 unpause: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 whenPaused: [Object],
                 initializer: [Object],
                 onlyPauser: [Object] },
              stateVariables:
               { _paused: [Object],
                 ______gap: [Object],
                 pausers: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], PauserRole: [Object] },
              inheritsFrom: { Initializable: [Object], PauserRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/lifecycle/Pausable.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/lifecycle/Pausable.sol' },
              parameters: [],
              level: 0 },
           PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Pausable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decreaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 75, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Pausable.sol' },
     IERC20:
      { projectGraph: [Circular],
        name: 'IERC20',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC20',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 35, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
     SafeERC20:
      { projectGraph: [Circular],
        name: 'SafeERC20',
        kind: 'library',
        isAbstract: false,
        functions:
         { safeTransfer:
            [ { name: 'safeTransfer',
                signature: 'safeTransfer(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           safeTransferFrom:
            [ { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(IERC20,address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           safeApprove:
            [ { name: 'safeApprove',
                signature: 'safeApprove(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 allowance: [Array],
                 transfer: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _burnFrom: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object], IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { Initializable: [Object], IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SafeERC20',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'safeTransfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeApprove',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 44, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/SafeERC20.sol' },
     StandaloneERC20:
      { projectGraph: [Circular],
        name: 'StandaloneERC20',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature:
                 'initialize(string,string,uint8,uint256,address,address[],address[])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'initialize',
                signature: 'initialize(string,string,uint8,address[],address[])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { minters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _name:
            { functionsWrite: {},
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _decimals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           ERC20Detailed:
            { projectGraph: [Circular],
              name: 'ERC20Detailed',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 name: [Array],
                 symbol: [Array],
                 decimals: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _decimals: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], IERC20: [Object] },
              inheritsFrom: { Initializable: [Object], IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Detailed',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Detailed.sol' },
           ERC20Mintable:
            { projectGraph: [Circular],
              name: 'ERC20Mintable',
              kind: 'contract',
              isAbstract: false,
              functions: { initialize: [Array], mint: [Array] },
              modifiers: { initializer: [Object], onlyMinter: [Object] },
              stateVariables:
               { ______gap: [Object],
                 minters: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 ERC20: [Object],
                 MinterRole: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC20: [Object],
                 IERC20: [Object],
                 MinterRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Mintable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Mintable.sol' },
           ERC20Pausable:
            { projectGraph: [Circular],
              name: 'ERC20Pausable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 transfer: [Array],
                 transferFrom: [Array],
                 approve: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array] },
              modifiers:
               { initializer: [Object],
                 whenNotPaused: [Object],
                 whenPaused: [Object],
                 onlyPauser: [Object] },
              stateVariables:
               { ______gap: [Object],
                 pausers: [Object],
                 _paused: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object], ERC20: [Object], Pausable: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC20: [Object],
                 IERC20: [Object],
                 Pausable: [Object],
                 PauserRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Pausable.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 3 },
           ERC20Detailed:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Detailed',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Detailed.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 2 },
           ERC20Mintable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Mintable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Mintable.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 1 },
           ERC20Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Pausable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20Pausable.sol' },
              parameters: [],
              level: 0 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/lifecycle/Pausable.sol' },
              parameters: [],
              level: 1 },
           PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'StandaloneERC20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 65, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/StandaloneERC20.sol' },
     TokenTimelock:
      { projectGraph: [Circular],
        name: 'TokenTimelock',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           token:
            [ { name: 'token',
                signature: 'token()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiary:
            [ { name: 'beneficiary',
                signature: 'beneficiary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           releaseTime:
            [ { name: 'releaseTime',
                signature: 'releaseTime()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           release:
            [ { name: 'release',
                signature: 'release()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _token:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _beneficiary:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _releaseTime:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_releaseTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20: [Object], IERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/SafeERC20.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenTimelock',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'token',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'releaseTime',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'release',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 74, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/TokenTimelock.sol' },
     ERC721:
      { projectGraph: [Circular],
        name: 'ERC721',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _hasBeenInitialized:
            [ { name: '_hasBeenInitialized',
                signature: '_hasBeenInitialized()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           ownerOf:
            [ { name: 'ownerOf',
                signature: 'ownerOf(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getApproved:
            [ { name: 'getApproved',
                signature: 'getApproved(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setApprovalForAll:
            [ { name: 'setApprovalForAll',
                signature: 'setApprovalForAll(address,bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isApprovedForAll:
            [ { name: 'isApprovedForAll',
                signature: 'isApprovedForAll(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeTransferFrom:
            [ { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _exists:
            [ { name: '_exists',
                signature: '_exists(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _isApprovedOrOwner:
            [ { name: '_isApprovedOrOwner',
                signature: '_isApprovedOrOwner(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _clearApproval:
            [ { name: '_clearApproval',
                signature: '_clearApproval(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _addTokenTo:
            [ { name: '_addTokenTo',
                signature: '_addTokenTo(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeTokenFrom:
            [ { name: '_removeTokenFrom',
                signature: '_removeTokenFrom(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _checkAndCallSafeTransfer:
            [ { name: '_checkAndCallSafeTransfer',
                signature: '_checkAndCallSafeTransfer(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: { initializer: [Object] },
              stateVariables: {},
              dependencies: { Initializable: [Object], IERC165: [Object] },
              inheritsFrom: { Initializable: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
           IERC721Receiver:
            { projectGraph: [Circular],
              name: 'IERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Receiver.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
           Address:
            { projectGraph: [Circular],
              name: 'Address',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Address',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/utils/Address.sol' },
           ERC165:
            { projectGraph: [Circular],
              name: 'ERC165',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 supportsInterface: [Array],
                 _registerInterface: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], IERC165: [Object] },
              inheritsFrom: { Initializable: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC165',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 0 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 1 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Address',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_hasBeenInitialized',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ownerOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getApproved',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isApprovedForAll',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_exists',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isApprovedOrOwner',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_clearApproval',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addTokenTo',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeTokenFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_checkAndCallSafeTransfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 15, column: 0 },
              end: { line: 336, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
     ERC721Burnable:
      { projectGraph: [Circular],
        name: 'ERC721Burnable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { burn:
            [ { name: 'burn',
                signature: 'burn(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _clearApproval: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkAndCallSafeTransfer: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Burnable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 16, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Burnable.sol' },
     ERC721Enumerable:
      { projectGraph: [Circular],
        name: 'ERC721Enumerable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _hasBeenInitialized:
            [ { name: '_hasBeenInitialized',
                signature: '_hasBeenInitialized()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           tokenOfOwnerByIndex:
            [ { name: 'tokenOfOwnerByIndex',
                signature: 'tokenOfOwnerByIndex(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalSupply:
            [ { name: 'totalSupply',
                signature: 'totalSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           tokenByIndex:
            [ { name: 'tokenByIndex',
                signature: 'tokenByIndex(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _addTokenTo:
            [ { name: '_addTokenTo',
                signature: '_addTokenTo(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeTokenFrom:
            [ { name: '_removeTokenFrom',
                signature: '_removeTokenFrom(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _ownedTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokens',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256[])})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokens:
            { functionsWrite: { _mint: [Array] },
              contract: [Circular],
              name: '_allTokens',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721Enumerable:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721Enumerable',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           IERC721Enumerable:
            { projectGraph: [Circular],
              name: 'IERC721Enumerable',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: { initializer: [Object] },
              stateVariables: {},
              dependencies: { Initializable: [Object], IERC721: [Object] },
              inheritsFrom:
               { Initializable: [Object], IERC721: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Enumerable.sol' },
           ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _clearApproval: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkAndCallSafeTransfer: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
           ERC165:
            { projectGraph: [Circular],
              name: 'ERC165',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 supportsInterface: [Array],
                 _registerInterface: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], IERC165: [Object] },
              inheritsFrom: { Initializable: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC165',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           IERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Enumerable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Enumerable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Enumerable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_hasBeenInitialized',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenOfOwnerByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addTokenTo',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeTokenFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 155, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Enumerable.sol' },
     ERC721Full:
      { projectGraph: [Circular],
        name: 'ERC721Full',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _clearApproval: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkAndCallSafeTransfer: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
           ERC721Enumerable:
            { projectGraph: [Circular],
              name: 'ERC721Enumerable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 tokenOfOwnerByIndex: [Array],
                 totalSupply: [Array],
                 tokenByIndex: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _mint: [Array],
                 _burn: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _ownedTokens: [Object],
                 _ownedTokensIndex: [Object],
                 _allTokens: [Object],
                 _allTokensIndex: [Object],
                 _InterfaceId_ERC721Enumerable: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC721Enumerable: [Object],
                 ERC721: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Enumerable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Enumerable.sol' },
           ERC721Metadata:
            { projectGraph: [Circular],
              name: 'ERC721Metadata',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 name: [Array],
                 symbol: [Array],
                 tokenURI: [Array],
                 _setTokenURI: [Array],
                 _burn: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _tokenURIs: [Object],
                 InterfaceId_ERC721Metadata: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 ERC721: [Object],
                 IERC721Metadata: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Metadata: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Metadata.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 3 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 1 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 2 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 3 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 2 },
           ERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Enumerable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Enumerable.sol' },
              parameters: [],
              level: 0 },
           IERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Enumerable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Enumerable.sol' },
              parameters: [],
              level: 1 },
           ERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Metadata.sol' },
              parameters: [],
              level: 0 },
           IERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Metadata.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Full',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 15, column: 0 }, end: { line: 17, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Full.sol' },
     ERC721Holder:
      { projectGraph: [Circular],
        name: 'ERC721Holder',
        kind: 'contract',
        isAbstract: false,
        functions:
         { onERC721Received:
            [ { name: 'onERC721Received',
                signature: 'onERC721Received(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           IERC721Receiver:
            { projectGraph: [Circular],
              name: 'IERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Receiver.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 },
           IERC721Receiver:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Receiver',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Receiver.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Holder',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'onERC721Received',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 21, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Holder.sol' },
     ERC721Metadata:
      { projectGraph: [Circular],
        name: 'ERC721Metadata',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(string,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _hasBeenInitialized:
            [ { name: '_hasBeenInitialized',
                signature: '_hasBeenInitialized()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           name:
            [ { name: 'name',
                signature: 'name()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           symbol:
            [ { name: 'symbol',
                signature: 'symbol()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           tokenURI:
            [ { name: 'tokenURI',
                signature: 'tokenURI(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _setTokenURI:
            [ { name: '_setTokenURI',
                signature: '_setTokenURI(uint256,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _name:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           InterfaceId_ERC721Metadata:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Metadata',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _clearApproval: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkAndCallSafeTransfer: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
           IERC721Metadata:
            { projectGraph: [Circular],
              name: 'IERC721Metadata',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: { initializer: [Object] },
              stateVariables: {},
              dependencies: { Initializable: [Object], IERC721: [Object] },
              inheritsFrom:
               { Initializable: [Object], IERC721: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Metadata.sol' },
           ERC165:
            { projectGraph: [Circular],
              name: 'ERC165',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 supportsInterface: [Array],
                 _registerInterface: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], IERC165: [Object] },
              inheritsFrom: { Initializable: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC165',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           IERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Metadata.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Metadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_hasBeenInitialized',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_setTokenURI',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 97, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Metadata.sol' },
     ERC721MetadataMintable:
      { projectGraph: [Circular],
        name: 'ERC721MetadataMintable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           mintWithTokenURI:
            [ { name: 'mintWithTokenURI',
                signature: 'mintWithTokenURI(address,uint256,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           minters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _name:
            { functionsWrite: {},
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           InterfaceId_ERC721Metadata:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Metadata',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           ERC721Metadata:
            { projectGraph: [Circular],
              name: 'ERC721Metadata',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 name: [Array],
                 symbol: [Array],
                 tokenURI: [Array],
                 _setTokenURI: [Array],
                 _burn: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _tokenURIs: [Object],
                 InterfaceId_ERC721Metadata: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 ERC721: [Object],
                 IERC721Metadata: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Metadata: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Metadata.sol' },
           MinterRole:
            { projectGraph: [Circular],
              name: 'MinterRole',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 isMinter: [Array],
                 addMinter: [Array],
                 renounceMinter: [Array],
                 _addMinter: [Array],
                 _removeMinter: [Array] },
              modifiers: { onlyMinter: [Object], initializer: [Object] },
              stateVariables:
               { minters: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], Roles: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MinterRole',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/MinterRole.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 1 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 2 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 3 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 2 },
           ERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Metadata.sol' },
              parameters: [],
              level: 0 },
           IERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Metadata.sol' },
              parameters: [],
              level: 1 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721MetadataMintable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mintWithTokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 41, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721MetadataMintable.sol' },
     ERC721Mintable:
      { projectGraph: [Circular],
        name: 'ERC721Mintable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           minters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _clearApproval: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkAndCallSafeTransfer: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
           MinterRole:
            { projectGraph: [Circular],
              name: 'MinterRole',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 isMinter: [Array],
                 addMinter: [Array],
                 renounceMinter: [Array],
                 _addMinter: [Array],
                 _removeMinter: [Array] },
              modifiers: { onlyMinter: [Object], initializer: [Object] },
              stateVariables:
               { minters: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], Roles: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MinterRole',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/MinterRole.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Mintable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 37, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Mintable.sol' },
     ERC721Pausable:
      { projectGraph: [Circular],
        name: 'ERC721Pausable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setApprovalForAll:
            [ { name: 'setApprovalForAll',
                signature: 'setApprovalForAll(address,bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _clearApproval: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkAndCallSafeTransfer: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
           Pausable:
            { projectGraph: [Circular],
              name: 'Pausable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 paused: [Array],
                 pause: [Array],
                 unpause: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 whenPaused: [Object],
                 initializer: [Object],
                 onlyPauser: [Object] },
              stateVariables:
               { _paused: [Object],
                 ______gap: [Object],
                 pausers: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], PauserRole: [Object] },
              inheritsFrom: { Initializable: [Object], PauserRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/lifecycle/Pausable.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/lifecycle/Pausable.sol' },
              parameters: [],
              level: 0 },
           PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Pausable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 50, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Pausable.sol' },
     IERC721:
      { projectGraph: [Circular],
        name: 'IERC721',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           IERC165:
            { projectGraph: [Circular],
              name: 'IERC165',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC165',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ApprovalForAll',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ownerOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getApproved',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isApprovedForAll',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 51, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
     IERC721Enumerable:
      { projectGraph: [Circular],
        name: 'IERC721Enumerable',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: { initializer: [Object] },
              stateVariables: {},
              dependencies: { Initializable: [Object], IERC165: [Object] },
              inheritsFrom: { Initializable: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 0 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Enumerable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenOfOwnerByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Enumerable.sol' },
     IERC721Full:
      { projectGraph: [Circular],
        name: 'IERC721Full',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: { initializer: [Object] },
              stateVariables: {},
              dependencies: { Initializable: [Object], IERC165: [Object] },
              inheritsFrom: { Initializable: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
           IERC721Enumerable:
            { projectGraph: [Circular],
              name: 'IERC721Enumerable',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: { initializer: [Object] },
              stateVariables: {},
              dependencies: { Initializable: [Object], IERC721: [Object] },
              inheritsFrom:
               { Initializable: [Object], IERC721: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Enumerable.sol' },
           IERC721Metadata:
            { projectGraph: [Circular],
              name: 'IERC721Metadata',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: { initializer: [Object] },
              stateVariables: {},
              dependencies: { Initializable: [Object], IERC721: [Object] },
              inheritsFrom:
               { Initializable: [Object], IERC721: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Metadata.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Enumerable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Enumerable.sol' },
              parameters: [],
              level: 0 },
           IERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Metadata.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Full',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes: [],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 14, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Full.sol' },
     IERC721Metadata:
      { projectGraph: [Circular],
        name: 'IERC721Metadata',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: { initializer: [Object] },
              stateVariables: {},
              dependencies: { Initializable: [Object], IERC165: [Object] },
              inheritsFrom: { Initializable: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 0 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Metadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 15, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Metadata.sol' },
     IERC721Receiver:
      { projectGraph: [Circular],
        name: 'IERC721Receiver',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Receiver',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'onERC721Received',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 32, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Receiver.sol' },
     StandaloneERC721:
      { projectGraph: [Circular],
        name: 'StandaloneERC721',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize(string,string,address[],address[])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { minters:
            { functionsWrite: {},
              contract: [Circular],
              name: 'minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _ownedTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokens',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256[])})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokens',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721Enumerable:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721Enumerable',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _name:
            { functionsWrite: {},
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           InterfaceId_ERC721Metadata:
            { functionsWrite: {},
              contract: [Circular],
              name: 'InterfaceId_ERC721Metadata',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
           ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _clearApproval: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkAndCallSafeTransfer: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
           ERC721Enumerable:
            { projectGraph: [Circular],
              name: 'ERC721Enumerable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 tokenOfOwnerByIndex: [Array],
                 totalSupply: [Array],
                 tokenByIndex: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _mint: [Array],
                 _burn: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _ownedTokens: [Object],
                 _ownedTokensIndex: [Object],
                 _allTokens: [Object],
                 _allTokensIndex: [Object],
                 _InterfaceId_ERC721Enumerable: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC721Enumerable: [Object],
                 ERC721: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Enumerable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Enumerable.sol' },
           ERC721Metadata:
            { projectGraph: [Circular],
              name: 'ERC721Metadata',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 name: [Array],
                 symbol: [Array],
                 tokenURI: [Array],
                 _setTokenURI: [Array],
                 _burn: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _tokenURIs: [Object],
                 InterfaceId_ERC721Metadata: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 ERC721: [Object],
                 IERC721Metadata: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Metadata: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Metadata.sol' },
           ERC721MetadataMintable:
            { projectGraph: [Circular],
              name: 'ERC721MetadataMintable',
              kind: 'contract',
              isAbstract: false,
              functions: { initialize: [Array], mintWithTokenURI: [Array] },
              modifiers: { initializer: [Object], onlyMinter: [Object] },
              stateVariables:
               { ______gap: [Object],
                 minters: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 _name: [Object],
                 _symbol: [Object],
                 _tokenURIs: [Object],
                 InterfaceId_ERC721Metadata: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 ERC721Metadata: [Object],
                 MinterRole: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC721: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC721: [Object],
                 ERC721Metadata: [Object],
                 IERC721Metadata: [Object],
                 MinterRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721MetadataMintable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721MetadataMintable.sol' },
           ERC721Pausable:
            { projectGraph: [Circular],
              name: 'ERC721Pausable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 approve: [Array],
                 setApprovalForAll: [Array],
                 transferFrom: [Array] },
              modifiers:
               { initializer: [Object],
                 whenNotPaused: [Object],
                 whenPaused: [Object],
                 onlyPauser: [Object] },
              stateVariables:
               { ______gap: [Object],
                 pausers: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _paused: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object], ERC721: [Object], Pausable: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC721: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC721: [Object],
                 Pausable: [Object],
                 PauserRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Pausable.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 3 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 1 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 2 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 3 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 2 },
           ERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Enumerable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Enumerable.sol' },
              parameters: [],
              level: 0 },
           IERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Enumerable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Enumerable.sol' },
              parameters: [],
              level: 1 },
           ERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Metadata.sol' },
              parameters: [],
              level: 1 },
           IERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721Metadata.sol' },
              parameters: [],
              level: 2 },
           ERC721MetadataMintable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721MetadataMintable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721MetadataMintable.sol' },
              parameters: [],
              level: 0 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 1 },
           ERC721Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Pausable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Pausable.sol' },
              parameters: [],
              level: 0 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/lifecycle/Pausable.sol' },
              parameters: [],
              level: 1 },
           PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'StandaloneERC721',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 15, column: 0 }, end: { line: 40, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/StandaloneERC721.sol' },
     Address:
      { projectGraph: [Circular],
        name: 'Address',
        kind: 'library',
        isAbstract: false,
        functions:
         { isContract:
            [ { name: 'isContract',
                signature: 'isContract(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Address',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'isContract',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 28, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/utils/Address.sol' },
     ReentrancyGuard:
      { projectGraph: [Circular],
        name: 'ReentrancyGuard',
        kind: 'contract',
        isAbstract: false,
        functions:
         { initialize:
            [ { name: 'initialize',
                signature: 'initialize()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _guardCounter:
            { functionsWrite: { initialize: [Array] },
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Initializable:
            { projectGraph: [Circular],
              name: 'Initializable',
              kind: 'contract',
              isAbstract: false,
              functions: { isConstructor: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { initialized: [Object],
                 initializing: [Object],
                 ______gap: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Initializable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' } },
        inheritsFrom:
         { Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ReentrancyGuard',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialize',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'nonReentrant',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 36, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/utils/ReentrancyGuard.sol' },
     AddressUtils:
      { projectGraph: [Circular],
        name: 'AddressUtils',
        kind: 'library',
        isAbstract: false,
        functions:
         { isContract:
            [ { name: 'isContract',
                signature: 'isContract(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'AddressUtils',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'isContract',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 29, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/AddressUtils.sol' },
     Bounty:
      { projectGraph: [Circular],
        name: 'Bounty',
        kind: 'contract',
        isAbstract: true,
        functions:
         { '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           createTarget:
            [ { name: 'createTarget',
                signature: 'createTarget()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           claim:
            [ { name: 'claim',
                signature: 'claim(Target)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { claimed:
            { functionsWrite: { claim: [Array] },
              contract: [Circular],
              name: 'claimed',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           researchers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'researchers',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>address)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { PullPayment:
            { projectGraph: [Circular],
              name: 'PullPayment',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 withdrawPayments: [Array],
                 payments: [Array],
                 _asyncTransfer: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _escrow: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], Escrow: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'PullPayment',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/PullPayment.sol' },
           Destructible:
            { projectGraph: [Circular],
              name: 'Destructible',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 destroy: [Array],
                 destroyAndSend: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Ownable: [Object] },
              inheritsFrom: { Ownable: [Object], Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Destructible',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/lifecycle/Destructible.sol' } },
        inheritsFrom:
         { PullPayment:
            { contract:
               { projectGraph: [Circular],
                 name: 'PullPayment',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/PullPayment.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           Destructible:
            { contract:
               { projectGraph: [Circular],
                 name: 'Destructible',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/lifecycle/Destructible.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Bounty',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TargetCreated',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'createTarget',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'claim',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'deployContract',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 56, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/Bounty.sol' },
     Target:
      { projectGraph: [Circular],
        name: 'Target',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { PullPayment:
            { projectGraph: [Circular],
              name: 'PullPayment',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 withdrawPayments: [Array],
                 payments: [Array],
                 _asyncTransfer: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _escrow: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], Escrow: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'PullPayment',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/PullPayment.sol' },
           Destructible:
            { projectGraph: [Circular],
              name: 'Destructible',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 destroy: [Array],
                 destroyAndSend: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Ownable: [Object] },
              inheritsFrom: { Ownable: [Object], Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Destructible',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/lifecycle/Destructible.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Target',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'checkInvariant',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 63, column: 0 }, end: { line: 72, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/Bounty.sol' },
     RefundVault:
      { projectGraph: [Circular],
        name: 'RefundVault',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           deposit:
            [ { name: 'deposit',
                signature: 'deposit(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           close:
            [ { name: 'close',
                signature: 'close()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           enableRefunds:
            [ { name: 'enableRefunds',
                signature: 'enableRefunds()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           refund:
            [ { name: 'refund',
                signature: 'refund(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { deposited:
            { functionsWrite: {},
              contract: [Circular],
              name: 'deposited',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           wallet:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           state:
            { functionsWrite:
               { constructor: [Array], close: [Array], enableRefunds: [Array] },
              contract: [Circular],
              name: 'state',
              isArray: false,
              initialValue: null,
              type: 'State',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums:
         { State:
            { name: 'State',
              contract: [Circular],
              members: [ 'Active', 'Refunding', 'Closed' ] } },
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RefundVault',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'State',
                members: [Array],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Closed',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RefundsEnabled',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Refunded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'deposit',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'close',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'enableRefunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'refund',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 66, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/utils/RefundVault.sol' },
     WhitelistedCrowdsale:
      { projectGraph: [Circular],
        name: 'WhitelistedCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { addToWhitelist:
            [ { name: 'addToWhitelist',
                signature: 'addToWhitelist(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addManyToWhitelist:
            [ { name: 'addManyToWhitelist',
                signature: 'addManyToWhitelist(address[])',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           removeFromWhitelist:
            [ { name: 'removeFromWhitelist',
                signature: 'removeFromWhitelist(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isWhitelisted:
            { name: 'isWhitelisted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isWhitelisted',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { whitelist:
            { functionsWrite: {},
              contract: [Circular],
              name: 'whitelist',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>bool)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _hasBeenInitialized: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'WhitelistedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'isWhitelisted',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addToWhitelist',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addManyToWhitelist',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeFromWhitelist',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 64, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/WhitelistedCrowdsale.sol' },
     ECRecovery:
      { projectGraph: [Circular],
        name: 'ECRecovery',
        kind: 'library',
        isAbstract: false,
        functions:
         { recover:
            [ { name: 'recover',
                signature: 'recover(bytes32,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           toEthSignedMessageHash:
            [ { name: 'toEthSignedMessageHash',
                signature: 'toEthSignedMessageHash(bytes32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ECRecovery',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'recover',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toEthSignedMessageHash',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 14, column: 0 }, end: { line: 76, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ECRecovery.sol' },
     Destructible:
      { projectGraph: [Circular],
        name: 'Destructible',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           destroy:
            [ { name: 'destroy',
                signature: 'destroy()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           destroyAndSend:
            [ { name: 'destroyAndSend',
                signature: 'destroyAndSend(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Destructible',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'destroy',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'destroyAndSend',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 25, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/lifecycle/Destructible.sol' },
     TokenDestructible:
      { projectGraph: [Circular],
        name: 'TokenDestructible',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           destroy:
            [ { name: 'destroy',
                signature: 'destroy(address[])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
           ERC20Basic:
            { projectGraph: [Circular],
              name: 'ERC20Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Basic',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenDestructible',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'destroy',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 36, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/lifecycle/TokenDestructible.sol' },
     LimitBalance:
      { projectGraph: [Circular],
        name: 'LimitBalance',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { limitedPayable:
            { name: 'limitedPayable',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'limitedPayable',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { limit:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'limit',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'LimitBalance',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'limitedPayable',
                parameters: [],
                body: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 31, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/LimitBalance.sol' },
     CanReclaimToken:
      { projectGraph: [Circular],
        name: 'CanReclaimToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { reclaimToken:
            [ { name: 'reclaimToken',
                signature: 'reclaimToken(ERC20Basic)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
           ERC20Basic:
            { projectGraph: [Circular],
              name: 'ERC20Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Basic',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { ERC20: [Object], IERC20: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/SafeERC20.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CanReclaimToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'reclaimToken',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 }, end: { line: 26, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol' },
     Claimable:
      { projectGraph: [Circular],
        name: 'Claimable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transferOwnership:
            [ { name: 'transferOwnership',
                signature: 'transferOwnership(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           claimOwnership:
            [ { name: 'claimOwnership',
                signature: 'claimOwnership()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPendingOwner:
            { name: 'onlyPendingOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPendingOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pendingOwner:
            { functionsWrite: { transferOwnership: [Array], claimOwnership: [Array] },
              contract: [Circular],
              name: 'pendingOwner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Claimable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyPendingOwner',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferOwnership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'claimOwnership',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 39, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/Claimable.sol' },
     Contactable:
      { projectGraph: [Circular],
        name: 'Contactable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { setContactInformation:
            [ { name: 'setContactInformation',
                signature: 'setContactInformation(string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { contactInformation:
            { functionsWrite: { setContactInformation: [Array] },
              contract: [Circular],
              name: 'contactInformation',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Contactable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setContactInformation',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/Contactable.sol' },
     DelayedClaimable:
      { projectGraph: [Circular],
        name: 'DelayedClaimable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { setLimits:
            [ { name: 'setLimits',
                signature: 'setLimits(uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           claimOwnership:
            [ { name: 'claimOwnership',
                signature: 'claimOwnership()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPendingOwner:
            { name: 'onlyPendingOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPendingOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { end:
            { functionsWrite: { setLimits: [Array], claimOwnership: [Array] },
              contract: [Circular],
              name: 'end',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           start:
            { functionsWrite: { setLimits: [Array] },
              contract: [Circular],
              name: 'start',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           pendingOwner:
            { functionsWrite: { claimOwnership: [Array] },
              contract: [Circular],
              name: 'pendingOwner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Claimable:
            { projectGraph: [Circular],
              name: 'Claimable',
              kind: 'contract',
              isAbstract: false,
              functions: { transferOwnership: [Array], claimOwnership: [Array] },
              modifiers:
               { onlyPendingOwner: [Object],
                 onlyOwner: [Object],
                 initializer: [Object] },
              stateVariables:
               { pendingOwner: [Object],
                 _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Ownable: [Object] },
              inheritsFrom: { Ownable: [Object], Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Claimable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/Claimable.sol' } },
        inheritsFrom:
         { Claimable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Claimable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/Claimable.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'DelayedClaimable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setLimits',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'claimOwnership',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 40, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/DelayedClaimable.sol' },
     HasNoContracts:
      { projectGraph: [Circular],
        name: 'HasNoContracts',
        kind: 'contract',
        isAbstract: false,
        functions:
         { reclaimContract:
            [ { name: 'reclaimContract',
                signature: 'reclaimContract(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'HasNoContracts',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'reclaimContract',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/HasNoContracts.sol' },
     HasNoEther:
      { projectGraph: [Circular],
        name: 'HasNoEther',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           '':
            [ { name: '',
                signature: '()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           reclaimEther:
            [ { name: 'reclaimEther',
                signature: 'reclaimEther()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'HasNoEther',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'reclaimEther',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 16, column: 0 }, end: { line: 41, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/HasNoEther.sol' },
     HasNoTokens:
      { projectGraph: [Circular],
        name: 'HasNoTokens',
        kind: 'contract',
        isAbstract: false,
        functions:
         { tokenFallback:
            [ { name: 'tokenFallback',
                signature: 'tokenFallback(address,uint256,bytes)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { CanReclaimToken:
            { projectGraph: [Circular],
              name: 'CanReclaimToken',
              kind: 'contract',
              isAbstract: false,
              functions: { reclaimToken: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Ownable: [Object], ERC20Basic: [Object], SafeERC20: [Object] },
              inheritsFrom: { Ownable: [Object], Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'CanReclaimToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol' } },
        inheritsFrom:
         { CanReclaimToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'CanReclaimToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'HasNoTokens',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'tokenFallback',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 28, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/HasNoTokens.sol' },
     Heritable:
      { projectGraph: [Circular],
        name: 'Heritable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           setHeir:
            [ { name: 'setHeir',
                signature: 'setHeir(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           heir:
            [ { name: 'heir',
                signature: 'heir()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           heartbeatTimeout:
            [ { name: 'heartbeatTimeout',
                signature: 'heartbeatTimeout()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           timeOfDeath:
            [ { name: 'timeOfDeath',
                signature: 'timeOfDeath()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           removeHeir:
            [ { name: 'removeHeir',
                signature: 'removeHeir()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           proclaimDeath:
            [ { name: 'proclaimDeath',
                signature: 'proclaimDeath()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           heartbeat:
            [ { name: 'heartbeat',
                signature: 'heartbeat()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           claimHeirOwnership:
            [ { name: 'claimHeirOwnership',
                signature: 'claimHeirOwnership()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           setHeartbeatTimeout:
            [ { name: 'setHeartbeatTimeout',
                signature: 'setHeartbeatTimeout(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           ownerLives:
            [ { name: 'ownerLives',
                signature: 'ownerLives()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyHeir:
            { name: 'onlyHeir',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyHeir',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { heir_:
            { functionsWrite: { setHeir: [Array], removeHeir: [Array] },
              contract: [Circular],
              name: 'heir_',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           heartbeatTimeout_:
            { functionsWrite: { setHeartbeatTimeout: [Array] },
              contract: [Circular],
              name: 'heartbeatTimeout_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           timeOfDeath_:
            { functionsWrite:
               { proclaimDeath: [Array],
                 heartbeat: [Array],
                 claimHeirOwnership: [Array] },
              contract: [Circular],
              name: 'timeOfDeath_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Heritable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'HeirChanged',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'OwnerHeartbeated',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'OwnerProclaimedDead',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'HeirOwnershipClaimed',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyHeir',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setHeir',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'heir',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'heartbeatTimeout',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'timeOfDeath',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeHeir',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'proclaimDeath',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'heartbeat',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'claimHeirOwnership',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setHeartbeatTimeout',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ownerLives',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 },
              end: { line: 126, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/Heritable.sol' },
     NoOwner:
      { projectGraph: [Circular],
        name: 'NoOwner',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { HasNoEther:
            { projectGraph: [Circular],
              name: 'HasNoEther',
              kind: 'contract',
              isAbstract: false,
              functions: { constructor: [Array], '': [Array], reclaimEther: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Ownable: [Object] },
              inheritsFrom: { Ownable: [Object], Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'HasNoEther',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/HasNoEther.sol' },
           HasNoTokens:
            { projectGraph: [Circular],
              name: 'HasNoTokens',
              kind: 'contract',
              isAbstract: false,
              functions: { tokenFallback: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { CanReclaimToken: [Object] },
              inheritsFrom:
               { CanReclaimToken: [Object],
                 Ownable: [Object],
                 Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'HasNoTokens',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/HasNoTokens.sol' },
           HasNoContracts:
            { projectGraph: [Circular],
              name: 'HasNoContracts',
              kind: 'contract',
              isAbstract: false,
              functions: { reclaimContract: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Ownable: [Object] },
              inheritsFrom: { Ownable: [Object], Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'HasNoContracts',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/HasNoContracts.sol' } },
        inheritsFrom:
         { HasNoEther:
            { contract:
               { projectGraph: [Circular],
                 name: 'HasNoEther',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/HasNoEther.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           HasNoTokens:
            { contract:
               { projectGraph: [Circular],
                 name: 'HasNoTokens',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/HasNoTokens.sol' },
              parameters: [],
              level: 0 },
           CanReclaimToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'CanReclaimToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol' },
              parameters: [],
              level: 1 },
           HasNoContracts:
            { contract:
               { projectGraph: [Circular],
                 name: 'HasNoContracts',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/HasNoContracts.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'NoOwner',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes: [],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 }, end: { line: 15, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/NoOwner.sol' },
     RBAC:
      { projectGraph: [Circular],
        name: 'RBAC',
        kind: 'contract',
        isAbstract: false,
        functions:
         { checkRole:
            [ { name: 'checkRole',
                signature: 'checkRole(address,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           hasRole:
            [ { name: 'hasRole',
                signature: 'hasRole(address,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addRole:
            [ { name: 'addRole',
                signature: 'addRole(address,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           removeRole:
            [ { name: 'removeRole',
                signature: 'removeRole(address,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyRole:
            { name: 'onlyRole',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyRole',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] } },
        stateVariables:
         { roles:
            { functionsWrite: {},
              contract: [Circular],
              name: 'roles',
              isArray: false,
              initialValue: null,
              type: 'mapping(string=>Roles.Role)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RBAC',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RoleAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RoleRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'checkRole',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'hasRole',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addRole',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeRole',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyRole',
                parameters: [Array],
                body: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 17, column: 0 },
              end: { line: 108, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol' },
     Superuser:
      { projectGraph: [Circular],
        name: 'Superuser',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isSuperuser:
            [ { name: 'isSuperuser',
                signature: 'isSuperuser(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transferSuperuser:
            [ { name: 'transferSuperuser',
                signature: 'transferSuperuser(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transferOwnership:
            [ { name: 'transferOwnership',
                signature: 'transferOwnership(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlySuperuser:
            { name: 'onlySuperuser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlySuperuser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwnerOrSuperuser:
            { name: 'onlyOwnerOrSuperuser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwnerOrSuperuser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyRole:
            { name: 'onlyRole',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyRole',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] } },
        stateVariables:
         { ROLE_SUPERUSER:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ROLE_SUPERUSER',
              isArray: false,
              initialValue: 'superuser',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           roles:
            { functionsWrite: {},
              contract: [Circular],
              name: 'roles',
              isArray: false,
              initialValue: null,
              type: 'mapping(string=>Roles.Role)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
           RBAC:
            { projectGraph: [Circular],
              name: 'RBAC',
              kind: 'contract',
              isAbstract: false,
              functions:
               { checkRole: [Array],
                 hasRole: [Array],
                 addRole: [Array],
                 removeRole: [Array] },
              modifiers: { onlyRole: [Object] },
              stateVariables: { roles: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RBAC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           RBAC:
            { contract:
               { projectGraph: [Circular],
                 name: 'RBAC',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Superuser',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlySuperuser',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyOwnerOrSuperuser',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isSuperuser',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferSuperuser',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferOwnership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 }, end: { line: 62, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/Superuser.sol' },
     Whitelist:
      { projectGraph: [Circular],
        name: 'Whitelist',
        kind: 'contract',
        isAbstract: false,
        functions:
         { addAddressToWhitelist:
            [ { name: 'addAddressToWhitelist',
                signature: 'addAddressToWhitelist(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           whitelist:
            [ { name: 'whitelist',
                signature: 'whitelist(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           addAddressesToWhitelist:
            [ { name: 'addAddressesToWhitelist',
                signature: 'addAddressesToWhitelist(address[])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           removeAddressFromWhitelist:
            [ { name: 'removeAddressFromWhitelist',
                signature: 'removeAddressFromWhitelist(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           removeAddressesFromWhitelist:
            [ { name: 'removeAddressesFromWhitelist',
                signature: 'removeAddressesFromWhitelist(address[])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ] },
        modifiers:
         { onlyWhitelisted:
            { name: 'onlyWhitelisted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhitelisted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyRole:
            { name: 'onlyRole',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyRole',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] } },
        stateVariables:
         { ROLE_WHITELISTED:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ROLE_WHITELISTED',
              isArray: false,
              initialValue: 'whitelist',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           roles:
            { functionsWrite: {},
              contract: [Circular],
              name: 'roles',
              isArray: false,
              initialValue: null,
              type: 'mapping(string=>Roles.Role)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
           RBAC:
            { projectGraph: [Circular],
              name: 'RBAC',
              kind: 'contract',
              isAbstract: false,
              functions:
               { checkRole: [Array],
                 hasRole: [Array],
                 addRole: [Array],
                 removeRole: [Array] },
              modifiers: { onlyRole: [Object] },
              stateVariables: { roles: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RBAC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           RBAC:
            { contract:
               { projectGraph: [Circular],
                 name: 'RBAC',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Whitelist',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'WhitelistedAddressAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'WhitelistedAddressRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyWhitelisted',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addAddressToWhitelist',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'whitelist',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addAddressesToWhitelist',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeAddressFromWhitelist',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeAddressesFromWhitelist',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 95, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/Whitelist.sol' },
     BasicToken:
      { projectGraph: [Circular],
        name: 'BasicToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { totalSupply:
            [ { name: 'totalSupply',
                signature: 'totalSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20Basic:
            { projectGraph: [Circular],
              name: 'ERC20Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Basic',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'BasicToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 50, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
     BurnableToken:
      { projectGraph: [Circular],
        name: 'BurnableToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { burn:
            [ { name: 'burn',
                signature: 'burn(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: { _burn: [Array] },
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BasicToken:
            { projectGraph: [Circular],
              name: 'BasicToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array], transfer: [Array], balanceOf: [Array] },
              modifiers: {},
              stateVariables: { balances: [Object], totalSupply_: [Object] },
              dependencies: { ERC20Basic: [Object], SafeMath: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasicToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol' } },
        inheritsFrom:
         { BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 0 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'BurnableToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Burn',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 32, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol' },
     CappedToken:
      { projectGraph: [Circular],
        name: 'CappedToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { canMint:
            { name: 'canMint',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'canMint',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           hasMintPermission:
            { name: 'hasMintPermission',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'hasMintPermission',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { cap:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'cap',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           mintingFinished:
            { functionsWrite: {},
              contract: [Circular],
              name: 'mintingFinished',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { MintableToken:
            { projectGraph: [Circular],
              name: 'MintableToken',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array], finishMinting: [Array] },
              modifiers:
               { canMint: [Object],
                 hasMintPermission: [Object],
                 initializer: [Object],
                 onlyOwner: [Object] },
              stateVariables:
               { mintingFinished: [Object],
                 _owner: [Object],
                 ______gap: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 balances: [Object],
                 totalSupply_: [Object],
                 allowed: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { StandardToken: [Object], Ownable: [Object] },
              inheritsFrom:
               { StandardToken: [Object],
                 ERC20: [Object],
                 Initializable: [Object],
                 IERC20: [Object],
                 BasicToken: [Object],
                 ERC20Basic: [Object],
                 Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MintableToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol' } },
        inheritsFrom:
         { MintableToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'MintableToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol' },
              parameters: [],
              level: 0 },
           StandardToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'StandardToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
              parameters: [],
              level: 1 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 2 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 3 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 2 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 3 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CappedToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 39, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/CappedToken.sol' },
     DetailedERC20:
      { projectGraph: [Circular],
        name: 'DetailedERC20',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string,uint8)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           decimals:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 allowance: [Array],
                 transfer: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _burnFrom: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object], IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { Initializable: [Object], IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'DetailedERC20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol' },
     ERC20Basic:
      { projectGraph: [Circular],
        name: 'ERC20Basic',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Basic',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 14, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
     MintableToken:
      { projectGraph: [Circular],
        name: 'MintableToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           finishMinting:
            [ { name: 'finishMinting',
                signature: 'finishMinting()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { canMint:
            { name: 'canMint',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'canMint',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           hasMintPermission:
            { name: 'hasMintPermission',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'hasMintPermission',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { mintingFinished:
            { functionsWrite: { finishMinting: [Array] },
              contract: [Circular],
              name: 'mintingFinished',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: { mint: [Array] },
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { StandardToken:
            { projectGraph: [Circular],
              name: 'StandardToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { transferFrom: [Array],
                 approve: [Array],
                 allowance: [Array],
                 increaseApproval: [Array],
                 decreaseApproval: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { allowed: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 balances: [Object],
                 totalSupply_: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { BasicToken: [Object], ERC20: [Object] },
              inheritsFrom:
               { ERC20: [Object],
                 Initializable: [Object],
                 IERC20: [Object],
                 BasicToken: [Object],
                 ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'StandardToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { StandardToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'StandardToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 2 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 1 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 2 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MintableToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Mint',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'MintFinished',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'canMint',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'hasMintPermission',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finishMinting',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 61, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol' },
     PausableToken:
      { projectGraph: [Circular],
        name: 'PausableToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           increaseApproval:
            [ { name: 'increaseApproval',
                signature: 'increaseApproval(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decreaseApproval:
            [ { name: 'decreaseApproval',
                signature: 'decreaseApproval(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { StandardToken:
            { projectGraph: [Circular],
              name: 'StandardToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { transferFrom: [Array],
                 approve: [Array],
                 allowance: [Array],
                 increaseApproval: [Array],
                 decreaseApproval: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { allowed: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 balances: [Object],
                 totalSupply_: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { BasicToken: [Object], ERC20: [Object] },
              inheritsFrom:
               { ERC20: [Object],
                 Initializable: [Object],
                 IERC20: [Object],
                 BasicToken: [Object],
                 ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'StandardToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
           Pausable:
            { projectGraph: [Circular],
              name: 'Pausable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 paused: [Array],
                 pause: [Array],
                 unpause: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 whenPaused: [Object],
                 initializer: [Object],
                 onlyPauser: [Object] },
              stateVariables:
               { _paused: [Object],
                 ______gap: [Object],
                 pausers: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object], PauserRole: [Object] },
              inheritsFrom: { Initializable: [Object], PauserRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/lifecycle/Pausable.sol' } },
        inheritsFrom:
         { StandardToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'StandardToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 2 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 1 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 2 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/lifecycle/Pausable.sol' },
              parameters: [],
              level: 0 },
           PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PausableToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increaseApproval',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decreaseApproval',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 68, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol' },
     RBACMintableToken:
      { projectGraph: [Circular],
        name: 'RBACMintableToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { addMinter:
            [ { name: 'addMinter',
                signature: 'addMinter(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           removeMinter:
            [ { name: 'removeMinter',
                signature: 'removeMinter(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { hasMintPermission:
            { name: 'hasMintPermission',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'hasMintPermission',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           canMint:
            { name: 'canMint',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'canMint',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyRole:
            { name: 'onlyRole',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyRole',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] } },
        stateVariables:
         { ROLE_MINTER:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ROLE_MINTER',
              isArray: false,
              initialValue: 'minter',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           roles:
            { functionsWrite: {},
              contract: [Circular],
              name: 'roles',
              isArray: false,
              initialValue: null,
              type: 'mapping(string=>Roles.Role)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           mintingFinished:
            { functionsWrite: {},
              contract: [Circular],
              name: 'mintingFinished',
              isArray: false,
              initialValue: false,
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { MintableToken:
            { projectGraph: [Circular],
              name: 'MintableToken',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array], finishMinting: [Array] },
              modifiers:
               { canMint: [Object],
                 hasMintPermission: [Object],
                 initializer: [Object],
                 onlyOwner: [Object] },
              stateVariables:
               { mintingFinished: [Object],
                 _owner: [Object],
                 ______gap: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 balances: [Object],
                 totalSupply_: [Object],
                 allowed: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { StandardToken: [Object], Ownable: [Object] },
              inheritsFrom:
               { StandardToken: [Object],
                 ERC20: [Object],
                 Initializable: [Object],
                 IERC20: [Object],
                 BasicToken: [Object],
                 ERC20Basic: [Object],
                 Ownable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MintableToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol' },
           RBAC:
            { projectGraph: [Circular],
              name: 'RBAC',
              kind: 'contract',
              isAbstract: false,
              functions:
               { checkRole: [Array],
                 hasRole: [Array],
                 addRole: [Array],
                 removeRole: [Array] },
              modifiers: { onlyRole: [Object] },
              stateVariables: { roles: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RBAC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol' } },
        inheritsFrom:
         { MintableToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'MintableToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol' },
              parameters: [],
              level: 0 },
           StandardToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'StandardToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
              parameters: [],
              level: 1 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 2 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 3 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 2 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 3 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 1 },
           RBAC:
            { contract:
               { projectGraph: [Circular],
                 name: 'RBAC',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RBACMintableToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'hasMintPermission',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 41, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/RBACMintableToken.sol' },
     StandardBurnableToken:
      { projectGraph: [Circular],
        name: 'StandardBurnableToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { burnFrom:
            [ { name: 'burnFrom',
                signature: 'burnFrom(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BurnableToken:
            { projectGraph: [Circular],
              name: 'BurnableToken',
              kind: 'contract',
              isAbstract: false,
              functions: { burn: [Array], _burn: [Array] },
              modifiers: {},
              stateVariables: { balances: [Object], totalSupply_: [Object] },
              dependencies: { BasicToken: [Object] },
              inheritsFrom: { BasicToken: [Object], ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BurnableToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol' },
           StandardToken:
            { projectGraph: [Circular],
              name: 'StandardToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { transferFrom: [Array],
                 approve: [Array],
                 allowance: [Array],
                 increaseApproval: [Array],
                 decreaseApproval: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { allowed: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 balances: [Object],
                 totalSupply_: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { BasicToken: [Object], ERC20: [Object] },
              inheritsFrom:
               { ERC20: [Object],
                 Initializable: [Object],
                 IERC20: [Object],
                 BasicToken: [Object],
                 ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'StandardToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol' } },
        inheritsFrom:
         { BurnableToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BurnableToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol' },
              parameters: [],
              level: 0 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 1 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 2 },
           StandardToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'StandardToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'StandardBurnableToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'burnFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 25, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardBurnableToken.sol' },
     StandardToken:
      { projectGraph: [Circular],
        name: 'StandardToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           increaseApproval:
            [ { name: 'increaseApproval',
                signature: 'increaseApproval(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decreaseApproval:
            [ { name: 'decreaseApproval',
                signature: 'decreaseApproval(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { BasicToken:
            { projectGraph: [Circular],
              name: 'BasicToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array], transfer: [Array], balanceOf: [Array] },
              modifiers: {},
              stateVariables: { balances: [Object], totalSupply_: [Object] },
              dependencies: { ERC20Basic: [Object], SafeMath: [Object] },
              inheritsFrom: { ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BasicToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
           ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 allowance: [Array],
                 transfer: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _burnFrom: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object], IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { Initializable: [Object], IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 0 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'StandardToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increaseApproval',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decreaseApproval',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 },
              end: { line: 127, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
     DeprecatedERC721:
      { projectGraph: [Circular],
        name: 'DeprecatedERC721',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { ERC721Enumerable:
            { projectGraph: [Circular],
              name: 'ERC721Enumerable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 tokenOfOwnerByIndex: [Array],
                 totalSupply: [Array],
                 tokenByIndex: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _mint: [Array],
                 _burn: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _ownedTokens: [Object],
                 _ownedTokensIndex: [Object],
                 _allTokens: [Object],
                 _allTokensIndex: [Object],
                 _InterfaceId_ERC721Enumerable: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC721Enumerable: [Object],
                 ERC721: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Enumerable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Enumerable.sol' },
           ERC721Metadata:
            { projectGraph: [Circular],
              name: 'ERC721Metadata',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 name: [Array],
                 symbol: [Array],
                 tokenURI: [Array],
                 _setTokenURI: [Array],
                 _burn: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _tokenURIs: [Object],
                 InterfaceId_ERC721Metadata: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 ERC721: [Object],
                 IERC721Metadata: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Metadata: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Metadata.sol' },
           ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _clearApproval: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkAndCallSafeTransfer: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'DeprecatedERC721',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'takeOwnership',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokensOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 15, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC721/DeprecatedERC721.sol' },
     ERC721Basic:
      { projectGraph: [Circular],
        name: 'ERC721Basic',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Basic',
           baseContracts: [],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ApprovalForAll',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ownerOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'exists',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getApproved',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isApprovedForAll',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 48, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' },
     ERC721BasicToken:
      { projectGraph: [Circular],
        name: 'ERC721BasicToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           ownerOf:
            [ { name: 'ownerOf',
                signature: 'ownerOf(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           exists:
            [ { name: 'exists',
                signature: 'exists(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getApproved:
            [ { name: 'getApproved',
                signature: 'getApproved(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setApprovalForAll:
            [ { name: 'setApprovalForAll',
                signature: 'setApprovalForAll(address,bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isApprovedForAll:
            [ { name: 'isApprovedForAll',
                signature: 'isApprovedForAll(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeTransferFrom:
            [ { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isApprovedOrOwner:
            [ { name: 'isApprovedOrOwner',
                signature: 'isApprovedOrOwner(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           clearApproval:
            [ { name: 'clearApproval',
                signature: 'clearApproval(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addTokenTo:
            [ { name: 'addTokenTo',
                signature: 'addTokenTo(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           removeTokenFrom:
            [ { name: 'removeTokenFrom',
                signature: 'removeTokenFrom(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           checkAndCallSafeTransfer:
            [ { name: 'checkAndCallSafeTransfer',
                signature: 'checkAndCallSafeTransfer(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwnerOf:
            { name: 'onlyOwnerOf',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwnerOf',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           canTransfer:
            { name: 'canTransfer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'canTransfer',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] } },
        stateVariables:
         { ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ERC721_RECEIVED',
              isArray: false,
              initialValue: 4038714810,
              type: 'bytes4',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC721Basic:
            { projectGraph: [Circular],
              name: 'ERC721Basic',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Basic',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' },
           ERC721Receiver:
            { projectGraph: [Circular],
              name: 'ERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { ERC721_RECEIVED: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { mul: [Array],
                 div: [Array],
                 sub: [Array],
                 add: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
           AddressUtils:
            { projectGraph: [Circular],
              name: 'AddressUtils',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'AddressUtils',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/AddressUtils.sol' } },
        inheritsFrom:
         { ERC721Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721BasicToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'AddressUtils',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyOwnerOf',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'canTransfer',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ownerOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'exists',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getApproved',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isApprovedForAll',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isApprovedOrOwner',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'clearApproval',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addTokenTo',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeTokenFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'checkAndCallSafeTransfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 },
              end: { line: 324, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol' },
     ERC721Receiver:
      { projectGraph: [Circular],
        name: 'ERC721Receiver',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ERC721_RECEIVED',
              isArray: false,
              initialValue: 4038714810,
              type: 'bytes4',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Receiver',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'onERC721Received',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 36, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol' },
     ERC721Token:
      { projectGraph: [Circular],
        name: 'ERC721Token',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           name:
            [ { name: 'name',
                signature: 'name()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           symbol:
            [ { name: 'symbol',
                signature: 'symbol()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           tokenURI:
            [ { name: 'tokenURI',
                signature: 'tokenURI(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           tokenOfOwnerByIndex:
            [ { name: 'tokenOfOwnerByIndex',
                signature: 'tokenOfOwnerByIndex(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalSupply:
            [ { name: 'totalSupply',
                signature: 'totalSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           tokenByIndex:
            [ { name: 'tokenByIndex',
                signature: 'tokenByIndex(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _setTokenURI:
            [ { name: '_setTokenURI',
                signature: '_setTokenURI(uint256,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addTokenTo:
            [ { name: 'addTokenTo',
                signature: 'addTokenTo(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           removeTokenFrom:
            [ { name: 'removeTokenFrom',
                signature: 'removeTokenFrom(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwnerOf:
            { name: 'onlyOwnerOf',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwnerOf',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           canTransfer:
            { name: 'canTransfer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'canTransfer',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] } },
        stateVariables:
         { name_:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'name_',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           symbol_:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'symbol_',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ownedTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ownedTokens',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256[])})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ownedTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ownedTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allTokens:
            { functionsWrite: { _mint: [Array] },
              contract: [Circular],
              name: 'allTokens',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: 'tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _InterfaceId_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_InterfaceId_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ERC721_RECEIVED',
              isArray: false,
              initialValue: 4038714810,
              type: 'bytes4',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: 'tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC721Enumerable:
            { projectGraph: [Circular],
              name: 'ERC721Enumerable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 tokenOfOwnerByIndex: [Array],
                 totalSupply: [Array],
                 tokenByIndex: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _mint: [Array],
                 _burn: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _ownedTokens: [Object],
                 _ownedTokensIndex: [Object],
                 _allTokens: [Object],
                 _allTokensIndex: [Object],
                 _InterfaceId_ERC721Enumerable: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC721Enumerable: [Object],
                 ERC721: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Enumerable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Enumerable.sol' },
           ERC721Metadata:
            { projectGraph: [Circular],
              name: 'ERC721Metadata',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 name: [Array],
                 symbol: [Array],
                 tokenURI: [Array],
                 _setTokenURI: [Array],
                 _burn: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _tokenURIs: [Object],
                 InterfaceId_ERC721Metadata: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 ERC721: [Object],
                 IERC721Metadata: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Metadata: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721Metadata.sol' },
           ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 _hasBeenInitialized: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _clearApproval: [Array],
                 _addTokenTo: [Array],
                 _removeTokenFrom: [Array],
                 _checkAndCallSafeTransfer: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _InterfaceId_ERC721: [Object],
                 ______gap: [Object],
                 _InterfaceId_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object],
                 IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { Initializable: [Object],
                 ERC165: [Object],
                 IERC165: [Object],
                 IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
           ERC721BasicToken:
            { projectGraph: [Circular],
              name: 'ERC721BasicToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { balanceOf: [Array],
                 ownerOf: [Array],
                 exists: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 clearApproval: [Array],
                 addTokenTo: [Array],
                 removeTokenFrom: [Array],
                 checkAndCallSafeTransfer: [Array] },
              modifiers: { onlyOwnerOf: [Object], canTransfer: [Object] },
              stateVariables:
               { ERC721_RECEIVED: [Object],
                 tokenOwner: [Object],
                 tokenApprovals: [Object],
                 ownedTokensCount: [Object],
                 operatorApprovals: [Object] },
              dependencies:
               { ERC721Basic: [Object],
                 ERC721Receiver: [Object],
                 SafeMath: [Object],
                 AddressUtils: [Object] },
              inheritsFrom: { ERC721Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721BasicToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           ERC721BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol' },
              parameters: [],
              level: 0 },
           ERC721Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Token',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenOfOwnerByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_setTokenURI',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addTokenTo',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeTokenFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 },
              end: { line: 192, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Token.sol' },
     ERC827:
      { projectGraph: [Circular],
        name: 'ERC827',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 allowance: [Array],
                 transfer: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _burnFrom: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies:
               { Initializable: [Object], IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { Initializable: [Object], IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC827',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'approveAndCall',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferAndCall',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFromAndCall',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 }, end: { line: 42, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC827/ERC827.sol' },
     ERC827Token:
      { projectGraph: [Circular],
        name: 'ERC827Token',
        kind: 'contract',
        isAbstract: false,
        functions:
         { approveAndCall:
            [ { name: 'approveAndCall',
                signature: 'approveAndCall(address,uint256,bytes)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferAndCall:
            [ { name: 'transferAndCall',
                signature: 'transferAndCall(address,uint256,bytes)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFromAndCall:
            [ { name: 'transferFromAndCall',
                signature: 'transferFromAndCall(address,address,uint256,bytes)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           increaseApprovalAndCall:
            [ { name: 'increaseApprovalAndCall',
                signature: 'increaseApprovalAndCall(address,uint,bytes)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decreaseApprovalAndCall:
            [ { name: 'decreaseApprovalAndCall',
                signature: 'decreaseApprovalAndCall(address,uint,bytes)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply_:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply_',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC827:
            { projectGraph: [Circular],
              name: 'ERC827',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: { initializer: [Object] },
              stateVariables: {},
              dependencies: { ERC20: [Object] },
              inheritsFrom:
               { ERC20: [Object], Initializable: [Object], IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC827',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC827/ERC827.sol' },
           StandardToken:
            { projectGraph: [Circular],
              name: 'StandardToken',
              kind: 'contract',
              isAbstract: false,
              functions:
               { transferFrom: [Array],
                 approve: [Array],
                 allowance: [Array],
                 increaseApproval: [Array],
                 decreaseApproval: [Array] },
              modifiers: { initializer: [Object] },
              stateVariables:
               { allowed: [Object],
                 _balances: [Object],
                 _allowed: [Object],
                 _totalSupply: [Object],
                 ______gap: [Object],
                 balances: [Object],
                 totalSupply_: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { BasicToken: [Object], ERC20: [Object] },
              inheritsFrom:
               { ERC20: [Object],
                 Initializable: [Object],
                 IERC20: [Object],
                 BasicToken: [Object],
                 ERC20Basic: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'StandardToken',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol' } },
        inheritsFrom:
         { ERC827:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC827',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC827/ERC827.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 2 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 2 },
           StandardToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'StandardToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol' },
              parameters: [],
              level: 0 },
           BasicToken:
            { contract:
               { projectGraph: [Circular],
                 name: 'BasicToken',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol' },
              parameters: [],
              level: 1 },
           ERC20Basic:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Basic',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC827Token',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'approveAndCall',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferAndCall',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFromAndCall',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increaseApprovalAndCall',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decreaseApprovalAndCall',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 18, column: 0 },
              end: { line: 176, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/token/ERC827/ERC827Token.sol' },
     InnerLibrary:
      { projectGraph: [Circular],
        name: 'InnerLibrary',
        kind: 'library',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'InnerLibrary',
           baseContracts: [],
           subNodes: [],
           kind: 'library',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 6, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' },
     Contract:
      { projectGraph: [Circular],
        name: 'Contract',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { specialValue:
            { functionsWrite: {},
              contract: [Circular],
              name: 'specialValue',
              isArray: false,
              initialValue: 1337,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Contract',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 11, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' },
     RelativeImport:
      { projectGraph: [Circular],
        name: 'RelativeImport',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { InnerLibrary:
            { projectGraph: [Circular],
              name: 'InnerLibrary',
              kind: 'library',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'InnerLibrary',
                 baseContracts: [],
                 subNodes: [],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' },
           Contract:
            { projectGraph: [Circular],
              name: 'Contract',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { specialValue: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Contract',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' } },
        inheritsFrom:
         { Contract:
            { contract:
               { projectGraph: [Circular],
                 name: 'Contract',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RelativeImport',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes: [],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/contract_names/contracts/relative_import.sol' },
     Local:
      { projectGraph: [Circular],
        name: 'Local',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { local:
            { functionsWrite: {},
              contract: [Circular],
              name: 'local',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Local',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/ethpm/contracts/Local.sol' },
     PLCRVoting:
      { projectGraph: [Circular],
        name: 'PLCRVoting',
        kind: 'contract',
        isAbstract: false,
        functions:
         { isExpired:
            [ { name: 'isExpired',
                signature: 'isExpired(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           attrUUID:
            [ { name: 'attrUUID',
                signature: 'attrUUID(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { local:
            { functionsWrite: {},
              contract: [Circular],
              name: 'local',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           MAX_UINT256:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_UINT256',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           name:
            { functionsWrite: {},
              contract: [Circular],
              name: 'name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           decimals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: 'symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Local:
            { projectGraph: [Circular],
              name: 'Local',
              kind: 'contract',
              isAbstract: false,
              functions: { constructor: [Array] },
              modifiers: {},
              stateVariables: { local: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Local',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/ethpm/contracts/Local.sol' } },
        inheritsFrom:
         { EIP20:
            { contract:
               { projectGraph: [Circular],
                 name: 'EIP20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20.sol' },
              parameters: [],
              level: 0 },
           EIP20Interface:
            { contract:
               { projectGraph: [Circular],
                 name: 'EIP20Interface',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' },
              parameters: [],
              level: 1 },
           Local:
            { contract:
               { projectGraph: [Circular],
                 name: 'Local',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/ethpm/contracts/Local.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PLCRVoting',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'isExpired',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'attrUUID',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 15, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/ethpm/contracts/PLCRVoting.sol' },
     EIP20:
      { projectGraph: [Circular],
        name: 'EIP20',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,string,uint8,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { MAX_UINT256:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_UINT256',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           decimals:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { EIP20Interface:
            { projectGraph: [Circular],
              name: 'EIP20Interface',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { totalSupply: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'EIP20Interface',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' } },
        inheritsFrom:
         { EIP20Interface:
            { contract:
               { projectGraph: [Circular],
                 name: 'EIP20Interface',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EIP20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 78, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20.sol' },
     EIP20Factory:
      { projectGraph: [Circular],
        name: 'EIP20Factory',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           verifyEIP20:
            [ { name: 'verifyEIP20',
                signature: 'verifyEIP20(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           codeAt:
            [ { name: 'codeAt',
                signature: 'codeAt(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           createEIP20:
            [ { name: 'createEIP20',
                signature: 'createEIP20(uint256,string,uint8,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { created:
            { functionsWrite: {},
              contract: [Circular],
              name: 'created',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>address[])})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           isEIP20:
            { functionsWrite: {},
              contract: [Circular],
              name: 'isEIP20',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>bool)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           EIP20ByteCode:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'EIP20ByteCode',
              isArray: false,
              initialValue: null,
              type: 'bytes',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { EIP20:
            { projectGraph: [Circular],
              name: 'EIP20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 transfer: [Array],
                 transferFrom: [Array],
                 balanceOf: [Array],
                 approve: [Array],
                 allowance: [Array] },
              modifiers: {},
              stateVariables:
               { MAX_UINT256: [Object],
                 name: [Object],
                 decimals: [Object],
                 symbol: [Object],
                 balances: [Object],
                 allowed: [Object],
                 totalSupply: [Object] },
              dependencies: { EIP20Interface: [Object] },
              inheritsFrom: { EIP20Interface: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'EIP20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EIP20Factory',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'verifyEIP20',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'codeAt',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'createEIP20',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 62, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Factory.sol' },
     EIP20Interface:
      { projectGraph: [Circular],
        name: 'EIP20Interface',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EIP20Interface',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 48, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' },
     Executable:
      { projectGraph: [Circular],
        name: 'Executable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { x:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'x',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Executable',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 10, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/exec/contracts/Executable.sol' },
     ConvertLib:
      { projectGraph: [Circular],
        name: 'ConvertLib',
        kind: 'library',
        isAbstract: false,
        functions:
         { convert:
            [ { name: 'convert',
                signature: 'convert(uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ConvertLib',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'convert',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/external_compile/contracts/ConvertLib.sol' },
     MetaCoin:
      { projectGraph: [Circular],
        name: 'MetaCoin',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sendCoin:
            [ { name: 'sendCoin',
                signature: 'sendCoin(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getBalanceInEth:
            [ { name: 'getBalanceInEth',
                signature: 'getBalanceInEth(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getBalance:
            [ { name: 'getBalance',
                signature: 'getBalance(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ConvertLib:
            { projectGraph: [Circular],
              name: 'ConvertLib',
              kind: 'library',
              isAbstract: false,
              functions: { convert: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ConvertLib',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/external_compile/contracts/ConvertLib.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MetaCoin',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sendCoin',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getBalanceInEth',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getBalance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 34, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/external_compile/contracts/MetaCoin.sol' },
     Branch:
      { projectGraph: [Circular],
        name: 'Branch',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { branch:
            { functionsWrite: {},
              contract: [Circular],
              name: 'branch',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafA:
            { projectGraph: [Circular],
              name: 'LeafA',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafA: [Object] },
              dependencies: { LeafC: [Object] },
              inheritsFrom: { LeafC: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafA',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafA.sol' },
           LeafB:
            { projectGraph: [Circular],
              name: 'LeafB',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafB: [Object] },
              dependencies: { LeafC: [Object] },
              inheritsFrom: { LeafC: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafB',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafB.sol' } },
        inheritsFrom:
         { LeafA:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafA',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafA.sol' },
              parameters: [],
              level: 0 },
           LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 1 },
           LeafB:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafB',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafB.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Branch',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/Branch.sol' },
     LeafA:
      { projectGraph: [Circular],
        name: 'LeafA',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { leafA:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafA',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' } },
        inheritsFrom:
         { LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'LeafA',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafA.sol' },
     LeafB:
      { projectGraph: [Circular],
        name: 'LeafB',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { leafB:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafB',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' } },
        inheritsFrom:
         { LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'LeafB',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafB.sol' },
     LeafC:
      { projectGraph: [Circular],
        name: 'LeafC',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { leafC:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafC',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'LeafC',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 5, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
     LibraryA:
      { projectGraph: [Circular],
        name: 'LibraryA',
        kind: 'library',
        isAbstract: false,
        functions:
         { add:
            [ { name: 'add',
                signature: 'add(uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'LibraryA',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LibraryA.sol' },
     Root:
      { projectGraph: [Circular],
        name: 'Root',
        kind: 'contract',
        isAbstract: false,
        functions:
         { addToRoot:
            [ { name: 'addToRoot',
                signature: 'addToRoot(uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { root:
            { functionsWrite: { addToRoot: [Array] },
              contract: [Circular],
              name: 'root',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           branch:
            { functionsWrite: {},
              contract: [Circular],
              name: 'branch',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           leafA:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafA',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           leafB:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafB',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           leafC:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafC',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Branch:
            { projectGraph: [Circular],
              name: 'Branch',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { branch: [Object] },
              dependencies: { LeafA: [Object], LeafB: [Object] },
              inheritsFrom: { LeafA: [Object], LeafC: [Object], LeafB: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Branch',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/Branch.sol' },
           LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
           LibraryA:
            { projectGraph: [Circular],
              name: 'LibraryA',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LibraryA',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LibraryA.sol' } },
        inheritsFrom:
         { Branch:
            { contract:
               { projectGraph: [Circular],
                 name: 'Branch',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/Branch.sol' },
              parameters: [],
              level: 0 },
           LeafA:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafA',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafA.sol' },
              parameters: [],
              level: 1 },
           LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 2 },
           LeafB:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafB',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafB.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Root',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addToRoot',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 13, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/Root.sol' },
     SameFile1:
      { projectGraph: [Circular],
        name: 'SameFile1',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { samefile1:
            { functionsWrite: {},
              contract: [Circular],
              name: 'samefile1',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' } },
        inheritsFrom:
         { LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SameFile1',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/SameFile.sol' },
     SameFile2:
      { projectGraph: [Circular],
        name: 'SameFile2',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { samefile2:
            { functionsWrite: {},
              contract: [Circular],
              name: 'samefile2',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SameFile2',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 11, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/inheritance/contracts/SameFile.sol' },
     Abstract:
      { projectGraph: [Circular],
        name: 'Abstract',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Abstract',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'method',
                parameters: [],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 5, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/migrations/error/contracts/Abstract.sol' },
     Example:
      { projectGraph: [Circular],
        name: 'Example',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'Example',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Example',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/migrations/error/contracts/Example.sol' },
     ExampleAssert:
      { projectGraph: [Circular],
        name: 'ExampleAssert',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ExampleAssert',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/migrations/error/contracts/ExampleAssert.sol' },
     ExampleRevert:
      { projectGraph: [Circular],
        name: 'ExampleRevert',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ExampleRevert',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/migrations/error/contracts/ExampleRevert.sol' },
     Loops:
      { projectGraph: [Circular],
        name: 'Loops',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Loops',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 11, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/migrations/error/contracts/Loops.sol' },
     RevertWithReason:
      { projectGraph: [Circular],
        name: 'RevertWithReason',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'RevertWithReason',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RevertWithReason',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/migrations/error/contracts/RevertWithReason.sol' },
     UsesExample:
      { projectGraph: [Circular],
        name: 'UsesExample',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'UsesExample',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           other:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'other',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'UsesExample',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 10, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/migrations/error/contracts/UsesExample.sol' },
     IsLibrary:
      { projectGraph: [Circular],
        name: 'IsLibrary',
        kind: 'library',
        isAbstract: false,
        functions:
         { fireIsLibraryEvent:
            [ { name: 'fireIsLibraryEvent',
                signature: 'fireIsLibraryEvent(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'IsLibrary',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IsLibrary',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'IsLibraryEvent',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'fireIsLibraryEvent',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 10, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/migrations/success/contracts/IsLibrary.sol' },
     PayableExample:
      { projectGraph: [Circular],
        name: 'PayableExample',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'PayableExample',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PayableExample',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/migrations/success/contracts/PayableExample.sol' },
     UsesLibrary:
      { projectGraph: [Circular],
        name: 'UsesLibrary',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           fireIsLibraryEvent:
            [ { name: 'fireIsLibraryEvent',
                signature: 'fireIsLibraryEvent(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           fireUsesLibraryEvent:
            [ { name: 'fireUsesLibraryEvent',
                signature: 'fireUsesLibraryEvent(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IsLibrary:
            { projectGraph: [Circular],
              name: 'IsLibrary',
              kind: 'library',
              isAbstract: false,
              functions: { fireIsLibraryEvent: [Array] },
              modifiers: {},
              stateVariables: { id: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IsLibrary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/migrations/success/contracts/IsLibrary.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'UsesLibrary',
           baseContracts: [],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'UsesLibraryEvent',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'fireIsLibraryEvent',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'fireUsesLibraryEvent',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 18, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/migrations/success/contracts/UsesLibrary.sol' },
     Importer:
      { projectGraph: [Circular],
        name: 'Importer',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { local:
            { functionsWrite: {},
              contract: [Circular],
              name: 'local',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Importer',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/truffle/test/sources/monorepo/errorproject/contracts/Importer.sol' },
     App:
      { projectGraph: [Circular],
        name: 'App',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getProvider:
            [ { name: 'getProvider',
                signature: 'getProvider(string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           getPackage:
            [ { name: 'getPackage',
                signature: 'getPackage(string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setPackage:
            [ { name: 'setPackage',
                signature: 'setPackage(string,Package,uint64[3])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           unsetPackage:
            [ { name: 'unsetPackage',
                signature: 'unsetPackage(string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getImplementation:
            [ { name: 'getImplementation',
                signature: 'getImplementation(string,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getProxyImplementation:
            [ { name: 'getProxyImplementation',
                signature: 'getProxyImplementation(AdminUpgradeabilityProxy)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getProxyAdmin:
            [ { name: 'getProxyAdmin',
                signature: 'getProxyAdmin(AdminUpgradeabilityProxy)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           changeProxyAdmin:
            [ { name: 'changeProxyAdmin',
                signature: 'changeProxyAdmin(AdminUpgradeabilityProxy,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           create:
            [ { name: 'create',
                signature: 'create(string,string,bytes)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           upgrade:
            [ { name: 'upgrade',
                signature: 'upgrade(AdminUpgradeabilityProxy,string,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           upgradeAndCall:
            [ { name: 'upgradeAndCall',
                signature:
                 'upgradeAndCall(AdminUpgradeabilityProxy,string,string,bytes)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { providers:
            { functionsWrite: {},
              contract: [Circular],
              name: 'providers',
              isArray: false,
              initialValue: null,
              type: 'mapping(string=>App.ProviderInfo)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ImplementationProvider:
            { projectGraph: [Circular],
              name: 'ImplementationProvider',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ImplementationProvider',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/ImplementationProvider.sol' },
           Package:
            { projectGraph: [Circular],
              name: 'Package',
              kind: 'contract',
              isAbstract: false,
              functions:
               { getVersion: [Array],
                 getContract: [Array],
                 addVersion: [Array],
                 hasVersion: [Array],
                 getLatest: [Array],
                 getLatestByMajor: [Array],
                 semanticVersionHash: [Array],
                 semanticVersionIsZero: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { versions: [Object],
                 majorToLatestVersion: [Object],
                 latestMajor: [Object],
                 _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Ownable: [Object] },
              inheritsFrom: { Ownable: [Object], Initializable: [Object] },
              structs: { Version: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Package',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/Package.sol' },
           AdminUpgradeabilityProxy:
            { projectGraph: [Circular],
              name: 'AdminUpgradeabilityProxy',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 admin: [Array],
                 implementation: [Array],
                 changeAdmin: [Array],
                 upgradeTo: [Array],
                 upgradeToAndCall: [Array],
                 _admin: [Array],
                 _setAdmin: [Array],
                 _willFallback: [Array] },
              modifiers: { ifAdmin: [Object] },
              stateVariables: { ADMIN_SLOT: [Object], IMPLEMENTATION_SLOT: [Object] },
              dependencies: { UpgradeabilityProxy: [Object] },
              inheritsFrom: { UpgradeabilityProxy: [Object], Proxy: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'AdminUpgradeabilityProxy',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/upgradeability/AdminUpgradeabilityProxy.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 } },
        structs:
         { ProviderInfo:
            { name: 'ProviderInfo',
              contract: [Circular],
              parameters: [ [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'App',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'ProxyCreated',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PackageChanged',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'ProviderInfo',
                members: [Array],
                loc: [Object],
                parentName: 'App' },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getProvider',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getPackage',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setPackage',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'unsetPackage',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getImplementation',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getProxyImplementation',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getProxyAdmin',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'changeProxyAdmin',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'create',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'upgrade',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'upgradeAndCall',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 },
              end: { line: 172, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/App.sol' },
     ImplementationDirectory:
      { projectGraph: [Circular],
        name: 'ImplementationDirectory',
        kind: 'contract',
        isAbstract: false,
        functions:
         { freeze:
            [ { name: 'freeze',
                signature: 'freeze()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           getImplementation:
            [ { name: 'getImplementation',
                signature: 'getImplementation(string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setImplementation:
            [ { name: 'setImplementation',
                signature: 'setImplementation(string,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           unsetImplementation:
            [ { name: 'unsetImplementation',
                signature: 'unsetImplementation(string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotFrozen:
            { name: 'whenNotFrozen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotFrozen',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { implementations:
            { functionsWrite: {},
              contract: [Circular],
              name: 'implementations',
              isArray: false,
              initialValue: null,
              type: 'mapping(string=>address)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           frozen:
            { functionsWrite: { freeze: [Array] },
              contract: [Circular],
              name: 'frozen',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ImplementationProvider:
            { projectGraph: [Circular],
              name: 'ImplementationProvider',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ImplementationProvider',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/ImplementationProvider.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
           AddressUtils:
            { projectGraph: [Circular],
              name: 'AddressUtils',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'AddressUtils',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/AddressUtils.sol' } },
        inheritsFrom:
         { ImplementationProvider:
            { contract:
               { projectGraph: [Circular],
                 name: 'ImplementationProvider',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/ImplementationProvider.sol' },
              parameters: [],
              level: 0 },
           Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ImplementationDirectory',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'ImplementationChanged',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Frozen',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'whenNotFrozen',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'freeze',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getImplementation',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setImplementation',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'unsetImplementation',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 75, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/ImplementationDirectory.sol' },
     ImplementationProvider:
      { projectGraph: [Circular],
        name: 'ImplementationProvider',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ImplementationProvider',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'getImplementation',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 14, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/ImplementationProvider.sol' },
     Package:
      { projectGraph: [Circular],
        name: 'Package',
        kind: 'contract',
        isAbstract: false,
        functions:
         { getVersion:
            [ { name: 'getVersion',
                signature: 'getVersion(uint64[3])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getContract:
            [ { name: 'getContract',
                signature: 'getContract(uint64[3])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addVersion:
            [ { name: 'addVersion',
                signature: 'addVersion(uint64[3],address,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           hasVersion:
            [ { name: 'hasVersion',
                signature: 'hasVersion(uint64[3])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getLatest:
            [ { name: 'getLatest',
                signature: 'getLatest()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           getLatestByMajor:
            [ { name: 'getLatestByMajor',
                signature: 'getLatestByMajor(uint64)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           semanticVersionHash:
            [ { name: 'semanticVersionHash',
                signature: 'semanticVersionHash(uint64[3])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           semanticVersionIsZero:
            [ { name: 'semanticVersionIsZero',
                signature: 'semanticVersionIsZero(uint64[3])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { versions:
            { functionsWrite: {},
              contract: [Circular],
              name: 'versions',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>Package.Version)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           majorToLatestVersion:
            { functionsWrite: {},
              contract: [Circular],
              name: 'majorToLatestVersion',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint64=>bytes32)})',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           latestMajor:
            { functionsWrite: { addVersion: [Array] },
              contract: [Circular],
              name: 'latestMajor',
              isArray: false,
              initialValue: null,
              type: 'uint64',
              visibility: 'internal',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { initialize: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object], initializer: [Object] },
              stateVariables:
               { _owner: [Object],
                 ______gap: [Object],
                 initialized: [Object],
                 initializing: [Object] },
              dependencies: { Initializable: [Object] },
              inheritsFrom: { Initializable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 },
           Initializable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              parameters: [],
              level: 1 } },
        structs:
         { Version:
            { name: 'Version',
              contract: [Circular],
              parameters: [ [Object], [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Package',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'VersionAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'Version',
                members: [Array],
                loc: [Object],
                parentName: 'Package' },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getVersion',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getContract',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addVersion',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'hasVersion',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getLatest',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getLatestByMajor',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'semanticVersionHash',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'semanticVersionIsZero',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 },
              end: { line: 129, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/Package.sol' },
     Initializable:
      { projectGraph: [Circular],
        name: 'Initializable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { isConstructor:
            [ { name: 'isConstructor',
                signature: 'isConstructor()',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { initializer:
            { name: 'initializer',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'initializer',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { initialized:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initialized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           initializing:
            { functionsWrite: {},
              contract: [Circular],
              name: 'initializing',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           ______gap:
            { functionsWrite: {},
              contract: [Circular],
              name: '______gap',
              isArray: true,
              initialValue: [],
              type: 'uint256[50]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Initializable',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'initializer',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isConstructor',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 16, column: 0 }, end: { line: 57, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
     AdminUpgradeabilityProxy:
      { projectGraph: [Circular],
        name: 'AdminUpgradeabilityProxy',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address,bytes)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           admin:
            [ { name: 'admin',
                signature: 'admin()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           implementation:
            [ { name: 'implementation',
                signature: 'implementation()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           changeAdmin:
            [ { name: 'changeAdmin',
                signature: 'changeAdmin(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           upgradeTo:
            [ { name: 'upgradeTo',
                signature: 'upgradeTo(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           upgradeToAndCall:
            [ { name: 'upgradeToAndCall',
                signature: 'upgradeToAndCall(address,bytes)',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _admin:
            [ { name: '_admin',
                signature: '_admin()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _setAdmin:
            [ { name: '_setAdmin',
                signature: '_setAdmin(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _willFallback:
            [ { name: '_willFallback',
                signature: '_willFallback()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { ifAdmin:
            { name: 'ifAdmin',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'ifAdmin',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { ADMIN_SLOT:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ADMIN_SLOT',
              isArray: false,
              initialValue:
               7616251639890161571394485407761189204623645506592309280707130563281572331520n,
              type: 'bytes32',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           IMPLEMENTATION_SLOT:
            { functionsWrite: {},
              contract: [Circular],
              name: 'IMPLEMENTATION_SLOT',
              isArray: false,
              initialValue:
               50801780122331354569081543670953980075570843196415887284005977798434302722048n,
              type: 'bytes32',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { UpgradeabilityProxy:
            { projectGraph: [Circular],
              name: 'UpgradeabilityProxy',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 _implementation: [Array],
                 _upgradeTo: [Array],
                 _setImplementation: [Array] },
              modifiers: {},
              stateVariables: { IMPLEMENTATION_SLOT: [Object] },
              dependencies: { Proxy: [Object], AddressUtils: [Object] },
              inheritsFrom: { Proxy: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'UpgradeabilityProxy',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/upgradeability/UpgradeabilityProxy.sol' } },
        inheritsFrom:
         { UpgradeabilityProxy:
            { contract:
               { projectGraph: [Circular],
                 name: 'UpgradeabilityProxy',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/upgradeability/UpgradeabilityProxy.sol' },
              parameters: [],
              level: 0 },
           Proxy:
            { contract:
               { projectGraph: [Circular],
                 name: 'Proxy',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/upgradeability/Proxy.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'AdminUpgradeabilityProxy',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'AdminChanged',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'ifAdmin',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'admin',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'implementation',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'changeAdmin',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'upgradeTo',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'upgradeToAndCall',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_admin',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_setAdmin',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_willFallback',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 },
              end: { line: 133, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/upgradeability/AdminUpgradeabilityProxy.sol' },
     Proxy:
      { projectGraph: [Circular],
        name: 'Proxy',
        kind: 'contract',
        isAbstract: true,
        functions:
         { '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _delegate:
            [ { name: '_delegate',
                signature: '_delegate(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _willFallback:
            [ { name: '_willFallback',
                signature: '_willFallback()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _fallback:
            [ { name: '_fallback',
                signature: '_fallback()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Proxy',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_implementation',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_delegate',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_willFallback',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_fallback',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 67, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/upgradeability/Proxy.sol' },
     UpgradeabilityProxy:
      { projectGraph: [Circular],
        name: 'UpgradeabilityProxy',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address,bytes)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _implementation:
            [ { name: '_implementation',
                signature: '_implementation()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _upgradeTo:
            [ { name: '_upgradeTo',
                signature: '_upgradeTo(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _setImplementation:
            [ { name: '_setImplementation',
                signature: '_setImplementation(address)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { IMPLEMENTATION_SLOT:
            { functionsWrite: {},
              contract: [Circular],
              name: 'IMPLEMENTATION_SLOT',
              isArray: false,
              initialValue:
               50801780122331354569081543670953980075570843196415887284005977798434302722048n,
              type: 'bytes32',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { Proxy:
            { projectGraph: [Circular],
              name: 'Proxy',
              kind: 'contract',
              isAbstract: true,
              functions:
               { '': [Array],
                 _delegate: [Array],
                 _willFallback: [Array],
                 _fallback: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Proxy',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/upgradeability/Proxy.sol' },
           AddressUtils:
            { projectGraph: [Circular],
              name: 'AddressUtils',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'AddressUtils',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/AddressUtils.sol' } },
        inheritsFrom:
         { Proxy:
            { contract:
               { projectGraph: [Circular],
                 name: 'Proxy',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/upgradeability/Proxy.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'UpgradeabilityProxy',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Upgraded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_implementation',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_upgradeTo',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_setImplementation',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 75, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/upgradeability/UpgradeabilityProxy.sol' } },
  structs:
   { Role:
      { name: 'Role',
        contract:
         { projectGraph: [Circular],
           name: 'Roles',
           kind: 'library',
           isAbstract: false,
           functions:
            { add: [ [Object] ], remove: [ [Object] ], has: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Role: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Roles',
              baseContracts: [],
              subNodes: [ [Object], [Object], [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/Roles.sol' },
        parameters:
         [ { name: 'bearer',
             isUserDefinedType: false,
             type: 'mapping(address=>bool)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Roles.Role':
      { name: 'Role',
        contract:
         { projectGraph: [Circular],
           name: 'Roles',
           kind: 'library',
           isAbstract: false,
           functions:
            { add: [ [Object] ], remove: [ [Object] ], has: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Role: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Roles',
              baseContracts: [],
              subNodes: [ [Object], [Object], [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/access/Roles.sol' },
        parameters:
         [ { name: 'bearer',
             isUserDefinedType: false,
             type: 'mapping(address=>bool)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Counter:
      { name: 'Counter',
        contract:
         { projectGraph: [Circular],
           name: 'Counter',
           kind: 'library',
           isAbstract: false,
           functions: { next: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Counter: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Counter',
              baseContracts: [],
              subNodes: [ [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/drafts/Counter.sol' },
        parameters:
         [ { name: 'current',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Counter.Counter':
      { name: 'Counter',
        contract:
         { projectGraph: [Circular],
           name: 'Counter',
           kind: 'library',
           isAbstract: false,
           functions: { next: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Counter: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Counter',
              baseContracts: [],
              subNodes: [ [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/drafts/Counter.sol' },
        parameters:
         [ { name: 'current',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     ProviderInfo:
      { name: 'ProviderInfo',
        contract:
         { projectGraph: [Circular],
           name: 'App',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              getProvider: [ [Object] ],
              getPackage: [ [Object] ],
              setPackage: [ [Object] ],
              unsetPackage: [ [Object] ],
              getImplementation: [ [Object] ],
              getProxyImplementation: [ [Object] ],
              getProxyAdmin: [ [Object] ],
              changeProxyAdmin: [ [Object] ],
              create: [ [Object] ],
              upgrade: [ [Object] ],
              upgradeAndCall: [ [Object] ] },
           modifiers:
            { onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              initializer:
               { name: 'initializer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { providers:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'providers',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(string=>App.ProviderInfo)})',
                 visibility: 'internal',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              ______gap:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '______gap',
                 isArray: true,
                 initialValue: [],
                 type: 'uint256[50]',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initialized:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'initialized',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initializing:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'initializing',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { ImplementationProvider:
               { projectGraph: [Circular],
                 name: 'ImplementationProvider',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/ImplementationProvider.sol' },
              Package:
               { projectGraph: [Circular],
                 name: 'Package',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/Package.sol' },
              AdminUpgradeabilityProxy:
               { projectGraph: [Circular],
                 name: 'AdminUpgradeabilityProxy',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/upgradeability/AdminUpgradeabilityProxy.sol' },
              Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
           inheritsFrom:
            { Ownable: { contract: [Object], parameters: [], level: 0 },
              Initializable: { contract: [Object], parameters: [], level: 1 } },
           structs: { ProviderInfo: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'App',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/App.sol' },
        parameters:
         [ { name: 'package',
             isUserDefinedType: true,
             type: 'Package',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'version',
             isUserDefinedType: false,
             type: 'uint64[3]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'App.ProviderInfo':
      { name: 'ProviderInfo',
        contract:
         { projectGraph: [Circular],
           name: 'App',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              getProvider: [ [Object] ],
              getPackage: [ [Object] ],
              setPackage: [ [Object] ],
              unsetPackage: [ [Object] ],
              getImplementation: [ [Object] ],
              getProxyImplementation: [ [Object] ],
              getProxyAdmin: [ [Object] ],
              changeProxyAdmin: [ [Object] ],
              create: [ [Object] ],
              upgrade: [ [Object] ],
              upgradeAndCall: [ [Object] ] },
           modifiers:
            { onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              initializer:
               { name: 'initializer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { providers:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'providers',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(string=>App.ProviderInfo)})',
                 visibility: 'internal',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              ______gap:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '______gap',
                 isArray: true,
                 initialValue: [],
                 type: 'uint256[50]',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initialized:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'initialized',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initializing:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'initializing',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { ImplementationProvider:
               { projectGraph: [Circular],
                 name: 'ImplementationProvider',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/ImplementationProvider.sol' },
              Package:
               { projectGraph: [Circular],
                 name: 'Package',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/Package.sol' },
              AdminUpgradeabilityProxy:
               { projectGraph: [Circular],
                 name: 'AdminUpgradeabilityProxy',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/upgradeability/AdminUpgradeabilityProxy.sol' },
              Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
           inheritsFrom:
            { Ownable: { contract: [Object], parameters: [], level: 0 },
              Initializable: { contract: [Object], parameters: [], level: 1 } },
           structs: { ProviderInfo: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'App',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/App.sol' },
        parameters:
         [ { name: 'package',
             isUserDefinedType: true,
             type: 'Package',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'version',
             isUserDefinedType: false,
             type: 'uint64[3]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Version:
      { name: 'Version',
        contract:
         { projectGraph: [Circular],
           name: 'Package',
           kind: 'contract',
           isAbstract: false,
           functions:
            { getVersion: [ [Object] ],
              getContract: [ [Object] ],
              addVersion: [ [Object] ],
              hasVersion: [ [Object] ],
              getLatest: [ [Object] ],
              getLatestByMajor: [ [Object] ],
              semanticVersionHash: [ [Object] ],
              semanticVersionIsZero: [ [Object] ] },
           modifiers:
            { onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              initializer:
               { name: 'initializer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { versions:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'versions',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes32=>Package.Version)})',
                 visibility: 'internal',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              majorToLatestVersion:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'majorToLatestVersion',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint64=>bytes32)})',
                 visibility: 'internal',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              latestMajor:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'latestMajor',
                 isArray: false,
                 initialValue: null,
                 type: 'uint64',
                 visibility: 'internal',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              ______gap:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '______gap',
                 isArray: true,
                 initialValue: [],
                 type: 'uint256[50]',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initialized:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'initialized',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initializing:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'initializing',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
           inheritsFrom:
            { Ownable: { contract: [Object], parameters: [], level: 0 },
              Initializable: { contract: [Object], parameters: [], level: 1 } },
           structs: { Version: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Package',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/Package.sol' },
        parameters:
         [ { name: 'semanticVersion',
             isUserDefinedType: false,
             type: 'uint64[3]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'contractAddress',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'contentURI',
             isUserDefinedType: false,
             type: 'bytes',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Package.Version':
      { name: 'Version',
        contract:
         { projectGraph: [Circular],
           name: 'Package',
           kind: 'contract',
           isAbstract: false,
           functions:
            { getVersion: [ [Object] ],
              getContract: [ [Object] ],
              addVersion: [ [Object] ],
              hasVersion: [ [Object] ],
              getLatest: [ [Object] ],
              getLatestByMajor: [ [Object] ],
              semanticVersionHash: [ [Object] ],
              semanticVersionIsZero: [ [Object] ] },
           modifiers:
            { onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              initializer:
               { name: 'initializer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { versions:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'versions',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(bytes32=>Package.Version)})',
                 visibility: 'internal',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              majorToLatestVersion:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'majorToLatestVersion',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(uint64=>bytes32)})',
                 visibility: 'internal',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              latestMajor:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'latestMajor',
                 isArray: false,
                 initialValue: null,
                 type: 'uint64',
                 visibility: 'internal',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              ______gap:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '______gap',
                 isArray: true,
                 initialValue: [],
                 type: 'uint256[50]',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initialized:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'initialized',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initializing:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'initializing',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
           inheritsFrom:
            { Ownable: { contract: [Object], parameters: [], level: 0 },
              Initializable: { contract: [Object], parameters: [], level: 1 } },
           structs: { Version: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Package',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/application/Package.sol' },
        parameters:
         [ { name: 'semanticVersion',
             isUserDefinedType: false,
             type: 'uint64[3]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'contractAddress',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'contentURI',
             isUserDefinedType: false,
             type: 'bytes',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] } },
  enums:
   { State:
      { name: 'State',
        contract:
         { projectGraph: [Circular],
           name: 'RefundVault',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              deposit: [ [Object] ],
              close: [ [Object] ],
              enableRefunds: [ [Object] ],
              refund: [ [Object] ] },
           modifiers:
            { onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              initializer:
               { name: 'initializer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { deposited:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'deposited',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              wallet:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'wallet',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              state:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'state',
                 isArray: false,
                 initialValue: null,
                 type: 'State',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              ______gap:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '______gap',
                 isArray: true,
                 initialValue: [],
                 type: 'uint256[50]',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initialized:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'initialized',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initializing:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'initializing',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
              Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
           inheritsFrom:
            { Ownable: { contract: [Object], parameters: [], level: 0 },
              Initializable: { contract: [Object], parameters: [], level: 1 } },
           structs: {},
           enums: { State: [Circular] },
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'RefundVault',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/utils/RefundVault.sol' },
        members: [ 'Active', 'Refunding', 'Closed' ] },
     'RefundEscrow.State':
      { name: 'State',
        contract:
         { projectGraph: [Circular],
           name: 'RefundEscrow',
           kind: 'contract',
           isAbstract: false,
           functions:
            { initialize: [ [Object] ],
              state: [ [Object] ],
              beneficiary: [ [Object] ],
              deposit: [ [Object] ],
              close: [ [Object] ],
              enableRefunds: [ [Object] ],
              beneficiaryWithdraw: [ [Object] ],
              withdrawalAllowed: [ [Object] ] },
           modifiers:
            { initializer:
               { name: 'initializer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              onlyPrimary:
               { name: 'onlyPrimary',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { _state:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_state',
                 isArray: false,
                 initialValue: null,
                 type: 'State',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _beneficiary:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_beneficiary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              ______gap:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '______gap',
                 isArray: true,
                 initialValue: [],
                 type: 'uint256[50]',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _primary:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_primary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _deposits:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_deposits',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initialized:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'initialized',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initializing:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'initializing',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { Initializable:
               { projectGraph: [Circular],
                 name: 'Initializable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/zos-lib/contracts/Initializable.sol' },
              ConditionalEscrow:
               { projectGraph: [Circular],
                 name: 'ConditionalEscrow',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/ConditionalEscrow.sol' } },
           inheritsFrom:
            { Initializable: { contract: [Object], parameters: [], level: 3 },
              ConditionalEscrow: { contract: [Object], parameters: [], level: 0 },
              Escrow: { contract: [Object], parameters: [], level: 1 },
              Secondary: { contract: [Object], parameters: [], level: 2 } },
           structs: {},
           enums: { State: [Circular] },
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'RefundEscrow',
              baseContracts: [ [Object], [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/payment/RefundEscrow.sol' },
        members: [ 'Active', 'Refunding', 'Closed' ] },
     'RefundVault.State':
      { name: 'State',
        contract:
         { projectGraph: [Circular],
           name: 'RefundVault',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              deposit: [ [Object] ],
              close: [ [Object] ],
              enableRefunds: [ [Object] ],
              refund: [ [Object] ] },
           modifiers:
            { onlyOwner:
               { name: 'onlyOwner',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] },
              initializer:
               { name: 'initializer',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { deposited:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'deposited',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              wallet:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'wallet',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              state:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: 'state',
                 isArray: false,
                 initialValue: null,
                 type: 'State',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _owner:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_owner',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              ______gap:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '______gap',
                 isArray: true,
                 initialValue: [],
                 type: 'uint256[50]',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initialized:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'initialized',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              initializing:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'initializing',
                 isArray: false,
                 initialValue: 'false',
                 type: 'bool',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/math/SafeMath.sol' },
              Ownable:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-eth/contracts/ownership/Ownable.sol' } },
           inheritsFrom:
            { Ownable: { contract: [Object], parameters: [], level: 0 },
              Initializable: { contract: [Object], parameters: [], level: 1 } },
           structs: {},
           enums: { State: [Circular] },
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'RefundVault',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/liquid/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/utils/RefundVault.sol' },
        members: [ 'Active', 'Refunding', 'Closed' ] } } }