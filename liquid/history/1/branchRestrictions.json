,{
  "2020-11-10T05:13:30.492ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[230,212,84,236,5,37,215,47,62,71,107,143,7,147,95,246,46,19,243,194,18,47,99,38,125,44,236,131,114,11,195,137]",
              "sol": "abi.encode(\"230,212,84,236,5,37,215,47,62,71,107,143,7,147,95,246,46,19,243,194,18,47,99,38,125,44,236,131,114,11,195,137\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:13:39.679ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[46,66,156,246,230,107,44,46,212,60,223,9,243,75,75,197,184,180,47,99,238,152,235,182,163,110,91,143,212,3,231,172]",
              "sol": "abi.encode(\"46,66,156,246,230,107,44,46,212,60,223,9,243,75,75,197,184,180,47,99,238,152,235,182,163,110,91,143,212,3,231,172\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:13:48.964ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[242,215,61,213,141,115,94,168,203,145,226,186,103,36,45,88,26,200,115,94,171,115,141,85,153,1,182,236,224,178,226,228]",
              "sol": "abi.encode(\"242,215,61,213,141,115,94,168,203,145,226,186,103,36,45,88,26,200,115,94,171,115,141,85,153,1,182,236,224,178,226,228\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:13:58.361ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[169,98,112,216,103,232,58,51,39,140,180,44,25,179,183,222,147,40,196,124,143,103,138,237,219,253,55,154,119,140,241,144]",
              "sol": "abi.encode(\"169,98,112,216,103,232,58,51,39,140,180,44,25,179,183,222,147,40,196,124,143,103,138,237,219,253,55,154,119,140,241,144\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:14:07.514ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[167,128,24,157,170,207,24,229,35,92,127,118,38,15,16,109,93,213,104,182,214,154,75,22,56,21,98,213,227,140,95,111]",
              "sol": "abi.encode(\"167,128,24,157,170,207,24,229,35,92,127,118,38,15,16,109,93,213,104,182,214,154,75,22,56,21,98,213,227,140,95,111\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:14:16.783ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[214,232,133,255,251,62,222,88,176,171,36,70,60,233,155,216,26,47,136,58,71,85,69,51,62,61,67,46,122,7,24,235]",
              "sol": "abi.encode(\"214,232,133,255,251,62,222,88,176,171,36,70,60,233,155,216,26,47,136,58,71,85,69,51,62,61,67,46,122,7,24,235\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:14:25.960ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[86,136,225,89,89,90,132,39,46,142,233,145,126,168,159,151,14,162,150,205,162,145,138,88,16,128,242,72,223,10,36,135]",
              "sol": "abi.encode(\"86,136,225,89,89,90,132,39,46,142,233,145,126,168,159,151,14,162,150,205,162,145,138,88,16,128,242,72,223,10,36,135\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:14:35.154ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[175,76,110,161,104,36,178,8,222,200,186,236,30,246,247,116,176,126,70,66,124,209,111,79,88,77,71,173,110,96,223,160,187,150,11,254,231,223,98,164,103,124,97,216,89,27,11,216,174,105,96,120,171,97,155,210,60,59,167,232,119,245,152,217]",
              "sol": "abi.encode(\"175,76,110,161,104,36,178,8,222,200,186,236,30,246,247,116,176,126,70,66,124,209,111,79,88,77,71,173,110,96,223,160,187,150,11,254,231,223,98,164,103,124,97,216,89,27,11,216,174,105,96,120,171,97,155,210,60,59,167,232,119,245,152,217\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:14:44.494ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[79]",
              "sol": "abi.encode(\"79\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:14:53.906ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[37,132,37,162,155,8,80,200,8,85,15,218,1,161,56,177,32,82,52,231,246,144,71,69,74,33,217,218]",
              "sol": "abi.encode(\"37,132,37,162,155,8,80,200,8,85,15,218,1,161,56,177,32,82,52,231,246,144,71,69,74,33,217,218\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:15:03.059ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[74,130,55,132,213,140,24,17,39,182,195,85,197,31,192,42,93,172,92,116,23,81,69,75,99,36]",
              "sol": "abi.encode(\"74,130,55,132,213,140,24,17,39,182,195,85,197,31,192,42,93,172,92,116,23,81,69,75,99,36\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:15:12.320ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[104,151,27,76,191]",
              "sol": "abi.encode(\"104,151,27,76,191\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:15:21.466ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[55,139,186,199,231,240,85,130,247,91,76,57,105,122,232,227,138,97,122,72,63,92,157,80,119,132,138,153,31,52,86,180,135,163,56,98,79,247,170,203,63,98,91,208,212,180,148,103,13,215,131,26,93,251,6,93,11,173,112,188,94,156,5,197,203,47]",
              "sol": "abi.encode(\"55,139,186,199,231,240,85,130,247,91,76,57,105,122,232,227,138,97,122,72,63,92,157,80,119,132,138,153,31,52,86,180,135,163,56,98,79,247,170,203,63,98,91,208,212,180,148,103,13,215,131,26,93,251,6,93,11,173,112,188,94,156,5,197,203,47\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:15:30.892ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[52,58,195,100,79]",
              "sol": "abi.encode(\"52,58,195,100,79\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:16:10.990ZMockERC20.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256) WHEN msg.sender!=0",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:16:18.978ZAccount.proxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute proxy(address,bytes) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[149,75,52,220,38,11,203,62,178,166,110,137,32,34,84,136,221,14,42,242,111,50,218,0,183,148,111,178,52,15,213,7]",
              "sol": "abi.encode(\"149,75,52,220,38,11,203,62,178,166,110,137,32,34,84,136,221,14,42,242,111,50,218,0,183,148,111,178,52,15,213,7\")"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail proxy(address,bytes) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[149,75,52,220,38,11,203,62,178,166,110,137,32,34,84,136,221,14,42,242,111,50,218,0,183,148,111,178,52,15,213,7]",
                "sol": "abi.encode(\"149,75,52,220,38,11,203,62,178,166,110,137,32,34,84,136,221,14,42,242,111,50,218,0,183,148,111,178,52,15,213,7\")"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:16:18.990ZAccount.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string,address) WHEN initialized!=true",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4038714811",
              "sol": "4038714811"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "[25,192,45,212,176,34,49,33,3,164,106,184,53,195,41,25,128,236,29,94,121,139,223,128,121,84,20,167,204,28,191,125]",
              "sol": "stringToBytes32(\"25,192,45,212,176,34,49,33,3,164,106,184,53,195,41,25,128,236,29,94,121,139,223,128,121,84,20,167,204,28,191,125\")"
            },
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "\"initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string,address)\"",
              "sol": "\"initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string,address)\""
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:16:18.994ZAccount.addService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addService(uint256) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addService(uint256) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:16:19.001ZAccount.removeService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute removeService(uint8) WHEN msg.sender==beneficiary,services!=0",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail removeService(uint8) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:16:19.009ZAccount.updateMetadata": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateMetadata(bytes32) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "[78,60,143,11,211,90,157,90,138,213,27,80,182,250,78,104,247,143,208,81,164,173,207,194,250,137,217,100,212,101,87,165]",
              "sol": "stringToBytes32(\"78,60,143,11,211,90,157,90,138,213,27,80,182,250,78,104,247,143,208,81,164,173,207,194,250,137,217,100,212,101,87,165\")"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateMetadata(bytes32) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "[78,60,143,11,211,90,157,90,138,213,27,80,182,250,78,104,247,143,208,81,164,173,207,194,250,137,217,100,212,101,87,165]",
                "sol": "stringToBytes32(\"78,60,143,11,211,90,157,90,138,213,27,80,182,250,78,104,247,143,208,81,164,173,207,194,250,137,217,100,212,101,87,165\")"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:16:19.018ZAccount.requestService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute requestService(uint256,string) WHEN msg.sender!=0",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "\"whitelist\"",
              "sol": "\"whitelist\""
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail requestService(uint256,string) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "\"whitelist\"",
                "sol": "\"whitelist\""
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:16:19.019ZAccount.creator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute creator()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:16:19.020ZConvergentBeta.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address) WHEN initialized!=true",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:16:19.021ZConvergentBeta.setBaseAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setBaseAccount(address) WHEN msg.sender==_owner,_newBaseAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setBaseAccount(address) when NOT comply with: _newBaseAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:16:19.025ZConvergentBeta.createAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createAccount(address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "[28,2,189,27,124,77,137,174,168,130,125,44,251,187,116,16,9,181,143,47,41,160,166,150,41,69,247,166,151,247,98,191]",
              "sol": "stringToBytes32(\"28,2,189,27,124,77,137,174,168,130,125,44,251,187,116,16,9,181,143,47,41,160,166,150,41,69,247,166,151,247,98,191\")"
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:16:19.026ZConvergentBeta.upgradeAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute upgradeAccount(address) WHEN msg.sender==accountToCreator",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:0}",
              "sol": "{\"from\":\"0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:16:19.026ZConvergentBeta.getImplementationForAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getImplementationForAccount(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:16:19.027ZDoubleCurveToken.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:16:19.028ZDoubleCurveToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "59-61",
          "restrictions": [
            "_preMint > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,string,string,address) WHEN _preMint>0,initialized!=true",
          "parameters": [
            {
              "js": "contractDoubleCurveToken.address",
              "sol": "contractDoubleCurveToken.address"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "4038714809",
              "sol": "4038714809"
            },
            {
              "js": "4038714811",
              "sol": "4038714811"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "contractGasPriceOracle.address",
              "sol": "contractGasPriceOracle.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_preMint <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,string,string,address) WHEN _preMint<=0,initialized!=true",
          "parameters": [
            {
              "js": "contractDoubleCurveToken.address",
              "sol": "contractDoubleCurveToken.address"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "4038714809",
              "sol": "4038714809"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "contractGasPriceOracle.address",
              "sol": "contractGasPriceOracle.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:16:19.032ZDoubleCurveToken.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-82",
          "restrictions": [
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN reserveAsset==0x0000000000000000000000000000000000000000,contributions>0",
          "parameters": [
            {
              "js": "{from:accounts[1],gasPrice:18}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"18\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: contributions > 0",
            "parameters": [
              {
                "js": "{from:accounts[1],gasPrice:18}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"18\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "80-82",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN reserveAsset!=0x0000000000000000000000000000000000000000,contributions>0",
          "parameters": [
            {
              "js": "{from:accounts[8],gasPrice:5}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"5\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: contributions > 0",
            "parameters": [
              {
                "js": "{from:accounts[8],gasPrice:5}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"5\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:16:19.052ZDoubleCurveToken.buy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "104-106",
          "restrictions": [
            "msg.value > cost",
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN msg.value>cost,reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[9],value:1532892064,gasPrice:0}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"1532892064\",\"gasPrice\":\"0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:1532892064,gasPrice:0}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":1532892064,\"gasPrice\":0}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "msg.value <= cost",
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN msg.value<=cost,reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[9],value:95,gasPrice:11}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"95\",\"gasPrice\":\"11\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:95,gasPrice:11}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":95,\"gasPrice\":11}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "107-110",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN reserveAsset!=0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "4038714811",
              "sol": "4038714811"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[3],gasPrice:27}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"27\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "4038714811",
                "sol": "4038714811"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:27}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":27}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:16:19.067ZDoubleCurveToken.sell": {
    "branches": {
      "0": {
        "branch": {
          "loc": "135-139",
          "restrictions": [
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute sell(uint256,uint256) WHEN reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,amountReturned>=_minReturn,msg.sender!=0,_tokens<=_balances",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[1],gasPrice:97}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"97\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail sell(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:97}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":97}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "137-139",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute sell(uint256,uint256) WHEN reserveAsset!=0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,amountReturned>=_minReturn,msg.sender!=0,_tokens<=_balances",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0],gasPrice:19}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"19\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail sell(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:19}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":19}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:16:19.077ZDoubleCurveToken.priceToBuy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute priceToBuy(uint256)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:16:19.078ZDoubleCurveToken.returnForSell": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute returnForSell(uint256)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:16:19.078ZDoubleCurveToken.amountToReserve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amountToReserve(uint256) WHEN spreadD>0",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail amountToReserve(uint256) when NOT comply with: spreadD > 0",
            "parameters": [
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:16:19.082ZDoubleCurveToken.currentPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute currentPrice() WHEN slopeD>0",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail currentPrice() when NOT comply with: slopeD > 0",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:16:19.091ZDoubleCurveToken.marketCap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute marketCap() WHEN NumberLiteral ** NumberLiteral>0",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:16:19.092ZProxyDoubleCurveToken.testsolveForY": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsolveForY(uint256) WHEN slopeD>0",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsolveForY(uint256) when NOT comply with: slopeD > 0",
            "parameters": [
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:16:19.098ZProxyDoubleCurveToken.testcurveIntegral": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcurveIntegral(uint256) WHEN NumberLiteral ** NumberLiteral>0",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:16:19.099ZGasPriceOracle.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:16:19.100ZGasPriceOracle.setGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setGasPrice(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}