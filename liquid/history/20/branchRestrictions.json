,{
  "2020-11-13T16:26:08.348ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[161,152,135,214,248,218,152,228,181,34,23,247,43,65,199,65,63,44,159,128,50,171,1,62,167,236,160,6,255,225,78,247]",
              "sol": "abi.encode(\"161,152,135,214,248,218,152,228,181,34,23,247,43,65,199,65,63,44,159,128,50,171,1,62,167,236,160,6,255,225,78,247\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:26:17.406ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[20,204,55,35,123,188,22,248,135,201,29,132,156,117,244,249,51,200,240,179,90,149,159,179,109,62,195,229,136,0,174,88]",
              "sol": "abi.encode(\"20,204,55,35,123,188,22,248,135,201,29,132,156,117,244,249,51,200,240,179,90,149,159,179,109,62,195,229,136,0,174,88\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:26:26.557ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[22,133,203,251,86,80,97,254,179,102,52,71,126,79,249,130,162,121,39,56,159,80,49,172,249,244,89,132,219,166,170,243]",
              "sol": "abi.encode(\"22,133,203,251,86,80,97,254,179,102,52,71,126,79,249,130,162,121,39,56,159,80,49,172,249,244,89,132,219,166,170,243\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:26:35.735ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[251,108,222,102,86,39,217,137,195,44,214,102,168,115,63,135,232,63,127,252,69,160,91,125,81,230,119,246,249,34,32,70]",
              "sol": "abi.encode(\"251,108,222,102,86,39,217,137,195,44,214,102,168,115,63,135,232,63,127,252,69,160,91,125,81,230,119,246,249,34,32,70\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:26:45.019ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[104,53,212,116,182,72,209,72,175,99,117,172,103,80,80,133,157,15,238,127,165,18,133,171,124,152,58,208,239,86,234,66]",
              "sol": "abi.encode(\"104,53,212,116,182,72,209,72,175,99,117,172,103,80,80,133,157,15,238,127,165,18,133,171,124,152,58,208,239,86,234,66\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:26:54.111ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[110,110,76,172,174,149,147,16,208,21,238,157,234,17,155,81,84,59,140,228,148,55,9,139,27,229,103,40,123,144,224,105]",
              "sol": "abi.encode(\"110,110,76,172,174,149,147,16,208,21,238,157,234,17,155,81,84,59,140,228,148,55,9,139,27,229,103,40,123,144,224,105\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:27:03.289ZAdminUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[3,113,233,97,98,18,192,63,52,34,60,196,87,190,69,55,198,125,67,249,190,102,85,12,130,122,199,109,165,229,109,90]",
              "sol": "abi.encode(\"3,113,233,97,98,18,192,63,52,34,60,196,87,190,69,55,198,125,67,249,190,102,85,12,130,122,199,109,165,229,109,90\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:27:12.428ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[146,81,50,189,158,177,194,94,103,87,164,91,197,62,228,43,195,151,65,254,195,166,84,99,143,8]",
              "sol": "abi.encode(\"146,81,50,189,158,177,194,94,103,87,164,91,197,62,228,43,195,151,65,254,195,166,84,99,143,8\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:27:21.552ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[122,83,2,164,103,218,193,58,208,119,161,64,200,190,133,250,211,191]",
              "sol": "abi.encode(\"122,83,2,164,103,218,193,58,208,119,161,64,200,190,133,250,211,191\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:27:30.827ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[219,216,132,49,194,109,73,236,120,26]",
              "sol": "abi.encode(\"219,216,132,49,194,109,73,236,120,26\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:27:40.162ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[153,143,203,153,238,100,58,135,173,187,38,69,45,159,4,94,37,109,200,238,193,222,246,232,244,30,198,44,18,1,153,212,238,182,236,42,121,189,230,49,72,180,169,233,23,247,133,3,69,96,30,119,11,171,242,52,87,10,12,6,33,169,8,30,246,70,177,50,0,192,117,105,254,130,207,30,168,58,187,88,28,69,248,211,192,107,62,233,248,78,89,67,255,6,31]",
              "sol": "abi.encode(\"153,143,203,153,238,100,58,135,173,187,38,69,45,159,4,94,37,109,200,238,193,222,246,232,244,30,198,44,18,1,153,212,238,182,236,42,121,189,230,49,72,180,169,233,23,247,133,3,69,96,30,119,11,171,242,52,87,10,12,6,33,169,8,30,246,70,177,50,0,192,117,105,254,130,207,30,168,58,187,88,28,69,248,211,192,107,62,233,248,78,89,67,255,6,31\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:27:49.310ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[200,222,49,221,27,94,116,141,37,66,19,178,107,251,82,37,196]",
              "sol": "abi.encode(\"200,222,49,221,27,94,116,141,37,66,19,178,107,251,82,37,196\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:27:58.422ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[182,101,122,88,202,3]",
              "sol": "abi.encode(\"182,101,122,88,202,3\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:07.603ZUpgradeabilityProxy.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "37-39",
          "restrictions": [
            "_data.length > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length>0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[137,188,77,83,133,184,192,41,170,141,39,198,206,246,164,73,79,41,217,94,28,160,151,143,46,14,36,248,190,40,143,18,140,135,85,177,29,83,79,36,224,244,214,97,214,211,3,117,227,159,155,138,152,248,59,84,103,39,229,247,35,6,22,157]",
              "sol": "abi.encode(\"137,188,77,83,133,184,192,41,170,141,39,198,206,246,164,73,79,41,217,94,28,160,151,143,46,14,36,248,190,40,143,18,140,135,85,177,29,83,79,36,224,244,214,97,214,211,3,117,227,159,155,138,152,248,59,84,103,39,229,247,35,6,22,157\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_data.length <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,bytes) WHEN _data.length<=0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:47.992ZMockERC20.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256) WHEN msg.sender!=0",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:28:55.848ZAccount.proxy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute proxy(address,bytes) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[110,166,166,164,78,251,122,65,73,29,136,177,29,121,71,236,89,196,90,128,12,235,7,201,101,210,112,214,196,207,74,12]",
              "sol": "abi.encode(\"110,166,166,164,78,251,122,65,73,29,136,177,29,121,71,236,89,196,90,128,12,235,7,201,101,210,112,214,196,207,74,12\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail proxy(address,bytes) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "[110,166,166,164,78,251,122,65,73,29,136,177,29,121,71,236,89,196,90,128,12,235,7,201,101,210,112,214,196,207,74,12]",
                "sol": "abi.encode(\"110,166,166,164,78,251,122,65,73,29,136,177,29,121,71,236,89,196,90,128,12,235,7,201,101,210,112,214,196,207,74,12\")"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:28:55.857ZAccount.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string,address) WHEN initialized!=true",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "[33,3,206,211,1,121,126,89,249,152,109,82,9,249,131,208,97,165,71,224,85,93,123,67,179,171,173,192,80,19,109,101]",
              "sol": "stringToBytes32(\"33,3,206,211,1,121,126,89,249,152,109,82,9,249,131,208,97,165,71,224,85,93,123,67,179,171,173,192,80,19,109,101\")"
            },
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "\"whitelist\"",
              "sol": "\"whitelist\""
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:55.860ZAccount.addService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addService(uint256) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addService(uint256) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:28:55.868ZAccount.removeService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute removeService(uint8) WHEN msg.sender==beneficiary,services!=0",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail removeService(uint8) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:28:55.876ZAccount.updateMetadata": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateMetadata(bytes32) WHEN msg.sender==beneficiary",
          "parameters": [
            {
              "js": "[8,6,97,53,77,60,53,87,133,15,130,128,136,123,245,103,151,126,154,162,52,15,204,114,110,0,75,48,179,192,167,4]",
              "sol": "stringToBytes32(\"8,6,97,53,77,60,53,87,133,15,130,128,136,123,245,103,151,126,154,162,52,15,204,114,110,0,75,48,179,192,167,4\")"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateMetadata(bytes32) when NOT comply with: msg.sender == beneficiary",
            "parameters": [
              {
                "js": "[8,6,97,53,77,60,53,87,133,15,130,128,136,123,245,103,151,126,154,162,52,15,204,114,110,0,75,48,179,192,167,4]",
                "sol": "stringToBytes32(\"8,6,97,53,77,60,53,87,133,15,130,128,136,123,245,103,151,126,154,162,52,15,204,114,110,0,75,48,179,192,167,4\")"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:28:55.885ZAccount.requestService": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute requestService(uint256,string) WHEN msg.sender!=0",
          "parameters": [
            {
              "js": "4038714811",
              "sol": "4038714811"
            },
            {
              "js": "\"initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string,address)\"",
              "sol": "\"initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string,address)\""
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail requestService(uint256,string) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "4038714811",
                "sol": "4038714811"
              },
              {
                "js": "\"initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string,address)\"",
                "sol": "\"initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string,address)\""
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\"}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:28:55.886ZAccount.creator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute creator()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:55.887ZConvergentBeta.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address) WHEN initialized!=true",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:55.888ZConvergentBeta.setBaseAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setBaseAccount(address) WHEN msg.sender==_owner,_newBaseAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setBaseAccount(address) when NOT comply with: _newBaseAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:28:55.892ZConvergentBeta.createAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute createAccount(address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "[226,108,112,125,174,123,117,30,96,19,74,37,113,100,225,206,30,40,170,98,207,28,166,186,1,99,241,229,2,36,185,117]",
              "sol": "stringToBytes32(\"226,108,112,125,174,123,117,30,96,19,74,37,113,100,225,206,30,40,170,98,207,28,166,186,1,99,241,229,2,36,185,117\")"
            },
            {
              "js": "\"\"",
              "sol": "\"\""
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:55.893ZConvergentBeta.upgradeAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute upgradeAccount(address) WHEN msg.sender==accountToCreator",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:0}",
              "sol": "{\"from\":\"0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:55.894ZConvergentBeta.getImplementationForAccount": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getImplementationForAccount(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:55.894ZDoubleCurveToken.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:55.895ZDoubleCurveToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "59-61",
          "restrictions": [
            "_preMint > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,string,string,address) WHEN _preMint>0,initialized!=true",
          "parameters": [
            {
              "js": "contractMockERC20.address",
              "sol": "contractMockERC20.address"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4038714810",
              "sol": "4038714810"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "4038714810",
              "sol": "4038714810"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "contractGasPriceOracle.address",
              "sol": "contractGasPriceOracle.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_preMint <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,string,string,address) WHEN _preMint<=0,initialized!=true",
          "parameters": [
            {
              "js": "contractDoubleCurveToken.address",
              "sol": "contractDoubleCurveToken.address"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string,address)\"",
              "sol": "\"initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes32,string,string,address)\""
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "contractGasPriceOracle.address",
              "sol": "contractGasPriceOracle.address"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:55.900ZDoubleCurveToken.withdraw": {
    "branches": {
      "0": {
        "branch": {
          "loc": "78-82",
          "restrictions": [
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN reserveAsset==0x0000000000000000000000000000000000000000,contributions>0",
          "parameters": [
            {
              "js": "{from:accounts[6],gasPrice:4}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"4\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: contributions > 0",
            "parameters": [
              {
                "js": "{from:accounts[6],gasPrice:4}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"4\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "80-82",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute withdraw() WHEN reserveAsset!=0x0000000000000000000000000000000000000000,contributions>0",
          "parameters": [
            {
              "js": "{from:accounts[3],gasPrice:9}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"9\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail withdraw() when NOT comply with: contributions > 0",
            "parameters": [
              {
                "js": "{from:accounts[3],gasPrice:9}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"9\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:28:55.920ZDoubleCurveToken.buy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "104-106",
          "restrictions": [
            "msg.value > cost",
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN msg.value>cost,reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[7],value:1337,gasPrice:19}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"1337\",\"gasPrice\":\"19\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:1337,gasPrice:19}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":1337,\"gasPrice\":19}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "msg.value <= cost",
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN msg.value<=cost,reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[1],value:66,gasPrice:1337}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"66\",\"gasPrice\":\"1337\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:66,gasPrice:1337}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":66,\"gasPrice\":1337}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "107-110",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute buy(uint256,uint256) WHEN reserveAsset!=0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,cost<=_maxSpend,msg.sender!=0",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[6],gasPrice:0}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail buy(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:0}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:28:55.935ZDoubleCurveToken.sell": {
    "branches": {
      "0": {
        "branch": {
          "loc": "135-139",
          "restrictions": [
            "reserveAsset == 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute sell(uint256,uint256) WHEN reserveAsset==0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,amountReturned>=_minReturn,msg.sender!=0,_tokens<=_balances",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0],gasPrice:4}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"4\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail sell(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:4}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":4}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "137-139",
          "restrictions": [
            "reserveAsset != 0x0000000000000000000000000000000000000000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute sell(uint256,uint256) WHEN reserveAsset!=0x0000000000000000000000000000000000000000,msg.gasprice<=GasPriceOracle.maxGas,amountReturned>=_minReturn,msg.sender!=0,_tokens<=_balances",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[9],gasPrice:6}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"6\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail sell(uint256,uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:6}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":6}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:28:55.946ZDoubleCurveToken.priceToBuy": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute priceToBuy(uint256)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:55.948ZDoubleCurveToken.returnForSell": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute returnForSell(uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:55.948ZDoubleCurveToken.amountToReserve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amountToReserve(uint256) WHEN spreadD>0",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail amountToReserve(uint256) when NOT comply with: spreadD > 0",
            "parameters": [
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:28:55.952ZDoubleCurveToken.currentPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute currentPrice() WHEN slopeD>0",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail currentPrice() when NOT comply with: slopeD > 0",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:28:55.955ZDoubleCurveToken.marketCap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute marketCap() WHEN NumberLiteral ** NumberLiteral>0",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:55.957ZProxyDoubleCurveToken.testsolveForY": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsolveForY(uint256) WHEN slopeD>0",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testsolveForY(uint256) when NOT comply with: slopeD > 0",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T16:28:55.962ZProxyDoubleCurveToken.testcurveIntegral": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcurveIntegral(uint256) WHEN NumberLiteral ** NumberLiteral>0",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:55.963ZGasPriceOracle.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T16:28:55.964ZGasPriceOracle.setGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setGasPrice(uint256) WHEN msg.sender==_owner",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}