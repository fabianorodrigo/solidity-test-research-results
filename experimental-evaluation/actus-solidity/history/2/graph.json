{ truffleProjectHome:
   '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity',
  contracts:
   { BusinessDayConvention:
      { projectGraph: [Circular],
        name: 'BusinessDayConvention',
        kind: 'contract',
        isAbstract: false,
        functions:
         { shiftCalcTime:
            [ { name: 'shiftCalcTime',
                signature: 'shiftCalcTime(uint256,BusinessDayConvention,Calendar)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           shiftEventTime:
            [ { name: 'shiftEventTime',
                signature: 'shiftEventTime(uint256,BusinessDayConvention,Calendar)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           getClosestBusinessDaySameDayOrFollowing:
            [ { name: 'getClosestBusinessDaySameDayOrFollowing',
                signature: 'getClosestBusinessDaySameDayOrFollowing(uint256,Calendar)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getClosestBusinessDaySameDayOrPreceeding:
            [ { name: 'getClosestBusinessDaySameDayOrPreceeding',
                signature: 'getClosestBusinessDaySameDayOrPreceeding(uint256,Calendar)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { INT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MIN',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           INT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MIN',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOUBLE_NULL:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOUBLE_NULL',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PRECISION:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PRECISION',
              isArray: false,
              initialValue: 18,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_CYCLE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_CYCLE_SIZE',
              isArray: false,
              initialValue: 16,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_EVENT_SCHEDULE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_EVENT_SCHEDULE_SIZE',
              isArray: false,
              initialValue: 64,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { BokkyPooBahsDateTimeLibrary:
            { projectGraph: [Circular],
              name: 'BokkyPooBahsDateTimeLibrary',
              kind: 'library',
              isAbstract: false,
              functions:
               { _daysFromDate: [Array],
                 _daysToDate: [Array],
                 timestampFromDate: [Array],
                 timestampFromDateTime: [Array],
                 timestampToDate: [Array],
                 timestampToDateTime: [Array],
                 isValidDate: [Array],
                 isValidDateTime: [Array],
                 isLeapYear: [Array],
                 _isLeapYear: [Array],
                 isWeekDay: [Array],
                 isWeekEnd: [Array],
                 getDaysInMonth: [Array],
                 _getDaysInMonth: [Array],
                 getDayOfWeek: [Array],
                 getYear: [Array],
                 getMonth: [Array],
                 getDay: [Array],
                 getHour: [Array],
                 getMinute: [Array],
                 getSecond: [Array],
                 addYears: [Array],
                 addMonths: [Array],
                 addDays: [Array],
                 addHours: [Array],
                 addMinutes: [Array],
                 addSeconds: [Array],
                 subYears: [Array],
                 subMonths: [Array],
                 subDays: [Array],
                 subHours: [Array],
                 subMinutes: [Array],
                 subSeconds: [Array],
                 diffYears: [Array],
                 diffMonths: [Array],
                 diffDays: [Array],
                 diffHours: [Array],
                 diffMinutes: [Array],
                 diffSeconds: [Array] },
              modifiers: {},
              stateVariables:
               { SECONDS_PER_DAY: [Object],
                 SECONDS_PER_HOUR: [Object],
                 SECONDS_PER_MINUTE: [Object],
                 OFFSET19700101: [Object],
                 DOW_MON: [Object],
                 DOW_TUE: [Object],
                 DOW_WED: [Object],
                 DOW_THU: [Object],
                 DOW_FRI: [Object],
                 DOW_SAT: [Object],
                 DOW_SUN: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BokkyPooBahsDateTimeLibrary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol' },
           Definitions:
            { projectGraph: [Circular],
              name: 'Definitions',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs:
               { IPS: [Object],
                 ContractState: [Object],
                 ContractEvent: [Object],
                 ProtoEvent: [Object],
                 ContractTerms: [Object] },
              enums:
               { P: [Object],
                 S: [Object],
                 EventType: [Object],
                 Calendar: [Object],
                 BusinessDayConvention: [Object],
                 ClearingHouse: [Object],
                 ContractRole: [Object],
                 ContractStatus: [Object],
                 ContractType: [Object],
                 CyclePointOfInterestPayment: [Object],
                 CyclePointOfRateReset: [Object],
                 CycleTriggerOfOptionality: [Object],
                 DayCountConvention: [Object],
                 EndOfMonthConvention: [Object],
                 EventLevel: [Object],
                 FeeBasis: [Object],
                 InterestCalculationBase: [Object],
                 MarketObjectCodeOfRateReset: [Object],
                 ObjectCodeOfPrepaymentModel: [Object],
                 OptionExecutionType: [Object],
                 OptionStrikeDriver: [Object],
                 OptionType: [Object],
                 PenaltyType: [Object],
                 PrepaymentEffect: [Object],
                 ScalingEffect: [Object],
                 Seniority: [Object],
                 Unit: [Object] },
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Definitions',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' } },
        inheritsFrom:
         { Definitions:
            { contract:
               { projectGraph: [Circular],
                 name: 'Definitions',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: [Object],
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'BusinessDayConvention',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'shiftCalcTime',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'shiftEventTime',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getClosestBusinessDaySameDayOrFollowing',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getClosestBusinessDaySameDayOrPreceeding',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 93, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/BusinessDayConvention.sol' },
     ContractDefaultConvention:
      { projectGraph: [Circular],
        name: 'ContractDefaultConvention',
        kind: 'contract',
        isAbstract: false,
        functions:
         { performanceIndicator:
            [ { name: 'performanceIndicator',
                signature: 'performanceIndicator(ContractStatus)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { INT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MIN',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           INT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MIN',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOUBLE_NULL:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOUBLE_NULL',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PRECISION:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PRECISION',
              isArray: false,
              initialValue: 18,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_CYCLE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_CYCLE_SIZE',
              isArray: false,
              initialValue: 16,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_EVENT_SCHEDULE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_EVENT_SCHEDULE_SIZE',
              isArray: false,
              initialValue: 64,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { Definitions:
            { projectGraph: [Circular],
              name: 'Definitions',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs:
               { IPS: [Object],
                 ContractState: [Object],
                 ContractEvent: [Object],
                 ProtoEvent: [Object],
                 ContractTerms: [Object] },
              enums:
               { P: [Object],
                 S: [Object],
                 EventType: [Object],
                 Calendar: [Object],
                 BusinessDayConvention: [Object],
                 ClearingHouse: [Object],
                 ContractRole: [Object],
                 ContractStatus: [Object],
                 ContractType: [Object],
                 CyclePointOfInterestPayment: [Object],
                 CyclePointOfRateReset: [Object],
                 CycleTriggerOfOptionality: [Object],
                 DayCountConvention: [Object],
                 EndOfMonthConvention: [Object],
                 EventLevel: [Object],
                 FeeBasis: [Object],
                 InterestCalculationBase: [Object],
                 MarketObjectCodeOfRateReset: [Object],
                 ObjectCodeOfPrepaymentModel: [Object],
                 OptionExecutionType: [Object],
                 OptionStrikeDriver: [Object],
                 OptionType: [Object],
                 PenaltyType: [Object],
                 PrepaymentEffect: [Object],
                 ScalingEffect: [Object],
                 Seniority: [Object],
                 Unit: [Object] },
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Definitions',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' } },
        inheritsFrom:
         { Definitions:
            { contract:
               { projectGraph: [Circular],
                 name: 'Definitions',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: [Object],
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ContractDefaultConvention',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'performanceIndicator',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 16, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/ContractDefaultConvention.sol' },
     ContractRoleConvention:
      { projectGraph: [Circular],
        name: 'ContractRoleConvention',
        kind: 'contract',
        isAbstract: false,
        functions:
         { roleSign:
            [ { name: 'roleSign',
                signature: 'roleSign(ContractRole)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { INT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MIN',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           INT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MIN',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOUBLE_NULL:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOUBLE_NULL',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PRECISION:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PRECISION',
              isArray: false,
              initialValue: 18,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_CYCLE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_CYCLE_SIZE',
              isArray: false,
              initialValue: 16,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_EVENT_SCHEDULE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_EVENT_SCHEDULE_SIZE',
              isArray: false,
              initialValue: 64,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { Definitions:
            { projectGraph: [Circular],
              name: 'Definitions',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs:
               { IPS: [Object],
                 ContractState: [Object],
                 ContractEvent: [Object],
                 ProtoEvent: [Object],
                 ContractTerms: [Object] },
              enums:
               { P: [Object],
                 S: [Object],
                 EventType: [Object],
                 Calendar: [Object],
                 BusinessDayConvention: [Object],
                 ClearingHouse: [Object],
                 ContractRole: [Object],
                 ContractStatus: [Object],
                 ContractType: [Object],
                 CyclePointOfInterestPayment: [Object],
                 CyclePointOfRateReset: [Object],
                 CycleTriggerOfOptionality: [Object],
                 DayCountConvention: [Object],
                 EndOfMonthConvention: [Object],
                 EventLevel: [Object],
                 FeeBasis: [Object],
                 InterestCalculationBase: [Object],
                 MarketObjectCodeOfRateReset: [Object],
                 ObjectCodeOfPrepaymentModel: [Object],
                 OptionExecutionType: [Object],
                 OptionStrikeDriver: [Object],
                 OptionType: [Object],
                 PenaltyType: [Object],
                 PrepaymentEffect: [Object],
                 ScalingEffect: [Object],
                 Seniority: [Object],
                 Unit: [Object] },
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Definitions',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' } },
        inheritsFrom:
         { Definitions:
            { contract:
               { projectGraph: [Circular],
                 name: 'Definitions',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: [Object],
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ContractRoleConvention',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'roleSign',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 17, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/ContractRoleConvention.sol' },
     DayCountConvention:
      { projectGraph: [Circular],
        name: 'DayCountConvention',
        kind: 'contract',
        isAbstract: false,
        functions:
         { yearFraction:
            [ { name: 'yearFraction',
                signature: 'yearFraction(uint256,uint256,DayCountConvention)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           actualActualISDA:
            [ { name: 'actualActualISDA',
                signature: 'actualActualISDA(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           actualThreeSixty:
            [ { name: 'actualThreeSixty',
                signature: 'actualThreeSixty(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           actualThreeSixtyFive:
            [ { name: 'actualThreeSixtyFive',
                signature: 'actualThreeSixtyFive(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           thirtyEThreeSixty:
            [ { name: 'thirtyEThreeSixty',
                signature: 'thirtyEThreeSixty(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { INT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MIN',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           INT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MIN',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOUBLE_NULL:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOUBLE_NULL',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PRECISION:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PRECISION',
              isArray: false,
              initialValue: 18,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_CYCLE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_CYCLE_SIZE',
              isArray: false,
              initialValue: 16,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_EVENT_SCHEDULE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_EVENT_SCHEDULE_SIZE',
              isArray: false,
              initialValue: 64,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           SignedSafeMath:
            { projectGraph: [Circular],
              name: 'SignedSafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: { INT256_MIN: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SignedSafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/SignedSafeMath.sol' },
           BokkyPooBahsDateTimeLibrary:
            { projectGraph: [Circular],
              name: 'BokkyPooBahsDateTimeLibrary',
              kind: 'library',
              isAbstract: false,
              functions:
               { _daysFromDate: [Array],
                 _daysToDate: [Array],
                 timestampFromDate: [Array],
                 timestampFromDateTime: [Array],
                 timestampToDate: [Array],
                 timestampToDateTime: [Array],
                 isValidDate: [Array],
                 isValidDateTime: [Array],
                 isLeapYear: [Array],
                 _isLeapYear: [Array],
                 isWeekDay: [Array],
                 isWeekEnd: [Array],
                 getDaysInMonth: [Array],
                 _getDaysInMonth: [Array],
                 getDayOfWeek: [Array],
                 getYear: [Array],
                 getMonth: [Array],
                 getDay: [Array],
                 getHour: [Array],
                 getMinute: [Array],
                 getSecond: [Array],
                 addYears: [Array],
                 addMonths: [Array],
                 addDays: [Array],
                 addHours: [Array],
                 addMinutes: [Array],
                 addSeconds: [Array],
                 subYears: [Array],
                 subMonths: [Array],
                 subDays: [Array],
                 subHours: [Array],
                 subMinutes: [Array],
                 subSeconds: [Array],
                 diffYears: [Array],
                 diffMonths: [Array],
                 diffDays: [Array],
                 diffHours: [Array],
                 diffMinutes: [Array],
                 diffSeconds: [Array] },
              modifiers: {},
              stateVariables:
               { SECONDS_PER_DAY: [Object],
                 SECONDS_PER_HOUR: [Object],
                 SECONDS_PER_MINUTE: [Object],
                 OFFSET19700101: [Object],
                 DOW_MON: [Object],
                 DOW_TUE: [Object],
                 DOW_WED: [Object],
                 DOW_THU: [Object],
                 DOW_FRI: [Object],
                 DOW_SAT: [Object],
                 DOW_SUN: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BokkyPooBahsDateTimeLibrary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol' },
           Definitions:
            { projectGraph: [Circular],
              name: 'Definitions',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs:
               { IPS: [Object],
                 ContractState: [Object],
                 ContractEvent: [Object],
                 ProtoEvent: [Object],
                 ContractTerms: [Object] },
              enums:
               { P: [Object],
                 S: [Object],
                 EventType: [Object],
                 Calendar: [Object],
                 BusinessDayConvention: [Object],
                 ClearingHouse: [Object],
                 ContractRole: [Object],
                 ContractStatus: [Object],
                 ContractType: [Object],
                 CyclePointOfInterestPayment: [Object],
                 CyclePointOfRateReset: [Object],
                 CycleTriggerOfOptionality: [Object],
                 DayCountConvention: [Object],
                 EndOfMonthConvention: [Object],
                 EventLevel: [Object],
                 FeeBasis: [Object],
                 InterestCalculationBase: [Object],
                 MarketObjectCodeOfRateReset: [Object],
                 ObjectCodeOfPrepaymentModel: [Object],
                 OptionExecutionType: [Object],
                 OptionStrikeDriver: [Object],
                 OptionType: [Object],
                 PenaltyType: [Object],
                 PrepaymentEffect: [Object],
                 ScalingEffect: [Object],
                 Seniority: [Object],
                 Unit: [Object] },
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Definitions',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
           FloatMath:
            { projectGraph: [Circular],
              name: 'FloatMath',
              kind: 'library',
              isAbstract: false,
              functions: { floatMult: [Array], floatDiv: [Array] },
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 PRECISION: [Object],
                 MULTIPLICATOR: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'FloatMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/FloatMath.sol' } },
        inheritsFrom:
         { Definitions:
            { contract:
               { projectGraph: [Circular],
                 name: 'Definitions',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: [Object],
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'DayCountConvention',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SignedSafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'FloatMath',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'yearFraction',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'actualActualISDA',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'actualThreeSixty',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'actualThreeSixtyFive',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'thirtyEThreeSixty',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 },
              end: { line: 110, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/DayCountConvention.sol' },
     EndOfMonthConvention:
      { projectGraph: [Circular],
        name: 'EndOfMonthConvention',
        kind: 'contract',
        isAbstract: false,
        functions:
         { getEndOfMonthConvention:
            [ { name: 'getEndOfMonthConvention',
                signature:
                 'getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           shiftEndOfMonth:
            [ { name: 'shiftEndOfMonth',
                signature: 'shiftEndOfMonth(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           shiftSameDay:
            [ { name: 'shiftSameDay',
                signature: 'shiftSameDay(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { INT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MIN',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           INT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MIN',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOUBLE_NULL:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOUBLE_NULL',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PRECISION:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PRECISION',
              isArray: false,
              initialValue: 18,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_CYCLE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_CYCLE_SIZE',
              isArray: false,
              initialValue: 16,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_EVENT_SCHEDULE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_EVENT_SCHEDULE_SIZE',
              isArray: false,
              initialValue: 64,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { BokkyPooBahsDateTimeLibrary:
            { projectGraph: [Circular],
              name: 'BokkyPooBahsDateTimeLibrary',
              kind: 'library',
              isAbstract: false,
              functions:
               { _daysFromDate: [Array],
                 _daysToDate: [Array],
                 timestampFromDate: [Array],
                 timestampFromDateTime: [Array],
                 timestampToDate: [Array],
                 timestampToDateTime: [Array],
                 isValidDate: [Array],
                 isValidDateTime: [Array],
                 isLeapYear: [Array],
                 _isLeapYear: [Array],
                 isWeekDay: [Array],
                 isWeekEnd: [Array],
                 getDaysInMonth: [Array],
                 _getDaysInMonth: [Array],
                 getDayOfWeek: [Array],
                 getYear: [Array],
                 getMonth: [Array],
                 getDay: [Array],
                 getHour: [Array],
                 getMinute: [Array],
                 getSecond: [Array],
                 addYears: [Array],
                 addMonths: [Array],
                 addDays: [Array],
                 addHours: [Array],
                 addMinutes: [Array],
                 addSeconds: [Array],
                 subYears: [Array],
                 subMonths: [Array],
                 subDays: [Array],
                 subHours: [Array],
                 subMinutes: [Array],
                 subSeconds: [Array],
                 diffYears: [Array],
                 diffMonths: [Array],
                 diffDays: [Array],
                 diffHours: [Array],
                 diffMinutes: [Array],
                 diffSeconds: [Array] },
              modifiers: {},
              stateVariables:
               { SECONDS_PER_DAY: [Object],
                 SECONDS_PER_HOUR: [Object],
                 SECONDS_PER_MINUTE: [Object],
                 OFFSET19700101: [Object],
                 DOW_MON: [Object],
                 DOW_TUE: [Object],
                 DOW_WED: [Object],
                 DOW_THU: [Object],
                 DOW_FRI: [Object],
                 DOW_SAT: [Object],
                 DOW_SUN: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BokkyPooBahsDateTimeLibrary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol' },
           Definitions:
            { projectGraph: [Circular],
              name: 'Definitions',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs:
               { IPS: [Object],
                 ContractState: [Object],
                 ContractEvent: [Object],
                 ProtoEvent: [Object],
                 ContractTerms: [Object] },
              enums:
               { P: [Object],
                 S: [Object],
                 EventType: [Object],
                 Calendar: [Object],
                 BusinessDayConvention: [Object],
                 ClearingHouse: [Object],
                 ContractRole: [Object],
                 ContractStatus: [Object],
                 ContractType: [Object],
                 CyclePointOfInterestPayment: [Object],
                 CyclePointOfRateReset: [Object],
                 CycleTriggerOfOptionality: [Object],
                 DayCountConvention: [Object],
                 EndOfMonthConvention: [Object],
                 EventLevel: [Object],
                 FeeBasis: [Object],
                 InterestCalculationBase: [Object],
                 MarketObjectCodeOfRateReset: [Object],
                 ObjectCodeOfPrepaymentModel: [Object],
                 OptionExecutionType: [Object],
                 OptionStrikeDriver: [Object],
                 OptionType: [Object],
                 PenaltyType: [Object],
                 PrepaymentEffect: [Object],
                 ScalingEffect: [Object],
                 Seniority: [Object],
                 Unit: [Object] },
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Definitions',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' } },
        inheritsFrom:
         { Definitions:
            { contract:
               { projectGraph: [Circular],
                 name: 'Definitions',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: [Object],
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EndOfMonthConvention',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'getEndOfMonthConvention',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'shiftEndOfMonth',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'shiftSameDay',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 55, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/EndOfMonthConvention.sol' },
     Core:
      { projectGraph: [Circular],
        name: 'Core',
        kind: 'contract',
        isAbstract: false,
        functions:
         { signum:
            [ { name: 'signum',
                signature: 'signum(int)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getEpochOffset:
            [ { name: 'getEpochOffset',
                signature: 'getEpochOffset(EventType)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { INT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MIN',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           INT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MIN',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOUBLE_NULL:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOUBLE_NULL',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PRECISION:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PRECISION',
              isArray: false,
              initialValue: 18,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_CYCLE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_CYCLE_SIZE',
              isArray: false,
              initialValue: 16,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_EVENT_SCHEDULE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_EVENT_SCHEDULE_SIZE',
              isArray: false,
              initialValue: 64,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { Definitions:
            { projectGraph: [Circular],
              name: 'Definitions',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs:
               { IPS: [Object],
                 ContractState: [Object],
                 ContractEvent: [Object],
                 ProtoEvent: [Object],
                 ContractTerms: [Object] },
              enums:
               { P: [Object],
                 S: [Object],
                 EventType: [Object],
                 Calendar: [Object],
                 BusinessDayConvention: [Object],
                 ClearingHouse: [Object],
                 ContractRole: [Object],
                 ContractStatus: [Object],
                 ContractType: [Object],
                 CyclePointOfInterestPayment: [Object],
                 CyclePointOfRateReset: [Object],
                 CycleTriggerOfOptionality: [Object],
                 DayCountConvention: [Object],
                 EndOfMonthConvention: [Object],
                 EventLevel: [Object],
                 FeeBasis: [Object],
                 InterestCalculationBase: [Object],
                 MarketObjectCodeOfRateReset: [Object],
                 ObjectCodeOfPrepaymentModel: [Object],
                 OptionExecutionType: [Object],
                 OptionStrikeDriver: [Object],
                 OptionType: [Object],
                 PenaltyType: [Object],
                 PrepaymentEffect: [Object],
                 ScalingEffect: [Object],
                 Seniority: [Object],
                 Unit: [Object] },
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Definitions',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
           Utils:
            { projectGraph: [Circular],
              name: 'Utils',
              kind: 'contract',
              isAbstract: false,
              functions:
               { getTimestampPlusPeriod: [Array],
                 sortProtoEventSchedule: [Array],
                 quickSortProtoEventSchedule: [Array],
                 isInPeriod: [Array] },
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies:
               { BokkyPooBahsDateTimeLibrary: [Object], Definitions: [Object] },
              inheritsFrom: { Definitions: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Utils',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Utils.sol' },
           Schedule:
            { projectGraph: [Circular],
              name: 'Schedule',
              kind: 'contract',
              isAbstract: false,
              functions:
               { getNextCycleDate: [Array],
                 computeDatesFromCycleSegment: [Array] },
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies:
               { BokkyPooBahsDateTimeLibrary: [Object],
                 Definitions: [Object],
                 Utils: [Object],
                 EndOfMonthConvention: [Object] },
              inheritsFrom:
               { Definitions: [Object],
                 Utils: [Object],
                 EndOfMonthConvention: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Schedule',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Schedule.sol' },
           BusinessDayConvention:
            { projectGraph: [Circular],
              name: 'BusinessDayConvention',
              kind: 'contract',
              isAbstract: false,
              functions:
               { shiftCalcTime: [Array],
                 shiftEventTime: [Array],
                 getClosestBusinessDaySameDayOrFollowing: [Array],
                 getClosestBusinessDaySameDayOrPreceeding: [Array] },
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies:
               { BokkyPooBahsDateTimeLibrary: [Object], Definitions: [Object] },
              inheritsFrom: { Definitions: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BusinessDayConvention',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/BusinessDayConvention.sol' },
           ContractDefaultConvention:
            { projectGraph: [Circular],
              name: 'ContractDefaultConvention',
              kind: 'contract',
              isAbstract: false,
              functions: { performanceIndicator: [Array] },
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies: { Definitions: [Object] },
              inheritsFrom: { Definitions: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ContractDefaultConvention',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/ContractDefaultConvention.sol' },
           ContractRoleConvention:
            { projectGraph: [Circular],
              name: 'ContractRoleConvention',
              kind: 'contract',
              isAbstract: false,
              functions: { roleSign: [Array] },
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies: { Definitions: [Object] },
              inheritsFrom: { Definitions: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ContractRoleConvention',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/ContractRoleConvention.sol' },
           DayCountConvention:
            { projectGraph: [Circular],
              name: 'DayCountConvention',
              kind: 'contract',
              isAbstract: false,
              functions:
               { yearFraction: [Array],
                 actualActualISDA: [Array],
                 actualThreeSixty: [Array],
                 actualThreeSixtyFive: [Array],
                 thirtyEThreeSixty: [Array] },
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies:
               { SafeMath: [Object],
                 SignedSafeMath: [Object],
                 BokkyPooBahsDateTimeLibrary: [Object],
                 Definitions: [Object],
                 FloatMath: [Object] },
              inheritsFrom: { Definitions: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'DayCountConvention',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/DayCountConvention.sol' },
           EndOfMonthConvention:
            { projectGraph: [Circular],
              name: 'EndOfMonthConvention',
              kind: 'contract',
              isAbstract: false,
              functions:
               { getEndOfMonthConvention: [Array],
                 shiftEndOfMonth: [Array],
                 shiftSameDay: [Array] },
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies:
               { BokkyPooBahsDateTimeLibrary: [Object], Definitions: [Object] },
              inheritsFrom: { Definitions: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'EndOfMonthConvention',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/EndOfMonthConvention.sol' } },
        inheritsFrom:
         { Definitions:
            { contract:
               { projectGraph: [Circular],
                 name: 'Definitions',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: [Object],
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
              parameters: [],
              level: 2 },
           Utils:
            { contract:
               { projectGraph: [Circular],
                 name: 'Utils',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Utils.sol' },
              parameters: [],
              level: 1 },
           BusinessDayConvention:
            { contract:
               { projectGraph: [Circular],
                 name: 'BusinessDayConvention',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/BusinessDayConvention.sol' },
              parameters: [],
              level: 0 },
           ContractDefaultConvention:
            { contract:
               { projectGraph: [Circular],
                 name: 'ContractDefaultConvention',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/ContractDefaultConvention.sol' },
              parameters: [],
              level: 0 },
           ContractRoleConvention:
            { contract:
               { projectGraph: [Circular],
                 name: 'ContractRoleConvention',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/ContractRoleConvention.sol' },
              parameters: [],
              level: 0 },
           DayCountConvention:
            { contract:
               { projectGraph: [Circular],
                 name: 'DayCountConvention',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/DayCountConvention.sol' },
              parameters: [],
              level: 0 },
           EndOfMonthConvention:
            { contract:
               { projectGraph: [Circular],
                 name: 'EndOfMonthConvention',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/EndOfMonthConvention.sol' },
              parameters: [],
              level: 1 },
           Schedule:
            { contract:
               { projectGraph: [Circular],
                 name: 'Schedule',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Schedule.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Core',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'signum',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getEpochOffset',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 15, column: 0 }, end: { line: 61, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Core.sol' },
     Definitions:
      { projectGraph: [Circular],
        name: 'Definitions',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { INT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MIN',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           INT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MIN',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOUBLE_NULL:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOUBLE_NULL',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PRECISION:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PRECISION',
              isArray: false,
              initialValue: 18,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_CYCLE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_CYCLE_SIZE',
              isArray: false,
              initialValue: 16,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_EVENT_SCHEDULE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_EVENT_SCHEDULE_SIZE',
              isArray: false,
              initialValue: 64,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs:
         { IPS:
            { name: 'IPS',
              contract: [Circular],
              parameters: [ [Object], [Object], [Object], [Object] ] },
           ContractState:
            { name: 'ContractState',
              contract: [Circular],
              parameters:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ] },
           ContractEvent:
            { name: 'ContractEvent',
              contract: [Circular],
              parameters: [ [Object], [Object], [Object], [Object], [Object] ] },
           ProtoEvent:
            { name: 'ProtoEvent',
              contract: [Circular],
              parameters:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ] },
           ContractTerms:
            { name: 'ContractTerms',
              contract: [Circular],
              parameters:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ] } },
        enums:
         { P:
            { name: 'P',
              contract: [Circular],
              members: [ 'D', 'W', 'M', 'Q', 'H', 'Y' ] },
           S:
            { name: 'S', contract: [Circular], members: [ 'LONG', 'SHORT' ] },
           EventType:
            { name: 'EventType',
              contract: [Circular],
              members:
               [ 'SD',
                 'MD',
                 'AD',
                 'IED',
                 'IP',
                 'PR',
                 'PP',
                 'PY',
                 'FP',
                 'PRD',
                 'TD',
                 'IPCI',
                 'RR',
                 'RRY',
                 'SC',
                 'CD',
                 'DV',
                 'MR',
                 'IPCB',
                 'STD',
                 'Child' ] },
           Calendar:
            { name: 'Calendar',
              contract: [Circular],
              members: [ 'NoCalendar', 'MondayToFriday' ] },
           BusinessDayConvention:
            { name: 'BusinessDayConvention',
              contract: [Circular],
              members:
               [ 'NULL', 'SCF', 'SCMF', 'CSF', 'CSMF', 'SCP', 'SCMP', 'CSP', 'CSMP' ] },
           ClearingHouse:
            { name: 'ClearingHouse',
              contract: [Circular],
              members: [ 'YES', 'NO' ] },
           ContractRole:
            { name: 'ContractRole',
              contract: [Circular],
              members:
               [ 'RPA', 'RPL', 'LG', 'ST', 'RFL', 'PFL', 'BUY', 'SEL', 'GUA', 'OBL' ] },
           ContractStatus:
            { name: 'ContractStatus',
              contract: [Circular],
              members: [ 'PF', 'DL', 'DQ', 'DF' ] },
           ContractType:
            { name: 'ContractType',
              contract: [Circular],
              members:
               [ 'PAM',
                 'ANN',
                 'NAM',
                 'LAM',
                 'LAX',
                 'CLM',
                 'UMP',
                 'CSH',
                 'STK',
                 'COM',
                 'SWAPS',
                 'SWPPV',
                 'FXOUT',
                 'CAPFL',
                 'FUTUR',
                 'OPTNS',
                 'CEG',
                 'CEC' ] },
           CyclePointOfInterestPayment:
            { name: 'CyclePointOfInterestPayment',
              contract: [Circular],
              members: [ 'EndOf', 'BeginningOf' ] },
           CyclePointOfRateReset:
            { name: 'CyclePointOfRateReset',
              contract: [Circular],
              members: [ 'BeginningOf', 'EndOf' ] },
           CycleTriggerOfOptionality:
            { name: 'CycleTriggerOfOptionality',
              contract: [Circular],
              members: [ 'IP', 'PR', 'RR' ] },
           DayCountConvention:
            { name: 'DayCountConvention',
              contract: [Circular],
              members:
               [ 'A_AISDA',
                 'A_360',
                 'A_365',
                 '_30E_360ISDA',
                 '_30E_360',
                 '_30_360',
                 'BUS_252' ] },
           EndOfMonthConvention:
            { name: 'EndOfMonthConvention',
              contract: [Circular],
              members: [ 'EOM', 'SD' ] },
           EventLevel:
            { name: 'EventLevel', contract: [Circular], members: [ 'P' ] },
           FeeBasis:
            { name: 'FeeBasis', contract: [Circular], members: [ 'A', 'N' ] },
           InterestCalculationBase:
            { name: 'InterestCalculationBase',
              contract: [Circular],
              members: [ 'NT', 'NTIED', 'NTL' ] },
           MarketObjectCodeOfRateReset:
            { name: 'MarketObjectCodeOfRateReset',
              contract: [Circular],
              members: [ 'USD_SWP', 'USD_GOV', 'CHF_SWP' ] },
           ObjectCodeOfPrepaymentModel:
            { name: 'ObjectCodeOfPrepaymentModel',
              contract: [Circular],
              members: [ 'IDXY' ] },
           OptionExecutionType:
            { name: 'OptionExecutionType',
              contract: [Circular],
              members: [ 'E', 'B', 'A' ] },
           OptionStrikeDriver:
            { name: 'OptionStrikeDriver',
              contract: [Circular],
              members: [ 'FX', 'IR', 'PR' ] },
           OptionType:
            { name: 'OptionType',
              contract: [Circular],
              members: [ 'C', 'P', 'CP' ] },
           PenaltyType:
            { name: 'PenaltyType',
              contract: [Circular],
              members: [ 'O', 'A', 'N', 'I' ] },
           PrepaymentEffect:
            { name: 'PrepaymentEffect',
              contract: [Circular],
              members: [ 'N', 'A', 'M' ] },
           ScalingEffect:
            { name: 'ScalingEffect',
              contract: [Circular],
              members:
               [ '_000', '_0N0', '_00M', '_0NM', 'I00', 'IN0', 'I0M', 'INM' ] },
           Seniority:
            { name: 'Seniority',
              contract: [Circular],
              members: [ 'S', 'J' ] },
           Unit:
            { name: 'Unit',
              contract: [Circular],
              members:
               [ 'BRL', 'BSH', 'GLN', 'CUU', 'MWH', 'PND', 'STN', 'TON', 'TRO' ] } },
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Definitions',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'P',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'S',
                members: [Array],
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'IPS',
                members: [Array],
                loc: [Object],
                parentName: 'Definitions' },
              { type: 'EnumDefinition',
                name: 'EventType',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'Calendar',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'BusinessDayConvention',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'ClearingHouse',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'ContractRole',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'ContractStatus',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'ContractType',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'CyclePointOfInterestPayment',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'CyclePointOfRateReset',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'CycleTriggerOfOptionality',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'DayCountConvention',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'EndOfMonthConvention',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'EventLevel',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'FeeBasis',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'InterestCalculationBase',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'MarketObjectCodeOfRateReset',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'ObjectCodeOfPrepaymentModel',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'OptionExecutionType',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'OptionStrikeDriver',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'OptionType',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'PenaltyType',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'PrepaymentEffect',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'ScalingEffect',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'Seniority',
                members: [Array],
                loc: [Object] },
              { type: 'EnumDefinition',
                name: 'Unit',
                members: [Array],
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'ContractState',
                members: [Array],
                loc: [Object],
                parentName: 'Definitions' },
              { type: 'StructDefinition',
                name: 'ContractEvent',
                members: [Array],
                loc: [Object],
                parentName: 'Definitions' },
              { type: 'StructDefinition',
                name: 'ProtoEvent',
                members: [Array],
                loc: [Object],
                parentName: 'Definitions' },
              { type: 'StructDefinition',
                name: 'ContractTerms',
                members: [Array],
                loc: [Object],
                parentName: 'Definitions' } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 141, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
     FloatMath:
      { projectGraph: [Circular],
        name: 'FloatMath',
        kind: 'library',
        isAbstract: false,
        functions:
         { floatMult:
            [ { name: 'floatMult',
                signature: 'floatMult(int256,int256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           floatDiv:
            [ { name: 'floatDiv',
                signature: 'floatDiv(int256,int256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { INT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MIN',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PRECISION:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PRECISION',
              isArray: false,
              initialValue: 18,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MULTIPLICATOR:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MULTIPLICATOR',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'FloatMath',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'floatMult',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'floatDiv',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 52, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/FloatMath.sol' },
     Schedule:
      { projectGraph: [Circular],
        name: 'Schedule',
        kind: 'contract',
        isAbstract: false,
        functions:
         { getNextCycleDate:
            [ { name: 'getNextCycleDate',
                signature: 'getNextCycleDate(Definitions.IPS,uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           computeDatesFromCycleSegment:
            [ { name: 'computeDatesFromCycleSegment',
                signature:
                 'computeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { INT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MIN',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           INT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MIN',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOUBLE_NULL:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOUBLE_NULL',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PRECISION:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PRECISION',
              isArray: false,
              initialValue: 18,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_CYCLE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_CYCLE_SIZE',
              isArray: false,
              initialValue: 16,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_EVENT_SCHEDULE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_EVENT_SCHEDULE_SIZE',
              isArray: false,
              initialValue: 64,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { BokkyPooBahsDateTimeLibrary:
            { projectGraph: [Circular],
              name: 'BokkyPooBahsDateTimeLibrary',
              kind: 'library',
              isAbstract: false,
              functions:
               { _daysFromDate: [Array],
                 _daysToDate: [Array],
                 timestampFromDate: [Array],
                 timestampFromDateTime: [Array],
                 timestampToDate: [Array],
                 timestampToDateTime: [Array],
                 isValidDate: [Array],
                 isValidDateTime: [Array],
                 isLeapYear: [Array],
                 _isLeapYear: [Array],
                 isWeekDay: [Array],
                 isWeekEnd: [Array],
                 getDaysInMonth: [Array],
                 _getDaysInMonth: [Array],
                 getDayOfWeek: [Array],
                 getYear: [Array],
                 getMonth: [Array],
                 getDay: [Array],
                 getHour: [Array],
                 getMinute: [Array],
                 getSecond: [Array],
                 addYears: [Array],
                 addMonths: [Array],
                 addDays: [Array],
                 addHours: [Array],
                 addMinutes: [Array],
                 addSeconds: [Array],
                 subYears: [Array],
                 subMonths: [Array],
                 subDays: [Array],
                 subHours: [Array],
                 subMinutes: [Array],
                 subSeconds: [Array],
                 diffYears: [Array],
                 diffMonths: [Array],
                 diffDays: [Array],
                 diffHours: [Array],
                 diffMinutes: [Array],
                 diffSeconds: [Array] },
              modifiers: {},
              stateVariables:
               { SECONDS_PER_DAY: [Object],
                 SECONDS_PER_HOUR: [Object],
                 SECONDS_PER_MINUTE: [Object],
                 OFFSET19700101: [Object],
                 DOW_MON: [Object],
                 DOW_TUE: [Object],
                 DOW_WED: [Object],
                 DOW_THU: [Object],
                 DOW_FRI: [Object],
                 DOW_SAT: [Object],
                 DOW_SUN: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BokkyPooBahsDateTimeLibrary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol' },
           Definitions:
            { projectGraph: [Circular],
              name: 'Definitions',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs:
               { IPS: [Object],
                 ContractState: [Object],
                 ContractEvent: [Object],
                 ProtoEvent: [Object],
                 ContractTerms: [Object] },
              enums:
               { P: [Object],
                 S: [Object],
                 EventType: [Object],
                 Calendar: [Object],
                 BusinessDayConvention: [Object],
                 ClearingHouse: [Object],
                 ContractRole: [Object],
                 ContractStatus: [Object],
                 ContractType: [Object],
                 CyclePointOfInterestPayment: [Object],
                 CyclePointOfRateReset: [Object],
                 CycleTriggerOfOptionality: [Object],
                 DayCountConvention: [Object],
                 EndOfMonthConvention: [Object],
                 EventLevel: [Object],
                 FeeBasis: [Object],
                 InterestCalculationBase: [Object],
                 MarketObjectCodeOfRateReset: [Object],
                 ObjectCodeOfPrepaymentModel: [Object],
                 OptionExecutionType: [Object],
                 OptionStrikeDriver: [Object],
                 OptionType: [Object],
                 PenaltyType: [Object],
                 PrepaymentEffect: [Object],
                 ScalingEffect: [Object],
                 Seniority: [Object],
                 Unit: [Object] },
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Definitions',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
           Utils:
            { projectGraph: [Circular],
              name: 'Utils',
              kind: 'contract',
              isAbstract: false,
              functions:
               { getTimestampPlusPeriod: [Array],
                 sortProtoEventSchedule: [Array],
                 quickSortProtoEventSchedule: [Array],
                 isInPeriod: [Array] },
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies:
               { BokkyPooBahsDateTimeLibrary: [Object], Definitions: [Object] },
              inheritsFrom: { Definitions: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Utils',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Utils.sol' },
           EndOfMonthConvention:
            { projectGraph: [Circular],
              name: 'EndOfMonthConvention',
              kind: 'contract',
              isAbstract: false,
              functions:
               { getEndOfMonthConvention: [Array],
                 shiftEndOfMonth: [Array],
                 shiftSameDay: [Array] },
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies:
               { BokkyPooBahsDateTimeLibrary: [Object], Definitions: [Object] },
              inheritsFrom: { Definitions: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'EndOfMonthConvention',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/EndOfMonthConvention.sol' } },
        inheritsFrom:
         { Definitions:
            { contract:
               { projectGraph: [Circular],
                 name: 'Definitions',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: [Object],
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
              parameters: [],
              level: 1 },
           Utils:
            { contract:
               { projectGraph: [Circular],
                 name: 'Utils',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Utils.sol' },
              parameters: [],
              level: 0 },
           EndOfMonthConvention:
            { contract:
               { projectGraph: [Circular],
                 name: 'EndOfMonthConvention',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/EndOfMonthConvention.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Schedule',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'getNextCycleDate',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'computeDatesFromCycleSegment',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 },
              end: { line: 104, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Schedule.sol' },
     Utils:
      { projectGraph: [Circular],
        name: 'Utils',
        kind: 'contract',
        isAbstract: false,
        functions:
         { getTimestampPlusPeriod:
            [ { name: 'getTimestampPlusPeriod',
                signature: 'getTimestampPlusPeriod(Definitions.IPS,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sortProtoEventSchedule:
            [ { name: 'sortProtoEventSchedule',
                signature:
                 'sortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           quickSortProtoEventSchedule:
            [ { name: 'quickSortProtoEventSchedule',
                signature:
                 'quickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isInPeriod:
            [ { name: 'isInPeriod',
                signature: 'isInPeriod(uint256,uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { INT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MIN',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           INT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MIN',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOUBLE_NULL:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOUBLE_NULL',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PRECISION:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PRECISION',
              isArray: false,
              initialValue: 18,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_CYCLE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_CYCLE_SIZE',
              isArray: false,
              initialValue: 16,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_EVENT_SCHEDULE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_EVENT_SCHEDULE_SIZE',
              isArray: false,
              initialValue: 64,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { BokkyPooBahsDateTimeLibrary:
            { projectGraph: [Circular],
              name: 'BokkyPooBahsDateTimeLibrary',
              kind: 'library',
              isAbstract: false,
              functions:
               { _daysFromDate: [Array],
                 _daysToDate: [Array],
                 timestampFromDate: [Array],
                 timestampFromDateTime: [Array],
                 timestampToDate: [Array],
                 timestampToDateTime: [Array],
                 isValidDate: [Array],
                 isValidDateTime: [Array],
                 isLeapYear: [Array],
                 _isLeapYear: [Array],
                 isWeekDay: [Array],
                 isWeekEnd: [Array],
                 getDaysInMonth: [Array],
                 _getDaysInMonth: [Array],
                 getDayOfWeek: [Array],
                 getYear: [Array],
                 getMonth: [Array],
                 getDay: [Array],
                 getHour: [Array],
                 getMinute: [Array],
                 getSecond: [Array],
                 addYears: [Array],
                 addMonths: [Array],
                 addDays: [Array],
                 addHours: [Array],
                 addMinutes: [Array],
                 addSeconds: [Array],
                 subYears: [Array],
                 subMonths: [Array],
                 subDays: [Array],
                 subHours: [Array],
                 subMinutes: [Array],
                 subSeconds: [Array],
                 diffYears: [Array],
                 diffMonths: [Array],
                 diffDays: [Array],
                 diffHours: [Array],
                 diffMinutes: [Array],
                 diffSeconds: [Array] },
              modifiers: {},
              stateVariables:
               { SECONDS_PER_DAY: [Object],
                 SECONDS_PER_HOUR: [Object],
                 SECONDS_PER_MINUTE: [Object],
                 OFFSET19700101: [Object],
                 DOW_MON: [Object],
                 DOW_TUE: [Object],
                 DOW_WED: [Object],
                 DOW_THU: [Object],
                 DOW_FRI: [Object],
                 DOW_SAT: [Object],
                 DOW_SUN: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'BokkyPooBahsDateTimeLibrary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol' },
           Definitions:
            { projectGraph: [Circular],
              name: 'Definitions',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs:
               { IPS: [Object],
                 ContractState: [Object],
                 ContractEvent: [Object],
                 ProtoEvent: [Object],
                 ContractTerms: [Object] },
              enums:
               { P: [Object],
                 S: [Object],
                 EventType: [Object],
                 Calendar: [Object],
                 BusinessDayConvention: [Object],
                 ClearingHouse: [Object],
                 ContractRole: [Object],
                 ContractStatus: [Object],
                 ContractType: [Object],
                 CyclePointOfInterestPayment: [Object],
                 CyclePointOfRateReset: [Object],
                 CycleTriggerOfOptionality: [Object],
                 DayCountConvention: [Object],
                 EndOfMonthConvention: [Object],
                 EventLevel: [Object],
                 FeeBasis: [Object],
                 InterestCalculationBase: [Object],
                 MarketObjectCodeOfRateReset: [Object],
                 ObjectCodeOfPrepaymentModel: [Object],
                 OptionExecutionType: [Object],
                 OptionStrikeDriver: [Object],
                 OptionType: [Object],
                 PenaltyType: [Object],
                 PrepaymentEffect: [Object],
                 ScalingEffect: [Object],
                 Seniority: [Object],
                 Unit: [Object] },
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Definitions',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' } },
        inheritsFrom:
         { Definitions:
            { contract:
               { projectGraph: [Circular],
                 name: 'Definitions',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: [Object],
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Utils',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'getTimestampPlusPeriod',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sortProtoEventSchedule',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'quickSortProtoEventSchedule',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isInPeriod',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 110, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Utils.sol' },
     IEngine:
      { projectGraph: [Circular],
        name: 'IEngine',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { Definitions:
            { projectGraph: [Circular],
              name: 'Definitions',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs:
               { IPS: [Object],
                 ContractState: [Object],
                 ContractEvent: [Object],
                 ProtoEvent: [Object],
                 ContractTerms: [Object] },
              enums:
               { P: [Object],
                 S: [Object],
                 EventType: [Object],
                 Calendar: [Object],
                 BusinessDayConvention: [Object],
                 ClearingHouse: [Object],
                 ContractRole: [Object],
                 ContractStatus: [Object],
                 ContractType: [Object],
                 CyclePointOfInterestPayment: [Object],
                 CyclePointOfRateReset: [Object],
                 CycleTriggerOfOptionality: [Object],
                 DayCountConvention: [Object],
                 EndOfMonthConvention: [Object],
                 EventLevel: [Object],
                 FeeBasis: [Object],
                 InterestCalculationBase: [Object],
                 MarketObjectCodeOfRateReset: [Object],
                 ObjectCodeOfPrepaymentModel: [Object],
                 OptionExecutionType: [Object],
                 OptionStrikeDriver: [Object],
                 OptionType: [Object],
                 PenaltyType: [Object],
                 PrepaymentEffect: [Object],
                 ScalingEffect: [Object],
                 Seniority: [Object],
                 Unit: [Object] },
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Definitions',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' } },
        inheritsFrom:
         { Definitions:
            { contract:
               { projectGraph: [Circular],
                 name: 'Definitions',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: [Object],
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IEngine',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'computeInitialState',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'computeNextState',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'computeNextStateForProtoEvent',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'computeProtoEventScheduleSegment',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 78, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Engines/IEngine.sol' },
     PAMEngine:
      { projectGraph: [Circular],
        name: 'PAMEngine',
        kind: 'contract',
        isAbstract: false,
        functions:
         { computeInitialState:
            [ { name: 'computeInitialState',
                signature: 'computeInitialState(Definitions.ContractTerms)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           computeNextState:
            [ { name: 'computeNextState',
                signature:
                 'computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           computeNextStateForProtoEvent:
            [ { name: 'computeNextStateForProtoEvent',
                signature:
                 'computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           computeProtoEventScheduleSegment:
            [ { name: 'computeProtoEventScheduleSegment',
                signature:
                 'computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           initializeContractState:
            [ { name: 'initializeContractState',
                signature: 'initializeContractState(Definitions.ContractTerms)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           stateTransitionFunction:
            [ { name: 'stateTransitionFunction',
                signature:
                 'stateTransitionFunction(uint256,Definitions.ContractTerms,Definitions.ContractState,EventType)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           payoffFunction:
            [ { name: 'payoffFunction',
                signature:
                 'payoffFunction(uint256,Definitions.ContractTerms,Definitions.ContractState,EventType)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { INT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MIN',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           INT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MIN',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           UINT256_MAX:
            { functionsWrite: {},
              contract: [Circular],
              name: 'UINT256_MAX',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOUBLE_NULL:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOUBLE_NULL',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           PRECISION:
            { functionsWrite: {},
              contract: [Circular],
              name: 'PRECISION',
              isArray: false,
              initialValue: 18,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_CYCLE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_CYCLE_SIZE',
              isArray: false,
              initialValue: 16,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           MAX_EVENT_SCHEDULE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_EVENT_SCHEDULE_SIZE',
              isArray: false,
              initialValue: 64,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           SignedSafeMath:
            { projectGraph: [Circular],
              name: 'SignedSafeMath',
              kind: 'library',
              isAbstract: false,
              functions: { mul: [Array], div: [Array], sub: [Array], add: [Array] },
              modifiers: {},
              stateVariables: { INT256_MIN: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SignedSafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/SignedSafeMath.sol' },
           Core:
            { projectGraph: [Circular],
              name: 'Core',
              kind: 'contract',
              isAbstract: false,
              functions: { signum: [Array], getEpochOffset: [Array] },
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 INT256_MAX: [Object],
                 UINT256_MIN: [Object],
                 UINT256_MAX: [Object],
                 DOUBLE_NULL: [Object],
                 PRECISION: [Object],
                 MAX_CYCLE_SIZE: [Object],
                 MAX_EVENT_SCHEDULE_SIZE: [Object] },
              dependencies:
               { Definitions: [Object],
                 Utils: [Object],
                 Schedule: [Object],
                 BusinessDayConvention: [Object],
                 ContractDefaultConvention: [Object],
                 ContractRoleConvention: [Object],
                 DayCountConvention: [Object],
                 EndOfMonthConvention: [Object] },
              inheritsFrom:
               { Definitions: [Object],
                 Utils: [Object],
                 BusinessDayConvention: [Object],
                 ContractDefaultConvention: [Object],
                 ContractRoleConvention: [Object],
                 DayCountConvention: [Object],
                 EndOfMonthConvention: [Object],
                 Schedule: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Core',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Core.sol' },
           FloatMath:
            { projectGraph: [Circular],
              name: 'FloatMath',
              kind: 'library',
              isAbstract: false,
              functions: { floatMult: [Array], floatDiv: [Array] },
              modifiers: {},
              stateVariables:
               { INT256_MIN: [Object],
                 PRECISION: [Object],
                 MULTIPLICATOR: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'FloatMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/FloatMath.sol' },
           IEngine:
            { projectGraph: [Circular],
              name: 'IEngine',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { Definitions: [Object] },
              inheritsFrom: { Definitions: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IEngine',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Engines/IEngine.sol' } },
        inheritsFrom:
         { Core:
            { contract:
               { projectGraph: [Circular],
                 name: 'Core',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Core.sol' },
              parameters: [],
              level: 0 },
           Definitions:
            { contract:
               { projectGraph: [Circular],
                 name: 'Definitions',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: [Object],
                 enums: [Object],
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
              parameters: [],
              level: 1 },
           Utils:
            { contract:
               { projectGraph: [Circular],
                 name: 'Utils',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Utils.sol' },
              parameters: [],
              level: 2 },
           BusinessDayConvention:
            { contract:
               { projectGraph: [Circular],
                 name: 'BusinessDayConvention',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/BusinessDayConvention.sol' },
              parameters: [],
              level: 1 },
           ContractDefaultConvention:
            { contract:
               { projectGraph: [Circular],
                 name: 'ContractDefaultConvention',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/ContractDefaultConvention.sol' },
              parameters: [],
              level: 1 },
           ContractRoleConvention:
            { contract:
               { projectGraph: [Circular],
                 name: 'ContractRoleConvention',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/ContractRoleConvention.sol' },
              parameters: [],
              level: 1 },
           DayCountConvention:
            { contract:
               { projectGraph: [Circular],
                 name: 'DayCountConvention',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/DayCountConvention.sol' },
              parameters: [],
              level: 1 },
           EndOfMonthConvention:
            { contract:
               { projectGraph: [Circular],
                 name: 'EndOfMonthConvention',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Conventions/EndOfMonthConvention.sol' },
              parameters: [],
              level: 2 },
           Schedule:
            { contract:
               { projectGraph: [Circular],
                 name: 'Schedule',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Schedule.sol' },
              parameters: [],
              level: 1 },
           IEngine:
            { contract:
               { projectGraph: [Circular],
                 name: 'IEngine',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Engines/IEngine.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PAMEngine',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SignedSafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'FloatMath',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'computeInitialState',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'computeNextState',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'computeNextStateForProtoEvent',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'computeProtoEventScheduleSegment',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initializeContractState',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'stateTransitionFunction',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'payoffFunction',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 18, column: 0 },
              end: { line: 820, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Engines/PAMEngine.sol' },
     BokkyPooBahsDateTimeLibrary:
      { projectGraph: [Circular],
        name: 'BokkyPooBahsDateTimeLibrary',
        kind: 'library',
        isAbstract: false,
        functions:
         { _daysFromDate:
            [ { name: '_daysFromDate',
                signature: '_daysFromDate(uint,uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _daysToDate:
            [ { name: '_daysToDate',
                signature: '_daysToDate(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           timestampFromDate:
            [ { name: 'timestampFromDate',
                signature: 'timestampFromDate(uint,uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           timestampFromDateTime:
            [ { name: 'timestampFromDateTime',
                signature: 'timestampFromDateTime(uint,uint,uint,uint,uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           timestampToDate:
            [ { name: 'timestampToDate',
                signature: 'timestampToDate(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           timestampToDateTime:
            [ { name: 'timestampToDateTime',
                signature: 'timestampToDateTime(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isValidDate:
            [ { name: 'isValidDate',
                signature: 'isValidDate(uint,uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isValidDateTime:
            [ { name: 'isValidDateTime',
                signature: 'isValidDateTime(uint,uint,uint,uint,uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isLeapYear:
            [ { name: 'isLeapYear',
                signature: 'isLeapYear(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _isLeapYear:
            [ { name: '_isLeapYear',
                signature: '_isLeapYear(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isWeekDay:
            [ { name: 'isWeekDay',
                signature: 'isWeekDay(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isWeekEnd:
            [ { name: 'isWeekEnd',
                signature: 'isWeekEnd(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getDaysInMonth:
            [ { name: 'getDaysInMonth',
                signature: 'getDaysInMonth(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _getDaysInMonth:
            [ { name: '_getDaysInMonth',
                signature: '_getDaysInMonth(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getDayOfWeek:
            [ { name: 'getDayOfWeek',
                signature: 'getDayOfWeek(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getYear:
            [ { name: 'getYear',
                signature: 'getYear(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getMonth:
            [ { name: 'getMonth',
                signature: 'getMonth(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getDay:
            [ { name: 'getDay',
                signature: 'getDay(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getHour:
            [ { name: 'getHour',
                signature: 'getHour(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getMinute:
            [ { name: 'getMinute',
                signature: 'getMinute(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getSecond:
            [ { name: 'getSecond',
                signature: 'getSecond(uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addYears:
            [ { name: 'addYears',
                signature: 'addYears(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addMonths:
            [ { name: 'addMonths',
                signature: 'addMonths(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addDays:
            [ { name: 'addDays',
                signature: 'addDays(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addHours:
            [ { name: 'addHours',
                signature: 'addHours(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addMinutes:
            [ { name: 'addMinutes',
                signature: 'addMinutes(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addSeconds:
            [ { name: 'addSeconds',
                signature: 'addSeconds(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           subYears:
            [ { name: 'subYears',
                signature: 'subYears(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           subMonths:
            [ { name: 'subMonths',
                signature: 'subMonths(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           subDays:
            [ { name: 'subDays',
                signature: 'subDays(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           subHours:
            [ { name: 'subHours',
                signature: 'subHours(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           subMinutes:
            [ { name: 'subMinutes',
                signature: 'subMinutes(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           subSeconds:
            [ { name: 'subSeconds',
                signature: 'subSeconds(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           diffYears:
            [ { name: 'diffYears',
                signature: 'diffYears(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           diffMonths:
            [ { name: 'diffMonths',
                signature: 'diffMonths(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           diffDays:
            [ { name: 'diffDays',
                signature: 'diffDays(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           diffHours:
            [ { name: 'diffHours',
                signature: 'diffHours(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           diffMinutes:
            [ { name: 'diffMinutes',
                signature: 'diffMinutes(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           diffSeconds:
            [ { name: 'diffSeconds',
                signature: 'diffSeconds(uint,uint)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { SECONDS_PER_DAY:
            { functionsWrite: {},
              contract: [Circular],
              name: 'SECONDS_PER_DAY',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           SECONDS_PER_HOUR:
            { functionsWrite: {},
              contract: [Circular],
              name: 'SECONDS_PER_HOUR',
              isArray: false,
              initialValue: undefined,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           SECONDS_PER_MINUTE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'SECONDS_PER_MINUTE',
              isArray: false,
              initialValue: 60,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           OFFSET19700101:
            { functionsWrite: {},
              contract: [Circular],
              name: 'OFFSET19700101',
              isArray: false,
              initialValue: 2440588,
              type: 'int',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOW_MON:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOW_MON',
              isArray: false,
              initialValue: 1,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOW_TUE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOW_TUE',
              isArray: false,
              initialValue: 2,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOW_WED:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOW_WED',
              isArray: false,
              initialValue: 3,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOW_THU:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOW_THU',
              isArray: false,
              initialValue: 4,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOW_FRI:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOW_FRI',
              isArray: false,
              initialValue: 5,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOW_SAT:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOW_SAT',
              isArray: false,
              initialValue: 6,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOW_SUN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOW_SUN',
              isArray: false,
              initialValue: 7,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'BokkyPooBahsDateTimeLibrary',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_daysFromDate',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_daysToDate',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'timestampFromDate',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'timestampFromDateTime',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'timestampToDate',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'timestampToDateTime',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isValidDate',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isValidDateTime',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isLeapYear',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isLeapYear',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isWeekDay',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isWeekEnd',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getDaysInMonth',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_getDaysInMonth',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getDayOfWeek',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getYear',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getMonth',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getDay',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getHour',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getMinute',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getSecond',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addYears',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addMonths',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addDays',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addHours',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addMinutes',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addSeconds',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'subYears',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'subMonths',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'subDays',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'subHours',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'subMinutes',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'subSeconds',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'diffYears',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'diffMonths',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'diffDays',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'diffHours',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'diffMinutes',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'diffSeconds',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 28, column: 0 },
              end: { line: 336, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol' },
     Roles:
      { projectGraph: [Circular],
        name: 'Roles',
        kind: 'library',
        isAbstract: false,
        functions:
         { add:
            [ { name: 'add',
                signature: 'add(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           remove:
            [ { name: 'remove',
                signature: 'remove(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           has:
            [ { name: 'has',
                signature: 'has(Roles.Role,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs:
         { Role:
            { name: 'Role', contract: [Circular], parameters: [ [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Roles',
           baseContracts: [],
           subNodes:
            [ { type: 'StructDefinition',
                name: 'Role',
                members: [Array],
                loc: [Object],
                parentName: 'Roles' },
              { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'remove',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'has',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 36, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' },
     CapperRole:
      { projectGraph: [Circular],
        name: 'CapperRole',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isCapper:
            [ { name: 'isCapper',
                signature: 'isCapper(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addCapper:
            [ { name: 'addCapper',
                signature: 'addCapper(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceCapper:
            [ { name: 'renounceCapper',
                signature: 'renounceCapper()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addCapper:
            [ { name: '_addCapper',
                signature: '_addCapper(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeCapper:
            [ { name: '_removeCapper',
                signature: '_removeCapper(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyCapper:
            { name: 'onlyCapper',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyCapper',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _cappers:
            { functionsWrite: {},
              contract: [Circular],
              name: '_cappers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CapperRole',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'CapperAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'CapperRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyCapper',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isCapper',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addCapper',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceCapper',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addCapper',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeCapper',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/CapperRole.sol' },
     MinterRole:
      { projectGraph: [Circular],
        name: 'MinterRole',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isMinter:
            [ { name: 'isMinter',
                signature: 'isMinter(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addMinter:
            [ { name: 'addMinter',
                signature: 'addMinter(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceMinter:
            [ { name: 'renounceMinter',
                signature: 'renounceMinter()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addMinter:
            [ { name: '_addMinter',
                signature: '_addMinter(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeMinter:
            [ { name: '_removeMinter',
                signature: '_removeMinter(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _minters:
            { functionsWrite: {},
              contract: [Circular],
              name: '_minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MinterRole',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'MinterAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'MinterRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyMinter',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isMinter',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceMinter',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeMinter',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
     PauserRole:
      { projectGraph: [Circular],
        name: 'PauserRole',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isPauser:
            [ { name: 'isPauser',
                signature: 'isPauser(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addPauser:
            [ { name: 'addPauser',
                signature: 'addPauser(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renouncePauser:
            [ { name: 'renouncePauser',
                signature: 'renouncePauser()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addPauser:
            [ { name: '_addPauser',
                signature: '_addPauser(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removePauser:
            [ { name: '_removePauser',
                signature: '_removePauser(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: '_pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PauserRole',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PauserAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PauserRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyPauser',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isPauser',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addPauser',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renouncePauser',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addPauser',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removePauser',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol' },
     SignerRole:
      { projectGraph: [Circular],
        name: 'SignerRole',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isSigner:
            [ { name: 'isSigner',
                signature: 'isSigner(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addSigner:
            [ { name: 'addSigner',
                signature: 'addSigner(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceSigner:
            [ { name: 'renounceSigner',
                signature: 'renounceSigner()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addSigner:
            [ { name: '_addSigner',
                signature: '_addSigner(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeSigner:
            [ { name: '_removeSigner',
                signature: '_removeSigner(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlySigner:
            { name: 'onlySigner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlySigner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _signers:
            { functionsWrite: {},
              contract: [Circular],
              name: '_signers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SignerRole',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'SignerAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'SignerRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlySigner',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isSigner',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addSigner',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceSigner',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addSigner',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeSigner',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/SignerRole.sol' },
     WhitelistAdminRole:
      { projectGraph: [Circular],
        name: 'WhitelistAdminRole',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isWhitelistAdmin:
            [ { name: 'isWhitelistAdmin',
                signature: 'isWhitelistAdmin(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addWhitelistAdmin:
            [ { name: 'addWhitelistAdmin',
                signature: 'addWhitelistAdmin(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceWhitelistAdmin:
            [ { name: 'renounceWhitelistAdmin',
                signature: 'renounceWhitelistAdmin()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addWhitelistAdmin:
            [ { name: '_addWhitelistAdmin',
                signature: '_addWhitelistAdmin(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeWhitelistAdmin:
            [ { name: '_removeWhitelistAdmin',
                signature: '_removeWhitelistAdmin(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhitelistAdmin:
            { name: 'onlyWhitelistAdmin',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhitelistAdmin',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _whitelistAdmins:
            { functionsWrite: {},
              contract: [Circular],
              name: '_whitelistAdmins',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'WhitelistAdminRole',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'WhitelistAdminAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'WhitelistAdminRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyWhitelistAdmin',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isWhitelistAdmin',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addWhitelistAdmin',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceWhitelistAdmin',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addWhitelistAdmin',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeWhitelistAdmin',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 47, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol' },
     WhitelistedRole:
      { projectGraph: [Circular],
        name: 'WhitelistedRole',
        kind: 'contract',
        isAbstract: false,
        functions:
         { isWhitelisted:
            [ { name: 'isWhitelisted',
                signature: 'isWhitelisted(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addWhitelisted:
            [ { name: 'addWhitelisted',
                signature: 'addWhitelisted(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           removeWhitelisted:
            [ { name: 'removeWhitelisted',
                signature: 'removeWhitelisted(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           renounceWhitelisted:
            [ { name: 'renounceWhitelisted',
                signature: 'renounceWhitelisted()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _addWhitelisted:
            [ { name: '_addWhitelisted',
                signature: '_addWhitelisted(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeWhitelisted:
            [ { name: '_removeWhitelisted',
                signature: '_removeWhitelisted(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhitelisted:
            { name: 'onlyWhitelisted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhitelisted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyWhitelistAdmin:
            { name: 'onlyWhitelistAdmin',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhitelistAdmin',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _whitelisteds:
            { functionsWrite: {},
              contract: [Circular],
              name: '_whitelisteds',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _whitelistAdmins:
            { functionsWrite: {},
              contract: [Circular],
              name: '_whitelistAdmins',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Roles:
            { projectGraph: [Circular],
              name: 'Roles',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array], remove: [Array], has: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: { Role: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Roles',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' },
           WhitelistAdminRole:
            { projectGraph: [Circular],
              name: 'WhitelistAdminRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isWhitelistAdmin: [Array],
                 addWhitelistAdmin: [Array],
                 renounceWhitelistAdmin: [Array],
                 _addWhitelistAdmin: [Array],
                 _removeWhitelistAdmin: [Array] },
              modifiers: { onlyWhitelistAdmin: [Object] },
              stateVariables: { _whitelistAdmins: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'WhitelistAdminRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol' } },
        inheritsFrom:
         { WhitelistAdminRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'WhitelistAdminRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'WhitelistedRole',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Roles',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'WhitelistedAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'WhitelistedRemoved',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyWhitelisted',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isWhitelisted',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addWhitelisted',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeWhitelisted',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceWhitelisted',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addWhitelisted',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeWhitelisted',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 50, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol' },
     Crowdsale:
      { projectGraph: [Circular],
        name: 'Crowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,address,IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           token:
            [ { name: 'token',
                signature: 'token()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           wallet:
            [ { name: 'wallet',
                signature: 'wallet()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           rate:
            [ { name: 'rate',
                signature: 'rate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           weiRaised:
            [ { name: 'weiRaised',
                signature: 'weiRaised()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           buyTokens:
            [ { name: 'buyTokens',
                signature: 'buyTokens(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _postValidatePurchase:
            [ { name: '_postValidatePurchase',
                signature: '_postValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _processPurchase:
            [ { name: '_processPurchase',
                signature: '_processPurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _updatePurchasingState:
            [ { name: '_updatePurchasingState',
                signature: '_updatePurchasingState(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _getTokenAmount:
            [ { name: '_getTokenAmount',
                signature: '_getTokenAmount(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _forwardFunds:
            [ { name: '_forwardFunds',
                signature: '_forwardFunds()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _token:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: { buyTokens: [Array] },
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _guardCounter:
            { functionsWrite: {},
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array],
                 callOptionalReturn: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object], Address: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
           ReentrancyGuard:
            { projectGraph: [Circular],
              name: 'ReentrancyGuard',
              kind: 'contract',
              isAbstract: true,
              functions: { constructor: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables: { _guardCounter: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ReentrancyGuard',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' } },
        inheritsFrom:
         { ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Crowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TokensPurchased',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'token',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'wallet',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'rate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'weiRaised',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'buyTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_postValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_processPurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updatePurchasingState',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_getTokenAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_forwardFunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 20, column: 0 },
              end: { line: 198, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
     FinalizableCrowdsale:
      { projectGraph: [Circular],
        name: 'FinalizableCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           finalized:
            [ { name: 'finalized',
                signature: 'finalized()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           finalize:
            [ { name: 'finalize',
                signature: 'finalize()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _finalization:
            [ { name: '_finalization',
                signature: '_finalization()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _finalized:
            { functionsWrite: { constructor: [Array], finalize: [Array] },
              contract: [Circular],
              name: '_finalized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 openingTime: [Array],
                 closingTime: [Array],
                 isOpen: [Array],
                 hasClosed: [Array],
                 _preValidatePurchase: [Array],
                 _extendTime: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _openingTime: [Object], _closingTime: [Object] },
              dependencies: { SafeMath: [Object], Crowdsale: [Object] },
              inheritsFrom: { Crowdsale: [Object], ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' } },
        inheritsFrom:
         { TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'FinalizableCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'CrowdsaleFinalized',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalized',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalize',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_finalization',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 51, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
     PostDeliveryCrowdsale:
      { projectGraph: [Circular],
        name: 'PostDeliveryCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           withdrawTokens:
            [ { name: 'withdrawTokens',
                signature: 'withdrawTokens(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _processPurchase:
            [ { name: '_processPurchase',
                signature: '_processPurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _vault:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_vault',
              isArray: false,
              initialValue: null,
              type: '__unstable__TokenVault',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 openingTime: [Array],
                 closingTime: [Array],
                 isOpen: [Array],
                 hasClosed: [Array],
                 _preValidatePurchase: [Array],
                 _extendTime: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _openingTime: [Object], _closingTime: [Object] },
              dependencies: { SafeMath: [Object], Crowdsale: [Object] },
              inheritsFrom: { Crowdsale: [Object], ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Secondary:
            { projectGraph: [Circular],
              name: 'Secondary',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 primary: [Array],
                 transferPrimary: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _primary: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Secondary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom:
         { TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PostDeliveryCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_processPurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 53, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol' },
     __unstable__TokenVault:
      { projectGraph: [Circular],
        name: '__unstable__TokenVault',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transfer:
            [ { name: 'transfer',
                signature: 'transfer(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _primary:
            { functionsWrite: {},
              contract: [Circular],
              name: '_primary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 openingTime: [Array],
                 closingTime: [Array],
                 isOpen: [Array],
                 hasClosed: [Array],
                 _preValidatePurchase: [Array],
                 _extendTime: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _openingTime: [Object], _closingTime: [Object] },
              dependencies: { SafeMath: [Object], Crowdsale: [Object] },
              inheritsFrom: { Crowdsale: [Object], ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Secondary:
            { projectGraph: [Circular],
              name: 'Secondary',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 primary: [Array],
                 transferPrimary: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _primary: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Secondary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom:
         { Secondary:
            { contract:
               { projectGraph: [Circular],
                 name: 'Secondary',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: '__unstable__TokenVault',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 61, column: 0 }, end: { line: 65, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol' },
     RefundableCrowdsale:
      { projectGraph: [Circular],
        name: 'RefundableCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           goal:
            [ { name: 'goal',
                signature: 'goal()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           claimRefund:
            [ { name: 'claimRefund',
                signature: 'claimRefund(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           goalReached:
            [ { name: 'goalReached',
                signature: 'goalReached()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _finalization:
            [ { name: '_finalization',
                signature: '_finalization()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _forwardFunds:
            [ { name: '_forwardFunds',
                signature: '_forwardFunds()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _goal:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_goal',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _escrow:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_escrow',
              isArray: false,
              initialValue: null,
              type: 'RefundEscrow',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _finalized:
            { functionsWrite: {},
              contract: [Circular],
              name: '_finalized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _openingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _closingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _guardCounter:
            { functionsWrite: {},
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           FinalizableCrowdsale:
            { projectGraph: [Circular],
              name: 'FinalizableCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 finalized: [Array],
                 finalize: [Array],
                 _finalization: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _finalized: [Object] },
              dependencies: { SafeMath: [Object], TimedCrowdsale: [Object] },
              inheritsFrom:
               { TimedCrowdsale: [Object],
                 Crowdsale: [Object],
                 ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'FinalizableCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
           RefundEscrow:
            { projectGraph: [Circular],
              name: 'RefundEscrow',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 state: [Array],
                 beneficiary: [Array],
                 deposit: [Array],
                 close: [Array],
                 enableRefunds: [Array],
                 beneficiaryWithdraw: [Array],
                 withdrawalAllowed: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables:
               { _state: [Object],
                 _beneficiary: [Object],
                 _primary: [Object],
                 _deposits: [Object] },
              dependencies: { ConditionalEscrow: [Object] },
              inheritsFrom:
               { ConditionalEscrow: [Object],
                 Escrow: [Object],
                 Secondary: [Object] },
              structs: {},
              enums: { State: [Object] },
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RefundEscrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/escrow/RefundEscrow.sol' } },
        inheritsFrom:
         { FinalizableCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'FinalizableCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
              parameters: [],
              level: 0 },
           TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 2 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 3 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RefundableCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'goal',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'claimRefund',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'goalReached',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_finalization',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_forwardFunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 17, column: 0 }, end: { line: 82, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol' },
     RefundablePostDeliveryCrowdsale:
      { projectGraph: [Circular],
        name: 'RefundablePostDeliveryCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { withdrawTokens:
            [ { name: 'withdrawTokens',
                signature: 'withdrawTokens(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _finalized:
            { functionsWrite: {},
              contract: [Circular],
              name: '_finalized',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _vault:
            { functionsWrite: {},
              contract: [Circular],
              name: '_vault',
              isArray: false,
              initialValue: null,
              type: '__unstable__TokenVault',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _goal:
            { functionsWrite: {},
              contract: [Circular],
              name: '_goal',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _escrow:
            { functionsWrite: {},
              contract: [Circular],
              name: '_escrow',
              isArray: false,
              initialValue: null,
              type: 'RefundEscrow',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _openingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _closingTime:
            { functionsWrite: {},
              contract: [Circular],
              name: '_closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _guardCounter:
            { functionsWrite: {},
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { RefundableCrowdsale:
            { projectGraph: [Circular],
              name: 'RefundableCrowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 goal: [Array],
                 claimRefund: [Array],
                 goalReached: [Array],
                 _finalization: [Array],
                 _forwardFunds: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables:
               { _goal: [Object],
                 _escrow: [Object],
                 _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _finalized: [Object],
                 _openingTime: [Object],
                 _closingTime: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { SafeMath: [Object],
                 FinalizableCrowdsale: [Object],
                 RefundEscrow: [Object] },
              inheritsFrom:
               { FinalizableCrowdsale: [Object],
                 TimedCrowdsale: [Object],
                 Crowdsale: [Object],
                 ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'RefundableCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol' },
           PostDeliveryCrowdsale:
            { projectGraph: [Circular],
              name: 'PostDeliveryCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 withdrawTokens: [Array],
                 balanceOf: [Array],
                 _processPurchase: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _balances: [Object], _vault: [Object] },
              dependencies:
               { TimedCrowdsale: [Object],
                 SafeMath: [Object],
                 Secondary: [Object],
                 IERC20: [Object] },
              inheritsFrom:
               { TimedCrowdsale: [Object],
                 Crowdsale: [Object],
                 ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'PostDeliveryCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol' },
           __unstable__TokenVault:
            { projectGraph: [Circular],
              name: '__unstable__TokenVault',
              kind: 'contract',
              isAbstract: false,
              functions: { transfer: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _primary: [Object] },
              dependencies:
               { TimedCrowdsale: [Object],
                 SafeMath: [Object],
                 Secondary: [Object],
                 IERC20: [Object] },
              inheritsFrom: { Secondary: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: '__unstable__TokenVault',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol' } },
        inheritsFrom:
         { RefundableCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'RefundableCrowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol' },
              parameters: [],
              level: 0 },
           FinalizableCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'FinalizableCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol' },
              parameters: [],
              level: 1 },
           TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 2 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 3 },
           PostDeliveryCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'PostDeliveryCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RefundablePostDeliveryCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'withdrawTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 20, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/distribution/RefundablePostDeliveryCrowdsale.sol' },
     AllowanceCrowdsale:
      { projectGraph: [Circular],
        name: 'AllowanceCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           tokenWallet:
            [ { name: 'tokenWallet',
                signature: 'tokenWallet()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           remainingTokens:
            [ { name: 'remainingTokens',
                signature: 'remainingTokens()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _tokenWallet:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_tokenWallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array],
                 callOptionalReturn: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object], Address: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Math:
            { projectGraph: [Circular],
              name: 'Math',
              kind: 'library',
              isAbstract: false,
              functions: { max: [Array], min: [Array], average: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Math',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/Math.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'AllowanceCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenWallet',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'remainingTokens',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 51, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/emission/AllowanceCrowdsale.sol' },
     MintedCrowdsale:
      { projectGraph: [Circular],
        name: 'MintedCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { _deliverTokens:
            [ { name: '_deliverTokens',
                signature: '_deliverTokens(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _guardCounter:
            { functionsWrite: {},
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           ERC20Mintable:
            { projectGraph: [Circular],
              name: 'ERC20Mintable',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables:
               { _minters: [Object],
                 _balances: [Object],
                 _allowances: [Object],
                 _totalSupply: [Object] },
              dependencies: { ERC20: [Object], MinterRole: [Object] },
              inheritsFrom: { ERC20: [Object], IERC20: [Object], MinterRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Mintable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MintedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: '_deliverTokens',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 24, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol' },
     IncreasingPriceCrowdsale:
      { projectGraph: [Circular],
        name: 'IncreasingPriceCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           rate:
            [ { name: 'rate',
                signature: 'rate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           initialRate:
            [ { name: 'initialRate',
                signature: 'initialRate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           finalRate:
            [ { name: 'finalRate',
                signature: 'finalRate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getCurrentRate:
            [ { name: 'getCurrentRate',
                signature: 'getCurrentRate()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _getTokenAmount:
            [ { name: '_getTokenAmount',
                signature: '_getTokenAmount(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _initialRate:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_initialRate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _finalRate:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_finalRate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { TimedCrowdsale:
            { projectGraph: [Circular],
              name: 'TimedCrowdsale',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 openingTime: [Array],
                 closingTime: [Array],
                 isOpen: [Array],
                 hasClosed: [Array],
                 _preValidatePurchase: [Array],
                 _extendTime: [Array] },
              modifiers: { onlyWhileOpen: [Object], nonReentrant: [Object] },
              stateVariables: { _openingTime: [Object], _closingTime: [Object] },
              dependencies: { SafeMath: [Object], Crowdsale: [Object] },
              inheritsFrom: { Crowdsale: [Object], ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'TimedCrowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { TimedCrowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'TimedCrowdsale',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
              parameters: [],
              level: 0 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 1 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IncreasingPriceCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'rate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'initialRate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'finalRate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getCurrentRate',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_getTokenAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 79, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/price/IncreasingPriceCrowdsale.sol' },
     CappedCrowdsale:
      { projectGraph: [Circular],
        name: 'CappedCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           cap:
            [ { name: 'cap',
                signature: 'cap()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           capReached:
            [ { name: 'capReached',
                signature: 'capReached()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _cap:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_cap',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'CappedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'cap',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'capReached',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 48, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol' },
     IndividuallyCappedCrowdsale:
      { projectGraph: [Circular],
        name: 'IndividuallyCappedCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { setCap:
            [ { name: 'setCap',
                signature: 'setCap(address,uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getCap:
            [ { name: 'getCap',
                signature: 'getCap(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getContribution:
            [ { name: 'getContribution',
                signature: 'getContribution(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _updatePurchasingState:
            [ { name: '_updatePurchasingState',
                signature: '_updatePurchasingState(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyCapper:
            { name: 'onlyCapper',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyCapper',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _contributions:
            { functionsWrite: {},
              contract: [Circular],
              name: '_contributions',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _caps:
            { functionsWrite: {},
              contract: [Circular],
              name: '_caps',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _cappers:
            { functionsWrite: {},
              contract: [Circular],
              name: '_cappers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _guardCounter:
            { functionsWrite: {},
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           CapperRole:
            { projectGraph: [Circular],
              name: 'CapperRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isCapper: [Array],
                 addCapper: [Array],
                 renounceCapper: [Array],
                 _addCapper: [Array],
                 _removeCapper: [Array] },
              modifiers: { onlyCapper: [Object] },
              stateVariables: { _cappers: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'CapperRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/CapperRole.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 },
           CapperRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'CapperRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/CapperRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IndividuallyCappedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setCap',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getCap',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getContribution',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updatePurchasingState',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 64, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/IndividuallyCappedCrowdsale.sol' },
     PausableCrowdsale:
      { projectGraph: [Circular],
        name: 'PausableCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: '_pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _guardCounter:
            { functionsWrite: {},
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           Pausable:
            { projectGraph: [Circular],
              name: 'Pausable',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 paused: [Array],
                 pause: [Array],
                 unpause: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 whenPaused: [Object],
                 onlyPauser: [Object] },
              stateVariables: { _paused: [Object] },
              dependencies: { PauserRole: [Object] },
              inheritsFrom: { PauserRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol' },
              parameters: [],
              level: 0 },
           PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PausableCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 21, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/PausableCrowdsale.sol' },
     TimedCrowdsale:
      { projectGraph: [Circular],
        name: 'TimedCrowdsale',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           openingTime:
            [ { name: 'openingTime',
                signature: 'openingTime()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           closingTime:
            [ { name: 'closingTime',
                signature: 'closingTime()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isOpen:
            [ { name: 'isOpen',
                signature: 'isOpen()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           hasClosed:
            [ { name: 'hasClosed',
                signature: 'hasClosed()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _extendTime:
            [ { name: '_extendTime',
                signature: '_extendTime(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhileOpen:
            { name: 'onlyWhileOpen',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhileOpen',
                 parameters: null,
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _openingTime:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_openingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _closingTime:
            { functionsWrite: { constructor: [Array], _extendTime: [Array] },
              contract: [Circular],
              name: '_closingTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' } },
        inheritsFrom:
         { Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TimedCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TimedCrowdsaleExtended',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyWhileOpen',
                parameters: null,
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'openingTime',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'closingTime',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isOpen',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'hasClosed',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_extendTime',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 98, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol' },
     WhitelistCrowdsale:
      { projectGraph: [Circular],
        name: 'WhitelistCrowdsale',
        kind: 'contract',
        isAbstract: false,
        functions:
         { _preValidatePurchase:
            [ { name: '_preValidatePurchase',
                signature: '_preValidatePurchase(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyWhitelisted:
            { name: 'onlyWhitelisted',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhitelisted',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyWhitelistAdmin:
            { name: 'onlyWhitelistAdmin',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyWhitelistAdmin',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _whitelistAdmins:
            { functionsWrite: {},
              contract: [Circular],
              name: '_whitelistAdmins',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _whitelisteds:
            { functionsWrite: {},
              contract: [Circular],
              name: '_whitelisteds',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _token:
            { functionsWrite: {},
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _wallet:
            { functionsWrite: {},
              contract: [Circular],
              name: '_wallet',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _rate:
            { functionsWrite: {},
              contract: [Circular],
              name: '_rate',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _weiRaised:
            { functionsWrite: {},
              contract: [Circular],
              name: '_weiRaised',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _guardCounter:
            { functionsWrite: {},
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Crowdsale:
            { projectGraph: [Circular],
              name: 'Crowdsale',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 '': [Array],
                 token: [Array],
                 wallet: [Array],
                 rate: [Array],
                 weiRaised: [Array],
                 buyTokens: [Array],
                 _preValidatePurchase: [Array],
                 _postValidatePurchase: [Array],
                 _deliverTokens: [Array],
                 _processPurchase: [Array],
                 _updatePurchasingState: [Array],
                 _getTokenAmount: [Array],
                 _forwardFunds: [Array] },
              modifiers: { nonReentrant: [Object] },
              stateVariables:
               { _token: [Object],
                 _wallet: [Object],
                 _rate: [Object],
                 _weiRaised: [Object],
                 _guardCounter: [Object] },
              dependencies:
               { IERC20: [Object],
                 SafeMath: [Object],
                 SafeERC20: [Object],
                 ReentrancyGuard: [Object] },
              inheritsFrom: { ReentrancyGuard: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Crowdsale',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
           WhitelistedRole:
            { projectGraph: [Circular],
              name: 'WhitelistedRole',
              kind: 'contract',
              isAbstract: false,
              functions:
               { isWhitelisted: [Array],
                 addWhitelisted: [Array],
                 removeWhitelisted: [Array],
                 renounceWhitelisted: [Array],
                 _addWhitelisted: [Array],
                 _removeWhitelisted: [Array] },
              modifiers: { onlyWhitelisted: [Object], onlyWhitelistAdmin: [Object] },
              stateVariables: { _whitelisteds: [Object], _whitelistAdmins: [Object] },
              dependencies: { Roles: [Object], WhitelistAdminRole: [Object] },
              inheritsFrom: { WhitelistAdminRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'WhitelistedRole',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol' } },
        inheritsFrom:
         { WhitelistedRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'WhitelistedRole',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol' },
              parameters: [],
              level: 0 },
           WhitelistAdminRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'WhitelistAdminRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol' },
              parameters: [],
              level: 1 },
           Crowdsale:
            { contract:
               { projectGraph: [Circular],
                 name: 'Crowdsale',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol' },
              parameters: [],
              level: 0 },
           ReentrancyGuard:
            { contract:
               { projectGraph: [Circular],
                 name: 'ReentrancyGuard',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'WhitelistCrowdsale',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: '_preValidatePurchase',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 21, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/crowdsale/validation/WhitelistCrowdsale.sol' },
     ECDSA:
      { projectGraph: [Circular],
        name: 'ECDSA',
        kind: 'library',
        isAbstract: false,
        functions:
         { recover:
            [ { name: 'recover',
                signature: 'recover(bytes32,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           toEthSignedMessageHash:
            [ { name: 'toEthSignedMessageHash',
                signature: 'toEthSignedMessageHash(bytes32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ECDSA',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'recover',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toEthSignedMessageHash',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 82, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/cryptography/ECDSA.sol' },
     MerkleProof:
      { projectGraph: [Circular],
        name: 'MerkleProof',
        kind: 'library',
        isAbstract: false,
        functions:
         { verify:
            [ { name: 'verify',
                signature: 'verify(bytes32[],bytes32,bytes32)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MerkleProof',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'verify',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 31, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/cryptography/MerkleProof.sol' },
     Counters:
      { projectGraph: [Circular],
        name: 'Counters',
        kind: 'library',
        isAbstract: false,
        functions:
         { current:
            [ { name: 'current',
                signature: 'current(Counters.Counter)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           increment:
            [ { name: 'increment',
                signature: 'increment(Counters.Counter)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decrement:
            [ { name: 'decrement',
                signature: 'decrement(Counters.Counter)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom: {},
        structs:
         { Counter:
            { name: 'Counter',
              contract: [Circular],
              parameters: [ [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Counters',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'Counter',
                members: [Array],
                loc: [Object],
                parentName: 'Counters' },
              { type: 'FunctionDefinition',
                name: 'current',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increment',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decrement',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 16, column: 0 }, end: { line: 37, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
     ERC20Metadata:
      { projectGraph: [Circular],
        name: 'ERC20Metadata',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           tokenURI:
            [ { name: 'tokenURI',
                signature: 'tokenURI()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _setTokenURI:
            [ { name: '_setTokenURI',
                signature: '_setTokenURI(string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _tokenURI:
            { functionsWrite: { _setTokenURI: [Array] },
              contract: [Circular],
              name: '_tokenURI',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Metadata',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_setTokenURI',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 24, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/ERC1046/ERC20Metadata.sol' },
     ERC20Migrator:
      { projectGraph: [Circular],
        name: 'ERC20Migrator',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           legacyToken:
            [ { name: 'legacyToken',
                signature: 'legacyToken()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           newToken:
            [ { name: 'newToken',
                signature: 'newToken()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           beginMigration:
            [ { name: 'beginMigration',
                signature: 'beginMigration(ERC20Mintable)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           migrate:
            [ { name: 'migrate',
                signature: 'migrate(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           migrateAll:
            [ { name: 'migrateAll',
                signature: 'migrateAll(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { _legacyToken:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_legacyToken',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _newToken:
            { functionsWrite: { beginMigration: [Array] },
              contract: [Circular],
              name: '_newToken',
              isArray: false,
              initialValue: null,
              type: 'ERC20Mintable',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           ERC20Mintable:
            { projectGraph: [Circular],
              name: 'ERC20Mintable',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables:
               { _minters: [Object],
                 _balances: [Object],
                 _allowances: [Object],
                 _totalSupply: [Object] },
              dependencies: { ERC20: [Object], MinterRole: [Object] },
              inheritsFrom: { ERC20: [Object], IERC20: [Object], MinterRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Mintable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' },
           SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array],
                 callOptionalReturn: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object], Address: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
           Math:
            { projectGraph: [Circular],
              name: 'Math',
              kind: 'library',
              isAbstract: false,
              functions: { max: [Array], min: [Array], average: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Math',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/Math.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Migrator',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'legacyToken',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'newToken',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beginMigration',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'migrate',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'migrateAll',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 34, column: 0 },
              end: { line: 102, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/ERC20Migrator.sol' },
     ERC20Snapshot:
      { projectGraph: [Circular],
        name: 'ERC20Snapshot',
        kind: 'contract',
        isAbstract: false,
        functions:
         { snapshot:
            [ { name: 'snapshot',
                signature: 'snapshot()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOfAt:
            [ { name: 'balanceOfAt',
                signature: 'balanceOfAt(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalSupplyAt:
            [ { name: 'totalSupplyAt',
                signature: 'totalSupplyAt(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _transfer:
            [ { name: '_transfer',
                signature: '_transfer(address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _valueAt:
            [ { name: '_valueAt',
                signature: '_valueAt(uint256,ERC20Snapshot.Snapshots)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _updateAccountSnapshot:
            [ { name: '_updateAccountSnapshot',
                signature: '_updateAccountSnapshot(address)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _updateTotalSupplySnapshot:
            [ { name: '_updateTotalSupplySnapshot',
                signature: '_updateTotalSupplySnapshot()',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _updateSnapshot:
            [ { name: '_updateSnapshot',
                signature: '_updateSnapshot(ERC20Snapshot.Snapshots,uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _lastSnapshotId:
            [ { name: '_lastSnapshotId',
                signature: '_lastSnapshotId(uint256[])',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _accountBalanceSnapshots:
            { functionsWrite: {},
              contract: [Circular],
              name: '_accountBalanceSnapshots',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>ERC20Snapshot.Snapshots)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupplySnapshots:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupplySnapshots',
              isArray: false,
              initialValue: null,
              type: 'ERC20Snapshot.Snapshots',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _currentSnapshotId:
            { functionsWrite: {},
              contract: [Circular],
              name: '_currentSnapshotId',
              isArray: false,
              initialValue: null,
              type: 'Counters.Counter',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Arrays:
            { projectGraph: [Circular],
              name: 'Arrays',
              kind: 'library',
              isAbstract: false,
              functions: { findUpperBound: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { Math: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Arrays',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/Arrays.sol' },
           Counters:
            { projectGraph: [Circular],
              name: 'Counters',
              kind: 'library',
              isAbstract: false,
              functions: { current: [Array], increment: [Array], decrement: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { SafeMath: [Object] },
              inheritsFrom: {},
              structs: { Counter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Counters',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
           ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 transfer: [Array],
                 allowance: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _approve: [Array],
                 _burnFrom: [Array] },
              modifiers: {},
              stateVariables:
               { _balances: [Object],
                 _allowances: [Object],
                 _totalSupply: [Object] },
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 } },
        structs:
         { Snapshots:
            { name: 'Snapshots',
              contract: [Circular],
              parameters: [ [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Snapshot',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Arrays',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Counters',
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'Snapshots',
                members: [Array],
                loc: [Object],
                parentName: 'ERC20Snapshot' },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Snapshot',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'snapshot',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOfAt',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupplyAt',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_transfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_valueAt',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updateAccountSnapshot',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updateTotalSupplySnapshot',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_updateSnapshot',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_lastSnapshotId',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 21, column: 0 },
              end: { line: 140, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/ERC20Snapshot.sol' },
     SignatureBouncer:
      { projectGraph: [Circular],
        name: 'SignatureBouncer',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _isValidSignature:
            [ { name: '_isValidSignature',
                signature: '_isValidSignature(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _isValidSignatureAndMethod:
            [ { name: '_isValidSignatureAndMethod',
                signature: '_isValidSignatureAndMethod(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _isValidSignatureAndData:
            [ { name: '_isValidSignatureAndData',
                signature: '_isValidSignatureAndData(address,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _isValidDataHash:
            [ { name: '_isValidDataHash',
                signature: '_isValidDataHash(bytes32,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyValidSignature:
            { name: 'onlyValidSignature',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignature',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlyValidSignatureAndMethod:
            { name: 'onlyValidSignatureAndMethod',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignatureAndMethod',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlyValidSignatureAndData:
            { name: 'onlyValidSignatureAndData',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyValidSignatureAndData',
                 parameters: [Array],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [ [Object] ] },
           onlySigner:
            { name: 'onlySigner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlySigner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _METHOD_ID_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_METHOD_ID_SIZE',
              isArray: false,
              initialValue: 4,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _SIGNATURE_SIZE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_SIGNATURE_SIZE',
              isArray: false,
              initialValue: 96,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { SignerRole:
            { projectGraph: [Circular],
              name: 'SignerRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isSigner: [Array],
                 addSigner: [Array],
                 renounceSigner: [Array],
                 _addSigner: [Array],
                 _removeSigner: [Array] },
              modifiers: { onlySigner: [Object] },
              stateVariables: { _signers: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SignerRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/SignerRole.sol' },
           ECDSA:
            { projectGraph: [Circular],
              name: 'ECDSA',
              kind: 'library',
              isAbstract: false,
              functions: { recover: [Array], toEthSignedMessageHash: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ECDSA',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/cryptography/ECDSA.sol' } },
        inheritsFrom:
         { SignerRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'SignerRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/SignerRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SignatureBouncer',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'ECDSA',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignature',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignatureAndMethod',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyValidSignatureAndData',
                parameters: [Array],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidSignature',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidSignatureAndMethod',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidSignatureAndData',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isValidDataHash',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 37, column: 0 },
              end: { line: 122, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/SignatureBouncer.sol' },
     SignedSafeMath:
      { projectGraph: [Circular],
        name: 'SignedSafeMath',
        kind: 'library',
        isAbstract: false,
        functions:
         { mul:
            [ { name: 'mul',
                signature: 'mul(int256,int256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           div:
            [ { name: 'div',
                signature: 'div(int256,int256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sub:
            [ { name: 'sub',
                signature: 'sub(int256,int256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           add:
            [ { name: 'add',
                signature: 'add(int256,int256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { INT256_MIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'INT256_MIN',
              isArray: false,
              initialValue: undefined,
              type: 'int256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SignedSafeMath',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mul',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'div',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sub',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 60, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/SignedSafeMath.sol' },
     TokenVesting:
      { projectGraph: [Circular],
        name: 'TokenVesting',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address,uint256,uint256,uint256,bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiary:
            [ { name: 'beneficiary',
                signature: 'beneficiary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           cliff:
            [ { name: 'cliff',
                signature: 'cliff()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           start:
            [ { name: 'start',
                signature: 'start()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           duration:
            [ { name: 'duration',
                signature: 'duration()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revocable:
            [ { name: 'revocable',
                signature: 'revocable()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           released:
            [ { name: 'released',
                signature: 'released(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revoked:
            [ { name: 'revoked',
                signature: 'revoked(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           release:
            [ { name: 'release',
                signature: 'release(IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revoke:
            [ { name: 'revoke',
                signature: 'revoke(IERC20)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _releasableAmount:
            [ { name: '_releasableAmount',
                signature: '_releasableAmount(IERC20)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _vestedAmount:
            [ { name: '_vestedAmount',
                signature: '_vestedAmount(IERC20)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _beneficiary:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _cliff:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_cliff',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _start:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_start',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _duration:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_duration',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _revocable:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_revocable',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _released:
            { functionsWrite: {},
              contract: [Circular],
              name: '_released',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _revoked:
            { functionsWrite: {},
              contract: [Circular],
              name: '_revoked',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _owner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array],
                 callOptionalReturn: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object], Address: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
           Ownable:
            { projectGraph: [Circular],
              name: 'Ownable',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 owner: [Array],
                 isOwner: [Array],
                 renounceOwnership: [Array],
                 transferOwnership: [Array],
                 _transferOwnership: [Array] },
              modifiers: { onlyOwner: [Object] },
              stateVariables: { _owner: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Ownable',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { Ownable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Ownable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenVesting',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TokensReleased',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'TokenVestingRevoked',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'cliff',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'start',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'duration',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revocable',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'released',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revoked',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'release',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revoke',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_releasableAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_vestedAmount',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 },
              end: { line: 174, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/TokenVesting.sol' },
     ERC165:
      { projectGraph: [Circular],
        name: 'ERC165',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           supportsInterface:
            [ { name: 'supportsInterface',
                signature: 'supportsInterface(bytes4)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _registerInterface:
            [ { name: '_registerInterface',
                signature: '_registerInterface(bytes4)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC165:
            { projectGraph: [Circular],
              name: 'IERC165',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC165',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' } },
        inheritsFrom:
         { IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC165',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'supportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_registerInterface',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 52, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
     ERC165Checker:
      { projectGraph: [Circular],
        name: 'ERC165Checker',
        kind: 'library',
        isAbstract: false,
        functions:
         { _supportsERC165:
            [ { name: '_supportsERC165',
                signature: '_supportsERC165(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _supportsInterface:
            [ { name: '_supportsInterface',
                signature: '_supportsInterface(address,bytes4)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _supportsAllInterfaces:
            [ { name: '_supportsAllInterfaces',
                signature: '_supportsAllInterfaces(address,bytes4[])',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _supportsERC165Interface:
            [ { name: '_supportsERC165Interface',
                signature: '_supportsERC165Interface(address,bytes4)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _callERC165SupportsInterface:
            [ { name: '_callERC165SupportsInterface',
                signature: '_callERC165SupportsInterface(address,bytes4)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _INTERFACE_ID_INVALID:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_INVALID',
              isArray: false,
              initialValue: 4294967295,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC165Checker',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_supportsERC165',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_supportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_supportsAllInterfaces',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_supportsERC165Interface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_callERC165SupportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 10, column: 0 },
              end: { line: 121, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/ERC165Checker.sol' },
     ERC1820Implementer:
      { projectGraph: [Circular],
        name: 'ERC1820Implementer',
        kind: 'contract',
        isAbstract: false,
        functions:
         { canImplementInterfaceForAddress:
            [ { name: 'canImplementInterfaceForAddress',
                signature: 'canImplementInterfaceForAddress(bytes32,address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _registerInterfaceForAddress:
            [ { name: '_registerInterfaceForAddress',
                signature: '_registerInterfaceForAddress(bytes32,address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { ERC1820_ACCEPT_MAGIC:
            { functionsWrite: {},
              contract: [Circular],
              name: 'ERC1820_ACCEPT_MAGIC',
              isArray: false,
              initialValue: undefined,
              type: 'bytes32',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes32=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC1820Implementer:
            { projectGraph: [Circular],
              name: 'IERC1820Implementer',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1820Implementer',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC1820Implementer.sol' } },
        inheritsFrom:
         { IERC1820Implementer:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC1820Implementer',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC1820Implementer.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC1820Implementer',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'canImplementInterfaceForAddress',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_registerInterfaceForAddress',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 35, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/ERC1820Implementer.sol' },
     IERC165:
      { projectGraph: [Circular],
        name: 'IERC165',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC165',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'supportsInterface',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
     IERC1820Implementer:
      { projectGraph: [Circular],
        name: 'IERC1820Implementer',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC1820Implementer',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'canImplementInterfaceForAddress',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 17, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC1820Implementer.sol' },
     IERC1820Registry:
      { projectGraph: [Circular],
        name: 'IERC1820Registry',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC1820Registry',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'setManager',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getManager',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setInterfaceImplementer',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getInterfaceImplementer',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'interfaceHash',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'updateERC165Cache',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'implementsERC165Interface',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'implementsERC165InterfaceNoCache',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'InterfaceImplementerSet',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ManagerChanged',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 17, column: 0 },
              end: { line: 109, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC1820Registry.sol' },
     Pausable:
      { projectGraph: [Circular],
        name: 'Pausable',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           paused:
            [ { name: 'paused',
                signature: 'paused()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           pause:
            [ { name: 'pause',
                signature: 'pause()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           unpause:
            [ { name: 'unpause',
                signature: 'unpause()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _paused:
            { functionsWrite: { constructor: [Array], pause: [Array], unpause: [Array] },
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { PauserRole:
            { projectGraph: [Circular],
              name: 'PauserRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isPauser: [Array],
                 addPauser: [Array],
                 renouncePauser: [Array],
                 _addPauser: [Array],
                 _removePauser: [Array] },
              modifiers: { onlyPauser: [Object] },
              stateVariables: { _pausers: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'PauserRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol' } },
        inheritsFrom:
         { PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Pausable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Paused',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Unpaused',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'paused',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'whenNotPaused',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'whenPaused',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'pause',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'unpause',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 }, end: { line: 73, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol' },
     Math:
      { projectGraph: [Circular],
        name: 'Math',
        kind: 'library',
        isAbstract: false,
        functions:
         { max:
            [ { name: 'max',
                signature: 'max(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           min:
            [ { name: 'min',
                signature: 'min(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           average:
            [ { name: 'average',
                signature: 'average(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Math',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'max',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'min',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'average',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 29, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/Math.sol' },
     SafeMath:
      { projectGraph: [Circular],
        name: 'SafeMath',
        kind: 'library',
        isAbstract: false,
        functions:
         { add:
            [ { name: 'add',
                signature: 'add(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sub:
            [ { name: 'sub',
                signature: 'sub(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           mul:
            [ { name: 'mul',
                signature: 'mul(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           div:
            [ { name: 'div',
                signature: 'div(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           mod:
            [ { name: 'mod',
                signature: 'mod(uint256,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SafeMath',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sub',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mul',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'div',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'mod',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 16, column: 0 },
              end: { line: 107, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
     Ownable:
      { projectGraph: [Circular],
        name: 'Ownable',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           owner:
            [ { name: 'owner',
                signature: 'owner()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isOwner:
            [ { name: 'isOwner',
                signature: 'isOwner()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           renounceOwnership:
            [ { name: 'renounceOwnership',
                signature: 'renounceOwnership()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           transferOwnership:
            [ { name: 'transferOwnership',
                signature: 'transferOwnership(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _transferOwnership:
            [ { name: '_transferOwnership',
                signature: '_transferOwnership(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyOwner:
            { name: 'onlyOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _owner:
            { functionsWrite:
               { constructor: [Array],
                 renounceOwnership: [Array],
                 _transferOwnership: [Array] },
              contract: [Circular],
              name: '_owner',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Ownable',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'OwnershipTransferred',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'owner',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyOwner',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isOwner',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'renounceOwnership',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferOwnership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_transferOwnership',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 75, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol' },
     Secondary:
      { projectGraph: [Circular],
        name: 'Secondary',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           primary:
            [ { name: 'primary',
                signature: 'primary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferPrimary:
            [ { name: 'transferPrimary',
                signature: 'transferPrimary(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _primary:
            { functionsWrite: { constructor: [Array], transferPrimary: [Array] },
              contract: [Circular],
              name: '_primary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Secondary',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PrimaryTransferred',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'onlyPrimary',
                parameters: [],
                body: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'primary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferPrimary',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 48, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
     ConditionalEscrow:
      { projectGraph: [Circular],
        name: 'ConditionalEscrow',
        kind: 'contract',
        isAbstract: true,
        functions:
         { withdraw:
            [ { name: 'withdraw',
                signature: 'withdraw(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables: {},
        dependencies:
         { Escrow:
            { projectGraph: [Circular],
              name: 'Escrow',
              kind: 'contract',
              isAbstract: false,
              functions: { depositsOf: [Array], deposit: [Array], withdraw: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _deposits: [Object], _primary: [Object] },
              dependencies: { SafeMath: [Object], Secondary: [Object] },
              inheritsFrom: { Secondary: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Escrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' } },
        inheritsFrom:
         { Escrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'Escrow',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' },
              parameters: [],
              level: 0 },
           Secondary:
            { contract:
               { projectGraph: [Circular],
                 name: 'Secondary',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ConditionalEscrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'withdrawalAllowed',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdraw',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' },
     Escrow:
      { projectGraph: [Circular],
        name: 'Escrow',
        kind: 'contract',
        isAbstract: false,
        functions:
         { depositsOf:
            [ { name: 'depositsOf',
                signature: 'depositsOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           deposit:
            [ { name: 'deposit',
                signature: 'deposit(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           withdraw:
            [ { name: 'withdraw',
                signature: 'withdraw(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _deposits:
            { functionsWrite: {},
              contract: [Circular],
              name: '_deposits',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _primary:
            { functionsWrite: {},
              contract: [Circular],
              name: '_primary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Secondary:
            { projectGraph: [Circular],
              name: 'Secondary',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 primary: [Array],
                 transferPrimary: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _primary: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Secondary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' } },
        inheritsFrom:
         { Secondary:
            { contract:
               { projectGraph: [Circular],
                 name: 'Secondary',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Escrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Deposited',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Withdrawn',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'depositsOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'deposit',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdraw',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 18, column: 0 }, end: { line: 54, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' },
     RefundEscrow:
      { projectGraph: [Circular],
        name: 'RefundEscrow',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           state:
            [ { name: 'state',
                signature: 'state()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiary:
            [ { name: 'beneficiary',
                signature: 'beneficiary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           deposit:
            [ { name: 'deposit',
                signature: 'deposit(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           close:
            [ { name: 'close',
                signature: 'close()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           enableRefunds:
            [ { name: 'enableRefunds',
                signature: 'enableRefunds()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiaryWithdraw:
            [ { name: 'beneficiaryWithdraw',
                signature: 'beneficiaryWithdraw()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           withdrawalAllowed:
            [ { name: 'withdrawalAllowed',
                signature: 'withdrawalAllowed(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyPrimary:
            { name: 'onlyPrimary',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPrimary',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _state:
            { functionsWrite:
               { constructor: [Array], close: [Array], enableRefunds: [Array] },
              contract: [Circular],
              name: '_state',
              isArray: false,
              initialValue: null,
              type: 'State',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _beneficiary:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _primary:
            { functionsWrite: {},
              contract: [Circular],
              name: '_primary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _deposits:
            { functionsWrite: {},
              contract: [Circular],
              name: '_deposits',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ConditionalEscrow:
            { projectGraph: [Circular],
              name: 'ConditionalEscrow',
              kind: 'contract',
              isAbstract: true,
              functions: { withdraw: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: {},
              dependencies: { Escrow: [Object] },
              inheritsFrom: { Escrow: [Object], Secondary: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ConditionalEscrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' } },
        inheritsFrom:
         { ConditionalEscrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'ConditionalEscrow',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' },
              parameters: [],
              level: 0 },
           Escrow:
            { contract:
               { projectGraph: [Circular],
                 name: 'Escrow',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' },
              parameters: [],
              level: 1 },
           Secondary:
            { contract:
               { projectGraph: [Circular],
                 name: 'Secondary',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/ownership/Secondary.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums:
         { State:
            { name: 'State',
              contract: [Circular],
              members: [ 'Active', 'Refunding', 'Closed' ] } },
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RefundEscrow',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EnumDefinition',
                name: 'State',
                members: [Array],
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RefundsClosed',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RefundsEnabled',
                parameters: [],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'state',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'deposit',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'close',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'enableRefunds',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiaryWithdraw',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawalAllowed',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 16, column: 0 }, end: { line: 92, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/escrow/RefundEscrow.sol' },
     PaymentSplitter:
      { projectGraph: [Circular],
        name: 'PaymentSplitter',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address[],uint256[])',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalShares:
            [ { name: 'totalShares',
                signature: 'totalShares()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalReleased:
            [ { name: 'totalReleased',
                signature: 'totalReleased()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           shares:
            [ { name: 'shares',
                signature: 'shares(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           released:
            [ { name: 'released',
                signature: 'released(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           payee:
            [ { name: 'payee',
                signature: 'payee(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           release:
            [ { name: 'release',
                signature: 'release(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _addPayee:
            [ { name: '_addPayee',
                signature: '_addPayee(address,uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _totalShares:
            { functionsWrite: { _addPayee: [Array] },
              contract: [Circular],
              name: '_totalShares',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalReleased:
            { functionsWrite: { release: [Array] },
              contract: [Circular],
              name: '_totalReleased',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _shares:
            { functionsWrite: {},
              contract: [Circular],
              name: '_shares',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _released:
            { functionsWrite: {},
              contract: [Circular],
              name: '_released',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _payees:
            { functionsWrite: { _addPayee: [Array] },
              contract: [Circular],
              name: '_payees',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PaymentSplitter',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PayeeAdded',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PaymentReleased',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'PaymentReceived',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalShares',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalReleased',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'shares',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'released',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'payee',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'release',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addPayee',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 18, column: 0 },
              end: { line: 131, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/PaymentSplitter.sol' },
     PullPayment:
      { projectGraph: [Circular],
        name: 'PullPayment',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           withdrawPayments:
            [ { name: 'withdrawPayments',
                signature: 'withdrawPayments(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           payments:
            [ { name: 'payments',
                signature: 'payments(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _asyncTransfer:
            [ { name: '_asyncTransfer',
                signature: '_asyncTransfer(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _escrow:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_escrow',
              isArray: false,
              initialValue: null,
              type: 'Escrow',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Escrow:
            { projectGraph: [Circular],
              name: 'Escrow',
              kind: 'contract',
              isAbstract: false,
              functions: { depositsOf: [Array], deposit: [Array], withdraw: [Array] },
              modifiers: { onlyPrimary: [Object] },
              stateVariables: { _deposits: [Object], _primary: [Object] },
              dependencies: { SafeMath: [Object], Secondary: [Object] },
              inheritsFrom: { Secondary: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Escrow',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/escrow/Escrow.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PullPayment',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdrawPayments',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'payments',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_asyncTransfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 41, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/PullPayment.sol' },
     ERC20:
      { projectGraph: [Circular],
        name: 'ERC20',
        kind: 'contract',
        isAbstract: false,
        functions:
         { totalSupply:
            [ { name: 'totalSupply',
                signature: 'totalSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           increaseAllowance:
            [ { name: 'increaseAllowance',
                signature: 'increaseAllowance(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           decreaseAllowance:
            [ { name: 'decreaseAllowance',
                signature: 'decreaseAllowance(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _transfer:
            [ { name: '_transfer',
                signature: '_transfer(address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _approve:
            [ { name: '_approve',
                signature: '_approve(address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _burnFrom:
            [ { name: '_burnFrom',
                signature: '_burnFrom(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: { _mint: [Array], _burn: [Array] },
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
        inheritsFrom:
         { IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decreaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_transfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_approve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burnFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 29, column: 0 },
              end: { line: 228, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
     ERC20Burnable:
      { projectGraph: [Circular],
        name: 'ERC20Burnable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { burn:
            [ { name: 'burn',
                signature: 'burn(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           burnFrom:
            [ { name: 'burnFrom',
                signature: 'burnFrom(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 transfer: [Array],
                 allowance: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _approve: [Array],
                 _burnFrom: [Array] },
              modifiers: {},
              stateVariables:
               { _balances: [Object],
                 _allowances: [Object],
                 _totalSupply: [Object] },
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Burnable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'burnFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 26, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol' },
     ERC20Capped:
      { projectGraph: [Circular],
        name: 'ERC20Capped',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           cap:
            [ { name: 'cap',
                signature: 'cap()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _cap:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_cap',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _minters:
            { functionsWrite: {},
              contract: [Circular],
              name: '_minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20Mintable:
            { projectGraph: [Circular],
              name: 'ERC20Mintable',
              kind: 'contract',
              isAbstract: false,
              functions: { mint: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables:
               { _minters: [Object],
                 _balances: [Object],
                 _allowances: [Object],
                 _totalSupply: [Object] },
              dependencies: { ERC20: [Object], MinterRole: [Object] },
              inheritsFrom: { ERC20: [Object], IERC20: [Object], MinterRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20Mintable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' } },
        inheritsFrom:
         { ERC20Mintable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20Mintable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' },
              parameters: [],
              level: 0 },
           ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 1 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 2 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Capped',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'cap',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 38, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Capped.sol' },
     ERC20Detailed:
      { projectGraph: [Circular],
        name: 'ERC20Detailed',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string,uint8)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           name:
            [ { name: 'name',
                signature: 'name()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           symbol:
            [ { name: 'symbol',
                signature: 'symbol()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decimals:
            [ { name: 'decimals',
                signature: 'decimals()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _decimals:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' } },
        inheritsFrom:
         { IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Detailed',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decimals',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 54, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol' },
     ERC20Mintable:
      { projectGraph: [Circular],
        name: 'ERC20Mintable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _minters:
            { functionsWrite: {},
              contract: [Circular],
              name: '_minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 transfer: [Array],
                 allowance: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _approve: [Array],
                 _burnFrom: [Array] },
              modifiers: {},
              stateVariables:
               { _balances: [Object],
                 _allowances: [Object],
                 _totalSupply: [Object] },
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
           MinterRole:
            { projectGraph: [Circular],
              name: 'MinterRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isMinter: [Array],
                 addMinter: [Array],
                 renounceMinter: [Array],
                 _addMinter: [Array],
                 _removeMinter: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables: { _minters: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MinterRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Mintable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 12, column: 0 }, end: { line: 24, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol' },
     ERC20Pausable:
      { projectGraph: [Circular],
        name: 'ERC20Pausable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           increaseAllowance:
            [ { name: 'increaseAllowance',
                signature: 'increaseAllowance(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decreaseAllowance:
            [ { name: 'decreaseAllowance',
                signature: 'decreaseAllowance(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: '_pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ERC20:
            { projectGraph: [Circular],
              name: 'ERC20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { totalSupply: [Array],
                 balanceOf: [Array],
                 transfer: [Array],
                 allowance: [Array],
                 approve: [Array],
                 transferFrom: [Array],
                 increaseAllowance: [Array],
                 decreaseAllowance: [Array],
                 _transfer: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _approve: [Array],
                 _burnFrom: [Array] },
              modifiers: {},
              stateVariables:
               { _balances: [Object],
                 _allowances: [Object],
                 _totalSupply: [Object] },
              dependencies: { IERC20: [Object], SafeMath: [Object] },
              inheritsFrom: { IERC20: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
           Pausable:
            { projectGraph: [Circular],
              name: 'Pausable',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 paused: [Array],
                 pause: [Array],
                 unpause: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 whenPaused: [Object],
                 onlyPauser: [Object] },
              stateVariables: { _paused: [Object] },
              dependencies: { PauserRole: [Object] },
              inheritsFrom: { PauserRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol' } },
        inheritsFrom:
         { ERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 1 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol' },
              parameters: [],
              level: 0 },
           PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC20Pausable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'increaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decreaseAllowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 30, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol' },
     IERC20:
      { projectGraph: [Circular],
        name: 'IERC20',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC20',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 76, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
     SafeERC20:
      { projectGraph: [Circular],
        name: 'SafeERC20',
        kind: 'library',
        isAbstract: false,
        functions:
         { safeTransfer:
            [ { name: 'safeTransfer',
                signature: 'safeTransfer(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeTransferFrom:
            [ { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(IERC20,address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeApprove:
            [ { name: 'safeApprove',
                signature: 'safeApprove(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeIncreaseAllowance:
            [ { name: 'safeIncreaseAllowance',
                signature: 'safeIncreaseAllowance(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeDecreaseAllowance:
            [ { name: 'safeDecreaseAllowance',
                signature: 'safeDecreaseAllowance(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           callOptionalReturn:
            [ { name: 'callOptionalReturn',
                signature: 'callOptionalReturn(IERC20,bytes)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Address:
            { projectGraph: [Circular],
              name: 'Address',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Address',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SafeERC20',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Address',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeApprove',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeIncreaseAllowance',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeDecreaseAllowance',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'callOptionalReturn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 16, column: 0 }, end: { line: 75, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' },
     TokenTimelock:
      { projectGraph: [Circular],
        name: 'TokenTimelock',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(IERC20,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           token:
            [ { name: 'token',
                signature: 'token()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           beneficiary:
            [ { name: 'beneficiary',
                signature: 'beneficiary()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           releaseTime:
            [ { name: 'releaseTime',
                signature: 'releaseTime()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           release:
            [ { name: 'release',
                signature: 'release()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _token:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_token',
              isArray: false,
              initialValue: null,
              type: 'IERC20',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _beneficiary:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_beneficiary',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _releaseTime:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_releaseTime',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { SafeERC20:
            { projectGraph: [Circular],
              name: 'SafeERC20',
              kind: 'library',
              isAbstract: false,
              functions:
               { safeTransfer: [Array],
                 safeTransferFrom: [Array],
                 safeApprove: [Array],
                 safeIncreaseAllowance: [Array],
                 safeDecreaseAllowance: [Array],
                 callOptionalReturn: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC20: [Object], SafeMath: [Object], Address: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TokenTimelock',
           baseContracts: [],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeERC20',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'token',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'beneficiary',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'releaseTime',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'release',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 63, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/TokenTimelock.sol' },
     ERC721:
      { projectGraph: [Circular],
        name: 'ERC721',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           ownerOf:
            [ { name: 'ownerOf',
                signature: 'ownerOf(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getApproved:
            [ { name: 'getApproved',
                signature: 'getApproved(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setApprovalForAll:
            [ { name: 'setApprovalForAll',
                signature: 'setApprovalForAll(address,bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           isApprovedForAll:
            [ { name: 'isApprovedForAll',
                signature: 'isApprovedForAll(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           safeTransferFrom:
            [ { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: 'safeTransferFrom',
                signature: 'safeTransferFrom(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _exists:
            [ { name: '_exists',
                signature: '_exists(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _isApprovedOrOwner:
            [ { name: '_isApprovedOrOwner',
                signature: '_isApprovedOrOwner(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] },
              { name: '_burn',
                signature: '_burn(uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _transferFrom:
            [ { name: '_transferFrom',
                signature: '_transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _checkOnERC721Received:
            [ { name: '_checkOnERC721Received',
                signature: '_checkOnERC721Received(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _clearApproval:
            [ { name: '_clearApproval',
                signature: '_clearApproval(uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
           IERC721Receiver:
            { projectGraph: [Circular],
              name: 'IERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Address:
            { projectGraph: [Circular],
              name: 'Address',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Address',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' },
           Counters:
            { projectGraph: [Circular],
              name: 'Counters',
              kind: 'library',
              isAbstract: false,
              functions: { current: [Array], increment: [Array], decrement: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: { SafeMath: [Object] },
              inheritsFrom: {},
              structs: { Counter: [Object] },
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Counters',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
           ERC165:
            { projectGraph: [Circular],
              name: 'ERC165',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 supportsInterface: [Array],
                 _registerInterface: [Array] },
              modifiers: {},
              stateVariables:
               { _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC165',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' } },
        inheritsFrom:
         { ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 0 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 1 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Address',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Counters',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ownerOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getApproved',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isApprovedForAll',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_exists',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_isApprovedOrOwner',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_checkOnERC721Received',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_clearApproval',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 14, column: 0 },
              end: { line: 299, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
     ERC721Burnable:
      { projectGraph: [Circular],
        name: 'ERC721Burnable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { burn:
            [ { name: 'burn',
                signature: 'burn(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _transferFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers: {},
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 Counters: [Object],
                 ERC165: [Object] },
              inheritsFrom: { ERC165: [Object], IERC165: [Object], IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Burnable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 19, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Burnable.sol' },
     ERC721Enumerable:
      { projectGraph: [Circular],
        name: 'ERC721Enumerable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           tokenOfOwnerByIndex:
            [ { name: 'tokenOfOwnerByIndex',
                signature: 'tokenOfOwnerByIndex(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalSupply:
            [ { name: 'totalSupply',
                signature: 'totalSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           tokenByIndex:
            [ { name: 'tokenByIndex',
                signature: 'tokenByIndex(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _transferFrom:
            [ { name: '_transferFrom',
                signature: '_transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _tokensOfOwner:
            [ { name: '_tokensOfOwner',
                signature: '_tokensOfOwner(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _addTokenToOwnerEnumeration:
            [ { name: '_addTokenToOwnerEnumeration',
                signature: '_addTokenToOwnerEnumeration(address,uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _addTokenToAllTokensEnumeration:
            [ { name: '_addTokenToAllTokensEnumeration',
                signature: '_addTokenToAllTokensEnumeration(uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           _removeTokenFromOwnerEnumeration:
            [ { name: '_removeTokenFromOwnerEnumeration',
                signature: '_removeTokenFromOwnerEnumeration(address,uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _removeTokenFromAllTokensEnumeration:
            [ { name: '_removeTokenFromAllTokensEnumeration',
                signature: '_removeTokenFromAllTokensEnumeration(uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _ownedTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokens',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256[])})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokens:
            { functionsWrite: { _addTokenToAllTokensEnumeration: [Array] },
              contract: [Circular],
              name: '_allTokens',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_ENUMERABLE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_ENUMERABLE',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { IERC721Enumerable:
            { projectGraph: [Circular],
              name: 'IERC721Enumerable',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC721: [Object] },
              inheritsFrom: { IERC721: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
           ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _transferFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers: {},
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 Counters: [Object],
                 ERC165: [Object] },
              inheritsFrom: { ERC165: [Object], IERC165: [Object], IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           ERC165:
            { projectGraph: [Circular],
              name: 'ERC165',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 supportsInterface: [Array],
                 _registerInterface: [Array] },
              modifiers: {},
              stateVariables:
               { _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC165',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' } },
        inheritsFrom:
         { ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           IERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Enumerable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Enumerable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenOfOwnerByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_tokensOfOwner',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addTokenToOwnerEnumeration',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_addTokenToAllTokensEnumeration',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeTokenFromOwnerEnumeration',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_removeTokenFromAllTokensEnumeration',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 },
              end: { line: 199, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol' },
     ERC721Full:
      { projectGraph: [Circular],
        name: 'ERC721Full',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _ownedTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokens',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256[])})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokens:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokens',
              isArray: true,
              initialValue: [],
              type: 'uint256[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allTokensIndex:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allTokensIndex',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_ENUMERABLE:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_ENUMERABLE',
              isArray: false,
              initialValue: 2014223715,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _name:
            { functionsWrite: {},
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_METADATA:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_METADATA',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _transferFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers: {},
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 Counters: [Object],
                 ERC165: [Object] },
              inheritsFrom: { ERC165: [Object], IERC165: [Object], IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           ERC721Enumerable:
            { projectGraph: [Circular],
              name: 'ERC721Enumerable',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 tokenOfOwnerByIndex: [Array],
                 totalSupply: [Array],
                 tokenByIndex: [Array],
                 _transferFrom: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _tokensOfOwner: [Array],
                 _addTokenToOwnerEnumeration: [Array],
                 _addTokenToAllTokensEnumeration: [Array],
                 _removeTokenFromOwnerEnumeration: [Array],
                 _removeTokenFromAllTokensEnumeration: [Array] },
              modifiers: {},
              stateVariables:
               { _ownedTokens: [Object],
                 _ownedTokensIndex: [Object],
                 _allTokens: [Object],
                 _allTokensIndex: [Object],
                 _INTERFACE_ID_ERC721_ENUMERABLE: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object] },
              dependencies:
               { IERC721Enumerable: [Object],
                 ERC721: [Object],
                 ERC165: [Object] },
              inheritsFrom:
               { ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Enumerable: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol' },
           ERC721Metadata:
            { projectGraph: [Circular],
              name: 'ERC721Metadata',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 name: [Array],
                 symbol: [Array],
                 tokenURI: [Array],
                 _setTokenURI: [Array],
                 _burn: [Array] },
              modifiers: {},
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _tokenURIs: [Object],
                 _INTERFACE_ID_ERC721_METADATA: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object] },
              dependencies:
               { ERC721: [Object], IERC721Metadata: [Object], ERC165: [Object] },
              inheritsFrom:
               { ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Metadata: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 1 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 2 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 3 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 2 },
           ERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Enumerable',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol' },
              parameters: [],
              level: 0 },
           IERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Enumerable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
              parameters: [],
              level: 1 },
           ERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol' },
              parameters: [],
              level: 0 },
           IERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Full',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 17, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol' },
     ERC721Holder:
      { projectGraph: [Circular],
        name: 'ERC721Holder',
        kind: 'contract',
        isAbstract: false,
        functions:
         { onERC721Received:
            [ { name: 'onERC721Received',
                signature: 'onERC721Received(address,address,uint256,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC721Receiver:
            { projectGraph: [Circular],
              name: 'IERC721Receiver',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Receiver',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' } },
        inheritsFrom:
         { IERC721Receiver:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Receiver',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Holder',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'onERC721Received',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Holder.sol' },
     ERC721Metadata:
      { projectGraph: [Circular],
        name: 'ERC721Metadata',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           name:
            [ { name: 'name',
                signature: 'name()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           symbol:
            [ { name: 'symbol',
                signature: 'symbol()',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           tokenURI:
            [ { name: 'tokenURI',
                signature: 'tokenURI(uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _setTokenURI:
            [ { name: '_setTokenURI',
                signature: '_setTokenURI(uint256,string)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { _name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_METADATA:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_METADATA',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _transferFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers: {},
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 Counters: [Object],
                 ERC165: [Object] },
              inheritsFrom: { ERC165: [Object], IERC165: [Object], IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           IERC721Metadata:
            { projectGraph: [Circular],
              name: 'IERC721Metadata',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC721: [Object] },
              inheritsFrom: { IERC721: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' },
           ERC165:
            { projectGraph: [Circular],
              name: 'ERC165',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 supportsInterface: [Array],
                 _registerInterface: [Array] },
              modifiers: {},
              stateVariables:
               { _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC165',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' } },
        inheritsFrom:
         { ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           IERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Metadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_setTokenURI',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 89, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol' },
     ERC721MetadataMintable:
      { projectGraph: [Circular],
        name: 'ERC721MetadataMintable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { mintWithTokenURI:
            [ { name: 'mintWithTokenURI',
                signature: 'mintWithTokenURI(address,uint256,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _minters:
            { functionsWrite: {},
              contract: [Circular],
              name: '_minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _name:
            { functionsWrite: {},
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenURIs:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenURIs',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>string)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721_METADATA:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721_METADATA',
              isArray: false,
              initialValue: 1532892063,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721Metadata:
            { projectGraph: [Circular],
              name: 'ERC721Metadata',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 name: [Array],
                 symbol: [Array],
                 tokenURI: [Array],
                 _setTokenURI: [Array],
                 _burn: [Array] },
              modifiers: {},
              stateVariables:
               { _name: [Object],
                 _symbol: [Object],
                 _tokenURIs: [Object],
                 _INTERFACE_ID_ERC721_METADATA: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object],
                 _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object] },
              dependencies:
               { ERC721: [Object], IERC721Metadata: [Object], ERC165: [Object] },
              inheritsFrom:
               { ERC165: [Object],
                 IERC165: [Object],
                 ERC721: [Object],
                 IERC721: [Object],
                 IERC721Metadata: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol' },
           MinterRole:
            { projectGraph: [Circular],
              name: 'MinterRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isMinter: [Array],
                 addMinter: [Array],
                 renounceMinter: [Array],
                 _addMinter: [Array],
                 _removeMinter: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables: { _minters: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MinterRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 1 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 2 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 3 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 2 },
           ERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721Metadata',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol' },
              parameters: [],
              level: 0 },
           IERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' },
              parameters: [],
              level: 1 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721MetadataMintable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'mintWithTokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 24, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721MetadataMintable.sol' },
     ERC721Mintable:
      { projectGraph: [Circular],
        name: 'ERC721Mintable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { mint:
            [ { name: 'mint',
                signature: 'mint(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers:
         { onlyMinter:
            { name: 'onlyMinter',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyMinter',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _minters:
            { functionsWrite: {},
              contract: [Circular],
              name: '_minters',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _transferFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers: {},
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 Counters: [Object],
                 ERC165: [Object] },
              inheritsFrom: { ERC165: [Object], IERC165: [Object], IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           MinterRole:
            { projectGraph: [Circular],
              name: 'MinterRole',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 isMinter: [Array],
                 addMinter: [Array],
                 renounceMinter: [Array],
                 _addMinter: [Array],
                 _removeMinter: [Array] },
              modifiers: { onlyMinter: [Object] },
              stateVariables: { _minters: [Object] },
              dependencies: { Roles: [Object] },
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'MinterRole',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           MinterRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'MinterRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/MinterRole.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Mintable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'mint',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 21, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol' },
     ERC721Pausable:
      { projectGraph: [Circular],
        name: 'ERC721Pausable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           setApprovalForAll:
            [ { name: 'setApprovalForAll',
                signature: 'setApprovalForAll(address,bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: '_pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC165:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC165',
              isArray: false,
              initialValue: 33540519,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _supportedInterfaces:
            { functionsWrite: {},
              contract: [Circular],
              name: '_supportedInterfaces',
              isArray: false,
              initialValue: null,
              type: 'mapping(bytes4=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ERC721_RECEIVED:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ERC721_RECEIVED',
              isArray: false,
              initialValue: 353073666,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _tokenOwner:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenOwner',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _tokenApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_tokenApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint256=>address)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _ownedTokensCount:
            { functionsWrite: {},
              contract: [Circular],
              name: '_ownedTokensCount',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>Counters.Counter)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operatorApprovals:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operatorApprovals',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _INTERFACE_ID_ERC721:
            { functionsWrite: {},
              contract: [Circular],
              name: '_INTERFACE_ID_ERC721',
              isArray: false,
              initialValue: 2158778573,
              type: 'bytes4',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { ERC721:
            { projectGraph: [Circular],
              name: 'ERC721',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 balanceOf: [Array],
                 ownerOf: [Array],
                 approve: [Array],
                 getApproved: [Array],
                 setApprovalForAll: [Array],
                 isApprovedForAll: [Array],
                 transferFrom: [Array],
                 safeTransferFrom: [Array],
                 _exists: [Array],
                 _isApprovedOrOwner: [Array],
                 _mint: [Array],
                 _burn: [Array],
                 _transferFrom: [Array],
                 _checkOnERC721Received: [Array],
                 _clearApproval: [Array] },
              modifiers: {},
              stateVariables:
               { _ERC721_RECEIVED: [Object],
                 _tokenOwner: [Object],
                 _tokenApprovals: [Object],
                 _ownedTokensCount: [Object],
                 _operatorApprovals: [Object],
                 _INTERFACE_ID_ERC721: [Object],
                 _INTERFACE_ID_ERC165: [Object],
                 _supportedInterfaces: [Object] },
              dependencies:
               { IERC721: [Object],
                 IERC721Receiver: [Object],
                 SafeMath: [Object],
                 Address: [Object],
                 Counters: [Object],
                 ERC165: [Object] },
              inheritsFrom: { ERC165: [Object], IERC165: [Object], IERC721: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
           Pausable:
            { projectGraph: [Circular],
              name: 'Pausable',
              kind: 'contract',
              isAbstract: true,
              functions:
               { constructor: [Array],
                 paused: [Array],
                 pause: [Array],
                 unpause: [Array] },
              modifiers:
               { whenNotPaused: [Object],
                 whenPaused: [Object],
                 onlyPauser: [Object] },
              stateVariables: { _paused: [Object] },
              dependencies: { PauserRole: [Object] },
              inheritsFrom: { PauserRole: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Pausable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol' } },
        inheritsFrom:
         { ERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC721',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol' },
              parameters: [],
              level: 0 },
           ERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'ERC165',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/ERC165.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol' },
              parameters: [],
              level: 0 },
           PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC721Pausable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 22, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721Pausable.sol' },
     IERC721:
      { projectGraph: [Circular],
        name: 'IERC721',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC165:
            { projectGraph: [Circular],
              name: 'IERC165',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC165',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' } },
        inheritsFrom:
         { IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'ApprovalForAll',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'ownerOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getApproved',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'setApprovalForAll',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isApprovedForAll',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'safeTransferFrom',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 53, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
     IERC721Enumerable:
      { projectGraph: [Circular],
        name: 'IERC721Enumerable',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' } },
        inheritsFrom:
         { IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 0 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Enumerable',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenOfOwnerByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenByIndex',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 14, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
     IERC721Full:
      { projectGraph: [Circular],
        name: 'IERC721Full',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
           IERC721Enumerable:
            { projectGraph: [Circular],
              name: 'IERC721Enumerable',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC721: [Object] },
              inheritsFrom: { IERC721: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Enumerable',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
           IERC721Metadata:
            { projectGraph: [Circular],
              name: 'IERC721Metadata',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC721: [Object] },
              inheritsFrom: { IERC721: [Object], IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721Metadata',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' } },
        inheritsFrom:
         { IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 1 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 2 },
           IERC721Enumerable:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Enumerable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol' },
              parameters: [],
              level: 0 },
           IERC721Metadata:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721Metadata',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Full',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes: [],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 13, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Full.sol' },
     IERC721Metadata:
      { projectGraph: [Circular],
        name: 'IERC721Metadata',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IERC721:
            { projectGraph: [Circular],
              name: 'IERC721',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: { IERC165: [Object] },
              inheritsFrom: { IERC165: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC721',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' } },
        inheritsFrom:
         { IERC721:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC721',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol' },
              parameters: [],
              level: 0 },
           IERC165:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC165',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC165.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Metadata',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'tokenURI',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 13, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol' },
     IERC721Receiver:
      { projectGraph: [Circular],
        name: 'IERC721Receiver',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC721Receiver',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'onERC721Received',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 25, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol' },
     ERC777:
      { projectGraph: [Circular],
        name: 'ERC777',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string,string,address[])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           name:
            [ { name: 'name',
                signature: 'name()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           symbol:
            [ { name: 'symbol',
                signature: 'symbol()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           decimals:
            [ { name: 'decimals',
                signature: 'decimals()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           granularity:
            [ { name: 'granularity',
                signature: 'granularity()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           totalSupply:
            [ { name: 'totalSupply',
                signature: 'totalSupply()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           send:
            [ { name: 'send',
                signature: 'send(address,uint256,bytes)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           burn:
            [ { name: 'burn',
                signature: 'burn(uint256,bytes)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           isOperatorFor:
            [ { name: 'isOperatorFor',
                signature: 'isOperatorFor(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           authorizeOperator:
            [ { name: 'authorizeOperator',
                signature: 'authorizeOperator(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           revokeOperator:
            [ { name: 'revokeOperator',
                signature: 'revokeOperator(address)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           defaultOperators:
            [ { name: 'defaultOperators',
                signature: 'defaultOperators()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           operatorSend:
            [ { name: 'operatorSend',
                signature: 'operatorSend(address,address,uint256,bytes,bytes)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           operatorBurn:
            [ { name: 'operatorBurn',
                signature: 'operatorBurn(address,uint256,bytes,bytes)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'external',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _mint:
            [ { name: '_mint',
                signature: '_mint(address,address,uint256,bytes,bytes)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _send:
            [ { name: '_send',
                signature: '_send(address,address,address,uint256,bytes,bytes,bool)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _burn:
            [ { name: '_burn',
                signature: '_burn(address,address,uint256,bytes,bytes)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           _move:
            [ { name: '_move',
                signature: '_move(address,address,address,uint256,bytes,bytes)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _approve:
            [ { name: '_approve',
                signature: '_approve(address,address,uint256)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _callTokensToSend:
            [ { name: '_callTokensToSend',
                signature:
                 '_callTokensToSend(address,address,address,uint256,bytes,bytes)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           _callTokensReceived:
            [ { name: '_callTokensReceived',
                signature:
                 '_callTokensReceived(address,address,address,uint256,bytes,bytes,bool)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { _erc1820:
            { functionsWrite: {},
              contract: [Circular],
              name: '_erc1820',
              isArray: false,
              initialValue: undefined,
              type: 'IERC1820Registry',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _balances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _totalSupply:
            { functionsWrite: { _mint: [Array], _burn: [Array] },
              contract: [Circular],
              name: '_totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           TOKENS_SENDER_INTERFACE_HASH:
            { functionsWrite: {},
              contract: [Circular],
              name: 'TOKENS_SENDER_INTERFACE_HASH',
              isArray: false,
              initialValue:
               18936552921575092654186153463397164041995445878070697795167270963882475126784n,
              type: 'bytes32',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           TOKENS_RECIPIENT_INTERFACE_HASH:
            { functionsWrite: {},
              contract: [Circular],
              name: 'TOKENS_RECIPIENT_INTERFACE_HASH',
              isArray: false,
              initialValue:
               80741353335606798181969735708163393868254560005245286026819324366992835608576n,
              type: 'bytes32',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           _defaultOperatorsArray:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_defaultOperatorsArray',
              isArray: true,
              initialValue: [],
              type: 'address[]',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _defaultOperators:
            { functionsWrite: {},
              contract: [Circular],
              name: '_defaultOperators',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>bool)})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _operators:
            { functionsWrite: {},
              contract: [Circular],
              name: '_operators',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _revokedDefaultOperators:
            { functionsWrite: {},
              contract: [Circular],
              name: '_revokedDefaultOperators',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>bool)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _allowances:
            { functionsWrite: {},
              contract: [Circular],
              name: '_allowances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { IERC777:
            { projectGraph: [Circular],
              name: 'IERC777',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC777',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC777/IERC777.sol' },
           IERC777Recipient:
            { projectGraph: [Circular],
              name: 'IERC777Recipient',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC777Recipient',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC777/IERC777Recipient.sol' },
           IERC777Sender:
            { projectGraph: [Circular],
              name: 'IERC777Sender',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC777Sender',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC777/IERC777Sender.sol' },
           IERC20:
            { projectGraph: [Circular],
              name: 'IERC20',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC20',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
           SafeMath:
            { projectGraph: [Circular],
              name: 'SafeMath',
              kind: 'library',
              isAbstract: false,
              functions:
               { add: [Array],
                 sub: [Array],
                 mul: [Array],
                 div: [Array],
                 mod: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'SafeMath',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
           Address:
            { projectGraph: [Circular],
              name: 'Address',
              kind: 'library',
              isAbstract: false,
              functions: { isContract: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Address',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' },
           IERC1820Registry:
            { projectGraph: [Circular],
              name: 'IERC1820Registry',
              kind: 'interface',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IERC1820Registry',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'interface',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/introspection/IERC1820Registry.sol' } },
        inheritsFrom:
         { IERC777:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC777',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC777/IERC777.sol' },
              parameters: [],
              level: 0 },
           IERC20:
            { contract:
               { projectGraph: [Circular],
                 name: 'IERC20',
                 kind: 'interface',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ERC777',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'SafeMath',
                loc: [Object] },
              { type: 'UsingForDeclaration',
                typeName: [Object],
                libraryName: 'Address',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'decimals',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'granularity',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'send',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isOperatorFor',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'authorizeOperator',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeOperator',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'defaultOperators',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'operatorSend',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'operatorBurn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_mint',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_send',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_burn',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_move',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_approve',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_callTokensToSend',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '_callTokensReceived',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 26, column: 0 },
              end: { line: 474, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC777/ERC777.sol' },
     IERC777:
      { projectGraph: [Circular],
        name: 'IERC777',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC777',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'name',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'symbol',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'granularity',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'totalSupply',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'send',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'burn',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'isOperatorFor',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'authorizeOperator',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'revokeOperator',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'defaultOperators',
                parameters: [],
                returnParameters: [Array],
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'operatorSend',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'operatorBurn',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Sent',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Minted',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Burned',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'AuthorizedOperator',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'RevokedOperator',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 12, column: 0 },
              end: { line: 186, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC777/IERC777.sol' },
     IERC777Recipient:
      { projectGraph: [Circular],
        name: 'IERC777Recipient',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC777Recipient',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'tokensReceived',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 32, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC777/IERC777Recipient.sol' },
     IERC777Sender:
      { projectGraph: [Circular],
        name: 'IERC777Sender',
        kind: 'interface',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IERC777Sender',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'tokensToSend',
                parameters: [Array],
                returnParameters: null,
                body: null,
                visibility: 'external',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'interface',
           loc:
            { start: { line: 13, column: 0 }, end: { line: 32, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC777/IERC777Sender.sol' },
     Address:
      { projectGraph: [Circular],
        name: 'Address',
        kind: 'library',
        isAbstract: false,
        functions:
         { isContract:
            [ { name: 'isContract',
                signature: 'isContract(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Address',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'isContract',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 27, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/Address.sol' },
     Arrays:
      { projectGraph: [Circular],
        name: 'Arrays',
        kind: 'library',
        isAbstract: false,
        functions:
         { findUpperBound:
            [ { name: 'findUpperBound',
                signature: 'findUpperBound(uint256[],uint256)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { Math:
            { projectGraph: [Circular],
              name: 'Math',
              kind: 'library',
              isAbstract: false,
              functions: { max: [Array], min: [Array], average: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Math',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/Math.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Arrays',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'findUpperBound',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 45, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/Arrays.sol' },
     ReentrancyGuard:
      { projectGraph: [Circular],
        name: 'ReentrancyGuard',
        kind: 'contract',
        isAbstract: true,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { nonReentrant:
            { name: 'nonReentrant',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'nonReentrant',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { _guardCounter:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: '_guardCounter',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ReentrancyGuard',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'nonReentrant',
                parameters: [],
                body: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 15, column: 0 }, end: { line: 38, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol' },
     Test:
      { projectGraph: [Circular],
        name: 'Test',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Test',
           baseContracts: [],
           subNodes: [],
           kind: 'contract',
           loc:
            { start: { line: 1, column: 0 }, end: { line: 1, column: 15 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle-resolver/test/fixtures/globalnpm/node_modules/package/contracts/Test.sol' },
     FunctionTypes:
      { projectGraph: [Circular],
        name: 'FunctionTypes',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           withdraw:
            [ { name: 'withdraw',
                signature: 'withdraw()',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           frwd:
            [ { name: 'frwd',
                signature: 'frwd()',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           breakIt:
            [ { name: 'breakIt',
                signature: 'breakIt()',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           run:
            [ { name: 'run',
                signature: 'run(uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { count:
            { functionsWrite: {},
              contract: [Circular],
              name: 'count',
              isArray: false,
              initialValue: 2,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs:
         { Func:
            { name: 'Func', contract: [Circular], parameters: [ [Object] ] } },
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'FunctionTypes',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdraw',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'frwd',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'Func',
                members: [Array],
                loc: [Object],
                parentName: 'FunctionTypes' },
              { type: 'FunctionDefinition',
                name: 'breakIt',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'run',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 30, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle-security/integration-tests/project/contracts/Test.sol' },
     ConvertLib:
      { projectGraph: [Circular],
        name: 'ConvertLib',
        kind: 'library',
        isAbstract: false,
        functions:
         { convert:
            [ { name: 'convert',
                signature: 'convert(uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ConvertLib',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'convert',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle-security/test/sample-truffle/metacoin/contracts/ConvertLib.sol' },
     MetaCoin:
      { projectGraph: [Circular],
        name: 'MetaCoin',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sendCoin:
            [ { name: 'sendCoin',
                signature: 'sendCoin(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getBalanceInEth:
            [ { name: 'getBalanceInEth',
                signature: 'getBalanceInEth(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getBalance:
            [ { name: 'getBalance',
                signature: 'getBalance(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ConvertLib:
            { projectGraph: [Circular],
              name: 'ConvertLib',
              kind: 'library',
              isAbstract: false,
              functions: { convert: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ConvertLib',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle-security/test/sample-truffle/metacoin/contracts/ConvertLib.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MetaCoin',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sendCoin',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getBalanceInEth',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getBalance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 34, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle-security/test/sample-truffle/metacoin/contracts/MetaCoin.sol' },
     TestToken:
      { projectGraph: [Circular],
        name: 'TestToken',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           echidna_test_balance:
            [ { name: 'echidna_test_balance',
                signature: 'echidna_test_balance()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { echidna_caller:
            { functionsWrite: {},
              contract: [Circular],
              name: 'echidna_caller',
              isArray: false,
              initialValue: 3638658538924045180101293468281466873366708224n,
              type: 'address',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: '_pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom:
         { Token:
            { contract:
               { projectGraph: [Circular],
                 name: 'Token',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle-security/test/sample-truffle/sample_import/contracts/token.sol' },
              parameters: [],
              level: 0 },
           Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol' },
              parameters: [],
              level: 1 },
           PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 2 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'TestToken',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'echidna_test_balance',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 17, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle-security/test/sample-truffle/sample_import/contracts/exercise1_solution.sol' },
     Ownership:
      { projectGraph: [Circular],
        name: 'Ownership',
        kind: 'contract',
        isAbstract: false,
        functions:
         { Owner:
            [ { name: 'Owner',
                signature: 'Owner()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { isOwner:
            { name: 'isOwner',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'isOwner',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { owner:
            { functionsWrite: { Owner: [Array] },
              contract: [Circular],
              name: 'owner',
              isArray: false,
              initialValue: undefined,
              type: 'address',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Ownership',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'Owner',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'ModifierDefinition',
                name: 'isOwner',
                parameters: [],
                body: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 15, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle-security/test/sample-truffle/sample_import/contracts/token.sol' },
     Token:
      { projectGraph: [Circular],
        name: 'Token',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: [Object],
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers:
         { whenNotPaused:
            { name: 'whenNotPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenNotPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           whenPaused:
            { name: 'whenPaused',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'whenPaused',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] },
           onlyPauser:
            { name: 'onlyPauser',
              functionDefinition:
               { type: 'ModifierDefinition',
                 name: 'onlyPauser',
                 parameters: [],
                 body: [Object],
                 loc: [Object] },
              contract: [Circular],
              parameters: [] } },
        stateVariables:
         { balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _pausers:
            { functionsWrite: {},
              contract: [Circular],
              name: '_pausers',
              isArray: false,
              initialValue: null,
              type: 'Roles.Role',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           _paused:
            { functionsWrite: {},
              contract: [Circular],
              name: '_paused',
              isArray: false,
              initialValue: 'false',
              type: 'bool',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom:
         { Pausable:
            { contract:
               { projectGraph: [Circular],
                 name: 'Pausable',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol' },
              parameters: [],
              level: 0 },
           PauserRole:
            { contract:
               { projectGraph: [Circular],
                 name: 'PauserRole',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Token',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [Array],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 36, column: 0 }, end: { line: 43, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle-security/test/sample-truffle/sample_import/contracts/token.sol' },
     SimpleDAO:
      { projectGraph: [Circular],
        name: 'SimpleDAO',
        kind: 'contract',
        isAbstract: false,
        functions:
         { donate:
            [ { name: 'donate',
                signature: 'donate(address)',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           withdraw:
            [ { name: 'withdraw',
                signature: 'withdraw(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           queryCredit:
            [ { name: 'queryCredit',
                signature: 'queryCredit(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { credit:
            { functionsWrite: {},
              contract: [Circular],
              name: 'credit',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SimpleDAO',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'donate',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'withdraw',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'queryCredit',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 25, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle-security/test/sample-truffle/simple_dao/contracts/simple_dao.sol' },
     PublicStorageArray:
      { projectGraph: [Circular],
        name: 'PublicStorageArray',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { states:
            { functionsWrite: {},
              contract: [Circular],
              name: 'states',
              isArray: true,
              initialValue: undefined,
              type: 'bytes32[]',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PublicStorageArray',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 5, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle-security/test/sample-truffle/storage_arrays/contracts/PublicStorageArray.sol' },
     InnerLibrary:
      { projectGraph: [Circular],
        name: 'InnerLibrary',
        kind: 'library',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'InnerLibrary',
           baseContracts: [],
           subNodes: [],
           kind: 'library',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 6, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' },
     Contract:
      { projectGraph: [Circular],
        name: 'Contract',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { specialValue:
            { functionsWrite: {},
              contract: [Circular],
              name: 'specialValue',
              isArray: false,
              initialValue: 1337,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Contract',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 11, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' },
     RelativeImport:
      { projectGraph: [Circular],
        name: 'RelativeImport',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies:
         { InnerLibrary:
            { projectGraph: [Circular],
              name: 'InnerLibrary',
              kind: 'library',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'InnerLibrary',
                 baseContracts: [],
                 subNodes: [],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' },
           Contract:
            { projectGraph: [Circular],
              name: 'Contract',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { specialValue: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Contract',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' } },
        inheritsFrom:
         { Contract:
            { contract:
               { projectGraph: [Circular],
                 name: 'Contract',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/contract_names/contracts/contract.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RelativeImport',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes: [],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/contract_names/contracts/relative_import.sol' },
     Local:
      { projectGraph: [Circular],
        name: 'Local',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { local:
            { functionsWrite: {},
              contract: [Circular],
              name: 'local',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Local',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/ethpm/contracts/Local.sol' },
     PLCRVoting:
      { projectGraph: [Circular],
        name: 'PLCRVoting',
        kind: 'contract',
        isAbstract: false,
        functions:
         { isExpired:
            [ { name: 'isExpired',
                signature: 'isExpired(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           attrUUID:
            [ { name: 'attrUUID',
                signature: 'attrUUID(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { local:
            { functionsWrite: {},
              contract: [Circular],
              name: 'local',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           MAX_UINT256:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_UINT256',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           name:
            { functionsWrite: {},
              contract: [Circular],
              name: 'name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           decimals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: 'symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Local:
            { projectGraph: [Circular],
              name: 'Local',
              kind: 'contract',
              isAbstract: false,
              functions: { constructor: [Array] },
              modifiers: {},
              stateVariables: { local: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Local',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/ethpm/contracts/Local.sol' } },
        inheritsFrom:
         { EIP20:
            { contract:
               { projectGraph: [Circular],
                 name: 'EIP20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20.sol' },
              parameters: [],
              level: 0 },
           EIP20Interface:
            { contract:
               { projectGraph: [Circular],
                 name: 'EIP20Interface',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' },
              parameters: [],
              level: 1 },
           Local:
            { contract:
               { projectGraph: [Circular],
                 name: 'Local',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/ethpm/contracts/Local.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PLCRVoting',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'isExpired',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'attrUUID',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 15, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/ethpm/contracts/PLCRVoting.sol' },
     EIP20:
      { projectGraph: [Circular],
        name: 'EIP20',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(uint256,string,uint8,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { MAX_UINT256:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_UINT256',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           decimals:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { EIP20Interface:
            { projectGraph: [Circular],
              name: 'EIP20Interface',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { totalSupply: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'EIP20Interface',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' } },
        inheritsFrom:
         { EIP20Interface:
            { contract:
               { projectGraph: [Circular],
                 name: 'EIP20Interface',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EIP20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 78, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20.sol' },
     EIP20Factory:
      { projectGraph: [Circular],
        name: 'EIP20Factory',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           verifyEIP20:
            [ { name: 'verifyEIP20',
                signature: 'verifyEIP20(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           codeAt:
            [ { name: 'codeAt',
                signature: 'codeAt(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           createEIP20:
            [ { name: 'createEIP20',
                signature: 'createEIP20(uint256,string,uint8,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { created:
            { functionsWrite: {},
              contract: [Circular],
              name: 'created',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>address[])})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           isEIP20:
            { functionsWrite: {},
              contract: [Circular],
              name: 'isEIP20',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>bool)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           EIP20ByteCode:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'EIP20ByteCode',
              isArray: false,
              initialValue: null,
              type: 'bytes',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { EIP20:
            { projectGraph: [Circular],
              name: 'EIP20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 transfer: [Array],
                 transferFrom: [Array],
                 balanceOf: [Array],
                 approve: [Array],
                 allowance: [Array] },
              modifiers: {},
              stateVariables:
               { MAX_UINT256: [Object],
                 name: [Object],
                 decimals: [Object],
                 symbol: [Object],
                 balances: [Object],
                 allowed: [Object],
                 totalSupply: [Object] },
              dependencies: { EIP20Interface: [Object] },
              inheritsFrom: { EIP20Interface: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'EIP20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EIP20Factory',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'verifyEIP20',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'codeAt',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'createEIP20',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 62, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Factory.sol' },
     EIP20Interface:
      { projectGraph: [Circular],
        name: 'EIP20Interface',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EIP20Interface',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 48, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' },
     Executable:
      { projectGraph: [Circular],
        name: 'Executable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { x:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'x',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Executable',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 10, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/exec/contracts/Executable.sol' },
     Branch:
      { projectGraph: [Circular],
        name: 'Branch',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { branch:
            { functionsWrite: {},
              contract: [Circular],
              name: 'branch',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafA:
            { projectGraph: [Circular],
              name: 'LeafA',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafA: [Object] },
              dependencies: { LeafC: [Object] },
              inheritsFrom: { LeafC: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafA',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafA.sol' },
           LeafB:
            { projectGraph: [Circular],
              name: 'LeafB',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafB: [Object] },
              dependencies: { LeafC: [Object] },
              inheritsFrom: { LeafC: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafB',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafB.sol' } },
        inheritsFrom:
         { LeafA:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafA',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafA.sol' },
              parameters: [],
              level: 0 },
           LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 1 },
           LeafB:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafB',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafB.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Branch',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/Branch.sol' },
     LeafA:
      { projectGraph: [Circular],
        name: 'LeafA',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { leafA:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafA',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' } },
        inheritsFrom:
         { LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'LeafA',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafA.sol' },
     LeafB:
      { projectGraph: [Circular],
        name: 'LeafB',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { leafB:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafB',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' } },
        inheritsFrom:
         { LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'LeafB',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafB.sol' },
     LeafC:
      { projectGraph: [Circular],
        name: 'LeafC',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { leafC:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafC',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'LeafC',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 5, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
     LibraryA:
      { projectGraph: [Circular],
        name: 'LibraryA',
        kind: 'library',
        isAbstract: false,
        functions:
         { add:
            [ { name: 'add',
                signature: 'add(uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'LibraryA',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'add',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LibraryA.sol' },
     Root:
      { projectGraph: [Circular],
        name: 'Root',
        kind: 'contract',
        isAbstract: false,
        functions:
         { addToRoot:
            [ { name: 'addToRoot',
                signature: 'addToRoot(uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { root:
            { functionsWrite: { addToRoot: [Array] },
              contract: [Circular],
              name: 'root',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           branch:
            { functionsWrite: {},
              contract: [Circular],
              name: 'branch',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           leafA:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafA',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           leafB:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafB',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           leafC:
            { functionsWrite: {},
              contract: [Circular],
              name: 'leafC',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Branch:
            { projectGraph: [Circular],
              name: 'Branch',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { branch: [Object] },
              dependencies: { LeafA: [Object], LeafB: [Object] },
              inheritsFrom: { LeafA: [Object], LeafC: [Object], LeafB: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Branch',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/Branch.sol' },
           LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
           LibraryA:
            { projectGraph: [Circular],
              name: 'LibraryA',
              kind: 'library',
              isAbstract: false,
              functions: { add: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LibraryA',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LibraryA.sol' } },
        inheritsFrom:
         { Branch:
            { contract:
               { projectGraph: [Circular],
                 name: 'Branch',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/Branch.sol' },
              parameters: [],
              level: 0 },
           LeafA:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafA',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafA.sol' },
              parameters: [],
              level: 1 },
           LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 2 },
           LeafB:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafB',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafB.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Root',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addToRoot',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 7, column: 0 }, end: { line: 13, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/Root.sol' },
     SameFile1:
      { projectGraph: [Circular],
        name: 'SameFile1',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { samefile1:
            { functionsWrite: {},
              contract: [Circular],
              name: 'samefile1',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' } },
        inheritsFrom:
         { LeafC:
            { contract:
               { projectGraph: [Circular],
                 name: 'LeafC',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SameFile1',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/SameFile.sol' },
     SameFile2:
      { projectGraph: [Circular],
        name: 'SameFile2',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { samefile2:
            { functionsWrite: {},
              contract: [Circular],
              name: 'samefile2',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { LeafC:
            { projectGraph: [Circular],
              name: 'LeafC',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { leafC: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'LeafC',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/LeafC.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SameFile2',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 9, column: 0 }, end: { line: 11, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/inheritance/contracts/SameFile.sol' },
     Abstract:
      { projectGraph: [Circular],
        name: 'Abstract',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Abstract',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'method',
                parameters: [],
                returnParameters: null,
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 5, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/migrations/error/contracts/Abstract.sol' },
     Example:
      { projectGraph: [Circular],
        name: 'Example',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'Example',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Example',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/migrations/error/contracts/Example.sol' },
     ExampleAssert:
      { projectGraph: [Circular],
        name: 'ExampleAssert',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ExampleAssert',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/migrations/error/contracts/ExampleAssert.sol' },
     ExampleRevert:
      { projectGraph: [Circular],
        name: 'ExampleRevert',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ExampleRevert',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/migrations/error/contracts/ExampleRevert.sol' },
     Loops:
      { projectGraph: [Circular],
        name: 'Loops',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Loops',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 11, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/migrations/error/contracts/Loops.sol' },
     RevertWithReason:
      { projectGraph: [Circular],
        name: 'RevertWithReason',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'RevertWithReason',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'RevertWithReason',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/migrations/error/contracts/RevertWithReason.sol' },
     UsesExample:
      { projectGraph: [Circular],
        name: 'UsesExample',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'UsesExample',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           other:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'other',
              isArray: false,
              initialValue: null,
              type: 'address',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'UsesExample',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 10, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/migrations/error/contracts/UsesExample.sol' },
     IsLibrary:
      { projectGraph: [Circular],
        name: 'IsLibrary',
        kind: 'library',
        isAbstract: false,
        functions:
         { fireIsLibraryEvent:
            [ { name: 'fireIsLibraryEvent',
                signature: 'fireIsLibraryEvent(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'IsLibrary',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'IsLibrary',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'IsLibraryEvent',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'fireIsLibraryEvent',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 10, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/migrations/fabric-evm/contracts/IsLibrary.sol' },
     PayableExample:
      { projectGraph: [Circular],
        name: 'PayableExample',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { id:
            { functionsWrite: {},
              contract: [Circular],
              name: 'id',
              isArray: false,
              initialValue: 'PayableExample',
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PayableExample',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: 'payable',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 4, column: 0 }, end: { line: 7, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/migrations/fabric-evm/contracts/PayableExample.sol' },
     UsesLibrary:
      { projectGraph: [Circular],
        name: 'UsesLibrary',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           fireIsLibraryEvent:
            [ { name: 'fireIsLibraryEvent',
                signature: 'fireIsLibraryEvent(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           fireUsesLibraryEvent:
            [ { name: 'fireUsesLibraryEvent',
                signature: 'fireUsesLibraryEvent(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies:
         { IsLibrary:
            { projectGraph: [Circular],
              name: 'IsLibrary',
              kind: 'library',
              isAbstract: false,
              functions: { fireIsLibraryEvent: [Array] },
              modifiers: {},
              stateVariables: { id: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'IsLibrary',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/migrations/fabric-evm/contracts/IsLibrary.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'UsesLibrary',
           baseContracts: [],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'UsesLibraryEvent',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'fireIsLibraryEvent',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'fireUsesLibraryEvent',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 18, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/migrations/fabric-evm/contracts/UsesLibrary.sol' },
     Importer:
      { projectGraph: [Circular],
        name: 'Importer',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { local:
            { functionsWrite: {},
              contract: [Circular],
              name: 'local',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Importer',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle/test/sources/monorepo/errorproject/contracts/Importer.sol' } },
  structs:
   { IPS:
      { name: 'IPS',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: [Circular],
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        parameters:
         [ { name: 'i',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'p',
             isUserDefinedType: true,
             type: 'P',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 's',
             isUserDefinedType: true,
             type: 'S',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'isSet',
             isUserDefinedType: false,
             type: 'bool',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Definitions.IPS':
      { name: 'IPS',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: [Circular],
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        parameters:
         [ { name: 'i',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'p',
             isUserDefinedType: true,
             type: 'P',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 's',
             isUserDefinedType: true,
             type: 'S',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'isSet',
             isUserDefinedType: false,
             type: 'bool',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     ContractState:
      { name: 'ContractState',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState: [Circular],
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        parameters:
         [ { name: 'lastEventTime',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'contractStatus',
             isUserDefinedType: true,
             type: 'ContractStatus',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'timeFromLastEvent',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'nominalValue',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'nominalAccrued',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'feeAccrued',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'nominalRate',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'interestScalingMultiplier',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'nominalScalingMultiplier',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'contractRoleSign',
             isUserDefinedType: true,
             type: 'ContractRole',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Definitions.ContractState':
      { name: 'ContractState',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState: [Circular],
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        parameters:
         [ { name: 'lastEventTime',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'contractStatus',
             isUserDefinedType: true,
             type: 'ContractStatus',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'timeFromLastEvent',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'nominalValue',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'nominalAccrued',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'feeAccrued',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'nominalRate',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'interestScalingMultiplier',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'nominalScalingMultiplier',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'contractRoleSign',
             isUserDefinedType: true,
             type: 'ContractRole',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     ContractEvent:
      { name: 'ContractEvent',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent: [Circular],
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        parameters:
         [ { name: 'eventTime',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'eventType',
             isUserDefinedType: true,
             type: 'EventType',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'currency',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'payoff',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'actualEventTime',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Definitions.ContractEvent':
      { name: 'ContractEvent',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent: [Circular],
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        parameters:
         [ { name: 'eventTime',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'eventType',
             isUserDefinedType: true,
             type: 'EventType',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'currency',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'payoff',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'actualEventTime',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     ProtoEvent:
      { name: 'ProtoEvent',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent: [Circular],
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        parameters:
         [ { name: 'eventTime',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'eventTimeWithEpochOffset',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'scheduleTime',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'eventType',
             isUserDefinedType: true,
             type: 'EventType',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'currency',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'pofType',
             isUserDefinedType: true,
             type: 'EventType',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'stfType',
             isUserDefinedType: true,
             type: 'EventType',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Definitions.ProtoEvent':
      { name: 'ProtoEvent',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent: [Circular],
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        parameters:
         [ { name: 'eventTime',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'eventTimeWithEpochOffset',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'scheduleTime',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'eventType',
             isUserDefinedType: true,
             type: 'EventType',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'currency',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'pofType',
             isUserDefinedType: true,
             type: 'EventType',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'stfType',
             isUserDefinedType: true,
             type: 'EventType',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     ContractTerms:
      { name: 'ContractTerms',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms: [Circular] },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        parameters:
         [ { name: 'contractType',
             isUserDefinedType: true,
             type: 'ContractType',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'calendar',
             isUserDefinedType: true,
             type: 'Calendar',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'contractRole',
             isUserDefinedType: true,
             type: 'ContractRole',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'legalEntityIdRecordCreator',
             isUserDefinedType: false,
             type: 'bytes32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'legalEntityIdCounterparty',
             isUserDefinedType: false,
             type: 'bytes32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'dayCountConvention',
             isUserDefinedType: true,
             type: 'DayCountConvention',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'businessDayConvention',
             isUserDefinedType: true,
             type: 'BusinessDayConvention',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'endOfMonthConvention',
             isUserDefinedType: true,
             type: 'EndOfMonthConvention',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'currency',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'scalingEffect',
             isUserDefinedType: true,
             type: 'ScalingEffect',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'penaltyType',
             isUserDefinedType: true,
             type: 'PenaltyType',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'feeBasis',
             isUserDefinedType: true,
             type: 'FeeBasis',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'contractDealDate',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'statusDate',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'initialExchangeDate',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'maturityDate',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'terminationDate',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'purchaseDate',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'capitalizationEndDate',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleAnchorDateOfInterestPayment',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleAnchorDateOfRateReset',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleAnchorDateOfScalingIndex',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleAnchorDateOfFee',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'notionalPrincipal',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'nominalInterestRate',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'feeAccrued',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'accruedInterest',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'rateMultiplier',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'rateSpread',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'feeRate',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'nextResetRate',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'penaltyRate',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'premiumDiscountAtIED',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'priceAtPurchaseDate',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleOfInterestPayment',
             isUserDefinedType: true,
             type: 'Definitions.IPS',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleOfRateReset',
             isUserDefinedType: true,
             type: 'Definitions.IPS',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleOfScalingIndex',
             isUserDefinedType: true,
             type: 'Definitions.IPS',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleOfFee',
             isUserDefinedType: true,
             type: 'Definitions.IPS',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'lifeCap',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'lifeFloor',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'periodCap',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'periodFloor',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Definitions.ContractTerms':
      { name: 'ContractTerms',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms: [Circular] },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        parameters:
         [ { name: 'contractType',
             isUserDefinedType: true,
             type: 'ContractType',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'calendar',
             isUserDefinedType: true,
             type: 'Calendar',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'contractRole',
             isUserDefinedType: true,
             type: 'ContractRole',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'legalEntityIdRecordCreator',
             isUserDefinedType: false,
             type: 'bytes32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'legalEntityIdCounterparty',
             isUserDefinedType: false,
             type: 'bytes32',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'dayCountConvention',
             isUserDefinedType: true,
             type: 'DayCountConvention',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'businessDayConvention',
             isUserDefinedType: true,
             type: 'BusinessDayConvention',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'endOfMonthConvention',
             isUserDefinedType: true,
             type: 'EndOfMonthConvention',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'currency',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'scalingEffect',
             isUserDefinedType: true,
             type: 'ScalingEffect',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'penaltyType',
             isUserDefinedType: true,
             type: 'PenaltyType',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'feeBasis',
             isUserDefinedType: true,
             type: 'FeeBasis',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'contractDealDate',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'statusDate',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'initialExchangeDate',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'maturityDate',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'terminationDate',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'purchaseDate',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'capitalizationEndDate',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleAnchorDateOfInterestPayment',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleAnchorDateOfRateReset',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleAnchorDateOfScalingIndex',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleAnchorDateOfFee',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'notionalPrincipal',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'nominalInterestRate',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'feeAccrued',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'accruedInterest',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'rateMultiplier',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'rateSpread',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'feeRate',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'nextResetRate',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'penaltyRate',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'premiumDiscountAtIED',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'priceAtPurchaseDate',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleOfInterestPayment',
             isUserDefinedType: true,
             type: 'Definitions.IPS',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleOfRateReset',
             isUserDefinedType: true,
             type: 'Definitions.IPS',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleOfScalingIndex',
             isUserDefinedType: true,
             type: 'Definitions.IPS',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'cycleOfFee',
             isUserDefinedType: true,
             type: 'Definitions.IPS',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false },
           { name: 'lifeCap',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'lifeFloor',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'periodCap',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'periodFloor',
             isUserDefinedType: false,
             type: 'int256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Role:
      { name: 'Role',
        contract:
         { projectGraph: [Circular],
           name: 'Roles',
           kind: 'library',
           isAbstract: false,
           functions:
            { add: [ [Object] ], remove: [ [Object] ], has: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Role: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Roles',
              baseContracts: [],
              subNodes: [ [Object], [Object], [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' },
        parameters:
         [ { name: 'bearer',
             isUserDefinedType: false,
             type: 'mapping(address=>bool)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Roles.Role':
      { name: 'Role',
        contract:
         { projectGraph: [Circular],
           name: 'Roles',
           kind: 'library',
           isAbstract: false,
           functions:
            { add: [ [Object] ], remove: [ [Object] ], has: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies: {},
           inheritsFrom: {},
           structs: { Role: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Roles',
              baseContracts: [],
              subNodes: [ [Object], [Object], [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/access/Roles.sol' },
        parameters:
         [ { name: 'bearer',
             isUserDefinedType: false,
             type: 'mapping(address=>bool)})',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Counter:
      { name: 'Counter',
        contract:
         { projectGraph: [Circular],
           name: 'Counters',
           kind: 'library',
           isAbstract: false,
           functions:
            { current: [ [Object] ],
              increment: [ [Object] ],
              decrement: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
           inheritsFrom: {},
           structs: { Counter: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Counters',
              baseContracts: [],
              subNodes: [ [Object], [Object], [Object], [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
        parameters:
         [ { name: '_value',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'Counters.Counter':
      { name: 'Counter',
        contract:
         { projectGraph: [Circular],
           name: 'Counters',
           kind: 'library',
           isAbstract: false,
           functions:
            { current: [ [Object] ],
              increment: [ [Object] ],
              decrement: [ [Object] ] },
           modifiers: {},
           stateVariables: {},
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' } },
           inheritsFrom: {},
           structs: { Counter: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Counters',
              baseContracts: [],
              subNodes: [ [Object], [Object], [Object], [Object], [Object] ],
              kind: 'library',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
        parameters:
         [ { name: '_value',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Snapshots:
      { name: 'Snapshots',
        contract:
         { projectGraph: [Circular],
           name: 'ERC20Snapshot',
           kind: 'contract',
           isAbstract: false,
           functions:
            { snapshot: [ [Object] ],
              balanceOfAt: [ [Object] ],
              totalSupplyAt: [ [Object] ],
              _transfer: [ [Object] ],
              _mint: [ [Object] ],
              _burn: [ [Object] ],
              _valueAt: [ [Object] ],
              _updateAccountSnapshot: [ [Object] ],
              _updateTotalSupplySnapshot: [ [Object] ],
              _updateSnapshot: [ [Object] ],
              _lastSnapshotId: [ [Object] ] },
           modifiers: {},
           stateVariables:
            { _accountBalanceSnapshots:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_accountBalanceSnapshots',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>ERC20Snapshot.Snapshots)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _totalSupplySnapshots:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_totalSupplySnapshots',
                 isArray: false,
                 initialValue: null,
                 type: 'ERC20Snapshot.Snapshots',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _currentSnapshotId:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_currentSnapshotId',
                 isArray: false,
                 initialValue: null,
                 type: 'Counters.Counter',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _balances:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_balances',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _allowances:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_allowances',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>mapping(address=>uint256)}))})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _totalSupply:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_totalSupply',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
              Arrays:
               { projectGraph: [Circular],
                 name: 'Arrays',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/Arrays.sol' },
              Counters:
               { projectGraph: [Circular],
                 name: 'Counters',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
              ERC20:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
           inheritsFrom:
            { ERC20: { contract: [Object], parameters: [], level: 0 },
              IERC20: { contract: [Object], parameters: [], level: 1 } },
           structs: { Snapshots: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'ERC20Snapshot',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/ERC20Snapshot.sol' },
        parameters:
         [ { name: 'ids',
             isUserDefinedType: false,
             type: 'uint256[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'values',
             isUserDefinedType: false,
             type: 'uint256[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'ERC20Snapshot.Snapshots':
      { name: 'Snapshots',
        contract:
         { projectGraph: [Circular],
           name: 'ERC20Snapshot',
           kind: 'contract',
           isAbstract: false,
           functions:
            { snapshot: [ [Object] ],
              balanceOfAt: [ [Object] ],
              totalSupplyAt: [ [Object] ],
              _transfer: [ [Object] ],
              _mint: [ [Object] ],
              _burn: [ [Object] ],
              _valueAt: [ [Object] ],
              _updateAccountSnapshot: [ [Object] ],
              _updateTotalSupplySnapshot: [ [Object] ],
              _updateSnapshot: [ [Object] ],
              _lastSnapshotId: [ [Object] ] },
           modifiers: {},
           stateVariables:
            { _accountBalanceSnapshots:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_accountBalanceSnapshots',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>ERC20Snapshot.Snapshots)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _totalSupplySnapshots:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_totalSupplySnapshots',
                 isArray: false,
                 initialValue: null,
                 type: 'ERC20Snapshot.Snapshots',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _currentSnapshotId:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_currentSnapshotId',
                 isArray: false,
                 initialValue: null,
                 type: 'Counters.Counter',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _balances:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_balances',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _allowances:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_allowances',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>mapping(address=>uint256)}))})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _totalSupply:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_totalSupply',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { SafeMath:
               { projectGraph: [Circular],
                 name: 'SafeMath',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol' },
              Arrays:
               { projectGraph: [Circular],
                 name: 'Arrays',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/utils/Arrays.sol' },
              Counters:
               { projectGraph: [Circular],
                 name: 'Counters',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: {},
                 structs: [Object],
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/Counters.sol' },
              ERC20:
               { projectGraph: [Circular],
                 name: 'ERC20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol' } },
           inheritsFrom:
            { ERC20: { contract: [Object], parameters: [], level: 0 },
              IERC20: { contract: [Object], parameters: [], level: 1 } },
           structs: { Snapshots: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'ERC20Snapshot',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/drafts/ERC20Snapshot.sol' },
        parameters:
         [ { name: 'ids',
             isUserDefinedType: false,
             type: 'uint256[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'values',
             isUserDefinedType: false,
             type: 'uint256[]',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Func:
      { name: 'Func',
        contract:
         { projectGraph: [Circular],
           name: 'FunctionTypes',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              withdraw: [ [Object] ],
              frwd: [ [Object] ],
              breakIt: [ [Object] ],
              run: [ [Object] ] },
           modifiers: {},
           stateVariables:
            { count:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'count',
                 isArray: false,
                 initialValue: 2,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs: { Func: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'FunctionTypes',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle-security/integration-tests/project/contracts/Test.sol' },
        parameters:
         [ { name: 'f',
             isUserDefinedType: false,
             type: 'FunctionTypeName',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'FunctionTypes.Func':
      { name: 'Func',
        contract:
         { projectGraph: [Circular],
           name: 'FunctionTypes',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              withdraw: [ [Object] ],
              frwd: [ [Object] ],
              breakIt: [ [Object] ],
              run: [ [Object] ] },
           modifiers: {},
           stateVariables:
            { count:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'count',
                 isArray: false,
                 initialValue: 2,
                 type: 'uint',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs: { Func: [Circular] },
           enums: {},
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'FunctionTypes',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/truffle-security/integration-tests/project/contracts/Test.sol' },
        parameters:
         [ { name: 'f',
             isUserDefinedType: false,
             type: 'FunctionTypeName',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] } },
  enums:
   { P:
      { name: 'P',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: [Circular],
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'D', 'W', 'M', 'Q', 'H', 'Y' ] },
     'Definitions.P':
      { name: 'P',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: [Circular],
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'D', 'W', 'M', 'Q', 'H', 'Y' ] },
     S:
      { name: 'S',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: [Circular],
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'LONG', 'SHORT' ] },
     'Definitions.S':
      { name: 'S',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: [Circular],
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'LONG', 'SHORT' ] },
     EventType:
      { name: 'EventType',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType: [Circular],
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members:
         [ 'SD',
           'MD',
           'AD',
           'IED',
           'IP',
           'PR',
           'PP',
           'PY',
           'FP',
           'PRD',
           'TD',
           'IPCI',
           'RR',
           'RRY',
           'SC',
           'CD',
           'DV',
           'MR',
           'IPCB',
           'STD',
           'Child' ] },
     'Definitions.EventType':
      { name: 'EventType',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType: [Circular],
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members:
         [ 'SD',
           'MD',
           'AD',
           'IED',
           'IP',
           'PR',
           'PP',
           'PY',
           'FP',
           'PRD',
           'TD',
           'IPCI',
           'RR',
           'RRY',
           'SC',
           'CD',
           'DV',
           'MR',
           'IPCB',
           'STD',
           'Child' ] },
     Calendar:
      { name: 'Calendar',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: [Circular],
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'NoCalendar', 'MondayToFriday' ] },
     'Definitions.Calendar':
      { name: 'Calendar',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: [Circular],
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'NoCalendar', 'MondayToFriday' ] },
     BusinessDayConvention:
      { name: 'BusinessDayConvention',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention: [Circular],
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members:
         [ 'NULL', 'SCF', 'SCMF', 'CSF', 'CSMF', 'SCP', 'SCMP', 'CSP', 'CSMP' ] },
     'Definitions.BusinessDayConvention':
      { name: 'BusinessDayConvention',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention: [Circular],
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members:
         [ 'NULL', 'SCF', 'SCMF', 'CSF', 'CSMF', 'SCP', 'SCMP', 'CSP', 'CSMP' ] },
     ClearingHouse:
      { name: 'ClearingHouse',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse: [Circular],
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'YES', 'NO' ] },
     'Definitions.ClearingHouse':
      { name: 'ClearingHouse',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse: [Circular],
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'YES', 'NO' ] },
     ContractRole:
      { name: 'ContractRole',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole: [Circular],
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members:
         [ 'RPA', 'RPL', 'LG', 'ST', 'RFL', 'PFL', 'BUY', 'SEL', 'GUA', 'OBL' ] },
     'Definitions.ContractRole':
      { name: 'ContractRole',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole: [Circular],
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members:
         [ 'RPA', 'RPL', 'LG', 'ST', 'RFL', 'PFL', 'BUY', 'SEL', 'GUA', 'OBL' ] },
     ContractStatus:
      { name: 'ContractStatus',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus: [Circular],
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'PF', 'DL', 'DQ', 'DF' ] },
     'Definitions.ContractStatus':
      { name: 'ContractStatus',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus: [Circular],
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'PF', 'DL', 'DQ', 'DF' ] },
     ContractType:
      { name: 'ContractType',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType: [Circular],
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members:
         [ 'PAM',
           'ANN',
           'NAM',
           'LAM',
           'LAX',
           'CLM',
           'UMP',
           'CSH',
           'STK',
           'COM',
           'SWAPS',
           'SWPPV',
           'FXOUT',
           'CAPFL',
           'FUTUR',
           'OPTNS',
           'CEG',
           'CEC' ] },
     'Definitions.ContractType':
      { name: 'ContractType',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType: [Circular],
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members:
         [ 'PAM',
           'ANN',
           'NAM',
           'LAM',
           'LAX',
           'CLM',
           'UMP',
           'CSH',
           'STK',
           'COM',
           'SWAPS',
           'SWPPV',
           'FXOUT',
           'CAPFL',
           'FUTUR',
           'OPTNS',
           'CEG',
           'CEC' ] },
     CyclePointOfInterestPayment:
      { name: 'CyclePointOfInterestPayment',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment: [Circular],
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'EndOf', 'BeginningOf' ] },
     'Definitions.CyclePointOfInterestPayment':
      { name: 'CyclePointOfInterestPayment',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment: [Circular],
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'EndOf', 'BeginningOf' ] },
     CyclePointOfRateReset:
      { name: 'CyclePointOfRateReset',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset: [Circular],
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'BeginningOf', 'EndOf' ] },
     'Definitions.CyclePointOfRateReset':
      { name: 'CyclePointOfRateReset',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset: [Circular],
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'BeginningOf', 'EndOf' ] },
     CycleTriggerOfOptionality:
      { name: 'CycleTriggerOfOptionality',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality: [Circular],
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'IP', 'PR', 'RR' ] },
     'Definitions.CycleTriggerOfOptionality':
      { name: 'CycleTriggerOfOptionality',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality: [Circular],
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'IP', 'PR', 'RR' ] },
     DayCountConvention:
      { name: 'DayCountConvention',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention: [Circular],
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members:
         [ 'A_AISDA',
           'A_360',
           'A_365',
           '_30E_360ISDA',
           '_30E_360',
           '_30_360',
           'BUS_252' ] },
     'Definitions.DayCountConvention':
      { name: 'DayCountConvention',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention: [Circular],
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members:
         [ 'A_AISDA',
           'A_360',
           'A_365',
           '_30E_360ISDA',
           '_30E_360',
           '_30_360',
           'BUS_252' ] },
     EndOfMonthConvention:
      { name: 'EndOfMonthConvention',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention: [Circular],
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'EOM', 'SD' ] },
     'Definitions.EndOfMonthConvention':
      { name: 'EndOfMonthConvention',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention: [Circular],
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'EOM', 'SD' ] },
     EventLevel:
      { name: 'EventLevel',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel: [Circular],
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'P' ] },
     'Definitions.EventLevel':
      { name: 'EventLevel',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel: [Circular],
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'P' ] },
     FeeBasis:
      { name: 'FeeBasis',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: [Circular],
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'A', 'N' ] },
     'Definitions.FeeBasis':
      { name: 'FeeBasis',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: [Circular],
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'A', 'N' ] },
     InterestCalculationBase:
      { name: 'InterestCalculationBase',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase: [Circular],
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'NT', 'NTIED', 'NTL' ] },
     'Definitions.InterestCalculationBase':
      { name: 'InterestCalculationBase',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase: [Circular],
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'NT', 'NTIED', 'NTL' ] },
     MarketObjectCodeOfRateReset:
      { name: 'MarketObjectCodeOfRateReset',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset: [Circular],
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'USD_SWP', 'USD_GOV', 'CHF_SWP' ] },
     'Definitions.MarketObjectCodeOfRateReset':
      { name: 'MarketObjectCodeOfRateReset',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset: [Circular],
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'USD_SWP', 'USD_GOV', 'CHF_SWP' ] },
     ObjectCodeOfPrepaymentModel:
      { name: 'ObjectCodeOfPrepaymentModel',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel: [Circular],
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'IDXY' ] },
     'Definitions.ObjectCodeOfPrepaymentModel':
      { name: 'ObjectCodeOfPrepaymentModel',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel: [Circular],
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'IDXY' ] },
     OptionExecutionType:
      { name: 'OptionExecutionType',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType: [Circular],
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'E', 'B', 'A' ] },
     'Definitions.OptionExecutionType':
      { name: 'OptionExecutionType',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType: [Circular],
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'E', 'B', 'A' ] },
     OptionStrikeDriver:
      { name: 'OptionStrikeDriver',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver: [Circular],
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'FX', 'IR', 'PR' ] },
     'Definitions.OptionStrikeDriver':
      { name: 'OptionStrikeDriver',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver: [Circular],
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'FX', 'IR', 'PR' ] },
     OptionType:
      { name: 'OptionType',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType: [Circular],
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'C', 'P', 'CP' ] },
     'Definitions.OptionType':
      { name: 'OptionType',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType: [Circular],
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'C', 'P', 'CP' ] },
     PenaltyType:
      { name: 'PenaltyType',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType: [Circular],
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'O', 'A', 'N', 'I' ] },
     'Definitions.PenaltyType':
      { name: 'PenaltyType',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType: [Circular],
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'O', 'A', 'N', 'I' ] },
     PrepaymentEffect:
      { name: 'PrepaymentEffect',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect: [Circular],
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'N', 'A', 'M' ] },
     'Definitions.PrepaymentEffect':
      { name: 'PrepaymentEffect',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect: [Circular],
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'N', 'A', 'M' ] },
     ScalingEffect:
      { name: 'ScalingEffect',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect: [Circular],
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members:
         [ '_000', '_0N0', '_00M', '_0NM', 'I00', 'IN0', 'I0M', 'INM' ] },
     'Definitions.ScalingEffect':
      { name: 'ScalingEffect',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect: [Circular],
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members:
         [ '_000', '_0N0', '_00M', '_0NM', 'I00', 'IN0', 'I0M', 'INM' ] },
     Seniority:
      { name: 'Seniority',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority: [Circular],
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'S', 'J' ] },
     'Definitions.Seniority':
      { name: 'Seniority',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority: [Circular],
              Unit: { name: 'Unit', contract: [Circular], members: [Array] } },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members: [ 'S', 'J' ] },
     Unit:
      { name: 'Unit',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: [Circular] },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members:
         [ 'BRL', 'BSH', 'GLN', 'CUU', 'MWH', 'PND', 'STN', 'TON', 'TRO' ] },
     'Definitions.Unit':
      { name: 'Unit',
        contract:
         { projectGraph: [Circular],
           name: 'Definitions',
           kind: 'contract',
           isAbstract: true,
           functions: {},
           modifiers: {},
           stateVariables:
            { INT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MIN',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              INT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'INT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MIN',
                 isArray: false,
                 initialValue: 0,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              UINT256_MAX:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'UINT256_MAX',
                 isArray: false,
                 initialValue: undefined,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOUBLE_NULL:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOUBLE_NULL',
                 isArray: false,
                 initialValue: undefined,
                 type: 'int256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              PRECISION:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'PRECISION',
                 isArray: false,
                 initialValue: 18,
                 type: 'uint256',
                 visibility: 'public',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_CYCLE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_CYCLE_SIZE',
                 isArray: false,
                 initialValue: 16,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              MAX_EVENT_SCHEDULE_SIZE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'MAX_EVENT_SCHEDULE_SIZE',
                 isArray: false,
                 initialValue: 64,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies: {},
           inheritsFrom: {},
           structs:
            { IPS: { name: 'IPS', contract: [Circular], parameters: [Array] },
              ContractState:
               { name: 'ContractState',
                 contract: [Circular],
                 parameters: [Array] },
              ContractEvent:
               { name: 'ContractEvent',
                 contract: [Circular],
                 parameters: [Array] },
              ProtoEvent:
               { name: 'ProtoEvent', contract: [Circular], parameters: [Array] },
              ContractTerms:
               { name: 'ContractTerms',
                 contract: [Circular],
                 parameters: [Array] } },
           enums:
            { P: { name: 'P', contract: [Circular], members: [Array] },
              S: { name: 'S', contract: [Circular], members: [Array] },
              EventType:
               { name: 'EventType', contract: [Circular], members: [Array] },
              Calendar: { name: 'Calendar', contract: [Circular], members: [Array] },
              BusinessDayConvention:
               { name: 'BusinessDayConvention',
                 contract: [Circular],
                 members: [Array] },
              ClearingHouse:
               { name: 'ClearingHouse', contract: [Circular], members: [Array] },
              ContractRole:
               { name: 'ContractRole', contract: [Circular], members: [Array] },
              ContractStatus:
               { name: 'ContractStatus',
                 contract: [Circular],
                 members: [Array] },
              ContractType:
               { name: 'ContractType', contract: [Circular], members: [Array] },
              CyclePointOfInterestPayment:
               { name: 'CyclePointOfInterestPayment',
                 contract: [Circular],
                 members: [Array] },
              CyclePointOfRateReset:
               { name: 'CyclePointOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              CycleTriggerOfOptionality:
               { name: 'CycleTriggerOfOptionality',
                 contract: [Circular],
                 members: [Array] },
              DayCountConvention:
               { name: 'DayCountConvention',
                 contract: [Circular],
                 members: [Array] },
              EndOfMonthConvention:
               { name: 'EndOfMonthConvention',
                 contract: [Circular],
                 members: [Array] },
              EventLevel:
               { name: 'EventLevel', contract: [Circular], members: [Array] },
              FeeBasis: { name: 'FeeBasis', contract: [Circular], members: [Array] },
              InterestCalculationBase:
               { name: 'InterestCalculationBase',
                 contract: [Circular],
                 members: [Array] },
              MarketObjectCodeOfRateReset:
               { name: 'MarketObjectCodeOfRateReset',
                 contract: [Circular],
                 members: [Array] },
              ObjectCodeOfPrepaymentModel:
               { name: 'ObjectCodeOfPrepaymentModel',
                 contract: [Circular],
                 members: [Array] },
              OptionExecutionType:
               { name: 'OptionExecutionType',
                 contract: [Circular],
                 members: [Array] },
              OptionStrikeDriver:
               { name: 'OptionStrikeDriver',
                 contract: [Circular],
                 members: [Array] },
              OptionType:
               { name: 'OptionType', contract: [Circular], members: [Array] },
              PenaltyType:
               { name: 'PenaltyType', contract: [Circular], members: [Array] },
              PrepaymentEffect:
               { name: 'PrepaymentEffect',
                 contract: [Circular],
                 members: [Array] },
              ScalingEffect:
               { name: 'ScalingEffect', contract: [Circular], members: [Array] },
              Seniority:
               { name: 'Seniority', contract: [Circular], members: [Array] },
              Unit: [Circular] },
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'Definitions',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/contracts/Core/Definitions.sol' },
        members:
         [ 'BRL', 'BSH', 'GLN', 'CUU', 'MWH', 'PND', 'STN', 'TON', 'TRO' ] },
     State:
      { name: 'State',
        contract:
         { projectGraph: [Circular],
           name: 'RefundEscrow',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              state: [ [Object] ],
              beneficiary: [ [Object] ],
              deposit: [ [Object] ],
              close: [ [Object] ],
              enableRefunds: [ [Object] ],
              beneficiaryWithdraw: [ [Object] ],
              withdrawalAllowed: [ [Object] ] },
           modifiers:
            { onlyPrimary:
               { name: 'onlyPrimary',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { _state:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_state',
                 isArray: false,
                 initialValue: null,
                 type: 'State',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _beneficiary:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_beneficiary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _primary:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_primary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _deposits:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_deposits',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { ConditionalEscrow:
               { projectGraph: [Circular],
                 name: 'ConditionalEscrow',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' } },
           inheritsFrom:
            { ConditionalEscrow: { contract: [Object], parameters: [], level: 0 },
              Escrow: { contract: [Object], parameters: [], level: 1 },
              Secondary: { contract: [Object], parameters: [], level: 2 } },
           structs: {},
           enums: { State: [Circular] },
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'RefundEscrow',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/escrow/RefundEscrow.sol' },
        members: [ 'Active', 'Refunding', 'Closed' ] },
     'RefundEscrow.State':
      { name: 'State',
        contract:
         { projectGraph: [Circular],
           name: 'RefundEscrow',
           kind: 'contract',
           isAbstract: false,
           functions:
            { constructor: [ [Object] ],
              state: [ [Object] ],
              beneficiary: [ [Object] ],
              deposit: [ [Object] ],
              close: [ [Object] ],
              enableRefunds: [ [Object] ],
              beneficiaryWithdraw: [ [Object] ],
              withdrawalAllowed: [ [Object] ] },
           modifiers:
            { onlyPrimary:
               { name: 'onlyPrimary',
                 functionDefinition: [Object],
                 contract: [Circular],
                 parameters: [] } },
           stateVariables:
            { _state:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_state',
                 isArray: false,
                 initialValue: null,
                 type: 'State',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _beneficiary:
               { functionsWrite: [Object],
                 contract: [Circular],
                 name: '_beneficiary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _primary:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_primary',
                 isArray: false,
                 initialValue: null,
                 type: 'address',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false },
              _deposits:
               { functionsWrite: {},
                 contract: [Circular],
                 name: '_deposits',
                 isArray: false,
                 initialValue: null,
                 type: 'mapping(address=>uint256)})',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: false,
                 isAddressContract: false } },
           dependencies:
            { ConditionalEscrow:
               { projectGraph: [Circular],
                 name: 'ConditionalEscrow',
                 kind: 'contract',
                 isAbstract: true,
                 functions: [Object],
                 modifiers: [Object],
                 stateVariables: {},
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol' } },
           inheritsFrom:
            { ConditionalEscrow: { contract: [Object], parameters: [], level: 0 },
              Escrow: { contract: [Object], parameters: [], level: 1 },
              Secondary: { contract: [Object], parameters: [], level: 2 } },
           structs: {},
           enums: { State: [Circular] },
           isThirdPartyLib: true,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'RefundEscrow',
              baseContracts: [ [Object] ],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: false,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/actus-solidity/node_modules/openzeppelin-solidity/contracts/payment/escrow/RefundEscrow.sol' },
        members: [ 'Active', 'Refunding', 'Closed' ] } } }