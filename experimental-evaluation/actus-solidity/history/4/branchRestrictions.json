,{
  "2020-11-10T15:34:47.536ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "111",
                "sol": "111"
              },
              {
                "js": "2448",
                "sol": "2448"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T15:34:47.538ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.538ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.538ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.539ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.539ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.540ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.542ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "minute >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN minute>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.545ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.546ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.546ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.546ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.546ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.548ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.556ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.557ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.557ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.557ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.558ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.558ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.558ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.559ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.559ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.559ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.560ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.560ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.562ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.562ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.563ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.563ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.564ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.564ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.565ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.565ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T15:34:47.566ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 82,
                "sol": 82
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T15:34:47.567ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 952,
                "sol": 952
              },
              {
                "js": "951",
                "sol": "951"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T15:34:47.567ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 402,
                "sol": 402
              },
              {
                "js": "401",
                "sol": "401"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T15:34:47.568ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 90,
                "sol": 90
              },
              {
                "js": "89",
                "sol": "89"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T15:34:47.570ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 32077,
                "sol": 32077
              },
              {
                "js": "32076",
                "sol": "32076"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T15:34:47.572ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.574ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T15:34:47.576ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.ContractRole.OBL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.ContractRole.BUY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.581ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "901",
                "sol": "901"
              },
              {
                "js": 900,
                "sol": 900
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": 100,
                "sol": 100
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "68570",
                "sol": "68570"
              },
              {
                "js": 68569,
                "sol": 68569
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "13",
                "sol": "13"
              },
              {
                "js": 12,
                "sol": 12
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": 3,
              "sol": "Definitions.DayCountConvention._30E_360ISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "109",
                "sol": "109"
              },
              {
                "js": 108,
                "sol": 108
              },
              {
                "js": 3,
                "sol": "Definitions.DayCountConvention._30E_360ISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T15:34:47.586ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.587ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.587ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.587ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.589ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{\"i\": 151,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(151,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{\"i\": 29,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(29,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{\"i\": 110,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(110,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{\"i\": 1337,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1337,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.591ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.592ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.594ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractStatus.DL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.597ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.602ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.606ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.607ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.612ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1969,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1969,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 2014223714,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(2014223714,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 59,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(59,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 32076,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(32076,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 13,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(13,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 2447,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2447,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 50,\"p\": 99999,\"s\": 1,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.616ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{\"i\": 69,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(69,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{\"i\": 146098,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(146098,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{\"i\": 149,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(149,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{\"i\": 86400,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(86400,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{\"i\": 89,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(89,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{\"i\": 97,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(97,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{\"i\": 401,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(401,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{\"i\": 1532892063,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1532892063,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{\"i\": 48,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(48,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.624ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 399,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(399,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 96,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(96,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 131,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(131,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 901,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(901,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 1338,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1338,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 6,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(6,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 40,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.628ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 150,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 14},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 30,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 14},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 139,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 6},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 1460,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 10},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 401,\"eventType\": 1,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 4},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 1971,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 1,\"stfType\": 0},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 131,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 15},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 110,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 13},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 4900,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 14},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 367,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 4},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 1462,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 255,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 9},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 63,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 12},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 900,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 7},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 27,\"eventType\": 2,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 12},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 101,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 4},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 130,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 6},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 2440587,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 20},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 0,\"eventType\": 3,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 4},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 950,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 7},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 4801,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 18},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 1,\"eventType\": 1,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 14},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 4899,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 2},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 151,\"eventType\": 11,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 64,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 4},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 8,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 3},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 50,\"eventType\": 4,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 10},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 19,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 31,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 1},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 150,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 2014223715,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 901,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 20},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 151,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 19},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 254,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 365,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 12},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 951,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 7},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 28,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 3},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 70,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 0},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 20,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 17,\"stfType\": 18},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 10,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 8},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 12,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 2446,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 15},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 110,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 19},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 19,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 4},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 4899,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 10},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 12,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 10000,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 17},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 9,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 8,\"stfType\": 14},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 1461002,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 12},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 365,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 5},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 361,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 1},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 96,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 17},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 89,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 12},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 1,\"eventType\": 11,\"currency\": accounts[2],\"pofType\": 20,\"stfType\": 11},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 27,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 11},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 1461,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 3},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 2447,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 14},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 14,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 19},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 59,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 16,\"stfType\": 14},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 1971,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 3},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 2440588,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 4},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 2440588,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 2},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 65,\"eventType\": 3,\"currency\": accounts[3],\"pofType\": 6,\"stfType\": 16},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 2014223714,\"eventType\": 5,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 6}]",
              "sol": "[Definitions.ProtoEvent(120,160,150,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.SC),Definitions.ProtoEvent(4899,901,30,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SC),Definitions.ProtoEvent(367,48,139,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PP),Definitions.ProtoEvent(120,366,1460,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.TD),Definitions.ProtoEvent(49,1532892062,401,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IP),Definitions.ProtoEvent(2447,0,1971,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.SD),Definitions.ProtoEvent(150,4899,131,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.CD),Definitions.ProtoEvent(140,86399,110,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RRY),Definitions.ProtoEvent(110,101,4900,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.SC),Definitions.ProtoEvent(21,27,367,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IP),Definitions.ProtoEvent(32076,89,1462,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(400,21,255,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PRD),Definitions.ProtoEvent(119,2014223715,63,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RR),Definitions.ProtoEvent(48,0,900,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PY),Definitions.ProtoEvent(10,15,27,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RR),Definitions.ProtoEvent(0,949,101,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IP),Definitions.ProtoEvent(4001,2446,130,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PP),Definitions.ProtoEvent(51,368,2440587,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.Child),Definitions.ProtoEvent(11,4900,0,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IP),Definitions.ProtoEvent(9999,2447,950,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PY),Definitions.ProtoEvent(159,1461000,4801,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IPCB),Definitions.ProtoEvent(160,81,1,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SC),Definitions.ProtoEvent(1338,21,4899,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.AD),Definitions.ProtoEvent(71,95,151,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(89,366,64,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IP),Definitions.ProtoEvent(367,1532892063,8,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IED),Definitions.ProtoEvent(91,70,50,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.TD),Definitions.ProtoEvent(14,71,19,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(146097,17,31,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MD),Definitions.ProtoEvent(50,10001,150,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(140,110,2014223715,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(41,146096,901,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.Child),Definitions.ProtoEvent(1338,2440587,151,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.STD),Definitions.ProtoEvent(256,49,254,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(86400,146097,365,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RR),Definitions.ProtoEvent(2448,1336,951,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PY),Definitions.ProtoEvent(71,12,28,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IED),Definitions.ProtoEvent(4900,254,70,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SD),Definitions.ProtoEvent(15,69,20,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCB),Definitions.ProtoEvent(18,71,10,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.FP),Definitions.ProtoEvent(1461002,59,12,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(368,30,2446,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.CD),Definitions.ProtoEvent(109,151,110,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.STD),Definitions.ProtoEvent(3999,150,19,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IP),Definitions.ProtoEvent(96,89,4899,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.TD),Definitions.ProtoEvent(10,368,12,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(254,8,10000,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.MR),Definitions.ProtoEvent(28,15,9,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.SC),Definitions.ProtoEvent(256,900,1461002,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RR),Definitions.ProtoEvent(1532892064,161,365,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PR),Definitions.ProtoEvent(146098,69,361,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.MD),Definitions.ProtoEvent(21,26,96,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MR),Definitions.ProtoEvent(1462,3,89,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RR),Definitions.ProtoEvent(364,18,1,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCI),Definitions.ProtoEvent(255,28,27,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCI),Definitions.ProtoEvent(146098,2447,1461,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IED),Definitions.ProtoEvent(70,3,2447,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.SC),Definitions.ProtoEvent(28,20,14,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.STD),Definitions.ProtoEvent(1969,68570,59,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SC),Definitions.ProtoEvent(1461,23,1971,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IED),Definitions.ProtoEvent(899,131,2440588,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IP),Definitions.ProtoEvent(4801,141,2440588,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.AD),Definitions.ProtoEvent(4899,26,65,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.DV),Definitions.ProtoEvent(1969,2440589,2014223714,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PP)]"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.642ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 48,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 8},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 4801,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 6},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 90,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 11},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 63,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 14},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 367,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 8},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 100,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 16,\"stfType\": 2},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 86399,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 19},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 1,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 10},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 130,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 1,\"stfType\": 11},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 86399,\"eventType\": 11,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 1},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 3999,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 48,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 11},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 359,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 10},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 1336,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 14},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 12,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 0},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 99,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 2},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 111,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 3},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 1336,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 11},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 1532892062,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 15},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 64,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 15},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 359,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 9},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 1462,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 1},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 365,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 10},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 20,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 13},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 9,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 2},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 68570,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 14},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 1338,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 2},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 48,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 9},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 91,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 1},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 159,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 13},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 4801,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 6},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 1970,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 150,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 18},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 8,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 14},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 2440588,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 14},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 1336,\"eventType\": 6,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 14},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 68569,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 2,\"stfType\": 5},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 79,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 1462,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 12},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 14,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 10},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 91,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 2},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 1336,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 3},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 146096,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 16,\"stfType\": 19},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 1336,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 12},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 97,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 20},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 1970,\"eventType\": 17,\"currency\": accounts[6],\"pofType\": 2,\"stfType\": 3},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 14,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 19},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 101,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 0},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 14,\"eventType\": 1,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 18},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 100,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 14},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 2014223714,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 4},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 254,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 14},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 367,\"eventType\": 8,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 12},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 256,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 19},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 1460,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 6},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 1969,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 13},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 40,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 4},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 68569,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 14},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 66,\"eventType\": 18,\"currency\": accounts[3],\"pofType\": 15,\"stfType\": 6},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 400,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 2,\"stfType\": 14},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 68569,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 11},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 399,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 2},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 1461001,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 14},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 4901,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 12}]",
              "sol": "[Definitions.ProtoEvent(2014223714,32075,48,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.FP),Definitions.ProtoEvent(2440588,2448,4801,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PP),Definitions.ProtoEvent(4000,32076,90,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCI),Definitions.ProtoEvent(2014223714,41,63,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SC),Definitions.ProtoEvent(110,21,367,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.FP),Definitions.ProtoEvent(121,68568,100,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.AD),Definitions.ProtoEvent(400,4901,86399,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.STD),Definitions.ProtoEvent(27,399,1,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.TD),Definitions.ProtoEvent(141,81,130,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCI),Definitions.ProtoEvent(129,361,86399,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MD),Definitions.ProtoEvent(69,97,3999,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(4801,159,48,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCI),Definitions.ProtoEvent(95,68570,359,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.TD),Definitions.ProtoEvent(68570,7,1336,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SC),Definitions.ProtoEvent(949,26,12,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SD),Definitions.ProtoEvent(30,2447,99,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.AD),Definitions.ProtoEvent(900,365,111,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IED),Definitions.ProtoEvent(2446,901,1336,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI),Definitions.ProtoEvent(70,95,1532892062,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.CD),Definitions.ProtoEvent(32074,12,64,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.CD),Definitions.ProtoEvent(24,120,359,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PRD),Definitions.ProtoEvent(951,59,1462,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.MD),Definitions.ProtoEvent(110,24,365,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.TD),Definitions.ProtoEvent(4901,109,20,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RRY),Definitions.ProtoEvent(255,2440589,9,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.AD),Definitions.ProtoEvent(49,367,68570,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SC),Definitions.ProtoEvent(95,1461002,1338,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.AD),Definitions.ProtoEvent(80,40,48,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PRD),Definitions.ProtoEvent(28,4901,91,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MD),Definitions.ProtoEvent(20,96,159,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY),Definitions.ProtoEvent(16,32074,4801,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PP),Definitions.ProtoEvent(4000,151,1970,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(27,20,150,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCB),Definitions.ProtoEvent(1,1461001,8,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SC),Definitions.ProtoEvent(1460,17,2440588,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SC),Definitions.ProtoEvent(23,2014223716,1336,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SC),Definitions.ProtoEvent(32075,64,68569,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PR),Definitions.ProtoEvent(3,25,79,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(51,2440587,1462,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RR),Definitions.ProtoEvent(10,150,14,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.TD),Definitions.ProtoEvent(2014223714,12,91,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.AD),Definitions.ProtoEvent(4000,27,1336,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IED),Definitions.ProtoEvent(150,7,146096,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.STD),Definitions.ProtoEvent(64,4801,1336,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RR),Definitions.ProtoEvent(10,951,97,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.Child),Definitions.ProtoEvent(4899,256,1970,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IED),Definitions.ProtoEvent(9999,68570,14,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.STD),Definitions.ProtoEvent(4001,10001,101,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SD),Definitions.ProtoEvent(32076,66,14,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCB),Definitions.ProtoEvent(4899,141,100,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SC),Definitions.ProtoEvent(48,23,2014223714,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IP),Definitions.ProtoEvent(359,61,254,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SC),Definitions.ProtoEvent(41,161,367,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RR),Definitions.ProtoEvent(361,60,256,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.STD),Definitions.ProtoEvent(2440588,90,1460,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PP),Definitions.ProtoEvent(2,51,1969,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RRY),Definitions.ProtoEvent(2440588,95,40,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IP),Definitions.ProtoEvent(4001,21,68569,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.SC),Definitions.ProtoEvent(949,364,66,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PP),Definitions.ProtoEvent(2440587,86401,400,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SC),Definitions.ProtoEvent(68570,9999,68569,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCI),Definitions.ProtoEvent(2447,1461,399,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.AD),Definitions.ProtoEvent(255,366,1461001,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SC),Definitions.ProtoEvent(1337,99,4901,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RR)]"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.658ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "endTimestamp < timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN endTimestamp<timestamp",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.660ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [115,101,214,154,59,250,223,84,3,123,162,7,144,135,223,126,97,150,170,231,24,141,65,125,91,152,225,248,35,30,24,211],\"legalEntityIdCounterparty\": [218,28,64,199,186,183,97,147,189,114,89,91,190,159,162,214,200,27,127,38,20,104,235,87,232,160,91,164,67,187,22,174],\"dayCountConvention\": 0,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 368,\"statusDate\": 4001,\"initialExchangeDate\": 255,\"maturityDate\": 4900,\"terminationDate\": 4900,\"purchaseDate\": 26,\"capitalizationEndDate\": 110,\"cycleAnchorDateOfInterestPayment\": 99,\"cycleAnchorDateOfRateReset\": 63,\"cycleAnchorDateOfScalingIndex\": 1336,\"cycleAnchorDateOfFee\": 1970,\"notionalPrincipal\": 0,\"nominalInterestRate\": 359,\"feeAccrued\": 31,\"accruedInterest\": 257,\"rateMultiplier\": 41,\"rateSpread\": 360,\"feeRate\": 146098,\"nextResetRate\": 2014223715,\"penaltyRate\": 0,\"premiumDiscountAtIED\": 10001,\"priceAtPurchaseDate\": 150,\"cycleOfInterestPayment\": {\"i\": 119,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 89,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4799,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 119,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 1460,\"lifeFloor\": 366,\"periodCap\": 31,\"periodFloor\": 91}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"115,101,214,154,59,250,223,84,3,123,162,7,144,135,223,126,97,150,170,231,24,141,65,125,91,152,225,248,35,30,24,211\"),stringToBytes32(\"218,28,64,199,186,183,97,147,189,114,89,91,190,159,162,214,200,27,127,38,20,104,235,87,232,160,91,164,67,187,22,174\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,368,4001,255,4900,4900,26,110,99,63,1336,1970,0,359,31,257,41,360,146098,2014223715,0,10001,150,Definitions.IPS(119,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(89,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(4799,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(119,Definitions.P.D,Definitions.S.SHORT,false),1460,366,31,91)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.663ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [103,57,33,63,134,91,142,194,59,70,113,148,167,174,142,174,108,196,111,126,87,243,154,86,61,18,124,32,26,110,137,158],\"legalEntityIdCounterparty\": [169,103,165,97,240,210,238,205,149,99,109,78,164,185,140,170,214,248,48,204,43,17,44,159,248,221,152,210,107,141,211,0],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 9999,\"statusDate\": 97,\"initialExchangeDate\": 65,\"maturityDate\": 1969,\"terminationDate\": 146097,\"purchaseDate\": 120,\"capitalizationEndDate\": 2,\"cycleAnchorDateOfInterestPayment\": 48,\"cycleAnchorDateOfRateReset\": 81,\"cycleAnchorDateOfScalingIndex\": 26,\"cycleAnchorDateOfFee\": 71,\"notionalPrincipal\": 131,\"nominalInterestRate\": 24,\"feeAccrued\": 97,\"accruedInterest\": 14,\"rateMultiplier\": 32076,\"rateSpread\": 901,\"feeRate\": 70,\"nextResetRate\": 81,\"penaltyRate\": 129,\"premiumDiscountAtIED\": 96,\"priceAtPurchaseDate\": 59,\"cycleOfInterestPayment\": {\"i\": 29,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2446,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 17,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2446,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 24,\"lifeFloor\": 10,\"periodCap\": 2014223716,\"periodFloor\": 2014223716}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"103,57,33,63,134,91,142,194,59,70,113,148,167,174,142,174,108,196,111,126,87,243,154,86,61,18,124,32,26,110,137,158\"),stringToBytes32(\"169,103,165,97,240,210,238,205,149,99,109,78,164,185,140,170,214,248,48,204,43,17,44,159,248,221,152,210,107,141,211,0\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,9999,97,65,1969,146097,120,2,48,81,26,71,131,24,97,14,32076,901,70,81,129,96,59,Definitions.IPS(29,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(2446,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(17,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(2446,Definitions.P.W,Definitions.S.LONG,true),24,10,2014223716,2014223716)"
            },
            {
              "js": "{\"lastEventTime\": 66,\"contractStatus\": 3,\"timeFromLastEvent\": 2446,\"nominalValue\": 159,\"nominalAccrued\": 901,\"feeAccrued\": 119,\"nominalRate\": 6,\"interestScalingMultiplier\": 160,\"nominalScalingMultiplier\": 139,\"contractRoleSign\": 6}",
              "sol": "Definitions.ContractState(66,Definitions.ContractStatus.DF,2446,159,901,119,6,160,139,Definitions.ContractRole.BUY)"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.665ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [76,51,22,128,188,221,109,90,20,31,54,116,223,178,251,208,149,70,134,233,212,94,240,180,131,123,101,237,9,233,159,85],\"legalEntityIdCounterparty\": [169,187,92,144,5,254,169,98,157,171,214,164,139,233,91,225,72,254,11,70,35,172,143,135,12,159,99,109,173,151,181,238],\"dayCountConvention\": 0,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 400,\"statusDate\": 4000,\"initialExchangeDate\": 2440588,\"maturityDate\": 256,\"terminationDate\": 32074,\"purchaseDate\": 10001,\"capitalizationEndDate\": 4001,\"cycleAnchorDateOfInterestPayment\": 950,\"cycleAnchorDateOfRateReset\": 4800,\"cycleAnchorDateOfScalingIndex\": 68568,\"cycleAnchorDateOfFee\": 32,\"notionalPrincipal\": 64,\"nominalInterestRate\": 99,\"feeAccrued\": 361,\"accruedInterest\": 360,\"rateMultiplier\": 63,\"rateSpread\": -1,\"feeRate\": 23,\"nextResetRate\": 26,\"penaltyRate\": 254,\"premiumDiscountAtIED\": 149,\"priceAtPurchaseDate\": 40,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 97,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 21,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 10001,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 1338,\"lifeFloor\": 1461002,\"periodCap\": 2440587,\"periodFloor\": 2014223715}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"76,51,22,128,188,221,109,90,20,31,54,116,223,178,251,208,149,70,134,233,212,94,240,180,131,123,101,237,9,233,159,85\"),stringToBytes32(\"169,187,92,144,5,254,169,98,157,171,214,164,139,233,91,225,72,254,11,70,35,172,143,135,12,159,99,109,173,151,181,238\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,400,4000,2440588,256,32074,10001,4001,950,4800,68568,32,64,99,361,360,63,-1,23,26,254,149,40,Definitions.IPS(4799,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(97,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(21,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(10001,Definitions.P.Y,Definitions.S.SHORT,false),1338,1461002,2440587,2014223715)"
            },
            {
              "js": "{\"lastEventTime\": 254,\"contractStatus\": 3,\"timeFromLastEvent\": 17,\"nominalValue\": 256,\"nominalAccrued\": 86399,\"feeAccrued\": 1460,\"nominalRate\": 255,\"interestScalingMultiplier\": 13,\"nominalScalingMultiplier\": 2440588,\"contractRoleSign\": 9}",
              "sol": "Definitions.ContractState(254,Definitions.ContractStatus.DF,17,256,86399,1460,255,13,2440588,Definitions.ContractRole.OBL)"
            },
            {
              "js": "{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 1532892062,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 2}",
              "sol": "Definitions.ProtoEvent(2014223715,51,1532892062,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.AD)"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.671ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [56,10,156,232,66,193,18,159,68,240,15,43,237,185,138,215,210,181,176,199,209,219,16,103,112,155,46,88,81,227,35,26],\"legalEntityIdCounterparty\": [175,104,223,250,167,212,122,141,158,33,22,189,191,64,58,118,139,116,21,147,78,21,135,51,247,87,16,147,168,117,228,71],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 9999,\"statusDate\": 1969,\"initialExchangeDate\": 4899,\"maturityDate\": 4000,\"terminationDate\": 17,\"purchaseDate\": 110,\"capitalizationEndDate\": 129,\"cycleAnchorDateOfInterestPayment\": 256,\"cycleAnchorDateOfRateReset\": 4001,\"cycleAnchorDateOfScalingIndex\": 949,\"cycleAnchorDateOfFee\": 111,\"notionalPrincipal\": 39,\"nominalInterestRate\": 149,\"feeAccrued\": 4001,\"accruedInterest\": 9,\"rateMultiplier\": 109,\"rateSpread\": 21,\"feeRate\": 2,\"nextResetRate\": 110,\"penaltyRate\": 110,\"premiumDiscountAtIED\": 31,\"priceAtPurchaseDate\": 900,\"cycleOfInterestPayment\": {\"i\": 368,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 257,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 151,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2440589,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 4899,\"lifeFloor\": 1337,\"periodCap\": 40,\"periodFloor\": 10000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"56,10,156,232,66,193,18,159,68,240,15,43,237,185,138,215,210,181,176,199,209,219,16,103,112,155,46,88,81,227,35,26\"),stringToBytes32(\"175,104,223,250,167,212,122,141,158,33,22,189,191,64,58,118,139,116,21,147,78,21,135,51,247,87,16,147,168,117,228,71\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,9999,1969,4899,4000,17,110,129,256,4001,949,111,39,149,4001,9,109,21,2,110,110,31,900,Definitions.IPS(368,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(257,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(151,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(2440589,Definitions.P.W,Definitions.S.LONG,false),4899,1337,40,10000)"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [65,143,88,234,80,68,237,207,90,20,201,151,244,227,130,129,229,32,89,247,207,147,141,120,255,27,24,59,140,141,171,52],\"legalEntityIdCounterparty\": [214,183,139,141,138,18,194,227,176,197,239,143,21,140,10,132,240,246,139,171,121,116,41,98,79,250,236,140,19,196,220,204],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 70,\"statusDate\": 1461,\"initialExchangeDate\": 4000,\"maturityDate\": 1462,\"terminationDate\": 49,\"purchaseDate\": 15,\"capitalizationEndDate\": 146098,\"cycleAnchorDateOfInterestPayment\": 39,\"cycleAnchorDateOfRateReset\": 68568,\"cycleAnchorDateOfScalingIndex\": 21,\"cycleAnchorDateOfFee\": 68568,\"notionalPrincipal\": 2440589,\"nominalInterestRate\": 900,\"feeAccrued\": 1969,\"accruedInterest\": 2446,\"rateMultiplier\": 97,\"rateSpread\": 97,\"feeRate\": 68568,\"nextResetRate\": 6,\"penaltyRate\": 1969,\"premiumDiscountAtIED\": 140,\"priceAtPurchaseDate\": 1338,\"cycleOfInterestPayment\": {\"i\": 4000,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 50,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 949,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 69,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 97,\"lifeFloor\": 360,\"periodCap\": 4801,\"periodFloor\": 5}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"65,143,88,234,80,68,237,207,90,20,201,151,244,227,130,129,229,32,89,247,207,147,141,120,255,27,24,59,140,141,171,52\"),stringToBytes32(\"214,183,139,141,138,18,194,227,176,197,239,143,21,140,10,132,240,246,139,171,121,116,41,98,79,250,236,140,19,196,220,204\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,70,1461,4000,1462,49,15,146098,39,68568,21,68568,2440589,900,1969,2446,97,97,68568,6,1969,140,1338,Definitions.IPS(4000,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(50,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(949,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(69,Definitions.P.D,Definitions.S.SHORT,true),97,360,4801,5)"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [107,34,246,75,3,141,114,157,113,102,168,30,108,189,142,92,52,12,135,24,253,242,180,61,63,236,106,1,77,151,158,142],\"legalEntityIdCounterparty\": [180,146,195,163,52,164,32,163,174,17,225,162,19,13,181,201,178,74,213,50,190,136,232,17,165,53,33,0,234,38,119,147],\"dayCountConvention\": 1,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 2,\"statusDate\": 0,\"initialExchangeDate\": 26,\"maturityDate\": 31,\"terminationDate\": 2447,\"purchaseDate\": 32,\"capitalizationEndDate\": 86401,\"cycleAnchorDateOfInterestPayment\": 16,\"cycleAnchorDateOfRateReset\": 20,\"cycleAnchorDateOfScalingIndex\": 4899,\"cycleAnchorDateOfFee\": 2447,\"notionalPrincipal\": 401,\"nominalInterestRate\": 2014223715,\"feeAccrued\": 41,\"accruedInterest\": 95,\"rateMultiplier\": 146098,\"rateSpread\": 71,\"feeRate\": 15,\"nextResetRate\": 59,\"penaltyRate\": 900,\"premiumDiscountAtIED\": 146097,\"priceAtPurchaseDate\": 12,\"cycleOfInterestPayment\": {\"i\": 361,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 19,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 30,\"lifeFloor\": 49,\"periodCap\": 1532892063,\"periodFloor\": 1532892064}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"107,34,246,75,3,141,114,157,113,102,168,30,108,189,142,92,52,12,135,24,253,242,180,61,63,236,106,1,77,151,158,142\"),stringToBytes32(\"180,146,195,163,52,164,32,163,174,17,225,162,19,13,181,201,178,74,213,50,190,136,232,17,165,53,33,0,234,38,119,147\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,2,0,26,31,2447,32,86401,16,20,4899,2447,401,2014223715,41,95,146098,71,15,59,900,146097,12,Definitions.IPS(361,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(1,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(19,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1,Definitions.P.W,Definitions.S.LONG,false),30,49,1532892063,1532892064)"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [194,94,159,227,214,39,244,159,199,148,249,200,203,77,102,216,49,130,253,214,212,223,209,204,215,183,170,83,103,170,118,210],\"legalEntityIdCounterparty\": [220,58,45,225,192,191,43,188,73,29,9,75,247,201,237,136,238,92,189,120,132,147,254,125,228,162,156,77,0,240,191,112],\"dayCountConvention\": 4,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 1969,\"statusDate\": 29,\"initialExchangeDate\": 1461,\"maturityDate\": 80,\"terminationDate\": 31,\"purchaseDate\": 901,\"capitalizationEndDate\": 1461002,\"cycleAnchorDateOfInterestPayment\": 21,\"cycleAnchorDateOfRateReset\": 129,\"cycleAnchorDateOfScalingIndex\": 28,\"cycleAnchorDateOfFee\": 18,\"notionalPrincipal\": 1461000,\"nominalInterestRate\": 20,\"feeAccrued\": 97,\"accruedInterest\": 160,\"rateMultiplier\": 146096,\"rateSpread\": 12,\"feeRate\": 365,\"nextResetRate\": 20,\"penaltyRate\": 131,\"premiumDiscountAtIED\": 4801,\"priceAtPurchaseDate\": 131,\"cycleOfInterestPayment\": {\"i\": 29,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 40,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 7,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 90,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 90,\"lifeFloor\": 60,\"periodCap\": 150,\"periodFloor\": 39}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"194,94,159,227,214,39,244,159,199,148,249,200,203,77,102,216,49,130,253,214,212,223,209,204,215,183,170,83,103,170,118,210\"),stringToBytes32(\"220,58,45,225,192,191,43,188,73,29,9,75,247,201,237,136,238,92,189,120,132,147,254,125,228,162,156,77,0,240,191,112\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.A,1969,29,1461,80,31,901,1461002,21,129,28,18,1461000,20,97,160,146096,12,365,20,131,4801,131,Definitions.IPS(29,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(40,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(7,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(90,Definitions.P.H,Definitions.S.SHORT,false),90,60,150,39)"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [177,97,146,118,80,212,120,247,225,238,19,182,4,156,202,215,172,202,80,15,243,13,44,27,160,84,53,70,185,158,67,141],\"legalEntityIdCounterparty\": [61,3,94,132,105,187,3,141,23,113,102,121,214,21,77,82,18,178,42,151,131,3,148,5,79,12,242,79,16,166,64,165],\"dayCountConvention\": 5,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 2014223716,\"statusDate\": 51,\"initialExchangeDate\": 368,\"maturityDate\": 24,\"terminationDate\": 119,\"purchaseDate\": 0,\"capitalizationEndDate\": 151,\"cycleAnchorDateOfInterestPayment\": 2014223716,\"cycleAnchorDateOfRateReset\": 69,\"cycleAnchorDateOfScalingIndex\": 949,\"cycleAnchorDateOfFee\": 1461000,\"notionalPrincipal\": 2440589,\"nominalInterestRate\": 16,\"feeAccrued\": 10,\"accruedInterest\": 109,\"rateMultiplier\": 129,\"rateSpread\": 901,\"feeRate\": 4001,\"nextResetRate\": 4900,\"penaltyRate\": 99,\"premiumDiscountAtIED\": 100,\"priceAtPurchaseDate\": 1460,\"cycleOfInterestPayment\": {\"i\": 2440589,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 32074,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 257,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 101,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 24,\"lifeFloor\": 901,\"periodCap\": 2446,\"periodFloor\": 2440589}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"177,97,146,118,80,212,120,247,225,238,19,182,4,156,202,215,172,202,80,15,243,13,44,27,160,84,53,70,185,158,67,141\"),stringToBytes32(\"61,3,94,132,105,187,3,141,23,113,102,121,214,21,77,82,18,178,42,151,131,3,148,5,79,12,242,79,16,166,64,165\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,2014223716,51,368,24,119,0,151,2014223716,69,949,1461000,2440589,16,10,109,129,901,4001,4900,99,100,1460,Definitions.IPS(2440589,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(32074,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(257,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(101,Definitions.P.M,Definitions.S.SHORT,true),24,901,2446,2440589)"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [46,94,74,197,189,22,150,24,134,184,253,216,236,255,228,182,121,99,208,50,228,75,71,136,46,102,153,181,181,125,19,205],\"legalEntityIdCounterparty\": [126,89,232,132,194,202,2,203,237,71,122,34,189,181,195,208,144,148,222,239,75,231,195,181,71,196,104,67,210,161,220,53],\"dayCountConvention\": 1,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 63,\"statusDate\": 1462,\"initialExchangeDate\": 4801,\"maturityDate\": 71,\"terminationDate\": 4,\"purchaseDate\": 366,\"capitalizationEndDate\": 89,\"cycleAnchorDateOfInterestPayment\": 1,\"cycleAnchorDateOfRateReset\": 68569,\"cycleAnchorDateOfScalingIndex\": 9,\"cycleAnchorDateOfFee\": 146097,\"notionalPrincipal\": 120,\"nominalInterestRate\": 4,\"feeAccrued\": 2446,\"accruedInterest\": 2014223716,\"rateMultiplier\": 10,\"rateSpread\": 255,\"feeRate\": 2440587,\"nextResetRate\": 900,\"penaltyRate\": 360,\"premiumDiscountAtIED\": 366,\"priceAtPurchaseDate\": 32,\"cycleOfInterestPayment\": {\"i\": 8,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 32,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 159,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 159,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 39,\"lifeFloor\": 64,\"periodCap\": 71,\"periodFloor\": 6}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"46,94,74,197,189,22,150,24,134,184,253,216,236,255,228,182,121,99,208,50,228,75,71,136,46,102,153,181,181,125,19,205\"),stringToBytes32(\"126,89,232,132,194,202,2,203,237,71,122,34,189,181,195,208,144,148,222,239,75,231,195,181,71,196,104,67,210,161,220,53\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,63,1462,4801,71,4,366,89,1,68569,9,146097,120,4,2446,2014223716,10,255,2440587,900,360,366,32,Definitions.IPS(8,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(32,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(159,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(159,Definitions.P.Q,Definitions.S.LONG,false),39,64,71,6)"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [190,90,157,121,202,211,183,218,113,251,106,56,218,55,119,20,56,161,201,58,14,167,249,34,249,245,254,87,177,156,87,84],\"legalEntityIdCounterparty\": [107,47,157,63,81,235,108,63,248,57,31,13,159,80,243,151,80,172,163,240,13,101,221,166,145,33,29,188,49,158,211,76],\"dayCountConvention\": 6,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 24,\"statusDate\": 68568,\"initialExchangeDate\": 364,\"maturityDate\": 3,\"terminationDate\": 1532892063,\"purchaseDate\": 40,\"capitalizationEndDate\": 1,\"cycleAnchorDateOfInterestPayment\": 1,\"cycleAnchorDateOfRateReset\": 146098,\"cycleAnchorDateOfScalingIndex\": 20,\"cycleAnchorDateOfFee\": 41,\"notionalPrincipal\": 2014223714,\"nominalInterestRate\": 149,\"feeAccrued\": 86400,\"accruedInterest\": 950,\"rateMultiplier\": 131,\"rateSpread\": 1461,\"feeRate\": 40,\"nextResetRate\": 120,\"penaltyRate\": 141,\"premiumDiscountAtIED\": 146096,\"priceAtPurchaseDate\": 32074,\"cycleOfInterestPayment\": {\"i\": 1336,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 86401,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 27,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 28,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 4,\"lifeFloor\": 4901,\"periodCap\": 2,\"periodFloor\": 10000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"190,90,157,121,202,211,183,218,113,251,106,56,218,55,119,20,56,161,201,58,14,167,249,34,249,245,254,87,177,156,87,84\"),stringToBytes32(\"107,47,157,63,81,235,108,63,248,57,31,13,159,80,243,151,80,172,163,240,13,101,221,166,145,33,29,188,49,158,211,76\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,24,68568,364,3,1532892063,40,1,1,146098,20,41,2014223714,149,86400,950,131,1461,40,120,141,146096,32074,Definitions.IPS(1336,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(86401,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(27,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(28,Definitions.P.D,Definitions.S.SHORT,false),4,4901,2,10000)"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [222,225,186,37,154,238,222,17,160,35,221,232,178,85,79,247,131,20,142,179,196,250,87,71,41,24,136,146,249,146,233,253],\"legalEntityIdCounterparty\": [173,171,201,24,169,54,215,237,105,195,57,31,239,127,163,72,240,129,34,225,143,239,164,35,64,162,87,119,26,164,26,244],\"dayCountConvention\": 1,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 3,\"statusDate\": 139,\"initialExchangeDate\": 146098,\"maturityDate\": 160,\"terminationDate\": 51,\"purchaseDate\": 31,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 109,\"cycleAnchorDateOfRateReset\": 96,\"cycleAnchorDateOfScalingIndex\": 17,\"cycleAnchorDateOfFee\": 120,\"notionalPrincipal\": 86399,\"nominalInterestRate\": 23,\"feeAccrued\": 2440588,\"accruedInterest\": 1462,\"rateMultiplier\": 2014223716,\"rateSpread\": 30,\"feeRate\": 949,\"nextResetRate\": -1,\"penaltyRate\": 129,\"premiumDiscountAtIED\": 119,\"priceAtPurchaseDate\": 100,\"cycleOfInterestPayment\": {\"i\": 367,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2446,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 3999,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1532892062,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 4900,\"lifeFloor\": 63,\"periodCap\": 6,\"periodFloor\": 130}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"222,225,186,37,154,238,222,17,160,35,221,232,178,85,79,247,131,20,142,179,196,250,87,71,41,24,136,146,249,146,233,253\"),stringToBytes32(\"173,171,201,24,169,54,215,237,105,195,57,31,239,127,163,72,240,129,34,225,143,239,164,35,64,162,87,119,26,164,26,244\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,3,139,146098,160,51,31,0,109,96,17,120,86399,23,2440588,1462,2014223716,30,949,-1,129,119,100,Definitions.IPS(367,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(2446,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(3999,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(1532892062,Definitions.P.H,Definitions.S.SHORT,true),4900,63,6,130)"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [26,106,230,72,207,105,227,86,243,162,96,201,97,97,193,167,222,22,182,12,24,186,38,189,134,204,173,141,65,53,193,102],\"legalEntityIdCounterparty\": [104,46,20,22,85,188,38,154,158,26,239,89,250,98,34,229,227,216,250,71,104,182,202,96,147,248,36,133,118,206,196,108],\"dayCountConvention\": 6,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 2447,\"statusDate\": 8,\"initialExchangeDate\": 121,\"maturityDate\": 0,\"terminationDate\": 9,\"purchaseDate\": 41,\"capitalizationEndDate\": 24,\"cycleAnchorDateOfInterestPayment\": 9,\"cycleAnchorDateOfRateReset\": 139,\"cycleAnchorDateOfScalingIndex\": 91,\"cycleAnchorDateOfFee\": 1462,\"notionalPrincipal\": 2440589,\"nominalInterestRate\": 20,\"feeAccrued\": 20,\"accruedInterest\": 1461001,\"rateMultiplier\": 949,\"rateSpread\": 31,\"feeRate\": 4900,\"nextResetRate\": 31,\"penaltyRate\": 17,\"premiumDiscountAtIED\": 20,\"priceAtPurchaseDate\": 1461002,\"cycleOfInterestPayment\": {\"i\": 4800,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 400,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 254,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2440589,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 2440587,\"lifeFloor\": 41,\"periodCap\": 401,\"periodFloor\": 26}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"26,106,230,72,207,105,227,86,243,162,96,201,97,97,193,167,222,22,182,12,24,186,38,189,134,204,173,141,65,53,193,102\"),stringToBytes32(\"104,46,20,22,85,188,38,154,158,26,239,89,250,98,34,229,227,216,250,71,104,182,202,96,147,248,36,133,118,206,196,108\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,2447,8,121,0,9,41,24,9,139,91,1462,2440589,20,20,1461001,949,31,4900,31,17,20,1461002,Definitions.IPS(4800,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(400,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(254,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(2440589,Definitions.P.W,Definitions.S.SHORT,true),2440587,41,401,26)"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [176,227,215,14,173,59,191,182,211,201,225,118,112,161,56,12,174,29,244,27,181,76,169,198,76,104,11,75,151,172,178,37],\"legalEntityIdCounterparty\": [248,108,215,251,171,235,163,10,21,90,220,240,227,46,247,139,5,60,36,20,148,198,75,103,28,79,198,217,87,99,192,56],\"dayCountConvention\": 3,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 1,\"statusDate\": 50,\"initialExchangeDate\": 86401,\"maturityDate\": 111,\"terminationDate\": 399,\"purchaseDate\": 141,\"capitalizationEndDate\": 4800,\"cycleAnchorDateOfInterestPayment\": 1532892064,\"cycleAnchorDateOfRateReset\": 360,\"cycleAnchorDateOfScalingIndex\": 61,\"cycleAnchorDateOfFee\": 26,\"notionalPrincipal\": 2448,\"nominalInterestRate\": 151,\"feeAccrued\": 59,\"accruedInterest\": 1336,\"rateMultiplier\": 17,\"rateSpread\": 131,\"feeRate\": 951,\"nextResetRate\": 9,\"penaltyRate\": 2448,\"premiumDiscountAtIED\": 110,\"priceAtPurchaseDate\": 901,\"cycleOfInterestPayment\": {\"i\": 951,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1337,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 149,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 146098,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 17,\"lifeFloor\": 71,\"periodCap\": 367,\"periodFloor\": 10}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"176,227,215,14,173,59,191,182,211,201,225,118,112,161,56,12,174,29,244,27,181,76,169,198,76,104,11,75,151,172,178,37\"),stringToBytes32(\"248,108,215,251,171,235,163,10,21,90,220,240,227,46,247,139,5,60,36,20,148,198,75,103,28,79,198,217,87,99,192,56\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,1,50,86401,111,399,141,4800,1532892064,360,61,26,2448,151,59,1336,17,131,951,9,2448,110,901,Definitions.IPS(951,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(1337,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(149,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(146098,Definitions.P.H,Definitions.S.LONG,false),17,71,367,10)"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [137,130,60,85,82,93,10,126,7,19,38,96,178,11,168,243,80,184,165,202,72,155,33,36,194,148,244,187,214,20,7,122],\"legalEntityIdCounterparty\": [97,183,124,68,41,252,236,104,79,200,1,194,31,170,44,120,232,111,113,173,149,77,241,93,186,116,163,192,65,90,220,111],\"dayCountConvention\": 3,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 51,\"statusDate\": 359,\"initialExchangeDate\": 360,\"maturityDate\": 131,\"terminationDate\": 2440588,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1337,\"cycleAnchorDateOfRateReset\": 951,\"cycleAnchorDateOfScalingIndex\": 69,\"cycleAnchorDateOfFee\": 1460,\"notionalPrincipal\": 3999,\"nominalInterestRate\": 0,\"feeAccrued\": 19,\"accruedInterest\": 2,\"rateMultiplier\": 90,\"rateSpread\": 949,\"feeRate\": 131,\"nextResetRate\": 63,\"penaltyRate\": 49,\"premiumDiscountAtIED\": 399,\"priceAtPurchaseDate\": 65,\"cycleOfInterestPayment\": {\"i\": 360,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 364,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 256,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 10001,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 27,\"lifeFloor\": 97,\"periodCap\": 17,\"periodFloor\": 149}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"137,130,60,85,82,93,10,126,7,19,38,96,178,11,168,243,80,184,165,202,72,155,33,36,194,148,244,187,214,20,7,122\"),stringToBytes32(\"97,183,124,68,41,252,236,104,79,200,1,194,31,170,44,120,232,111,113,173,149,77,241,93,186,116,163,192,65,90,220,111\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,51,359,360,131,2440588,0,0,1337,951,69,1460,3999,0,19,2,90,949,131,63,49,399,65,Definitions.IPS(360,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(364,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(256,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(10001,Definitions.P.W,Definitions.S.LONG,true),27,97,17,149)"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [65,213,199,239,205,194,205,12,79,23,10,170,162,10,116,44,212,130,120,245,89,82,238,126,189,232,160,32,219,26,93,196],\"legalEntityIdCounterparty\": [175,192,85,119,16,87,141,228,32,120,139,28,61,95,12,215,224,216,4,6,154,1,190,100,111,45,145,210,71,6,116,78],\"dayCountConvention\": 2,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 2014223716,\"statusDate\": 11,\"initialExchangeDate\": 41,\"maturityDate\": 1461000,\"terminationDate\": 18,\"purchaseDate\": 10000,\"capitalizationEndDate\": 367,\"cycleAnchorDateOfInterestPayment\": 139,\"cycleAnchorDateOfRateReset\": 2440589,\"cycleAnchorDateOfScalingIndex\": 365,\"cycleAnchorDateOfFee\": 161,\"notionalPrincipal\": 1970,\"nominalInterestRate\": 7,\"feeAccrued\": 3999,\"accruedInterest\": 400,\"rateMultiplier\": 32074,\"rateSpread\": 3,\"feeRate\": 1532892064,\"nextResetRate\": 90,\"penaltyRate\": 81,\"premiumDiscountAtIED\": 1461001,\"priceAtPurchaseDate\": 29,\"cycleOfInterestPayment\": {\"i\": 256,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 149,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 150,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 41,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 61,\"lifeFloor\": 69,\"periodCap\": 100,\"periodFloor\": 255}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"65,213,199,239,205,194,205,12,79,23,10,170,162,10,116,44,212,130,120,245,89,82,238,126,189,232,160,32,219,26,93,196\"),stringToBytes32(\"175,192,85,119,16,87,141,228,32,120,139,28,61,95,12,215,224,216,4,6,154,1,190,100,111,45,145,210,71,6,116,78\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.A,2014223716,11,41,1461000,18,10000,367,139,2440589,365,161,1970,7,3999,400,32074,3,1532892064,90,81,1461001,29,Definitions.IPS(256,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(149,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(150,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(41,Definitions.P.W,Definitions.S.SHORT,true),61,69,100,255)"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [167,45,113,9,32,203,209,81,139,221,58,236,100,130,231,4,28,245,239,79,33,229,3,13,135,164,90,250,11,59,1,118],\"legalEntityIdCounterparty\": [30,157,100,120,93,248,74,192,255,54,168,82,187,5,187,54,67,50,141,114,34,147,49,23,10,248,204,224,122,25,231,115],\"dayCountConvention\": 5,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 951,\"statusDate\": 63,\"initialExchangeDate\": 109,\"maturityDate\": 360,\"terminationDate\": 79,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 23,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 2014223716,\"cycleAnchorDateOfFee\": 60,\"notionalPrincipal\": 120,\"nominalInterestRate\": 0,\"feeAccrued\": 1532892062,\"accruedInterest\": 31,\"rateMultiplier\": 32075,\"rateSpread\": 899,\"feeRate\": 65,\"nextResetRate\": 2014223716,\"penaltyRate\": 121,\"premiumDiscountAtIED\": 3,\"priceAtPurchaseDate\": 4800,\"cycleOfInterestPayment\": {\"i\": 159,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 10000,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4801,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 100,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 110,\"lifeFloor\": 1971,\"periodCap\": 2014223716,\"periodFloor\": 139}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"167,45,113,9,32,203,209,81,139,221,58,236,100,130,231,4,28,245,239,79,33,229,3,13,135,164,90,250,11,59,1,118\"),stringToBytes32(\"30,157,100,120,93,248,74,192,255,54,168,82,187,5,187,54,67,50,141,114,34,147,49,23,10,248,204,224,122,25,231,115\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,951,63,109,360,79,0,0,23,0,2014223716,60,120,0,1532892062,31,32075,899,65,2014223716,121,3,4800,Definitions.IPS(159,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(10000,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(4801,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(100,Definitions.P.M,Definitions.S.SHORT,false),110,1971,2014223716,139)"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [17,6,41,148,214,212,195,130,127,181,74,171,14,202,87,196,214,200,242,25,158,220,10,213,66,117,9,26,247,165,133,101],\"legalEntityIdCounterparty\": [196,25,41,145,156,245,196,175,116,170,214,54,169,45,54,218,59,147,15,8,194,36,233,112,41,161,117,221,246,42,66,160],\"dayCountConvention\": 6,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 17,\"statusDate\": 1461001,\"initialExchangeDate\": 27,\"maturityDate\": 49,\"terminationDate\": 64,\"purchaseDate\": 2014223714,\"capitalizationEndDate\": 2440587,\"cycleAnchorDateOfInterestPayment\": 110,\"cycleAnchorDateOfRateReset\": 151,\"cycleAnchorDateOfScalingIndex\": 4901,\"cycleAnchorDateOfFee\": 366,\"notionalPrincipal\": 14,\"nominalInterestRate\": 110,\"feeAccrued\": 255,\"accruedInterest\": 121,\"rateMultiplier\": 13,\"rateSpread\": 1532892062,\"feeRate\": 400,\"nextResetRate\": 110,\"penaltyRate\": 2014223716,\"premiumDiscountAtIED\": 1337,\"priceAtPurchaseDate\": 1460,\"cycleOfInterestPayment\": {\"i\": 9,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 9,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 257,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1970,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 4900,\"lifeFloor\": 368,\"periodCap\": 949,\"periodFloor\": 68569}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"17,6,41,148,214,212,195,130,127,181,74,171,14,202,87,196,214,200,242,25,158,220,10,213,66,117,9,26,247,165,133,101\"),stringToBytes32(\"196,25,41,145,156,245,196,175,116,170,214,54,169,45,54,218,59,147,15,8,194,36,233,112,41,161,117,221,246,42,66,160\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,17,1461001,27,49,64,2014223714,2440587,110,151,4901,366,14,110,255,121,13,1532892062,400,110,2014223716,1337,1460,Definitions.IPS(9,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(9,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(257,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(1970,Definitions.P.D,Definitions.S.LONG,false),4900,368,949,68569)"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [244,33,129,188,29,123,158,62,117,40,147,140,72,28,178,175,104,146,127,82,234,32,239,228,237,64,204,64,227,211,4,164],\"legalEntityIdCounterparty\": [92,63,118,155,79,92,243,55,95,168,248,44,5,254,149,53,27,113,73,200,66,60,43,41,8,90,34,131,32,126,148,146],\"dayCountConvention\": 4,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 21,\"statusDate\": 86399,\"initialExchangeDate\": 2440589,\"maturityDate\": 1532892064,\"terminationDate\": 60,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 255,\"cycleAnchorDateOfRateReset\": 71,\"cycleAnchorDateOfScalingIndex\": 14,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 61,\"nominalInterestRate\": 0,\"feeAccrued\": 2440589,\"accruedInterest\": 2446,\"rateMultiplier\": 4899,\"rateSpread\": 95,\"feeRate\": 4900,\"nextResetRate\": 4801,\"penaltyRate\": 2448,\"premiumDiscountAtIED\": 2447,\"priceAtPurchaseDate\": 160,\"cycleOfInterestPayment\": {\"i\": 361,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 3,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 2448,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 2440589,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 2440588,\"lifeFloor\": 59,\"periodCap\": 100,\"periodFloor\": 91}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"244,33,129,188,29,123,158,62,117,40,147,140,72,28,178,175,104,146,127,82,234,32,239,228,237,64,204,64,227,211,4,164\"),stringToBytes32(\"92,63,118,155,79,92,243,55,95,168,248,44,5,254,149,53,27,113,73,200,66,60,43,41,8,90,34,131,32,126,148,146\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,21,86399,2440589,1532892064,60,0,0,255,71,14,0,61,0,2440589,2446,4899,95,4900,4801,2448,2447,160,Definitions.IPS(361,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(3,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(2448,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(2440589,Definitions.P.Q,Definitions.S.SHORT,true),2440588,59,100,91)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [207,28,223,4,204,192,123,63,117,71,153,227,191,156,233,190,12,12,161,198,67,24,128,168,45,111,111,106,247,246,49,59],\"legalEntityIdCounterparty\": [91,209,204,205,193,18,26,109,94,167,161,37,150,37,23,248,140,176,121,107,40,116,51,210,22,190,151,78,134,97,151,43],\"dayCountConvention\": 6,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 139,\"statusDate\": 79,\"initialExchangeDate\": 4000,\"maturityDate\": 95,\"terminationDate\": 146096,\"purchaseDate\": 949,\"capitalizationEndDate\": 60,\"cycleAnchorDateOfInterestPayment\": 68569,\"cycleAnchorDateOfRateReset\": 32074,\"cycleAnchorDateOfScalingIndex\": 32,\"cycleAnchorDateOfFee\": 24,\"notionalPrincipal\": 7,\"nominalInterestRate\": 899,\"feeAccrued\": 4001,\"accruedInterest\": 86401,\"rateMultiplier\": 255,\"rateSpread\": 27,\"feeRate\": 71,\"nextResetRate\": 360,\"penaltyRate\": 31,\"premiumDiscountAtIED\": 3,\"priceAtPurchaseDate\": 49,\"cycleOfInterestPayment\": {\"i\": 1532892062,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 86400,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 86399,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 63,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 1337,\"lifeFloor\": 10000,\"periodCap\": 100,\"periodFloor\": 257}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"207,28,223,4,204,192,123,63,117,71,153,227,191,156,233,190,12,12,161,198,67,24,128,168,45,111,111,106,247,246,49,59\"),stringToBytes32(\"91,209,204,205,193,18,26,109,94,167,161,37,150,37,23,248,140,176,121,107,40,116,51,210,22,190,151,78,134,97,151,43\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,139,79,4000,95,146096,949,60,68569,32074,32,24,7,899,4001,86401,255,27,71,360,31,3,49,Definitions.IPS(1532892062,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(86400,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(86399,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(63,Definitions.P.D,Definitions.S.SHORT,false),1337,10000,100,257)"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [5,123,63,200,126,36,16,247,150,80,173,162,105,105,137,236,228,199,90,140,189,249,66,156,246,184,230,129,88,27,50,117],\"legalEntityIdCounterparty\": [243,162,73,26,140,240,14,132,159,96,161,118,240,73,168,214,84,110,171,182,185,26,51,6,243,86,82,210,170,47,4,89],\"dayCountConvention\": 1,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 6,\"statusDate\": 70,\"initialExchangeDate\": 80,\"maturityDate\": 1461,\"terminationDate\": 361,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 10,\"cycleAnchorDateOfRateReset\": 367,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 7,\"notionalPrincipal\": 2014223715,\"nominalInterestRate\": 0,\"feeAccrued\": 2014223716,\"accruedInterest\": 32074,\"rateMultiplier\": 255,\"rateSpread\": 151,\"feeRate\": 69,\"nextResetRate\": 11,\"penaltyRate\": 2440589,\"premiumDiscountAtIED\": 2440587,\"priceAtPurchaseDate\": 2014223716,\"cycleOfInterestPayment\": {\"i\": 4900,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4899,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 18,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 159,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 1971,\"lifeFloor\": 4000,\"periodCap\": 17,\"periodFloor\": 13}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"5,123,63,200,126,36,16,247,150,80,173,162,105,105,137,236,228,199,90,140,189,249,66,156,246,184,230,129,88,27,50,117\"),stringToBytes32(\"243,162,73,26,140,240,14,132,159,96,161,118,240,73,168,214,84,110,171,182,185,26,51,6,243,86,82,210,170,47,4,89\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,6,70,80,1461,361,0,0,10,367,0,7,2014223715,0,2014223716,32074,255,151,69,11,2440589,2440587,2014223716,Definitions.IPS(4900,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(4899,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(18,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(159,Definitions.P.Q,Definitions.S.SHORT,false),1971,4000,17,13)"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [130,37,183,194,46,88,215,171,249,104,167,194,192,224,143,175,60,112,217,254,10,178,183,53,166,236,234,62,145,45,114,209],\"legalEntityIdCounterparty\": [177,206,119,68,195,228,249,138,193,83,127,92,10,243,83,172,70,206,191,130,179,94,234,92,178,143,100,127,61,89,53,112],\"dayCountConvention\": 6,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 89,\"statusDate\": 99,\"initialExchangeDate\": 90,\"maturityDate\": 1970,\"terminationDate\": 2446,\"purchaseDate\": 12,\"capitalizationEndDate\": 4901,\"cycleAnchorDateOfInterestPayment\": 361,\"cycleAnchorDateOfRateReset\": 2014223715,\"cycleAnchorDateOfScalingIndex\": 17,\"cycleAnchorDateOfFee\": 1532892063,\"notionalPrincipal\": 4,\"nominalInterestRate\": 951,\"feeAccrued\": 59,\"accruedInterest\": 4900,\"rateMultiplier\": 71,\"rateSpread\": 1532892064,\"feeRate\": 31,\"nextResetRate\": 899,\"penaltyRate\": 31,\"premiumDiscountAtIED\": 2448,\"priceAtPurchaseDate\": 11,\"cycleOfInterestPayment\": {\"i\": 69,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 900,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 95,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 255,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 109,\"lifeFloor\": 49,\"periodCap\": 4799,\"periodFloor\": 2014223716}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"130,37,183,194,46,88,215,171,249,104,167,194,192,224,143,175,60,112,217,254,10,178,183,53,166,236,234,62,145,45,114,209\"),stringToBytes32(\"177,206,119,68,195,228,249,138,193,83,127,92,10,243,83,172,70,206,191,130,179,94,234,92,178,143,100,127,61,89,53,112\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,89,99,90,1970,2446,12,4901,361,2014223715,17,1532892063,4,951,59,4900,71,1532892064,31,899,31,2448,11,Definitions.IPS(69,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(900,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(95,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(255,Definitions.P.W,Definitions.S.SHORT,false),109,49,4799,2014223716)"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [173,13,99,47,225,172,131,25,88,41,46,60,191,94,206,179,160,32,87,14,184,230,250,36,118,155,34,186,228,99,106,144],\"legalEntityIdCounterparty\": [59,148,60,208,245,225,70,217,105,205,167,159,69,176,84,125,31,110,198,76,112,168,41,59,40,244,94,70,194,206,207,24],\"dayCountConvention\": 2,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 951,\"statusDate\": 255,\"initialExchangeDate\": 900,\"maturityDate\": 50,\"terminationDate\": 49,\"purchaseDate\": 3999,\"capitalizationEndDate\": 27,\"cycleAnchorDateOfInterestPayment\": 86401,\"cycleAnchorDateOfRateReset\": 32075,\"cycleAnchorDateOfScalingIndex\": 68570,\"cycleAnchorDateOfFee\": 18,\"notionalPrincipal\": 39,\"nominalInterestRate\": 149,\"feeAccrued\": 2014223714,\"accruedInterest\": 17,\"rateMultiplier\": 1461,\"rateSpread\": 80,\"feeRate\": 1971,\"nextResetRate\": 97,\"penaltyRate\": 96,\"premiumDiscountAtIED\": 399,\"priceAtPurchaseDate\": 121,\"cycleOfInterestPayment\": {\"i\": 86400,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 99,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 3,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 86399,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 100,\"lifeFloor\": 21,\"periodCap\": 110,\"periodFloor\": 64}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"173,13,99,47,225,172,131,25,88,41,46,60,191,94,206,179,160,32,87,14,184,230,250,36,118,155,34,186,228,99,106,144\"),stringToBytes32(\"59,148,60,208,245,225,70,217,105,205,167,159,69,176,84,125,31,110,198,76,112,168,41,59,40,244,94,70,194,206,207,24\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,951,255,900,50,49,3999,27,86401,32075,68570,18,39,149,2014223714,17,1461,80,1971,97,96,399,121,Definitions.IPS(86400,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(99,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(3,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(86399,Definitions.P.M,Definitions.S.LONG,true),100,21,110,64)"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [243,230,95,93,193,237,143,198,43,90,182,98,68,191,216,233,69,126,130,195,132,180,218,10,81,30,189,152,121,109,73,184],\"legalEntityIdCounterparty\": [166,194,159,254,27,229,133,162,4,150,78,151,120,33,195,48,55,200,235,30,223,44,146,10,24,230,171,125,51,114,110,36],\"dayCountConvention\": 6,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 257,\"statusDate\": 2440588,\"initialExchangeDate\": 32074,\"maturityDate\": 1337,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 97,\"cycleAnchorDateOfRateReset\": 899,\"cycleAnchorDateOfScalingIndex\": 1,\"cycleAnchorDateOfFee\": 20,\"notionalPrincipal\": 1338,\"nominalInterestRate\": 0,\"feeAccrued\": 110,\"accruedInterest\": 41,\"rateMultiplier\": 399,\"rateSpread\": 31,\"feeRate\": 50,\"nextResetRate\": -1,\"penaltyRate\": 4001,\"premiumDiscountAtIED\": 159,\"priceAtPurchaseDate\": 3999,\"cycleOfInterestPayment\": {\"i\": 97,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 32076,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 50,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 32074,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 6,\"lifeFloor\": 2014223716,\"periodCap\": 39,\"periodFloor\": 129}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"243,230,95,93,193,237,143,198,43,90,182,98,68,191,216,233,69,126,130,195,132,180,218,10,81,30,189,152,121,109,73,184\"),stringToBytes32(\"166,194,159,254,27,229,133,162,4,150,78,151,120,33,195,48,55,200,235,30,223,44,146,10,24,230,171,125,51,114,110,36\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,257,2440588,32074,1337,0,0,0,97,899,1,20,1338,0,110,41,399,31,50,-1,4001,159,3999,Definitions.IPS(97,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(32076,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(50,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(32074,Definitions.P.M,Definitions.S.SHORT,false),6,2014223716,39,129)"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [68,205,247,79,147,37,92,173,217,167,254,86,169,87,150,180,138,35,170,76,230,20,187,76,226,49,237,68,236,171,62,155],\"legalEntityIdCounterparty\": [132,11,242,67,192,238,245,21,64,87,6,29,147,228,228,48,164,115,57,172,166,177,241,129,52,3,106,30,23,101,185,130],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 4,\"statusDate\": 150,\"initialExchangeDate\": 110,\"maturityDate\": 900,\"terminationDate\": 49,\"purchaseDate\": 1462,\"capitalizationEndDate\": 1336,\"cycleAnchorDateOfInterestPayment\": 66,\"cycleAnchorDateOfRateReset\": 4801,\"cycleAnchorDateOfScalingIndex\": 29,\"cycleAnchorDateOfFee\": 4800,\"notionalPrincipal\": 366,\"nominalInterestRate\": 18,\"feeAccrued\": 20,\"accruedInterest\": 27,\"rateMultiplier\": 10001,\"rateSpread\": 1461000,\"feeRate\": 2,\"nextResetRate\": 19,\"penaltyRate\": 129,\"premiumDiscountAtIED\": 17,\"priceAtPurchaseDate\": 2014223716,\"cycleOfInterestPayment\": {\"i\": 1461000,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 367,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1532892064,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 900,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 160,\"lifeFloor\": 6,\"periodCap\": 51,\"periodFloor\": 121}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"68,205,247,79,147,37,92,173,217,167,254,86,169,87,150,180,138,35,170,76,230,20,187,76,226,49,237,68,236,171,62,155\"),stringToBytes32(\"132,11,242,67,192,238,245,21,64,87,6,29,147,228,228,48,164,115,57,172,166,177,241,129,52,3,106,30,23,101,185,130\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,4,150,110,900,49,1462,1336,66,4801,29,4800,366,18,20,27,10001,1461000,2,19,129,17,2014223716,Definitions.IPS(1461000,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(367,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(1532892064,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(900,Definitions.P.M,Definitions.S.SHORT,false),160,6,51,121)"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [45,69,54,93,91,239,252,245,206,149,190,12,150,180,120,180,123,224,199,81,180,165,119,121,75,53,184,253,170,17,4,154],\"legalEntityIdCounterparty\": [143,64,7,54,151,7,180,90,244,210,46,169,255,189,174,168,98,129,156,69,43,60,28,117,236,85,15,232,16,245,16,197],\"dayCountConvention\": 1,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 59,\"statusDate\": 63,\"initialExchangeDate\": 9,\"maturityDate\": 1970,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 32,\"cycleAnchorDateOfRateReset\": 14,\"cycleAnchorDateOfScalingIndex\": 59,\"cycleAnchorDateOfFee\": 30,\"notionalPrincipal\": 1,\"nominalInterestRate\": 0,\"feeAccrued\": 49,\"accruedInterest\": 361,\"rateMultiplier\": 71,\"rateSpread\": 68570,\"feeRate\": 32074,\"nextResetRate\": 160,\"penaltyRate\": 899,\"premiumDiscountAtIED\": 1970,\"priceAtPurchaseDate\": 4,\"cycleOfInterestPayment\": {\"i\": 401,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 16,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 254,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 0,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 68568,\"lifeFloor\": 400,\"periodCap\": 365,\"periodFloor\": 951}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"45,69,54,93,91,239,252,245,206,149,190,12,150,180,120,180,123,224,199,81,180,165,119,121,75,53,184,253,170,17,4,154\"),stringToBytes32(\"143,64,7,54,151,7,180,90,244,210,46,169,255,189,174,168,98,129,156,69,43,60,28,117,236,85,15,232,16,245,16,197\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,59,63,9,1970,0,0,0,32,14,59,30,1,0,49,361,71,68570,32074,160,899,1970,4,Definitions.IPS(401,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(16,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(254,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(0,Definitions.P.M,Definitions.S.SHORT,false),68568,400,365,951)"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.718ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:34:47.740ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}