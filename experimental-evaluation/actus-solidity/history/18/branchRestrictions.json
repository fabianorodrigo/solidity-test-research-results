,{
  "2020-11-12T16:07:56.758ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "23",
                "sol": "23"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T16:07:56.759ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.760ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.760ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.761ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.761ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.762ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "year < 1970"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN year<1970",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.764ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "second >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN second>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.767ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.767ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.767ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.768ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.768ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.770ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.774ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.775ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.775ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.775ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.776ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.776ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.776ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.777ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.777ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.777ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.778ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.778ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.779ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.779ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.780ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.780ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.781ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.781ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.782ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.782ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892064,
                "sol": 1532892064
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T16:07:56.783ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 101,
                "sol": 101
              },
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T16:07:56.783ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 101,
                "sol": 101
              },
              {
                "js": "100",
                "sol": "100"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T16:07:56.784ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4901,
                "sol": 4901
              },
              {
                "js": "4900",
                "sol": "4900"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T16:07:56.785ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 31,
                "sol": 31
              },
              {
                "js": "30",
                "sol": "30"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T16:07:56.785ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2440589,
                "sol": 2440589
              },
              {
                "js": "2440588",
                "sol": "2440588"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T16:07:56.788ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.789ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "32074",
                "sol": "32074"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T16:07:56.791ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.ContractRole.SEL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.ContractRole.PFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.804ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "146097",
                "sol": "146097"
              },
              {
                "js": 146096,
                "sol": 146096
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "30",
                "sol": "30"
              },
              {
                "js": 29,
                "sol": 29
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "40",
                "sol": "40"
              },
              {
                "js": 39,
                "sol": 39
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "4901",
                "sol": "4901"
              },
              {
                "js": 4900,
                "sol": 4900
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": 5,
              "sol": "Definitions.DayCountConvention._30_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "80",
                "sol": "80"
              },
              {
                "js": 79,
                "sol": 79
              },
              {
                "js": 5,
                "sol": "Definitions.DayCountConvention._30_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T16:07:56.808ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.808ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.809ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.809ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.811ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{\"i\": 17,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(17,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{\"i\": 139,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(139,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{\"i\": 0,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(0,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{\"i\": 366,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(366,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.816ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.816ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.818ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractStatus.PF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.824ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.829ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.834ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.835ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.839ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 6,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(6,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 161,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(161,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 2440588,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2440588,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 69,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(69,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 8,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(8,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 68569,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(68569,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 4900,\"p\": 99999,\"s\": 1,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.846ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{\"i\": 49,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(49,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{\"i\": 40,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(40,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{\"i\": 2440587,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2440587,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{\"i\": 32076,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(32076,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{\"i\": 257,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(257,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{\"i\": 70,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(70,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{\"i\": 60,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(60,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{\"i\": 129,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(129,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{\"i\": 1336,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1336,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.854ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 51,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(51,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 2014223716,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(2014223716,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 32074,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(32074,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 1461,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1461,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 48,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(48,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 119,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(119,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 899,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.857ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 66,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 2},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 8,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 19},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 2440587,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 15},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 257,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 4},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 32074,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 19},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 12,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 9},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 159,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 12},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 27,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 5},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 1338,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 14},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 159,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 6},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 159,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 18},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 146098,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 146098,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 2},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 400,\"eventType\": 7,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 3},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 89,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 9},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 79,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 8},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 950,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 13},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 131,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 7},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 70,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 16},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 2,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 13},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 63,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 12},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 949,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 20,\"stfType\": 0},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 0,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 18},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 61,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 16},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 68569,\"eventType\": 5,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 5},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 1337,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 13},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 149,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 6},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 4800,\"eventType\": 18,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 15},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 11,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 11},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 9999,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 13},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 1461,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 13},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 10,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 17,\"stfType\": 9},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 367,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 10},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 7,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 9},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 4800,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 19},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 70,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 13},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 2447,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 16},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 399,\"eventType\": 2,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 5},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 10000,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 7},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 60,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 119,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 4},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 2440589,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 11},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 89,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 3},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 70,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 19},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 2448,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 8},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 28,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 19},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 13,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 17},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 7,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 1,\"stfType\": 12},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 5,\"eventType\": 1,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 18},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 20,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 12},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 899,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 0},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 120,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 1},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 101,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 15},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 50,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 1},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 900,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 2},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 26,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 13},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 111,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 7},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 89,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 1},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 159,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 2},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 366,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 17},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 20,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 7},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 100,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 4},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 141,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 61,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 3}]",
              "sol": "[Definitions.ProtoEvent(5,7,66,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.AD),Definitions.ProtoEvent(95,1532892062,8,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.STD),Definitions.ProtoEvent(149,2440589,2440587,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.CD),Definitions.ProtoEvent(4,150,257,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IP),Definitions.ProtoEvent(2447,30,32074,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.STD),Definitions.ProtoEvent(120,26,12,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PRD),Definitions.ProtoEvent(1461002,1338,159,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RR),Definitions.ProtoEvent(129,80,27,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PR),Definitions.ProtoEvent(4000,99,1338,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SC),Definitions.ProtoEvent(71,150,159,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PP),Definitions.ProtoEvent(10,61,159,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCB),Definitions.ProtoEvent(16,40,146098,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(32,59,146098,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.AD),Definitions.ProtoEvent(1532892062,68569,400,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IED),Definitions.ProtoEvent(11,130,89,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PRD),Definitions.ProtoEvent(1970,2014223714,79,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.FP),Definitions.ProtoEvent(68570,29,950,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RRY),Definitions.ProtoEvent(66,159,131,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PY),Definitions.ProtoEvent(899,9,70,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.DV),Definitions.ProtoEvent(32075,119,2,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RRY),Definitions.ProtoEvent(146096,1336,63,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RR),Definitions.ProtoEvent(21,950,949,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SD),Definitions.ProtoEvent(64,256,0,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCB),Definitions.ProtoEvent(60,2448,61,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.DV),Definitions.ProtoEvent(15,1338,68569,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PR),Definitions.ProtoEvent(4801,60,1337,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.RRY),Definitions.ProtoEvent(361,140,149,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PP),Definitions.ProtoEvent(14,4799,4800,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.CD),Definitions.ProtoEvent(149,12,11,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCI),Definitions.ProtoEvent(51,30,9999,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RRY),Definitions.ProtoEvent(361,49,1461,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RRY),Definitions.ProtoEvent(255,146096,10,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PRD),Definitions.ProtoEvent(32,61,367,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.TD),Definitions.ProtoEvent(11,1532892064,7,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PRD),Definitions.ProtoEvent(368,1462,4800,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.STD),Definitions.ProtoEvent(49,59,70,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY),Definitions.ProtoEvent(139,79,2447,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.DV),Definitions.ProtoEvent(68569,30,399,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PR),Definitions.ProtoEvent(25,111,10000,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PY),Definitions.ProtoEvent(30,901,60,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(86399,365,119,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IP),Definitions.ProtoEvent(13,1532892063,2440589,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCI),Definitions.ProtoEvent(950,6,89,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IED),Definitions.ProtoEvent(1532892063,7,70,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.STD),Definitions.ProtoEvent(1337,63,2448,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.FP),Definitions.ProtoEvent(68569,26,28,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.STD),Definitions.ProtoEvent(95,13,13,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MR),Definitions.ProtoEvent(366,255,7,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.RR),Definitions.ProtoEvent(8,131,5,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCB),Definitions.ProtoEvent(60,4900,20,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RR),Definitions.ProtoEvent(89,130,899,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SD),Definitions.ProtoEvent(160,150,120,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MD),Definitions.ProtoEvent(129,26,101,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.CD),Definitions.ProtoEvent(160,951,50,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.MD),Definitions.ProtoEvent(60,4799,900,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.AD),Definitions.ProtoEvent(13,1461002,26,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RRY),Definitions.ProtoEvent(401,4899,111,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PY),Definitions.ProtoEvent(1338,1532892062,89,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MD),Definitions.ProtoEvent(29,29,159,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.AD),Definitions.ProtoEvent(99,4000,366,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MR),Definitions.ProtoEvent(51,86401,20,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PY),Definitions.ProtoEvent(1,2014223716,100,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IP),Definitions.ProtoEvent(10,1461002,141,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(21,11,61,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IED)]"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.870ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 366,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 10},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 399,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 5},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 27,\"eventType\": 2,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 7},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 2446,\"eventType\": 2,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 6},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 97,\"eventType\": 11,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 7},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 901,\"eventType\": 11,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 18},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 1970,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 19,\"stfType\": 8},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 399,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 7},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 60,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 19},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 32076,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 3},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 101,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 16},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 100,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 101,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 15},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 1461000,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 12},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 3999,\"eventType\": 14,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 16},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 146097,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 0},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 1460,\"eventType\": 1,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 17},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 1336,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 1},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 950,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 5},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 15,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 19},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 2440587,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 15},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 96,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 101,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 5},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 365,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 6},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 26,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 15,\"stfType\": 19},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 7,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 17},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 139,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 17},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 2,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 15},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 89,\"eventType\": 5,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 19},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 64,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 20},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 4001,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 13},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 32076,\"eventType\": 19,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 4},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 1337,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 20},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 159,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 5},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 5,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 12},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 96,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 8},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 9999,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 12},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 1970,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 7},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 68568,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 18},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 1462,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 13},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 7,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 1,\"stfType\": 17},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 1,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 11,\"stfType\": 18},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 32074,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 14},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 1460,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 9},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 10,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 4},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 32074,\"eventType\": 1,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 5},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 1336,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 12},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 1532892064,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 61,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 9},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 23,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 13},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 1336,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 20},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 1338,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 12,\"stfType\": 12},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 96,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 0,\"stfType\": 8},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 367,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 5},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 150,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 20},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 2440587,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 12},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 1462,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 7},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 1461002,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 110,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 15},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 1462,\"eventType\": 2,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 15},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 61,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 5},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 4801,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 15},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 6,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 3},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 10001,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 0}]",
              "sol": "[Definitions.ProtoEvent(60,17,366,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.TD),Definitions.ProtoEvent(68569,39,399,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PR),Definitions.ProtoEvent(68570,10,27,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PY),Definitions.ProtoEvent(41,101,2446,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PP),Definitions.ProtoEvent(4000,49,97,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PY),Definitions.ProtoEvent(5,2014223714,901,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCB),Definitions.ProtoEvent(2440587,68570,1970,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.FP),Definitions.ProtoEvent(1970,1338,399,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PY),Definitions.ProtoEvent(2,0,60,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.STD),Definitions.ProtoEvent(146098,71,32076,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IED),Definitions.ProtoEvent(1460,99,101,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.DV),Definitions.ProtoEvent(140,2014223714,100,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(86401,4799,101,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.CD),Definitions.ProtoEvent(159,12,1461000,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RR),Definitions.ProtoEvent(29,2014223714,3999,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.DV),Definitions.ProtoEvent(4900,90,146097,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SD),Definitions.ProtoEvent(49,368,1460,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MR),Definitions.ProtoEvent(91,80,1336,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MD),Definitions.ProtoEvent(2014223715,100,950,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PR),Definitions.ProtoEvent(41,146097,15,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.STD),Definitions.ProtoEvent(109,111,2440587,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.CD),Definitions.ProtoEvent(1336,367,96,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(151,159,101,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PR),Definitions.ProtoEvent(65,4900,365,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PP),Definitions.ProtoEvent(4001,26,26,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.STD),Definitions.ProtoEvent(257,364,7,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MR),Definitions.ProtoEvent(159,63,139,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MR),Definitions.ProtoEvent(21,7,2,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.CD),Definitions.ProtoEvent(2,159,89,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.STD),Definitions.ProtoEvent(69,256,64,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.Child),Definitions.ProtoEvent(19,257,4001,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RRY),Definitions.ProtoEvent(4800,2014223714,32076,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IP),Definitions.ProtoEvent(10001,364,1337,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.Child),Definitions.ProtoEvent(159,2440588,159,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PR),Definitions.ProtoEvent(50,359,5,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RR),Definitions.ProtoEvent(89,901,96,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.FP),Definitions.ProtoEvent(367,400,9999,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.RR),Definitions.ProtoEvent(4901,401,1970,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PY),Definitions.ProtoEvent(4899,50,68568,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCB),Definitions.ProtoEvent(23,129,1462,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.RRY),Definitions.ProtoEvent(1,2447,7,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MR),Definitions.ProtoEvent(360,86400,1,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCB),Definitions.ProtoEvent(4000,26,32074,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SC),Definitions.ProtoEvent(365,68569,1460,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PRD),Definitions.ProtoEvent(29,1336,10,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IP),Definitions.ProtoEvent(70,30,32074,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PR),Definitions.ProtoEvent(64,90,1336,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RR),Definitions.ProtoEvent(80,109,1532892064,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(1336,2,61,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PRD),Definitions.ProtoEvent(364,66,23,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.RRY),Definitions.ProtoEvent(1460,90,1336,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.Child),Definitions.ProtoEvent(15,0,1338,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RR),Definitions.ProtoEvent(18,12,96,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.FP),Definitions.ProtoEvent(2014223715,8,367,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PR),Definitions.ProtoEvent(1338,257,150,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.Child),Definitions.ProtoEvent(80,2014223716,2440587,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RR),Definitions.ProtoEvent(66,139,1462,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PY),Definitions.ProtoEvent(86399,39,1461002,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(25,95,110,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.CD),Definitions.ProtoEvent(91,70,1462,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.CD),Definitions.ProtoEvent(949,32076,61,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PR),Definitions.ProtoEvent(4800,109,4801,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.CD),Definitions.ProtoEvent(2014223716,10,6,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IED),Definitions.ProtoEvent(150,400,10001,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SD)]"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.895ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.899ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [124,69,84,208,226,83,32,33,57,214,252,44,146,29,206,162,215,121,177,243,63,137,26,79,155,107,20,193,62,138,69,3],\"legalEntityIdCounterparty\": [215,217,15,30,163,140,44,163,196,146,242,70,161,127,240,8,47,107,145,236,106,242,173,6,104,157,252,225,181,204,0,232],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 399,\"statusDate\": 20,\"initialExchangeDate\": 254,\"maturityDate\": 63,\"terminationDate\": 1461,\"purchaseDate\": 141,\"capitalizationEndDate\": 30,\"cycleAnchorDateOfInterestPayment\": 160,\"cycleAnchorDateOfRateReset\": 899,\"cycleAnchorDateOfScalingIndex\": 949,\"cycleAnchorDateOfFee\": 2440587,\"notionalPrincipal\": 109,\"nominalInterestRate\": 79,\"feeAccrued\": 254,\"accruedInterest\": 69,\"rateMultiplier\": 8,\"rateSpread\": 8,\"feeRate\": 71,\"nextResetRate\": 150,\"penaltyRate\": 32074,\"premiumDiscountAtIED\": 91,\"priceAtPurchaseDate\": 27,\"cycleOfInterestPayment\": {\"i\": 9,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 951,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 949,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 257,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 900,\"lifeFloor\": 60,\"periodCap\": 1461000,\"periodFloor\": 139}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"124,69,84,208,226,83,32,33,57,214,252,44,146,29,206,162,215,121,177,243,63,137,26,79,155,107,20,193,62,138,69,3\"),stringToBytes32(\"215,217,15,30,163,140,44,163,196,146,242,70,161,127,240,8,47,107,145,236,106,242,173,6,104,157,252,225,181,204,0,232\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,399,20,254,63,1461,141,30,160,899,949,2440587,109,79,254,69,8,8,71,150,32074,91,27,Definitions.IPS(9,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(951,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(949,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(257,Definitions.P.M,Definitions.S.LONG,false),900,60,1461000,139)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.903ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [87,43,178,216,108,194,71,92,71,71,2,54,151,217,115,201,1,152,219,40,63,81,185,198,91,175,177,190,215,50,56,79],\"legalEntityIdCounterparty\": [117,61,199,42,0,155,116,227,238,14,80,172,127,220,4,218,126,180,218,12,116,113,35,186,251,35,81,249,26,35,72,114],\"dayCountConvention\": 1,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 68570,\"statusDate\": 68570,\"initialExchangeDate\": 120,\"maturityDate\": 950,\"terminationDate\": 68568,\"purchaseDate\": 32074,\"capitalizationEndDate\": 3999,\"cycleAnchorDateOfInterestPayment\": 2440589,\"cycleAnchorDateOfRateReset\": 365,\"cycleAnchorDateOfScalingIndex\": 40,\"cycleAnchorDateOfFee\": 367,\"notionalPrincipal\": 3999,\"nominalInterestRate\": 1461,\"feeAccrued\": 40,\"accruedInterest\": 1532892063,\"rateMultiplier\": 25,\"rateSpread\": 68568,\"feeRate\": 2014223714,\"nextResetRate\": 146098,\"penaltyRate\": 60,\"premiumDiscountAtIED\": 48,\"priceAtPurchaseDate\": 68570,\"cycleOfInterestPayment\": {\"i\": 23,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 10,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 368,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 21,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 64,\"lifeFloor\": 364,\"periodCap\": 51,\"periodFloor\": 1336}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"87,43,178,216,108,194,71,92,71,71,2,54,151,217,115,201,1,152,219,40,63,81,185,198,91,175,177,190,215,50,56,79\"),stringToBytes32(\"117,61,199,42,0,155,116,227,238,14,80,172,127,220,4,218,126,180,218,12,116,113,35,186,251,35,81,249,26,35,72,114\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,68570,68570,120,950,68568,32074,3999,2440589,365,40,367,3999,1461,40,1532892063,25,68568,2014223714,146098,60,48,68570,Definitions.IPS(23,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(10,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(368,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(21,Definitions.P.Y,Definitions.S.SHORT,true),64,364,51,1336)"
            },
            {
              "js": "{\"lastEventTime\": 400,\"contractStatus\": 2,\"timeFromLastEvent\": 80,\"nominalValue\": 110,\"nominalAccrued\": 65,\"feeAccrued\": 899,\"nominalRate\": 23,\"interestScalingMultiplier\": 15,\"nominalScalingMultiplier\": 32075,\"contractRoleSign\": 1}",
              "sol": "Definitions.ContractState(400,Definitions.ContractStatus.DQ,80,110,65,899,23,15,32075,Definitions.ContractRole.RPL)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.908ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [188,201,178,15,216,103,164,214,153,201,60,41,156,215,77,161,164,101,153,105,16,9,46,102,139,14,71,213,29,75,71,221],\"legalEntityIdCounterparty\": [27,98,130,31,75,108,3,61,119,212,15,18,134,187,174,173,190,136,185,108,181,132,10,162,89,24,94,231,122,10,35,171],\"dayCountConvention\": 5,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 101,\"statusDate\": 1336,\"initialExchangeDate\": 30,\"maturityDate\": 5,\"terminationDate\": 4899,\"purchaseDate\": 256,\"capitalizationEndDate\": 79,\"cycleAnchorDateOfInterestPayment\": 39,\"cycleAnchorDateOfRateReset\": 119,\"cycleAnchorDateOfScalingIndex\": 121,\"cycleAnchorDateOfFee\": 59,\"notionalPrincipal\": 146097,\"nominalInterestRate\": 146097,\"feeAccrued\": 96,\"accruedInterest\": 0,\"rateMultiplier\": 29,\"rateSpread\": 91,\"feeRate\": 39,\"nextResetRate\": 29,\"penaltyRate\": 32076,\"premiumDiscountAtIED\": 6,\"priceAtPurchaseDate\": 31,\"cycleOfInterestPayment\": {\"i\": 68569,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 30,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 100,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 146097,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 119,\"lifeFloor\": 1971,\"periodCap\": 2447,\"periodFloor\": 11}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"188,201,178,15,216,103,164,214,153,201,60,41,156,215,77,161,164,101,153,105,16,9,46,102,139,14,71,213,29,75,71,221\"),stringToBytes32(\"27,98,130,31,75,108,3,61,119,212,15,18,134,187,174,173,190,136,185,108,181,132,10,162,89,24,94,231,122,10,35,171\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,101,1336,30,5,4899,256,79,39,119,121,59,146097,146097,96,0,29,91,39,29,32076,6,31,Definitions.IPS(68569,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(30,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(100,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(146097,Definitions.P.W,Definitions.S.LONG,false),119,1971,2447,11)"
            },
            {
              "js": "{\"lastEventTime\": 139,\"contractStatus\": 2,\"timeFromLastEvent\": 25,\"nominalValue\": 25,\"nominalAccrued\": 2446,\"feeAccrued\": -1,\"nominalRate\": 14,\"interestScalingMultiplier\": 16,\"nominalScalingMultiplier\": 1532892064,\"contractRoleSign\": 2}",
              "sol": "Definitions.ContractState(139,Definitions.ContractStatus.DQ,25,25,2446,-1,14,16,1532892064,Definitions.ContractRole.LG)"
            },
            {
              "js": "{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 141,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 13}",
              "sol": "Definitions.ProtoEvent(131,159,141,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.RRY)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.917ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [223,198,5,57,248,16,128,222,195,181,163,71,53,187,238,93,162,206,59,171,127,117,250,30,12,32,219,62,65,197,59,37],\"legalEntityIdCounterparty\": [78,126,83,225,149,211,47,122,229,234,17,19,49,101,210,164,106,180,102,37,127,117,218,55,204,210,247,143,239,251,9,245],\"dayCountConvention\": 5,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 86401,\"statusDate\": 4,\"initialExchangeDate\": 70,\"maturityDate\": 60,\"terminationDate\": 3,\"purchaseDate\": 4799,\"capitalizationEndDate\": 119,\"cycleAnchorDateOfInterestPayment\": 15,\"cycleAnchorDateOfRateReset\": 1336,\"cycleAnchorDateOfScalingIndex\": 120,\"cycleAnchorDateOfFee\": 1461000,\"notionalPrincipal\": 2,\"nominalInterestRate\": 899,\"feeAccrued\": 2014223715,\"accruedInterest\": 949,\"rateMultiplier\": 90,\"rateSpread\": 50,\"feeRate\": 109,\"nextResetRate\": 11,\"penaltyRate\": 146097,\"premiumDiscountAtIED\": 91,\"priceAtPurchaseDate\": 1336,\"cycleOfInterestPayment\": {\"i\": 2440589,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 110,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1460,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 1461000,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 95,\"lifeFloor\": 68569,\"periodCap\": 2014223714,\"periodFloor\": 86401}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"223,198,5,57,248,16,128,222,195,181,163,71,53,187,238,93,162,206,59,171,127,117,250,30,12,32,219,62,65,197,59,37\"),stringToBytes32(\"78,126,83,225,149,211,47,122,229,234,17,19,49,101,210,164,106,180,102,37,127,117,218,55,204,210,247,143,239,251,9,245\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,86401,4,70,60,3,4799,119,15,1336,120,1461000,2,899,2014223715,949,90,50,109,11,146097,91,1336,Definitions.IPS(2440589,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(110,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(1460,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(1461000,Definitions.P.H,Definitions.S.LONG,false),95,68569,2014223714,86401)"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [152,236,4,178,122,221,166,181,142,32,59,251,7,176,128,192,212,129,207,238,247,90,119,21,110,206,58,76,162,42,152,234],\"legalEntityIdCounterparty\": [238,93,73,200,173,239,224,228,62,163,114,120,132,160,118,37,253,74,69,241,102,95,146,241,189,119,41,255,24,33,89,8],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 70,\"statusDate\": 71,\"initialExchangeDate\": 256,\"maturityDate\": 17,\"terminationDate\": 131,\"purchaseDate\": 90,\"capitalizationEndDate\": 51,\"cycleAnchorDateOfInterestPayment\": 121,\"cycleAnchorDateOfRateReset\": 21,\"cycleAnchorDateOfScalingIndex\": 25,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 26,\"nominalInterestRate\": 21,\"feeAccrued\": 61,\"accruedInterest\": 65,\"rateMultiplier\": 1971,\"rateSpread\": 32075,\"feeRate\": 19,\"nextResetRate\": 1336,\"penaltyRate\": 1460,\"premiumDiscountAtIED\": 2446,\"priceAtPurchaseDate\": 160,\"cycleOfInterestPayment\": {\"i\": 9,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 109,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 69,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 63,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 2014223715,\"lifeFloor\": 24,\"periodCap\": 10001,\"periodFloor\": 255}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"152,236,4,178,122,221,166,181,142,32,59,251,7,176,128,192,212,129,207,238,247,90,119,21,110,206,58,76,162,42,152,234\"),stringToBytes32(\"238,93,73,200,173,239,224,228,62,163,114,120,132,160,118,37,253,74,69,241,102,95,146,241,189,119,41,255,24,33,89,8\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,70,71,256,17,131,90,51,121,21,25,0,26,21,61,65,1971,32075,19,1336,1460,2446,160,Definitions.IPS(9,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(109,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(69,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(63,Definitions.P.Y,Definitions.S.LONG,true),2014223715,24,10001,255)"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [0,196,116,25,12,9,37,7,255,142,238,250,81,214,5,99,236,13,38,180,84,250,34,1,194,217,18,53,163,123,192,185],\"legalEntityIdCounterparty\": [235,49,204,141,52,75,191,117,129,213,161,145,107,135,255,54,225,175,143,216,246,216,78,179,216,185,197,93,210,108,148,181],\"dayCountConvention\": 1,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 4001,\"statusDate\": 100,\"initialExchangeDate\": 254,\"maturityDate\": 10000,\"terminationDate\": 26,\"purchaseDate\": 11,\"capitalizationEndDate\": 7,\"cycleAnchorDateOfInterestPayment\": 4899,\"cycleAnchorDateOfRateReset\": 399,\"cycleAnchorDateOfScalingIndex\": 4000,\"cycleAnchorDateOfFee\": 26,\"notionalPrincipal\": 364,\"nominalInterestRate\": 2446,\"feeAccrued\": 19,\"accruedInterest\": 254,\"rateMultiplier\": 64,\"rateSpread\": 63,\"feeRate\": 2014223714,\"nextResetRate\": 365,\"penaltyRate\": 8,\"premiumDiscountAtIED\": 26,\"priceAtPurchaseDate\": 50,\"cycleOfInterestPayment\": {\"i\": 19,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2446,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 161,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 10,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 25,\"lifeFloor\": 15,\"periodCap\": 20,\"periodFloor\": 68568}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"0,196,116,25,12,9,37,7,255,142,238,250,81,214,5,99,236,13,38,180,84,250,34,1,194,217,18,53,163,123,192,185\"),stringToBytes32(\"235,49,204,141,52,75,191,117,129,213,161,145,107,135,255,54,225,175,143,216,246,216,78,179,216,185,197,93,210,108,148,181\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,4001,100,254,10000,26,11,7,4899,399,4000,26,364,2446,19,254,64,63,2014223714,365,8,26,50,Definitions.IPS(19,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(2446,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(161,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(10,Definitions.P.M,Definitions.S.SHORT,true),25,15,20,68568)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [42,106,241,100,47,198,14,69,216,188,102,129,85,218,141,134,47,238,254,213,69,71,195,180,187,135,18,41,9,129,115,24],\"legalEntityIdCounterparty\": [235,191,6,144,205,222,39,34,23,207,250,155,36,110,170,208,215,148,175,58,210,124,122,156,27,203,120,192,154,206,215,181],\"dayCountConvention\": 1,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 119,\"statusDate\": 96,\"initialExchangeDate\": 10000,\"maturityDate\": 901,\"terminationDate\": 91,\"purchaseDate\": 32076,\"capitalizationEndDate\": 360,\"cycleAnchorDateOfInterestPayment\": 2014223715,\"cycleAnchorDateOfRateReset\": 1461002,\"cycleAnchorDateOfScalingIndex\": 39,\"cycleAnchorDateOfFee\": 161,\"notionalPrincipal\": 1338,\"nominalInterestRate\": 26,\"feeAccrued\": 146096,\"accruedInterest\": 1460,\"rateMultiplier\": 10001,\"rateSpread\": 66,\"feeRate\": 96,\"nextResetRate\": 28,\"penaltyRate\": 19,\"premiumDiscountAtIED\": 1461002,\"priceAtPurchaseDate\": 254,\"cycleOfInterestPayment\": {\"i\": 401,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 101,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 40,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 130,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 159,\"lifeFloor\": 39,\"periodCap\": 5,\"periodFloor\": 96}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"42,106,241,100,47,198,14,69,216,188,102,129,85,218,141,134,47,238,254,213,69,71,195,180,187,135,18,41,9,129,115,24\"),stringToBytes32(\"235,191,6,144,205,222,39,34,23,207,250,155,36,110,170,208,215,148,175,58,210,124,122,156,27,203,120,192,154,206,215,181\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,119,96,10000,901,91,32076,360,2014223715,1461002,39,161,1338,26,146096,1460,10001,66,96,28,19,1461002,254,Definitions.IPS(401,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(101,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(40,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(130,Definitions.P.D,Definitions.S.LONG,true),159,39,5,96)"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [202,162,87,105,114,242,215,168,83,205,112,153,17,135,171,134,59,209,232,115,55,213,237,110,243,140,182,48,157,210,63,190],\"legalEntityIdCounterparty\": [186,173,225,44,142,25,185,88,148,227,59,96,172,219,53,132,188,109,176,14,231,230,164,80,82,37,45,8,147,255,8,73],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 60,\"statusDate\": 2440589,\"initialExchangeDate\": 400,\"maturityDate\": 39,\"terminationDate\": 901,\"purchaseDate\": 0,\"capitalizationEndDate\": 24,\"cycleAnchorDateOfInterestPayment\": 150,\"cycleAnchorDateOfRateReset\": 8,\"cycleAnchorDateOfScalingIndex\": 27,\"cycleAnchorDateOfFee\": 2440589,\"notionalPrincipal\": 146097,\"nominalInterestRate\": 2446,\"feeAccrued\": 1461002,\"accruedInterest\": 30,\"rateMultiplier\": 30,\"rateSpread\": 4900,\"feeRate\": 130,\"nextResetRate\": 361,\"penaltyRate\": 70,\"premiumDiscountAtIED\": 0,\"priceAtPurchaseDate\": 1336,\"cycleOfInterestPayment\": {\"i\": 68569,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1461002,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2014223716,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 121,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 4000,\"lifeFloor\": 65,\"periodCap\": 3,\"periodFloor\": 4800}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"202,162,87,105,114,242,215,168,83,205,112,153,17,135,171,134,59,209,232,115,55,213,237,110,243,140,182,48,157,210,63,190\"),stringToBytes32(\"186,173,225,44,142,25,185,88,148,227,59,96,172,219,53,132,188,109,176,14,231,230,164,80,82,37,45,8,147,255,8,73\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,60,2440589,400,39,901,0,24,150,8,27,2440589,146097,2446,1461002,30,30,4900,130,361,70,0,1336,Definitions.IPS(68569,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1461002,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(2014223716,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(121,Definitions.P.D,Definitions.S.LONG,false),4000,65,3,4800)"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [35,55,130,213,149,48,126,255,76,170,17,120,74,240,27,92,20,50,203,175,53,174,237,14,221,27,203,131,236,107,243,197],\"legalEntityIdCounterparty\": [69,160,73,254,218,130,72,45,16,71,68,74,2,216,118,3,64,194,175,158,28,69,75,181,94,80,193,178,209,203,94,216],\"dayCountConvention\": 6,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 21,\"statusDate\": 256,\"initialExchangeDate\": 949,\"maturityDate\": 23,\"terminationDate\": 1532892064,\"purchaseDate\": 2440587,\"capitalizationEndDate\": 161,\"cycleAnchorDateOfInterestPayment\": 25,\"cycleAnchorDateOfRateReset\": 10000,\"cycleAnchorDateOfScalingIndex\": 366,\"cycleAnchorDateOfFee\": 2440587,\"notionalPrincipal\": 1532892064,\"nominalInterestRate\": 254,\"feeAccrued\": 16,\"accruedInterest\": 14,\"rateMultiplier\": 32,\"rateSpread\": 7,\"feeRate\": 1336,\"nextResetRate\": 951,\"penaltyRate\": 366,\"premiumDiscountAtIED\": 1461,\"priceAtPurchaseDate\": 91,\"cycleOfInterestPayment\": {\"i\": 27,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 401,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 100,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1532892062,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 7,\"lifeFloor\": 109,\"periodCap\": 365,\"periodFloor\": 254}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"35,55,130,213,149,48,126,255,76,170,17,120,74,240,27,92,20,50,203,175,53,174,237,14,221,27,203,131,236,107,243,197\"),stringToBytes32(\"69,160,73,254,218,130,72,45,16,71,68,74,2,216,118,3,64,194,175,158,28,69,75,181,94,80,193,178,209,203,94,216\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,21,256,949,23,1532892064,2440587,161,25,10000,366,2440587,1532892064,254,16,14,32,7,1336,951,366,1461,91,Definitions.IPS(27,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(401,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(100,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(1532892062,Definitions.P.Y,Definitions.S.SHORT,false),7,109,365,254)"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [73,221,24,120,140,170,115,133,164,175,107,206,178,113,194,34,143,26,178,171,164,163,115,53,137,165,221,194,102,56,164,112],\"legalEntityIdCounterparty\": [211,28,13,150,66,56,250,114,127,195,124,126,125,179,252,171,12,242,186,239,193,102,173,62,72,134,77,66,17,124,10,77],\"dayCountConvention\": 2,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 29,\"statusDate\": 1532892063,\"initialExchangeDate\": 101,\"maturityDate\": 149,\"terminationDate\": 12,\"purchaseDate\": 95,\"capitalizationEndDate\": 40,\"cycleAnchorDateOfInterestPayment\": 50,\"cycleAnchorDateOfRateReset\": 111,\"cycleAnchorDateOfScalingIndex\": 1337,\"cycleAnchorDateOfFee\": 4900,\"notionalPrincipal\": 121,\"nominalInterestRate\": 2440589,\"feeAccrued\": 68569,\"accruedInterest\": 19,\"rateMultiplier\": 131,\"rateSpread\": 119,\"feeRate\": 59,\"nextResetRate\": 7,\"penaltyRate\": 1,\"premiumDiscountAtIED\": 111,\"priceAtPurchaseDate\": 949,\"cycleOfInterestPayment\": {\"i\": 49,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 368,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 81,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1337,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 23,\"lifeFloor\": 89,\"periodCap\": 1461000,\"periodFloor\": 68569}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"73,221,24,120,140,170,115,133,164,175,107,206,178,113,194,34,143,26,178,171,164,163,115,53,137,165,221,194,102,56,164,112\"),stringToBytes32(\"211,28,13,150,66,56,250,114,127,195,124,126,125,179,252,171,12,242,186,239,193,102,173,62,72,134,77,66,17,124,10,77\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,29,1532892063,101,149,12,95,40,50,111,1337,4900,121,2440589,68569,19,131,119,59,7,1,111,949,Definitions.IPS(49,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(368,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(81,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(1337,Definitions.P.Y,Definitions.S.LONG,false),23,89,1461000,68569)"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [182,59,22,25,46,81,211,112,240,152,204,188,57,42,251,121,44,154,72,219,35,102,245,178,37,0,184,146,215,147,21,39],\"legalEntityIdCounterparty\": [255,25,43,164,199,36,179,39,122,121,58,223,184,54,173,81,148,143,40,45,159,207,98,32,32,184,120,19,242,253,115,174],\"dayCountConvention\": 5,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 4901,\"statusDate\": 2014223714,\"initialExchangeDate\": 15,\"maturityDate\": 254,\"terminationDate\": 4799,\"purchaseDate\": 90,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4,\"cycleAnchorDateOfRateReset\": 1336,\"cycleAnchorDateOfScalingIndex\": 23,\"cycleAnchorDateOfFee\": 899,\"notionalPrincipal\": 86401,\"nominalInterestRate\": 5,\"feeAccrued\": 1462,\"accruedInterest\": 48,\"rateMultiplier\": 27,\"rateSpread\": 20,\"feeRate\": 2014223715,\"nextResetRate\": 160,\"penaltyRate\": 160,\"premiumDiscountAtIED\": 21,\"priceAtPurchaseDate\": 899,\"cycleOfInterestPayment\": {\"i\": 11,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 3999,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 13,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 24,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 2446,\"lifeFloor\": 15,\"periodCap\": 97,\"periodFloor\": 1338}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"182,59,22,25,46,81,211,112,240,152,204,188,57,42,251,121,44,154,72,219,35,102,245,178,37,0,184,146,215,147,21,39\"),stringToBytes32(\"255,25,43,164,199,36,179,39,122,121,58,223,184,54,173,81,148,143,40,45,159,207,98,32,32,184,120,19,242,253,115,174\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,4901,2014223714,15,254,4799,90,0,4,1336,23,899,86401,5,1462,48,27,20,2014223715,160,160,21,899,Definitions.IPS(11,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(3999,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(13,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(24,Definitions.P.M,Definitions.S.SHORT,true),2446,15,97,1338)"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [185,50,41,185,36,8,163,183,36,156,19,44,225,21,209,238,242,41,99,125,78,103,22,171,61,59,199,21,88,154,184,174],\"legalEntityIdCounterparty\": [124,102,168,177,203,14,214,176,4,66,44,145,219,30,125,123,20,167,41,47,142,99,247,177,51,134,123,36,206,14,193,78],\"dayCountConvention\": 2,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 365,\"statusDate\": 8,\"initialExchangeDate\": 90,\"maturityDate\": 159,\"terminationDate\": 257,\"purchaseDate\": 16,\"capitalizationEndDate\": 2440589,\"cycleAnchorDateOfInterestPayment\": 146097,\"cycleAnchorDateOfRateReset\": 24,\"cycleAnchorDateOfScalingIndex\": 1971,\"cycleAnchorDateOfFee\": 65,\"notionalPrincipal\": 25,\"nominalInterestRate\": 32,\"feeAccrued\": 32,\"accruedInterest\": 159,\"rateMultiplier\": 3,\"rateSpread\": 26,\"feeRate\": 131,\"nextResetRate\": 17,\"penaltyRate\": 32074,\"premiumDiscountAtIED\": 2440587,\"priceAtPurchaseDate\": 32076,\"cycleOfInterestPayment\": {\"i\": 90,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 16,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 141,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 257,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 1336,\"lifeFloor\": 149,\"periodCap\": 139,\"periodFloor\": 71}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"185,50,41,185,36,8,163,183,36,156,19,44,225,21,209,238,242,41,99,125,78,103,22,171,61,59,199,21,88,154,184,174\"),stringToBytes32(\"124,102,168,177,203,14,214,176,4,66,44,145,219,30,125,123,20,167,41,47,142,99,247,177,51,134,123,36,206,14,193,78\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,365,8,90,159,257,16,2440589,146097,24,1971,65,25,32,32,159,3,26,131,17,32074,2440587,32076,Definitions.IPS(90,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(16,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(141,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(257,Definitions.P.W,Definitions.S.LONG,true),1336,149,139,71)"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [114,89,220,94,170,58,207,193,106,190,45,7,146,45,188,37,74,93,75,16,47,230,200,252,85,8,186,152,2,219,64,44],\"legalEntityIdCounterparty\": [88,241,45,157,111,164,250,251,170,170,69,56,133,89,229,110,26,64,72,122,68,242,119,128,178,214,244,199,4,93,42,250],\"dayCountConvention\": 2,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 1532892063,\"statusDate\": 59,\"initialExchangeDate\": 4000,\"maturityDate\": 1460,\"terminationDate\": 3999,\"purchaseDate\": 111,\"capitalizationEndDate\": 89,\"cycleAnchorDateOfInterestPayment\": 70,\"cycleAnchorDateOfRateReset\": 1337,\"cycleAnchorDateOfScalingIndex\": 28,\"cycleAnchorDateOfFee\": 70,\"notionalPrincipal\": 30,\"nominalInterestRate\": 146096,\"feeAccrued\": 1462,\"accruedInterest\": 13,\"rateMultiplier\": 360,\"rateSpread\": 4,\"feeRate\": 71,\"nextResetRate\": 159,\"penaltyRate\": 1969,\"premiumDiscountAtIED\": 66,\"priceAtPurchaseDate\": 1461,\"cycleOfInterestPayment\": {\"i\": 27,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 10,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 27,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 39,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 6,\"lifeFloor\": 50,\"periodCap\": 48,\"periodFloor\": 111}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"114,89,220,94,170,58,207,193,106,190,45,7,146,45,188,37,74,93,75,16,47,230,200,252,85,8,186,152,2,219,64,44\"),stringToBytes32(\"88,241,45,157,111,164,250,251,170,170,69,56,133,89,229,110,26,64,72,122,68,242,119,128,178,214,244,199,4,93,42,250\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,1532892063,59,4000,1460,3999,111,89,70,1337,28,70,30,146096,1462,13,360,4,71,159,1969,66,1461,Definitions.IPS(27,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(10,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(27,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(39,Definitions.P.H,Definitions.S.LONG,true),6,50,48,111)"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [149,46,142,139,105,228,80,143,253,69,96,183,133,63,9,197,147,206,171,176,107,50,246,249,134,142,215,65,19,68,39,28],\"legalEntityIdCounterparty\": [92,50,255,194,79,232,101,189,76,236,48,194,82,136,212,53,157,146,250,3,77,218,45,42,163,135,114,145,107,245,57,16],\"dayCountConvention\": 5,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 30,\"statusDate\": 86401,\"initialExchangeDate\": 366,\"maturityDate\": 951,\"terminationDate\": 1462,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 364,\"cycleAnchorDateOfRateReset\": 4,\"cycleAnchorDateOfScalingIndex\": 111,\"cycleAnchorDateOfFee\": 61,\"notionalPrincipal\": 1462,\"nominalInterestRate\": 0,\"feeAccrued\": 16,\"accruedInterest\": 256,\"rateMultiplier\": 6,\"rateSpread\": 160,\"feeRate\": 10001,\"nextResetRate\": 69,\"penaltyRate\": 71,\"premiumDiscountAtIED\": 256,\"priceAtPurchaseDate\": 30,\"cycleOfInterestPayment\": {\"i\": 146098,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 21,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1969,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 399,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 59,\"lifeFloor\": 21,\"periodCap\": 86401,\"periodFloor\": 79}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"149,46,142,139,105,228,80,143,253,69,96,183,133,63,9,197,147,206,171,176,107,50,246,249,134,142,215,65,19,68,39,28\"),stringToBytes32(\"92,50,255,194,79,232,101,189,76,236,48,194,82,136,212,53,157,146,250,3,77,218,45,42,163,135,114,145,107,245,57,16\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,30,86401,366,951,1462,0,0,364,4,111,61,1462,0,16,256,6,160,10001,69,71,256,30,Definitions.IPS(146098,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(21,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(1969,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(399,Definitions.P.M,Definitions.S.SHORT,false),59,21,86401,79)"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [50,27,106,158,94,69,0,61,231,211,159,133,254,88,21,216,195,231,211,250,119,182,16,24,131,145,238,111,48,242,231,237],\"legalEntityIdCounterparty\": [230,16,38,158,73,112,7,49,111,219,110,235,156,187,114,6,120,148,33,131,75,4,151,63,82,236,37,196,183,43,252,80],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 1970,\"statusDate\": 1461,\"initialExchangeDate\": 8,\"maturityDate\": 111,\"terminationDate\": 31,\"purchaseDate\": 86400,\"capitalizationEndDate\": 2014223715,\"cycleAnchorDateOfInterestPayment\": 364,\"cycleAnchorDateOfRateReset\": 41,\"cycleAnchorDateOfScalingIndex\": 7,\"cycleAnchorDateOfFee\": 6,\"notionalPrincipal\": 15,\"nominalInterestRate\": 32,\"feeAccrued\": 95,\"accruedInterest\": 140,\"rateMultiplier\": 1,\"rateSpread\": 25,\"feeRate\": 4800,\"nextResetRate\": 401,\"penaltyRate\": 119,\"premiumDiscountAtIED\": 25,\"priceAtPurchaseDate\": 150,\"cycleOfInterestPayment\": {\"i\": 2014223715,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2448,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1460,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 899,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 130,\"lifeFloor\": 364,\"periodCap\": 368,\"periodFloor\": 8}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"50,27,106,158,94,69,0,61,231,211,159,133,254,88,21,216,195,231,211,250,119,182,16,24,131,145,238,111,48,242,231,237\"),stringToBytes32(\"230,16,38,158,73,112,7,49,111,219,110,235,156,187,114,6,120,148,33,131,75,4,151,63,82,236,37,196,183,43,252,80\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,1970,1461,8,111,31,86400,2014223715,364,41,7,6,15,32,95,140,1,25,4800,401,119,25,150,Definitions.IPS(2014223715,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(2448,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(1460,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(899,Definitions.P.H,Definitions.S.LONG,true),130,364,368,8)"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [83,149,194,15,48,30,45,79,217,93,25,178,123,143,106,61,202,13,210,167,83,137,58,33,86,85,249,153,42,10,149,115],\"legalEntityIdCounterparty\": [246,86,157,166,10,242,141,222,163,221,155,30,180,254,60,11,170,189,141,232,244,119,17,167,95,76,126,20,149,139,128,178],\"dayCountConvention\": 0,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 4000,\"statusDate\": 950,\"initialExchangeDate\": 146096,\"maturityDate\": 1969,\"terminationDate\": 4000,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 119,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 131,\"cycleAnchorDateOfFee\": 48,\"notionalPrincipal\": 69,\"nominalInterestRate\": 0,\"feeAccrued\": 1460,\"accruedInterest\": 129,\"rateMultiplier\": 5,\"rateSpread\": 1532892064,\"feeRate\": 146096,\"nextResetRate\": 21,\"penaltyRate\": 64,\"premiumDiscountAtIED\": 364,\"priceAtPurchaseDate\": 1461,\"cycleOfInterestPayment\": {\"i\": 900,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 256,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 6,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 146097,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 69,\"lifeFloor\": 51,\"periodCap\": 95,\"periodFloor\": 1461002}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"83,149,194,15,48,30,45,79,217,93,25,178,123,143,106,61,202,13,210,167,83,137,58,33,86,85,249,153,42,10,149,115\"),stringToBytes32(\"246,86,157,166,10,242,141,222,163,221,155,30,180,254,60,11,170,189,141,232,244,119,17,167,95,76,126,20,149,139,128,178\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,4000,950,146096,1969,4000,0,0,119,0,131,48,69,0,1460,129,5,1532892064,146096,21,64,364,1461,Definitions.IPS(900,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(256,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(6,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(146097,Definitions.P.W,Definitions.S.LONG,false),69,51,95,1461002)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [147,158,92,8,79,169,170,187,161,155,54,251,19,222,95,177,168,200,171,176,21,18,190,84,200,222,38,184,176,230,70,182],\"legalEntityIdCounterparty\": [109,31,53,47,29,122,193,207,196,42,128,129,146,246,163,99,19,3,68,79,23,199,3,231,245,136,113,155,17,45,86,178],\"dayCountConvention\": 0,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 21,\"statusDate\": 2014223714,\"initialExchangeDate\": 1337,\"maturityDate\": 32076,\"terminationDate\": 11,\"purchaseDate\": 10000,\"capitalizationEndDate\": 61,\"cycleAnchorDateOfInterestPayment\": 12,\"cycleAnchorDateOfRateReset\": 59,\"cycleAnchorDateOfScalingIndex\": 2448,\"cycleAnchorDateOfFee\": 161,\"notionalPrincipal\": 29,\"nominalInterestRate\": 146096,\"feeAccrued\": 59,\"accruedInterest\": 14,\"rateMultiplier\": 110,\"rateSpread\": 89,\"feeRate\": 26,\"nextResetRate\": 146097,\"penaltyRate\": 49,\"premiumDiscountAtIED\": 1337,\"priceAtPurchaseDate\": 63,\"cycleOfInterestPayment\": {\"i\": 1336,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1460,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 24,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1532892062,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 1460,\"lifeFloor\": 1,\"periodCap\": 59,\"periodFloor\": 146096}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"147,158,92,8,79,169,170,187,161,155,54,251,19,222,95,177,168,200,171,176,21,18,190,84,200,222,38,184,176,230,70,182\"),stringToBytes32(\"109,31,53,47,29,122,193,207,196,42,128,129,146,246,163,99,19,3,68,79,23,199,3,231,245,136,113,155,17,45,86,178\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,21,2014223714,1337,32076,11,10000,61,12,59,2448,161,29,146096,59,14,110,89,26,146097,49,1337,63,Definitions.IPS(1336,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(1460,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(24,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(1532892062,Definitions.P.H,Definitions.S.SHORT,false),1460,1,59,146096)"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [185,91,82,30,213,22,28,226,184,115,133,41,8,193,17,111,116,94,76,230,172,28,149,200,7,119,128,207,228,200,93,83],\"legalEntityIdCounterparty\": [114,252,21,109,183,227,48,38,197,235,94,6,51,173,244,57,239,79,155,147,9,73,187,125,72,38,136,67,5,124,200,136],\"dayCountConvention\": 2,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 49,\"statusDate\": 3,\"initialExchangeDate\": 2440589,\"maturityDate\": 8,\"terminationDate\": 61,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 28,\"cycleAnchorDateOfRateReset\": 130,\"cycleAnchorDateOfScalingIndex\": 4000,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 1462,\"nominalInterestRate\": 0,\"feeAccrued\": 4000,\"accruedInterest\": 400,\"rateMultiplier\": 1460,\"rateSpread\": 6,\"feeRate\": 254,\"nextResetRate\": 2440589,\"penaltyRate\": 97,\"premiumDiscountAtIED\": 146098,\"priceAtPurchaseDate\": 146097,\"cycleOfInterestPayment\": {\"i\": 61,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 14,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1460,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 28,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 1461000,\"lifeFloor\": 89,\"periodCap\": 101,\"periodFloor\": 1970}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"185,91,82,30,213,22,28,226,184,115,133,41,8,193,17,111,116,94,76,230,172,28,149,200,7,119,128,207,228,200,93,83\"),stringToBytes32(\"114,252,21,109,183,227,48,38,197,235,94,6,51,173,244,57,239,79,155,147,9,73,187,125,72,38,136,67,5,124,200,136\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.A,49,3,2440589,8,61,0,0,28,130,4000,0,1462,0,4000,400,1460,6,254,2440589,97,146098,146097,Definitions.IPS(61,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(14,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(1460,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(28,Definitions.P.D,Definitions.S.LONG,false),1461000,89,101,1970)"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [180,235,146,245,165,103,147,30,39,138,193,221,115,25,199,232,129,244,109,17,78,71,239,156,27,30,145,148,53,178,18,118],\"legalEntityIdCounterparty\": [180,212,67,161,181,167,50,76,142,145,42,49,200,206,40,249,155,235,188,100,109,218,219,41,60,123,61,101,14,20,240,74],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 368,\"statusDate\": 1461000,\"initialExchangeDate\": 361,\"maturityDate\": 32,\"terminationDate\": 399,\"purchaseDate\": 32076,\"capitalizationEndDate\": 4799,\"cycleAnchorDateOfInterestPayment\": 18,\"cycleAnchorDateOfRateReset\": 1462,\"cycleAnchorDateOfScalingIndex\": 161,\"cycleAnchorDateOfFee\": 61,\"notionalPrincipal\": 141,\"nominalInterestRate\": 141,\"feeAccrued\": 63,\"accruedInterest\": 39,\"rateMultiplier\": 365,\"rateSpread\": 26,\"feeRate\": 951,\"nextResetRate\": 146096,\"penaltyRate\": 20,\"premiumDiscountAtIED\": 1460,\"priceAtPurchaseDate\": 110,\"cycleOfInterestPayment\": {\"i\": 32,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 90,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1461002,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2014223716,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 949,\"lifeFloor\": 11,\"periodCap\": 3,\"periodFloor\": 10}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"180,235,146,245,165,103,147,30,39,138,193,221,115,25,199,232,129,244,109,17,78,71,239,156,27,30,145,148,53,178,18,118\"),stringToBytes32(\"180,212,67,161,181,167,50,76,142,145,42,49,200,206,40,249,155,235,188,100,109,218,219,41,60,123,61,101,14,20,240,74\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,368,1461000,361,32,399,32076,4799,18,1462,161,61,141,141,63,39,365,26,951,146096,20,1460,110,Definitions.IPS(32,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(90,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(1461002,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(2014223716,Definitions.P.M,Definitions.S.SHORT,false),949,11,3,10)"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [119,83,209,43,251,184,32,239,52,48,216,114,60,222,154,118,35,61,103,229,107,228,73,120,126,241,31,3,0,238,207,118],\"legalEntityIdCounterparty\": [38,229,101,195,23,189,184,189,193,189,75,9,23,17,4,110,174,141,253,240,10,141,43,91,45,15,35,71,177,118,97,45],\"dayCountConvention\": 1,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 26,\"statusDate\": 63,\"initialExchangeDate\": 79,\"maturityDate\": 31,\"terminationDate\": 4801,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 131,\"cycleAnchorDateOfRateReset\": 1532892063,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 9999,\"notionalPrincipal\": 131,\"nominalInterestRate\": 0,\"feeAccrued\": 361,\"accruedInterest\": 14,\"rateMultiplier\": 900,\"rateSpread\": 161,\"feeRate\": 96,\"nextResetRate\": 89,\"penaltyRate\": 96,\"premiumDiscountAtIED\": 101,\"priceAtPurchaseDate\": 4001,\"cycleOfInterestPayment\": {\"i\": 71,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2447,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 86401,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 61,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 364,\"lifeFloor\": 9999,\"periodCap\": 146098,\"periodFloor\": 2014223714}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"119,83,209,43,251,184,32,239,52,48,216,114,60,222,154,118,35,61,103,229,107,228,73,120,126,241,31,3,0,238,207,118\"),stringToBytes32(\"38,229,101,195,23,189,184,189,193,189,75,9,23,17,4,110,174,141,253,240,10,141,43,91,45,15,35,71,177,118,97,45\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,26,63,79,31,4801,0,0,131,1532892063,0,9999,131,0,361,14,900,161,96,89,96,101,4001,Definitions.IPS(71,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(2447,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(86401,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(61,Definitions.P.Q,Definitions.S.LONG,true),364,9999,146098,2014223714)"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [31,136,82,62,189,46,43,175,171,13,62,145,251,146,167,139,163,2,247,71,24,108,147,109,67,105,233,142,47,251,138,157],\"legalEntityIdCounterparty\": [44,176,145,71,224,69,42,116,80,138,14,51,157,102,16,38,226,96,155,93,144,90,89,233,53,240,154,66,173,139,109,80],\"dayCountConvention\": 2,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 63,\"statusDate\": 9,\"initialExchangeDate\": 8,\"maturityDate\": 26,\"terminationDate\": 131,\"purchaseDate\": 1461,\"capitalizationEndDate\": 61,\"cycleAnchorDateOfInterestPayment\": 1336,\"cycleAnchorDateOfRateReset\": 17,\"cycleAnchorDateOfScalingIndex\": 10001,\"cycleAnchorDateOfFee\": 32076,\"notionalPrincipal\": 360,\"nominalInterestRate\": 1337,\"feeAccrued\": 16,\"accruedInterest\": 2014223714,\"rateMultiplier\": 81,\"rateSpread\": 31,\"feeRate\": 110,\"nextResetRate\": 3,\"penaltyRate\": 61,\"premiumDiscountAtIED\": 4801,\"priceAtPurchaseDate\": 9,\"cycleOfInterestPayment\": {\"i\": 2446,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 359,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 146096,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 69,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 255,\"lifeFloor\": 130,\"periodCap\": 91,\"periodFloor\": 9}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"31,136,82,62,189,46,43,175,171,13,62,145,251,146,167,139,163,2,247,71,24,108,147,109,67,105,233,142,47,251,138,157\"),stringToBytes32(\"44,176,145,71,224,69,42,116,80,138,14,51,157,102,16,38,226,96,155,93,144,90,89,233,53,240,154,66,173,139,109,80\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,63,9,8,26,131,1461,61,1336,17,10001,32076,360,1337,16,2014223714,81,31,110,3,61,4801,9,Definitions.IPS(2446,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(359,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(146096,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(69,Definitions.P.D,Definitions.S.LONG,true),255,130,91,9)"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [245,119,223,85,117,152,126,108,72,41,8,254,147,224,251,226,253,254,114,172,47,36,113,156,26,254,89,46,58,101,180,1],\"legalEntityIdCounterparty\": [158,91,241,244,55,183,50,61,237,61,181,195,71,209,101,136,201,254,218,81,199,119,177,222,127,16,229,136,140,146,12,2],\"dayCountConvention\": 5,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 1338,\"statusDate\": 1,\"initialExchangeDate\": 68569,\"maturityDate\": 2440588,\"terminationDate\": 2440589,\"purchaseDate\": 86399,\"capitalizationEndDate\": 89,\"cycleAnchorDateOfInterestPayment\": 1462,\"cycleAnchorDateOfRateReset\": 86401,\"cycleAnchorDateOfScalingIndex\": 366,\"cycleAnchorDateOfFee\": 40,\"notionalPrincipal\": 17,\"nominalInterestRate\": 16,\"feeAccrued\": 366,\"accruedInterest\": 1,\"rateMultiplier\": 1,\"rateSpread\": 15,\"feeRate\": 66,\"nextResetRate\": 6,\"penaltyRate\": 69,\"premiumDiscountAtIED\": 79,\"priceAtPurchaseDate\": 1532892064,\"cycleOfInterestPayment\": {\"i\": 949,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 10000,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 150,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 25,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 101,\"lifeFloor\": 101,\"periodCap\": 121,\"periodFloor\": 1460}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"245,119,223,85,117,152,126,108,72,41,8,254,147,224,251,226,253,254,114,172,47,36,113,156,26,254,89,46,58,101,180,1\"),stringToBytes32(\"158,91,241,244,55,183,50,61,237,61,181,195,71,209,101,136,201,254,218,81,199,119,177,222,127,16,229,136,140,146,12,2\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,1338,1,68569,2440588,2440589,86399,89,1462,86401,366,40,17,16,366,1,1,15,66,6,69,79,1532892064,Definitions.IPS(949,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(10000,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(150,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(25,Definitions.P.M,Definitions.S.LONG,true),101,101,121,1460)"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [85,241,201,38,207,35,233,24,26,231,70,177,29,124,255,43,4,146,71,187,254,189,235,77,160,86,216,249,142,150,80,104],\"legalEntityIdCounterparty\": [210,148,73,77,210,66,239,24,236,156,78,17,120,149,165,59,32,110,240,139,230,7,35,30,89,84,47,182,103,93,70,241],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 365,\"statusDate\": 151,\"initialExchangeDate\": 2448,\"maturityDate\": 111,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 5,\"cycleAnchorDateOfRateReset\": 2446,\"cycleAnchorDateOfScalingIndex\": 256,\"cycleAnchorDateOfFee\": 13,\"notionalPrincipal\": 59,\"nominalInterestRate\": 0,\"feeAccrued\": 68568,\"accruedInterest\": 130,\"rateMultiplier\": 59,\"rateSpread\": 1460,\"feeRate\": 10001,\"nextResetRate\": 1461000,\"penaltyRate\": 1462,\"premiumDiscountAtIED\": 68568,\"priceAtPurchaseDate\": 100,\"cycleOfInterestPayment\": {\"i\": 110,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 32,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 10001,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2447,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 119,\"lifeFloor\": 15,\"periodCap\": 64,\"periodFloor\": 40}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"85,241,201,38,207,35,233,24,26,231,70,177,29,124,255,43,4,146,71,187,254,189,235,77,160,86,216,249,142,150,80,104\"),stringToBytes32(\"210,148,73,77,210,66,239,24,236,156,78,17,120,149,165,59,32,110,240,139,230,7,35,30,89,84,47,182,103,93,70,241\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.A,365,151,2448,111,0,0,0,5,2446,256,13,59,0,68568,130,59,1460,10001,1461000,1462,68568,100,Definitions.IPS(110,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(32,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(10001,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(2447,Definitions.P.M,Definitions.S.SHORT,true),119,15,64,40)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [35,83,201,247,83,15,38,103,177,93,54,196,68,6,56,76,128,242,27,176,27,251,144,226,122,73,73,181,182,133,81,187],\"legalEntityIdCounterparty\": [55,56,10,8,116,116,122,104,187,136,92,95,194,126,112,34,235,200,106,161,137,150,201,126,247,173,15,48,123,115,41,178],\"dayCountConvention\": 2,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 360,\"statusDate\": 368,\"initialExchangeDate\": 1461001,\"maturityDate\": 79,\"terminationDate\": 14,\"purchaseDate\": 2014223716,\"capitalizationEndDate\": 64,\"cycleAnchorDateOfInterestPayment\": 1460,\"cycleAnchorDateOfRateReset\": 149,\"cycleAnchorDateOfScalingIndex\": 15,\"cycleAnchorDateOfFee\": 86399,\"notionalPrincipal\": 68568,\"nominalInterestRate\": 39,\"feeAccrued\": 27,\"accruedInterest\": 19,\"rateMultiplier\": 361,\"rateSpread\": 109,\"feeRate\": 368,\"nextResetRate\": 141,\"penaltyRate\": 146098,\"premiumDiscountAtIED\": 63,\"priceAtPurchaseDate\": 1461,\"cycleOfInterestPayment\": {\"i\": 1461000,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 32076,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 4799,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 1461002,\"lifeFloor\": 71,\"periodCap\": 48,\"periodFloor\": 900}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"35,83,201,247,83,15,38,103,177,93,54,196,68,6,56,76,128,242,27,176,27,251,144,226,122,73,73,181,182,133,81,187\"),stringToBytes32(\"55,56,10,8,116,116,122,104,187,136,92,95,194,126,112,34,235,200,106,161,137,150,201,126,247,173,15,48,123,115,41,178\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.A,360,368,1461001,79,14,2014223716,64,1460,149,15,86399,68568,39,27,19,361,109,368,141,146098,63,1461,Definitions.IPS(1461000,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(1,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(32076,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(4799,Definitions.P.W,Definitions.S.SHORT,false),1461002,71,48,900)"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [161,29,35,62,121,67,114,247,115,106,168,141,33,181,232,130,145,125,94,13,24,30,169,65,183,34,47,228,52,248,216,227],\"legalEntityIdCounterparty\": [150,132,22,232,225,160,226,73,125,66,193,128,165,138,247,8,67,178,113,71,92,146,194,214,130,98,68,125,26,157,151,109],\"dayCountConvention\": 4,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 949,\"statusDate\": 16,\"initialExchangeDate\": 119,\"maturityDate\": 119,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 151,\"cycleAnchorDateOfRateReset\": 14,\"cycleAnchorDateOfScalingIndex\": 1461002,\"cycleAnchorDateOfFee\": 146096,\"notionalPrincipal\": 4,\"nominalInterestRate\": 0,\"feeAccrued\": 1969,\"accruedInterest\": 139,\"rateMultiplier\": 901,\"rateSpread\": 360,\"feeRate\": 95,\"nextResetRate\": 146098,\"penaltyRate\": 4799,\"premiumDiscountAtIED\": 2014223716,\"priceAtPurchaseDate\": 3999,\"cycleOfInterestPayment\": {\"i\": 97,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 110,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 360,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1338,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 27,\"lifeFloor\": 159,\"periodCap\": 1336,\"periodFloor\": 96}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"161,29,35,62,121,67,114,247,115,106,168,141,33,181,232,130,145,125,94,13,24,30,169,65,183,34,47,228,52,248,216,227\"),stringToBytes32(\"150,132,22,232,225,160,226,73,125,66,193,128,165,138,247,8,67,178,113,71,92,146,194,214,130,98,68,125,26,157,151,109\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,949,16,119,119,0,0,0,151,14,1461002,146096,4,0,1969,139,901,360,95,146098,4799,2014223716,3999,Definitions.IPS(97,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(110,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(360,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(1338,Definitions.P.Y,Definitions.S.SHORT,true),27,159,1336,96)"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.967ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T16:07:56.991ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}