,{
  "2020-11-13T03:05:13.021ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "41",
                "sol": "41"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:05:13.023ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.023ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.024ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.024ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.024ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.025ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "year < 1970"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN year<1970",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.028ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "hour >= 24",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour>=24,FunctionCall==true",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.030ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.031ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.032ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.033ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.033ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.034ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.038ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.039ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.039ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.040ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.041ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.041ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.041ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.042ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.042ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.043ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.043ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.044ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.044ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.045ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.045ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.045ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.046ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.046ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.047ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.047ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1971,
                "sol": 1971
              },
              {
                "js": "1970",
                "sol": "1970"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:05:13.048ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1461003,
                "sol": 1461003
              },
              {
                "js": "1461002",
                "sol": "1461002"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:05:13.050ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 902,
                "sol": 902
              },
              {
                "js": "901",
                "sol": "901"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:05:13.051ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 86400,
                "sol": 86400
              },
              {
                "js": "86399",
                "sol": "86399"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:05:13.051ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 360,
                "sol": 360
              },
              {
                "js": "359",
                "sol": "359"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:05:13.052ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4900,
                "sol": 4900
              },
              {
                "js": "4899",
                "sol": "4899"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:05:13.055ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.056ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "7",
                "sol": "7"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:05:13.059ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractRole.ST"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.ContractRole.PFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.064ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "364",
                "sol": "364"
              },
              {
                "js": 363,
                "sol": 363
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "4001",
                "sol": "4001"
              },
              {
                "js": 4000,
                "sol": 4000
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "89",
                "sol": "89"
              },
              {
                "js": 88,
                "sol": 88
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": 256,
                "sol": 256
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": 6,
              "sol": "Definitions.DayCountConvention.BUS_252"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "70",
                "sol": "70"
              },
              {
                "js": 69,
                "sol": 69
              },
              {
                "js": 6,
                "sol": "Definitions.DayCountConvention.BUS_252"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:05:13.069ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.070ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.070ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.070ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.072ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{\"i\": 91,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(91,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{\"i\": 27,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(27,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{\"i\": 15,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(15,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{\"i\": 1338,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1338,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.076ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.076ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.077ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractStatus.DL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.081ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.084ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.088ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.089ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.093ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 16,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(16,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 21,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(21,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 160,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(160,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 129,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(129,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 2440589,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2440589,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 256,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(256,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 14,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.098ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{\"i\": 51,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(51,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{\"i\": 14,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(14,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{\"i\": 901,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(901,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{\"i\": 91,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(91,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{\"i\": 2447,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2447,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{\"i\": 80,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(80,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{\"i\": 2446,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2446,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{\"i\": 400,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(400,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{\"i\": 64,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(64,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.107ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 400,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(400,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 3,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(3,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 10,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(10,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 27,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(27,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 48,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(48,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 2448,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2448,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 149,\"p\": 99999,\"s\": 1,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.110ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 359,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 4800,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 5},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 89,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 19},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 257,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 18},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 257,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 4},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 68570,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 4},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 3,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 1,\"eventType\": 5,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 20},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 9999,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 8},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 2014223714,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 26,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 15},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 29,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 12},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 101,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 14},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 81,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 16},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 97,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 17,\"stfType\": 0},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 951,\"eventType\": 1,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 20},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 2448,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 19},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 70,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 20},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 15,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 12},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 39,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 3},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 63,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 14},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 11,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 5},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 129,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 13},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 31,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 9},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 30,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 12},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 2440587,\"eventType\": 4,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 3},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 4000,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 25,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 18},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 13,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 19},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 41,\"eventType\": 12,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 4},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 2,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 9},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 4801,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 15},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 32,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 5},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 86400,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 5},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 63,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 18},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 68568,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 18},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 4,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 364,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 12},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 159,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 19},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 10,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 15},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 26,\"eventType\": 8,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 7},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 368,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 15},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 16,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 11,\"stfType\": 5},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 48,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 14},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 86399,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 2014223714,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 19},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 101,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 3},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 367,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 12,\"stfType\": 11},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 4000,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 15},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 139,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 6,\"stfType\": 14},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 149,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 3},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 51,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 18},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 141,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 14},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 1338,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 2},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 16,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 10},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 2447,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 17,\"stfType\": 10},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 360,\"eventType\": 6,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 17},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 1969,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 1,\"stfType\": 17},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 86399,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 16},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 2447,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 8},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 2,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 16},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 30,\"eventType\": 4,\"currency\": accounts[4],\"pofType\": 14,\"stfType\": 1},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 2014223714,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 5},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 150,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 11}]",
              "sol": "[Definitions.ProtoEvent(4,68569,359,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(141,146096,4800,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PR),Definitions.ProtoEvent(129,79,89,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.STD),Definitions.ProtoEvent(110,359,257,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IPCB),Definitions.ProtoEvent(0,146098,257,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IP),Definitions.ProtoEvent(15,150,68570,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IP),Definitions.ProtoEvent(16,1970,3,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(360,19,1,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.Child),Definitions.ProtoEvent(18,146097,9999,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.FP),Definitions.ProtoEvent(254,899,2014223714,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(69,26,26,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.CD),Definitions.ProtoEvent(89,2014223715,29,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RR),Definitions.ProtoEvent(361,149,101,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SC),Definitions.ProtoEvent(2014223714,95,81,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.DV),Definitions.ProtoEvent(1532892062,146097,97,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SD),Definitions.ProtoEvent(257,4,951,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.Child),Definitions.ProtoEvent(951,160,2448,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.STD),Definitions.ProtoEvent(399,26,70,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.Child),Definitions.ProtoEvent(399,1461001,15,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RR),Definitions.ProtoEvent(4801,21,39,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IED),Definitions.ProtoEvent(1532892062,139,63,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SC),Definitions.ProtoEvent(96,68569,11,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PR),Definitions.ProtoEvent(2014223714,366,129,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RRY),Definitions.ProtoEvent(368,1,31,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PRD),Definitions.ProtoEvent(146096,95,30,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RR),Definitions.ProtoEvent(19,3999,2440587,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IED),Definitions.ProtoEvent(32074,32,4000,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(1460,1970,25,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCB),Definitions.ProtoEvent(101,29,13,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.STD),Definitions.ProtoEvent(119,2,41,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IP),Definitions.ProtoEvent(901,101,2,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PRD),Definitions.ProtoEvent(5,65,4801,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.CD),Definitions.ProtoEvent(360,4001,32,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PR),Definitions.ProtoEvent(131,899,86400,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PR),Definitions.ProtoEvent(257,1532892064,63,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCB),Definitions.ProtoEvent(256,32074,68568,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCB),Definitions.ProtoEvent(119,10000,4,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(68569,70,364,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RR),Definitions.ProtoEvent(365,61,159,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.STD),Definitions.ProtoEvent(150,32076,10,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.CD),Definitions.ProtoEvent(4,97,26,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PY),Definitions.ProtoEvent(110,365,368,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.CD),Definitions.ProtoEvent(66,4801,16,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PR),Definitions.ProtoEvent(31,400,48,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SC),Definitions.ProtoEvent(1336,2014223714,86399,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(10001,10001,2014223714,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.STD),Definitions.ProtoEvent(2447,66,101,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IED),Definitions.ProtoEvent(70,2440587,367,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCI),Definitions.ProtoEvent(1,399,4000,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.CD),Definitions.ProtoEvent(256,90,139,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SC),Definitions.ProtoEvent(4001,12,149,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IED),Definitions.ProtoEvent(32,2440587,51,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCB),Definitions.ProtoEvent(130,79,141,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SC),Definitions.ProtoEvent(2448,48,1338,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.AD),Definitions.ProtoEvent(2440589,96,16,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.TD),Definitions.ProtoEvent(140,81,2447,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.TD),Definitions.ProtoEvent(399,24,360,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MR),Definitions.ProtoEvent(110,69,1969,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MR),Definitions.ProtoEvent(119,13,86399,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.DV),Definitions.ProtoEvent(131,161,2447,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.FP),Definitions.ProtoEvent(25,950,2,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.DV),Definitions.ProtoEvent(26,901,30,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MD),Definitions.ProtoEvent(121,146096,2014223714,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PR),Definitions.ProtoEvent(949,86400,150,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCI)]"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.122ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 2446,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 7},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 2440588,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 7},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 360,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 2},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 949,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 14},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 4900,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 17},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 2447,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 7,\"stfType\": 12},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 120,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 15},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 364,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 19},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 25,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 8},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 89,\"eventType\": 4,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 15},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 27,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 19},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 1461,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 4},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 110,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 16},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 69,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 12},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 120,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 2},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 81,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 7},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 91,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 17,\"stfType\": 0},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 161,\"eventType\": 18,\"currency\": accounts[8],\"pofType\": 15,\"stfType\": 20},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 359,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 14},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 368,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 4},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 32074,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 4},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 69,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 4},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 1336,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 7},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 69,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 17},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 50,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 8},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 146096,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 14},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 1970,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 15,\"stfType\": 16},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 12,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 2,\"stfType\": 19},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 68568,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 139,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 8},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 68568,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 1},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 1532892064,\"eventType\": 1,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 11},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 23,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 20},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 81,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 1},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 1,\"eventType\": 5,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 19},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 141,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 10},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 10000,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 20},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 360,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 11},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 16,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 140,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 1},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 950,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 18},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 257,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 7},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 2448,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 2},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 951,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 2440587,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 1,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 12},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 1337,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 7},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 68568,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 2},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 1969,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 11},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 1970,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 4},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 146098,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 19},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 951,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 1},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 257,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 9},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 71,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 10},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 2,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 8},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 1461002,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 0},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 1338,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 10},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 40,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 11},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 257,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 0},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 110,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 5},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 15,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 7},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 111,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 51,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 2},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 366,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 7}]",
              "sol": "[Definitions.ProtoEvent(5,63,2446,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PY),Definitions.ProtoEvent(50,32075,2440588,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PY),Definitions.ProtoEvent(100,51,360,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.AD),Definitions.ProtoEvent(359,95,949,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SC),Definitions.ProtoEvent(2014223715,21,4900,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MR),Definitions.ProtoEvent(899,10,2447,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.RR),Definitions.ProtoEvent(4001,150,120,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.CD),Definitions.ProtoEvent(1460,60,364,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.STD),Definitions.ProtoEvent(950,160,25,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.FP),Definitions.ProtoEvent(399,10001,89,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.CD),Definitions.ProtoEvent(4900,256,27,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.STD),Definitions.ProtoEvent(68570,951,1461,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IP),Definitions.ProtoEvent(4800,4901,110,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.DV),Definitions.ProtoEvent(1460,360,69,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.RR),Definitions.ProtoEvent(28,70,120,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.AD),Definitions.ProtoEvent(1462,1462,81,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PY),Definitions.ProtoEvent(1532892062,131,91,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SD),Definitions.ProtoEvent(6,1971,161,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.Child),Definitions.ProtoEvent(1,27,359,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SC),Definitions.ProtoEvent(109,28,368,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IP),Definitions.ProtoEvent(139,90,32074,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IP),Definitions.ProtoEvent(4001,950,69,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IP),Definitions.ProtoEvent(2440588,361,1336,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PY),Definitions.ProtoEvent(4800,1532892062,69,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MR),Definitions.ProtoEvent(26,950,50,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.FP),Definitions.ProtoEvent(1,10,146096,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SC),Definitions.ProtoEvent(29,81,1970,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.DV),Definitions.ProtoEvent(111,61,12,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.STD),Definitions.ProtoEvent(949,2440587,68568,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(26,949,139,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.FP),Definitions.ProtoEvent(254,28,68568,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MD),Definitions.ProtoEvent(1532892063,89,1532892064,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI),Definitions.ProtoEvent(19,11,23,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.Child),Definitions.ProtoEvent(256,100,81,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MD),Definitions.ProtoEvent(25,120,1,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.STD),Definitions.ProtoEvent(15,7,141,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.TD),Definitions.ProtoEvent(151,32076,10000,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.Child),Definitions.ProtoEvent(48,1461002,360,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCI),Definitions.ProtoEvent(254,1532892064,16,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(257,899,140,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MD),Definitions.ProtoEvent(367,400,950,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCB),Definitions.ProtoEvent(3999,90,257,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PY),Definitions.ProtoEvent(2446,900,2448,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.AD),Definitions.ProtoEvent(64,81,951,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(68568,9999,2440587,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(900,32,1,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RR),Definitions.ProtoEvent(129,131,1337,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PY),Definitions.ProtoEvent(68570,2014223714,68568,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.AD),Definitions.ProtoEvent(2014223715,80,1969,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IPCI),Definitions.ProtoEvent(366,2447,1970,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IP),Definitions.ProtoEvent(4899,120,146098,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.STD),Definitions.ProtoEvent(28,1338,951,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.MD),Definitions.ProtoEvent(139,64,257,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PRD),Definitions.ProtoEvent(23,140,71,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.TD),Definitions.ProtoEvent(31,2440588,2,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.FP),Definitions.ProtoEvent(21,2446,1461002,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.SD),Definitions.ProtoEvent(32076,39,1338,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.TD),Definitions.ProtoEvent(110,1337,40,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCI),Definitions.ProtoEvent(5,59,257,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SD),Definitions.ProtoEvent(59,91,110,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PR),Definitions.ProtoEvent(32074,1460,15,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PY),Definitions.ProtoEvent(15,1971,111,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(119,32076,51,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.AD),Definitions.ProtoEvent(949,70,366,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PY)]"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.143ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.145ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [76,24,236,125,232,102,69,146,252,48,250,27,88,145,212,207,250,148,176,164,239,189,21,50,130,155,212,228,122,108,156,142],\"legalEntityIdCounterparty\": [158,219,63,96,71,223,7,0,76,189,16,38,53,174,116,199,105,194,206,244,174,8,89,242,202,236,72,129,174,197,152,156],\"dayCountConvention\": 3,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 951,\"statusDate\": 949,\"initialExchangeDate\": 1336,\"maturityDate\": 161,\"terminationDate\": 11,\"purchaseDate\": 7,\"capitalizationEndDate\": 28,\"cycleAnchorDateOfInterestPayment\": 110,\"cycleAnchorDateOfRateReset\": 146097,\"cycleAnchorDateOfScalingIndex\": 131,\"cycleAnchorDateOfFee\": 71,\"notionalPrincipal\": 1461000,\"nominalInterestRate\": -1,\"feeAccrued\": 41,\"accruedInterest\": -1,\"rateMultiplier\": 160,\"rateSpread\": 69,\"feeRate\": 120,\"nextResetRate\": 119,\"penaltyRate\": 360,\"premiumDiscountAtIED\": 9,\"priceAtPurchaseDate\": 27,\"cycleOfInterestPayment\": {\"i\": 1,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 7,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1461000,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 68569,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 32076,\"lifeFloor\": 141,\"periodCap\": 4801,\"periodFloor\": 1532892062}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"76,24,236,125,232,102,69,146,252,48,250,27,88,145,212,207,250,148,176,164,239,189,21,50,130,155,212,228,122,108,156,142\"),stringToBytes32(\"158,219,63,96,71,223,7,0,76,189,16,38,53,174,116,199,105,194,206,244,174,8,89,242,202,236,72,129,174,197,152,156\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,951,949,1336,161,11,7,28,110,146097,131,71,1461000,-1,41,-1,160,69,120,119,360,9,27,Definitions.IPS(1,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(7,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1461000,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(68569,Definitions.P.H,Definitions.S.LONG,false),32076,141,4801,1532892062)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.148ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [208,157,107,55,38,199,16,151,242,106,9,4,215,88,160,224,183,44,158,138,43,221,129,134,35,249,230,119,230,163,73,185],\"legalEntityIdCounterparty\": [252,86,37,168,18,78,218,166,65,111,142,236,113,141,167,118,223,187,29,61,124,255,49,8,141,39,251,73,4,83,91,34],\"dayCountConvention\": 2,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 91,\"statusDate\": 18,\"initialExchangeDate\": 16,\"maturityDate\": 1461001,\"terminationDate\": 110,\"purchaseDate\": 151,\"capitalizationEndDate\": 7,\"cycleAnchorDateOfInterestPayment\": 86399,\"cycleAnchorDateOfRateReset\": 359,\"cycleAnchorDateOfScalingIndex\": 69,\"cycleAnchorDateOfFee\": 32074,\"notionalPrincipal\": 17,\"nominalInterestRate\": 10001,\"feeAccrued\": 2014223715,\"accruedInterest\": 360,\"rateMultiplier\": 100,\"rateSpread\": 1337,\"feeRate\": 10000,\"nextResetRate\": 59,\"penaltyRate\": 950,\"premiumDiscountAtIED\": 1461000,\"priceAtPurchaseDate\": 97,\"cycleOfInterestPayment\": {\"i\": 2014223716,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 899,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 131,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 86401,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 80,\"lifeFloor\": 60,\"periodCap\": 95,\"periodFloor\": 95}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"208,157,107,55,38,199,16,151,242,106,9,4,215,88,160,224,183,44,158,138,43,221,129,134,35,249,230,119,230,163,73,185\"),stringToBytes32(\"252,86,37,168,18,78,218,166,65,111,142,236,113,141,167,118,223,187,29,61,124,255,49,8,141,39,251,73,4,83,91,34\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,91,18,16,1461001,110,151,7,86399,359,69,32074,17,10001,2014223715,360,100,1337,10000,59,950,1461000,97,Definitions.IPS(2014223716,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(899,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(131,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(86401,Definitions.P.M,Definitions.S.SHORT,true),80,60,95,95)"
            },
            {
              "js": "{\"lastEventTime\": 2446,\"contractStatus\": 1,\"timeFromLastEvent\": 32,\"nominalValue\": 2440587,\"nominalAccrued\": 3999,\"feeAccrued\": 360,\"nominalRate\": 11,\"interestScalingMultiplier\": 86399,\"nominalScalingMultiplier\": 86399,\"contractRoleSign\": 6}",
              "sol": "Definitions.ContractState(2446,Definitions.ContractStatus.DL,32,2440587,3999,360,11,86399,86399,Definitions.ContractRole.BUY)"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.151ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [116,9,67,66,10,88,147,30,125,164,116,68,13,48,186,104,49,57,129,217,227,161,44,120,106,192,226,10,69,242,125,135],\"legalEntityIdCounterparty\": [183,133,160,102,67,239,95,160,154,129,82,194,62,24,50,2,18,29,106,252,67,221,211,73,122,108,136,41,153,161,240,116],\"dayCountConvention\": 4,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 131,\"statusDate\": 12,\"initialExchangeDate\": 69,\"maturityDate\": 4001,\"terminationDate\": 146097,\"purchaseDate\": 30,\"capitalizationEndDate\": 68568,\"cycleAnchorDateOfInterestPayment\": 16,\"cycleAnchorDateOfRateReset\": 1336,\"cycleAnchorDateOfScalingIndex\": 400,\"cycleAnchorDateOfFee\": 65,\"notionalPrincipal\": 100,\"nominalInterestRate\": 4899,\"feeAccrued\": 32076,\"accruedInterest\": 90,\"rateMultiplier\": 89,\"rateSpread\": 109,\"feeRate\": 69,\"nextResetRate\": 60,\"penaltyRate\": 13,\"premiumDiscountAtIED\": 146097,\"priceAtPurchaseDate\": 361,\"cycleOfInterestPayment\": {\"i\": 951,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 17,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1970,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 48,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 86399,\"lifeFloor\": 69,\"periodCap\": 50,\"periodFloor\": 12}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"116,9,67,66,10,88,147,30,125,164,116,68,13,48,186,104,49,57,129,217,227,161,44,120,106,192,226,10,69,242,125,135\"),stringToBytes32(\"183,133,160,102,67,239,95,160,154,129,82,194,62,24,50,2,18,29,106,252,67,221,211,73,122,108,136,41,153,161,240,116\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,131,12,69,4001,146097,30,68568,16,1336,400,65,100,4899,32076,90,89,109,69,60,13,146097,361,Definitions.IPS(951,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(17,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(1970,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(48,Definitions.P.M,Definitions.S.SHORT,true),86399,69,50,12)"
            },
            {
              "js": "{\"lastEventTime\": 20,\"contractStatus\": 3,\"timeFromLastEvent\": 4000,\"nominalValue\": 131,\"nominalAccrued\": 1461,\"feeAccrued\": 11,\"nominalRate\": 95,\"interestScalingMultiplier\": 4801,\"nominalScalingMultiplier\": 146096,\"contractRoleSign\": 8}",
              "sol": "Definitions.ContractState(20,Definitions.ContractStatus.DF,4000,131,1461,11,95,4801,146096,Definitions.ContractRole.GUA)"
            },
            {
              "js": "{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 146096,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 1}",
              "sol": "Definitions.ProtoEvent(1460,1460,146096,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MD)"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.157ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [178,18,117,43,249,149,34,222,194,96,252,118,133,12,173,142,182,44,19,171,91,8,122,204,38,185,38,101,89,58,37,213],\"legalEntityIdCounterparty\": [0,25,95,69,69,215,94,231,22,169,128,241,10,187,236,239,226,2,68,96,242,22,21,219,163,234,203,48,158,95,157,135],\"dayCountConvention\": 1,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 28,\"statusDate\": 950,\"initialExchangeDate\": 68569,\"maturityDate\": 1970,\"terminationDate\": 367,\"purchaseDate\": 19,\"capitalizationEndDate\": 1,\"cycleAnchorDateOfInterestPayment\": 16,\"cycleAnchorDateOfRateReset\": 6,\"cycleAnchorDateOfScalingIndex\": 69,\"cycleAnchorDateOfFee\": 1462,\"notionalPrincipal\": 21,\"nominalInterestRate\": 2448,\"feeAccrued\": 149,\"accruedInterest\": 1971,\"rateMultiplier\": 9999,\"rateSpread\": 2014223714,\"feeRate\": 109,\"nextResetRate\": 96,\"penaltyRate\": 91,\"premiumDiscountAtIED\": 86401,\"priceAtPurchaseDate\": 32076,\"cycleOfInterestPayment\": {\"i\": 1461002,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 29,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 79,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 401,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 949,\"lifeFloor\": 2440587,\"periodCap\": 161,\"periodFloor\": 86401}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"178,18,117,43,249,149,34,222,194,96,252,118,133,12,173,142,182,44,19,171,91,8,122,204,38,185,38,101,89,58,37,213\"),stringToBytes32(\"0,25,95,69,69,215,94,231,22,169,128,241,10,187,236,239,226,2,68,96,242,22,21,219,163,234,203,48,158,95,157,135\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,28,950,68569,1970,367,19,1,16,6,69,1462,21,2448,149,1971,9999,2014223714,109,96,91,86401,32076,Definitions.IPS(1461002,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(29,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(79,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(401,Definitions.P.Y,Definitions.S.LONG,true),949,2440587,161,86401)"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [240,49,51,234,197,81,189,62,74,242,32,133,180,57,212,100,13,70,32,105,52,205,132,189,216,165,152,191,236,30,228,143],\"legalEntityIdCounterparty\": [251,219,57,17,27,25,73,223,1,94,57,143,21,208,24,55,167,214,25,135,206,234,249,20,144,4,97,204,79,166,21,34],\"dayCountConvention\": 3,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 4901,\"statusDate\": 110,\"initialExchangeDate\": 6,\"maturityDate\": 368,\"terminationDate\": 1337,\"purchaseDate\": 59,\"capitalizationEndDate\": 401,\"cycleAnchorDateOfInterestPayment\": 50,\"cycleAnchorDateOfRateReset\": 79,\"cycleAnchorDateOfScalingIndex\": 1461,\"cycleAnchorDateOfFee\": 4899,\"notionalPrincipal\": 1969,\"nominalInterestRate\": 18,\"feeAccrued\": 80,\"accruedInterest\": 0,\"rateMultiplier\": 146098,\"rateSpread\": 901,\"feeRate\": 99,\"nextResetRate\": 111,\"penaltyRate\": 4900,\"premiumDiscountAtIED\": 81,\"priceAtPurchaseDate\": 29,\"cycleOfInterestPayment\": {\"i\": 1460,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 399,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 32074,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 159,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 3999,\"lifeFloor\": 1532892063,\"periodCap\": 9999,\"periodFloor\": 111}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"240,49,51,234,197,81,189,62,74,242,32,133,180,57,212,100,13,70,32,105,52,205,132,189,216,165,152,191,236,30,228,143\"),stringToBytes32(\"251,219,57,17,27,25,73,223,1,94,57,143,21,208,24,55,167,214,25,135,206,234,249,20,144,4,97,204,79,166,21,34\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,4901,110,6,368,1337,59,401,50,79,1461,4899,1969,18,80,0,146098,901,99,111,4900,81,29,Definitions.IPS(1460,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(399,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(32074,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(159,Definitions.P.Y,Definitions.S.SHORT,true),3999,1532892063,9999,111)"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [114,240,85,171,227,161,37,68,12,142,130,131,164,229,69,17,65,41,60,202,159,126,182,121,195,50,206,34,201,151,227,151],\"legalEntityIdCounterparty\": [96,33,204,13,53,142,33,97,222,220,104,204,80,177,48,126,91,12,14,146,166,9,31,137,16,123,123,229,193,128,230,161],\"dayCountConvention\": 0,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 1970,\"statusDate\": 1,\"initialExchangeDate\": 367,\"maturityDate\": 10000,\"terminationDate\": 110,\"purchaseDate\": 2440588,\"capitalizationEndDate\": 61,\"cycleAnchorDateOfInterestPayment\": 30,\"cycleAnchorDateOfRateReset\": 90,\"cycleAnchorDateOfScalingIndex\": 146098,\"cycleAnchorDateOfFee\": 66,\"notionalPrincipal\": 1532892063,\"nominalInterestRate\": 150,\"feeAccrued\": 1,\"accruedInterest\": 2447,\"rateMultiplier\": 4799,\"rateSpread\": 257,\"feeRate\": 1969,\"nextResetRate\": 68570,\"penaltyRate\": 3999,\"premiumDiscountAtIED\": 900,\"priceAtPurchaseDate\": 40,\"cycleOfInterestPayment\": {\"i\": 360,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 69,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 81,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 146096,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 11,\"lifeFloor\": 1337,\"periodCap\": 32,\"periodFloor\": 950}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"114,240,85,171,227,161,37,68,12,142,130,131,164,229,69,17,65,41,60,202,159,126,182,121,195,50,206,34,201,151,227,151\"),stringToBytes32(\"96,33,204,13,53,142,33,97,222,220,104,204,80,177,48,126,91,12,14,146,166,9,31,137,16,123,123,229,193,128,230,161\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,1970,1,367,10000,110,2440588,61,30,90,146098,66,1532892063,150,1,2447,4799,257,1969,68570,3999,900,40,Definitions.IPS(360,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(69,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(81,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(146096,Definitions.P.M,Definitions.S.SHORT,true),11,1337,32,950)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [182,83,148,163,152,35,108,171,111,148,201,186,96,108,230,27,161,176,163,17,32,133,227,144,137,6,216,24,48,14,216,79],\"legalEntityIdCounterparty\": [100,234,166,229,68,112,123,188,198,93,227,29,199,114,140,4,6,51,87,222,196,32,121,119,254,179,215,187,191,71,135,78],\"dayCountConvention\": 4,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 4799,\"statusDate\": 149,\"initialExchangeDate\": 60,\"maturityDate\": 159,\"terminationDate\": 81,\"purchaseDate\": 1460,\"capitalizationEndDate\": 121,\"cycleAnchorDateOfInterestPayment\": 96,\"cycleAnchorDateOfRateReset\": 2014223714,\"cycleAnchorDateOfScalingIndex\": 99,\"cycleAnchorDateOfFee\": 68570,\"notionalPrincipal\": 80,\"nominalInterestRate\": 361,\"feeAccrued\": 100,\"accruedInterest\": -1,\"rateMultiplier\": 4,\"rateSpread\": 27,\"feeRate\": 366,\"nextResetRate\": 81,\"penaltyRate\": 18,\"premiumDiscountAtIED\": 255,\"priceAtPurchaseDate\": 131,\"cycleOfInterestPayment\": {\"i\": 110,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 65,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 19,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2448,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 100,\"lifeFloor\": 950,\"periodCap\": 2440587,\"periodFloor\": 10001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"182,83,148,163,152,35,108,171,111,148,201,186,96,108,230,27,161,176,163,17,32,133,227,144,137,6,216,24,48,14,216,79\"),stringToBytes32(\"100,234,166,229,68,112,123,188,198,93,227,29,199,114,140,4,6,51,87,222,196,32,121,119,254,179,215,187,191,71,135,78\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,4799,149,60,159,81,1460,121,96,2014223714,99,68570,80,361,100,-1,4,27,366,81,18,255,131,Definitions.IPS(110,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(65,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(19,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(2448,Definitions.P.Y,Definitions.S.LONG,true),100,950,2440587,10001)"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [33,38,180,213,179,5,2,23,215,48,101,36,151,16,235,12,94,162,22,23,120,143,178,103,190,2,85,18,54,22,49,82],\"legalEntityIdCounterparty\": [136,116,179,173,245,79,232,48,59,43,15,168,207,119,107,131,158,178,11,180,235,238,224,206,247,244,211,32,75,154,239,39],\"dayCountConvention\": 5,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 69,\"statusDate\": 1461,\"initialExchangeDate\": 1462,\"maturityDate\": 141,\"terminationDate\": 1336,\"purchaseDate\": 0,\"capitalizationEndDate\": 1338,\"cycleAnchorDateOfInterestPayment\": 11,\"cycleAnchorDateOfRateReset\": 69,\"cycleAnchorDateOfScalingIndex\": 9,\"cycleAnchorDateOfFee\": 14,\"notionalPrincipal\": 1461001,\"nominalInterestRate\": 9,\"feeAccrued\": 25,\"accruedInterest\": 401,\"rateMultiplier\": 32,\"rateSpread\": 1338,\"feeRate\": 4799,\"nextResetRate\": 399,\"penaltyRate\": 146096,\"premiumDiscountAtIED\": 4800,\"priceAtPurchaseDate\": 27,\"cycleOfInterestPayment\": {\"i\": 10000,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 119,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 366,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2440587,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 69,\"lifeFloor\": 68569,\"periodCap\": 65,\"periodFloor\": 257}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"33,38,180,213,179,5,2,23,215,48,101,36,151,16,235,12,94,162,22,23,120,143,178,103,190,2,85,18,54,22,49,82\"),stringToBytes32(\"136,116,179,173,245,79,232,48,59,43,15,168,207,119,107,131,158,178,11,180,235,238,224,206,247,244,211,32,75,154,239,39\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,69,1461,1462,141,1336,0,1338,11,69,9,14,1461001,9,25,401,32,1338,4799,399,146096,4800,27,Definitions.IPS(10000,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(119,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(366,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(2440587,Definitions.P.M,Definitions.S.SHORT,false),69,68569,65,257)"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [84,163,33,131,125,85,236,53,206,212,170,244,70,37,45,132,76,25,165,167,136,97,5,57,182,27,229,87,126,151,133,4],\"legalEntityIdCounterparty\": [135,52,251,143,195,185,10,99,121,224,207,199,195,107,76,165,157,22,35,228,129,195,53,209,19,60,30,100,225,231,100,36],\"dayCountConvention\": 5,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 10000,\"statusDate\": 31,\"initialExchangeDate\": 368,\"maturityDate\": 368,\"terminationDate\": 14,\"purchaseDate\": 12,\"capitalizationEndDate\": 19,\"cycleAnchorDateOfInterestPayment\": 2440588,\"cycleAnchorDateOfRateReset\": 86400,\"cycleAnchorDateOfScalingIndex\": 86399,\"cycleAnchorDateOfFee\": 1532892064,\"notionalPrincipal\": 4000,\"nominalInterestRate\": 1461002,\"feeAccrued\": 4800,\"accruedInterest\": 95,\"rateMultiplier\": 69,\"rateSpread\": 2014223714,\"feeRate\": 40,\"nextResetRate\": 120,\"penaltyRate\": 8,\"premiumDiscountAtIED\": 29,\"priceAtPurchaseDate\": 86400,\"cycleOfInterestPayment\": {\"i\": 48,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 159,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 254,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 950,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 14,\"lifeFloor\": 367,\"periodCap\": 121,\"periodFloor\": 68568}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"84,163,33,131,125,85,236,53,206,212,170,244,70,37,45,132,76,25,165,167,136,97,5,57,182,27,229,87,126,151,133,4\"),stringToBytes32(\"135,52,251,143,195,185,10,99,121,224,207,199,195,107,76,165,157,22,35,228,129,195,53,209,19,60,30,100,225,231,100,36\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,10000,31,368,368,14,12,19,2440588,86400,86399,1532892064,4000,1461002,4800,95,69,2014223714,40,120,8,29,86400,Definitions.IPS(48,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(159,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(254,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(950,Definitions.P.D,Definitions.S.LONG,false),14,367,121,68568)"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [70,111,86,186,122,255,170,227,72,139,142,249,23,100,54,0,45,28,250,205,66,123,87,253,171,145,208,145,65,220,254,235],\"legalEntityIdCounterparty\": [249,175,213,135,253,91,107,88,76,109,48,91,167,172,211,234,141,191,168,223,234,155,126,241,168,153,174,175,69,17,4,250],\"dayCountConvention\": 4,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 949,\"statusDate\": 1532892064,\"initialExchangeDate\": 160,\"maturityDate\": 29,\"terminationDate\": 31,\"purchaseDate\": 254,\"capitalizationEndDate\": 256,\"cycleAnchorDateOfInterestPayment\": 39,\"cycleAnchorDateOfRateReset\": 129,\"cycleAnchorDateOfScalingIndex\": 1969,\"cycleAnchorDateOfFee\": 101,\"notionalPrincipal\": 111,\"nominalInterestRate\": 254,\"feeAccrued\": 4901,\"accruedInterest\": 150,\"rateMultiplier\": 950,\"rateSpread\": 121,\"feeRate\": 32074,\"nextResetRate\": 1532892063,\"penaltyRate\": 90,\"premiumDiscountAtIED\": 131,\"priceAtPurchaseDate\": 1461,\"cycleOfInterestPayment\": {\"i\": 151,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 131,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2447,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 359,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 3999,\"lifeFloor\": 10000,\"periodCap\": 70,\"periodFloor\": 11}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"70,111,86,186,122,255,170,227,72,139,142,249,23,100,54,0,45,28,250,205,66,123,87,253,171,145,208,145,65,220,254,235\"),stringToBytes32(\"249,175,213,135,253,91,107,88,76,109,48,91,167,172,211,234,141,191,168,223,234,155,126,241,168,153,174,175,69,17,4,250\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,949,1532892064,160,29,31,254,256,39,129,1969,101,111,254,4901,150,950,121,32074,1532892063,90,131,1461,Definitions.IPS(151,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(131,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(2447,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(359,Definitions.P.D,Definitions.S.LONG,false),3999,10000,70,11)"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [11,106,139,35,76,234,239,179,67,95,161,177,215,2,50,62,18,172,154,180,85,96,137,195,61,95,211,121,60,68,132,195],\"legalEntityIdCounterparty\": [222,134,141,53,177,227,17,113,87,226,87,73,30,182,117,198,27,225,191,237,136,208,160,79,11,57,110,119,41,98,102,124],\"dayCountConvention\": 5,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 364,\"statusDate\": 49,\"initialExchangeDate\": 2440588,\"maturityDate\": 255,\"terminationDate\": 1336,\"purchaseDate\": 11,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 149,\"cycleAnchorDateOfRateReset\": 140,\"cycleAnchorDateOfScalingIndex\": 257,\"cycleAnchorDateOfFee\": 367,\"notionalPrincipal\": 2014223716,\"nominalInterestRate\": 1971,\"feeAccrued\": 7,\"accruedInterest\": 68568,\"rateMultiplier\": 49,\"rateSpread\": 121,\"feeRate\": 25,\"nextResetRate\": 89,\"penaltyRate\": 30,\"premiumDiscountAtIED\": 18,\"priceAtPurchaseDate\": 254,\"cycleOfInterestPayment\": {\"i\": 29,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 21,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 59,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1461,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 161,\"lifeFloor\": 91,\"periodCap\": 3999,\"periodFloor\": 1461}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"11,106,139,35,76,234,239,179,67,95,161,177,215,2,50,62,18,172,154,180,85,96,137,195,61,95,211,121,60,68,132,195\"),stringToBytes32(\"222,134,141,53,177,227,17,113,87,226,87,73,30,182,117,198,27,225,191,237,136,208,160,79,11,57,110,119,41,98,102,124\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.A,364,49,2440588,255,1336,11,0,149,140,257,367,2014223716,1971,7,68568,49,121,25,89,30,18,254,Definitions.IPS(29,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(21,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(59,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(1461,Definitions.P.D,Definitions.S.SHORT,true),161,91,3999,1461)"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [53,5,88,41,79,182,195,20,142,145,232,117,62,1,87,234,194,105,129,184,244,99,53,66,162,207,107,108,17,40,239,125],\"legalEntityIdCounterparty\": [56,153,85,25,14,100,143,28,71,162,194,67,17,208,40,241,118,104,116,240,72,117,253,153,222,118,11,88,245,247,239,102],\"dayCountConvention\": 0,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 59,\"statusDate\": 10,\"initialExchangeDate\": 48,\"maturityDate\": 31,\"terminationDate\": 24,\"purchaseDate\": 69,\"capitalizationEndDate\": 2014223716,\"cycleAnchorDateOfInterestPayment\": 60,\"cycleAnchorDateOfRateReset\": 1461001,\"cycleAnchorDateOfScalingIndex\": 81,\"cycleAnchorDateOfFee\": 1532892064,\"notionalPrincipal\": 65,\"nominalInterestRate\": 0,\"feeAccrued\": 16,\"accruedInterest\": 368,\"rateMultiplier\": 32,\"rateSpread\": 68569,\"feeRate\": 68570,\"nextResetRate\": 49,\"penaltyRate\": 89,\"premiumDiscountAtIED\": 4800,\"priceAtPurchaseDate\": 13,\"cycleOfInterestPayment\": {\"i\": 254,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 149,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 365,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 131,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 48,\"lifeFloor\": 69,\"periodCap\": 121,\"periodFloor\": 9}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"53,5,88,41,79,182,195,20,142,145,232,117,62,1,87,234,194,105,129,184,244,99,53,66,162,207,107,108,17,40,239,125\"),stringToBytes32(\"56,153,85,25,14,100,143,28,71,162,194,67,17,208,40,241,118,104,116,240,72,117,253,153,222,118,11,88,245,247,239,102\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,59,10,48,31,24,69,2014223716,60,1461001,81,1532892064,65,0,16,368,32,68569,68570,49,89,4800,13,Definitions.IPS(254,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(149,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(365,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(131,Definitions.P.D,Definitions.S.SHORT,false),48,69,121,9)"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [78,144,9,98,6,135,142,208,130,236,249,79,180,93,143,59,228,203,212,157,19,194,198,232,144,165,195,18,161,195,50,209],\"legalEntityIdCounterparty\": [88,105,146,57,77,146,125,153,184,81,254,193,21,89,79,79,119,146,6,60,14,123,8,159,120,104,223,128,121,111,79,179],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 100,\"statusDate\": 86399,\"initialExchangeDate\": 131,\"maturityDate\": 39,\"terminationDate\": 19,\"purchaseDate\": 86399,\"capitalizationEndDate\": 27,\"cycleAnchorDateOfInterestPayment\": 257,\"cycleAnchorDateOfRateReset\": 1461001,\"cycleAnchorDateOfScalingIndex\": 10000,\"cycleAnchorDateOfFee\": 4899,\"notionalPrincipal\": 86399,\"nominalInterestRate\": 86400,\"feeAccrued\": 69,\"accruedInterest\": 86401,\"rateMultiplier\": 950,\"rateSpread\": 399,\"feeRate\": 99,\"nextResetRate\": 29,\"penaltyRate\": 3999,\"premiumDiscountAtIED\": 51,\"priceAtPurchaseDate\": 899,\"cycleOfInterestPayment\": {\"i\": 2440588,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2014223715,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1336,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 96,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 95,\"lifeFloor\": 60,\"periodCap\": 49,\"periodFloor\": 24}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"78,144,9,98,6,135,142,208,130,236,249,79,180,93,143,59,228,203,212,157,19,194,198,232,144,165,195,18,161,195,50,209\"),stringToBytes32(\"88,105,146,57,77,146,125,153,184,81,254,193,21,89,79,79,119,146,6,60,14,123,8,159,120,104,223,128,121,111,79,179\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,100,86399,131,39,19,86399,27,257,1461001,10000,4899,86399,86400,69,86401,950,399,99,29,3999,51,899,Definitions.IPS(2440588,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(2014223715,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(1336,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(96,Definitions.P.W,Definitions.S.SHORT,true),95,60,49,24)"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [49,157,7,27,117,137,211,250,44,219,141,132,148,41,147,245,191,34,53,4,183,124,117,133,105,242,254,64,187,208,5,94],\"legalEntityIdCounterparty\": [55,60,24,210,168,213,128,101,131,174,77,38,76,56,168,23,47,104,32,196,25,47,208,71,240,106,163,77,126,254,183,9],\"dayCountConvention\": 5,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 2014223714,\"statusDate\": 17,\"initialExchangeDate\": 951,\"maturityDate\": 31,\"terminationDate\": 951,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 365,\"cycleAnchorDateOfRateReset\": 65,\"cycleAnchorDateOfScalingIndex\": 10001,\"cycleAnchorDateOfFee\": 901,\"notionalPrincipal\": 17,\"nominalInterestRate\": 0,\"feeAccrued\": 40,\"accruedInterest\": 1461,\"rateMultiplier\": 146098,\"rateSpread\": 256,\"feeRate\": 2014223714,\"nextResetRate\": 40,\"penaltyRate\": 20,\"premiumDiscountAtIED\": 27,\"priceAtPurchaseDate\": 2014223716,\"cycleOfInterestPayment\": {\"i\": 1460,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 161,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 366,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 65,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 950,\"lifeFloor\": 2446,\"periodCap\": 31,\"periodFloor\": 950}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"49,157,7,27,117,137,211,250,44,219,141,132,148,41,147,245,191,34,53,4,183,124,117,133,105,242,254,64,187,208,5,94\"),stringToBytes32(\"55,60,24,210,168,213,128,101,131,174,77,38,76,56,168,23,47,104,32,196,25,47,208,71,240,106,163,77,126,254,183,9\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,2014223714,17,951,31,951,0,0,365,65,10001,901,17,0,40,1461,146098,256,2014223714,40,20,27,2014223716,Definitions.IPS(1460,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(161,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(366,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(65,Definitions.P.Q,Definitions.S.LONG,false),950,2446,31,950)"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [102,145,11,127,49,48,164,196,229,250,143,65,137,176,249,223,155,102,107,189,36,248,247,113,105,20,248,15,126,181,200,78],\"legalEntityIdCounterparty\": [99,223,160,243,129,194,196,219,181,94,147,249,9,190,140,70,191,162,203,224,0,252,230,167,198,110,244,122,1,254,211,194],\"dayCountConvention\": 3,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 1338,\"statusDate\": 10,\"initialExchangeDate\": 39,\"maturityDate\": 361,\"terminationDate\": 367,\"purchaseDate\": 1969,\"capitalizationEndDate\": 32075,\"cycleAnchorDateOfInterestPayment\": 32074,\"cycleAnchorDateOfRateReset\": 130,\"cycleAnchorDateOfScalingIndex\": 146096,\"cycleAnchorDateOfFee\": 13,\"notionalPrincipal\": 140,\"nominalInterestRate\": 41,\"feeAccrued\": 79,\"accruedInterest\": 9,\"rateMultiplier\": 361,\"rateSpread\": 257,\"feeRate\": 1532892064,\"nextResetRate\": 151,\"penaltyRate\": 400,\"premiumDiscountAtIED\": -1,\"priceAtPurchaseDate\": 951,\"cycleOfInterestPayment\": {\"i\": 2440589,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 149,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2446,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 68570,\"lifeFloor\": 86400,\"periodCap\": 97,\"periodFloor\": 59}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"102,145,11,127,49,48,164,196,229,250,143,65,137,176,249,223,155,102,107,189,36,248,247,113,105,20,248,15,126,181,200,78\"),stringToBytes32(\"99,223,160,243,129,194,196,219,181,94,147,249,9,190,140,70,191,162,203,224,0,252,230,167,198,110,244,122,1,254,211,194\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,1338,10,39,361,367,1969,32075,32074,130,146096,13,140,41,79,9,361,257,1532892064,151,400,-1,951,Definitions.IPS(2440589,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(149,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(1,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(2446,Definitions.P.M,Definitions.S.SHORT,true),68570,86400,97,59)"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [88,70,20,155,138,246,90,100,164,80,218,66,27,248,160,155,24,176,13,129,16,20,160,128,95,120,39,102,101,171,230,40],\"legalEntityIdCounterparty\": [165,61,96,109,241,235,184,223,70,66,213,45,201,242,247,190,254,71,45,121,185,29,55,131,255,54,206,118,235,216,185,69],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 7,\"statusDate\": 1532892063,\"initialExchangeDate\": 901,\"maturityDate\": 23,\"terminationDate\": 361,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 95,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 79,\"cycleAnchorDateOfFee\": 28,\"notionalPrincipal\": 68569,\"nominalInterestRate\": 0,\"feeAccrued\": 3999,\"accruedInterest\": 110,\"rateMultiplier\": 361,\"rateSpread\": 254,\"feeRate\": 10,\"nextResetRate\": 160,\"penaltyRate\": 10,\"premiumDiscountAtIED\": 70,\"priceAtPurchaseDate\": 900,\"cycleOfInterestPayment\": {\"i\": 139,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 81,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 97,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2014223716,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 31,\"lifeFloor\": 949,\"periodCap\": 16,\"periodFloor\": 71}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"88,70,20,155,138,246,90,100,164,80,218,66,27,248,160,155,24,176,13,129,16,20,160,128,95,120,39,102,101,171,230,40\"),stringToBytes32(\"165,61,96,109,241,235,184,223,70,66,213,45,201,242,247,190,254,71,45,121,185,29,55,131,255,54,206,118,235,216,185,69\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.N,7,1532892063,901,23,361,0,0,95,0,79,28,68569,0,3999,110,361,254,10,160,10,70,900,Definitions.IPS(139,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(81,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(97,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(2014223716,Definitions.P.Y,Definitions.S.LONG,false),31,949,16,71)"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [93,192,238,86,242,237,86,173,248,193,207,232,217,47,176,121,230,129,221,127,216,242,228,16,162,229,169,219,139,247,12,82],\"legalEntityIdCounterparty\": [222,170,140,142,68,152,188,15,29,81,80,46,149,241,249,140,125,52,59,191,140,108,183,240,142,84,98,186,140,2,60,227],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 2440587,\"statusDate\": 6,\"initialExchangeDate\": 4900,\"maturityDate\": 63,\"terminationDate\": 257,\"purchaseDate\": 49,\"capitalizationEndDate\": 19,\"cycleAnchorDateOfInterestPayment\": 120,\"cycleAnchorDateOfRateReset\": 49,\"cycleAnchorDateOfScalingIndex\": 6,\"cycleAnchorDateOfFee\": 146096,\"notionalPrincipal\": 1532892064,\"nominalInterestRate\": 32,\"feeAccrued\": 1971,\"accruedInterest\": 3999,\"rateMultiplier\": 60,\"rateSpread\": 129,\"feeRate\": 68569,\"nextResetRate\": 4800,\"penaltyRate\": 364,\"premiumDiscountAtIED\": 255,\"priceAtPurchaseDate\": 950,\"cycleOfInterestPayment\": {\"i\": 100,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 68568,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 121,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 5,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 63,\"lifeFloor\": 1460,\"periodCap\": 360,\"periodFloor\": 20}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"93,192,238,86,242,237,86,173,248,193,207,232,217,47,176,121,230,129,221,127,216,242,228,16,162,229,169,219,139,247,12,82\"),stringToBytes32(\"222,170,140,142,68,152,188,15,29,81,80,46,149,241,249,140,125,52,59,191,140,108,183,240,142,84,98,186,140,2,60,227\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,2440587,6,4900,63,257,49,19,120,49,6,146096,1532892064,32,1971,3999,60,129,68569,4800,364,255,950,Definitions.IPS(100,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(68568,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(121,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(5,Definitions.P.D,Definitions.S.LONG,true),63,1460,360,20)"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [144,62,190,227,137,208,182,230,143,195,11,211,28,189,156,111,203,105,147,180,158,251,210,161,241,73,135,142,215,173,168,37],\"legalEntityIdCounterparty\": [193,32,80,11,197,110,168,89,58,79,189,138,119,208,136,215,81,92,137,119,137,38,172,251,158,21,105,221,120,178,8,155],\"dayCountConvention\": 2,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 4901,\"statusDate\": 364,\"initialExchangeDate\": 950,\"maturityDate\": 360,\"terminationDate\": 63,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 120,\"cycleAnchorDateOfRateReset\": 26,\"cycleAnchorDateOfScalingIndex\": 1532892064,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 40,\"nominalInterestRate\": 0,\"feeAccrued\": 1969,\"accruedInterest\": 149,\"rateMultiplier\": 1338,\"rateSpread\": 1970,\"feeRate\": 16,\"nextResetRate\": 2014223714,\"penaltyRate\": 146098,\"premiumDiscountAtIED\": 24,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 91,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 17,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 11,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 360,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 68568,\"lifeFloor\": 257,\"periodCap\": 65,\"periodFloor\": 101}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"144,62,190,227,137,208,182,230,143,195,11,211,28,189,156,111,203,105,147,180,158,251,210,161,241,73,135,142,215,173,168,37\"),stringToBytes32(\"193,32,80,11,197,110,168,89,58,79,189,138,119,208,136,215,81,92,137,119,137,38,172,251,158,21,105,221,120,178,8,155\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,4901,364,950,360,63,0,0,120,26,1532892064,0,40,0,1969,149,1338,1970,16,2014223714,146098,24,1,Definitions.IPS(91,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(17,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(11,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(360,Definitions.P.W,Definitions.S.LONG,false),68568,257,65,101)"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [170,181,152,74,63,85,2,229,163,85,138,101,161,190,53,18,37,252,53,39,68,160,120,131,161,191,23,46,62,236,212,122],\"legalEntityIdCounterparty\": [51,87,74,152,120,144,137,160,21,108,159,175,136,67,204,228,192,52,19,61,234,128,179,121,61,163,231,35,61,94,169,164],\"dayCountConvention\": 4,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 2448,\"statusDate\": 368,\"initialExchangeDate\": 4800,\"maturityDate\": 131,\"terminationDate\": 69,\"purchaseDate\": 97,\"capitalizationEndDate\": 71,\"cycleAnchorDateOfInterestPayment\": 60,\"cycleAnchorDateOfRateReset\": 2014223715,\"cycleAnchorDateOfScalingIndex\": 1,\"cycleAnchorDateOfFee\": 64,\"notionalPrincipal\": 141,\"nominalInterestRate\": 129,\"feeAccrued\": -1,\"accruedInterest\": 110,\"rateMultiplier\": 161,\"rateSpread\": 32075,\"feeRate\": 91,\"nextResetRate\": 3999,\"penaltyRate\": 26,\"premiumDiscountAtIED\": 256,\"priceAtPurchaseDate\": 23,\"cycleOfInterestPayment\": {\"i\": 110,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 7,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 110,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 100,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 139,\"lifeFloor\": 68568,\"periodCap\": 86401,\"periodFloor\": 32075}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"170,181,152,74,63,85,2,229,163,85,138,101,161,190,53,18,37,252,53,39,68,160,120,131,161,191,23,46,62,236,212,122\"),stringToBytes32(\"51,87,74,152,120,144,137,160,21,108,159,175,136,67,204,228,192,52,19,61,234,128,179,121,61,163,231,35,61,94,169,164\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,2448,368,4800,131,69,97,71,60,2014223715,1,64,141,129,-1,110,161,32075,91,3999,26,256,23,Definitions.IPS(110,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(7,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(110,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(100,Definitions.P.Y,Definitions.S.SHORT,true),139,68568,86401,32075)"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [154,153,202,64,154,195,108,154,111,93,199,207,210,100,158,84,235,93,8,164,169,113,192,117,5,190,227,74,8,109,75,117],\"legalEntityIdCounterparty\": [4,40,244,232,126,142,15,219,40,182,167,137,10,6,124,97,145,97,249,54,81,53,1,165,79,243,36,75,15,38,92,30],\"dayCountConvention\": 1,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 50,\"statusDate\": 64,\"initialExchangeDate\": 3999,\"maturityDate\": 12,\"terminationDate\": 9,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 2014223715,\"cycleAnchorDateOfRateReset\": 1462,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 18,\"notionalPrincipal\": 364,\"nominalInterestRate\": 0,\"feeAccrued\": -1,\"accruedInterest\": 11,\"rateMultiplier\": 5,\"rateSpread\": 1,\"feeRate\": 1461001,\"nextResetRate\": 4801,\"penaltyRate\": 1,\"premiumDiscountAtIED\": 1336,\"priceAtPurchaseDate\": 139,\"cycleOfInterestPayment\": {\"i\": 12,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2447,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 111,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 255,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 86400,\"lifeFloor\": 64,\"periodCap\": 1462,\"periodFloor\": 1460}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"154,153,202,64,154,195,108,154,111,93,199,207,210,100,158,84,235,93,8,164,169,113,192,117,5,190,227,74,8,109,75,117\"),stringToBytes32(\"4,40,244,232,126,142,15,219,40,182,167,137,10,6,124,97,145,97,249,54,81,53,1,165,79,243,36,75,15,38,92,30\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,50,64,3999,12,9,0,0,2014223715,1462,0,18,364,0,-1,11,5,1,1461001,4801,1,1336,139,Definitions.IPS(12,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(2447,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(111,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(255,Definitions.P.Q,Definitions.S.SHORT,true),86400,64,1462,1460)"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [143,191,165,118,245,31,205,155,22,249,180,14,133,11,209,247,109,189,81,240,96,51,155,201,66,175,119,118,69,226,232,0],\"legalEntityIdCounterparty\": [178,62,8,136,32,147,166,180,88,3,168,177,21,194,62,254,181,208,244,60,81,34,152,146,22,67,254,84,131,134,180,176],\"dayCountConvention\": 1,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 86399,\"statusDate\": 950,\"initialExchangeDate\": 2014223715,\"maturityDate\": 95,\"terminationDate\": 4801,\"purchaseDate\": 14,\"capitalizationEndDate\": 400,\"cycleAnchorDateOfInterestPayment\": 10000,\"cycleAnchorDateOfRateReset\": 3999,\"cycleAnchorDateOfScalingIndex\": 146098,\"cycleAnchorDateOfFee\": 24,\"notionalPrincipal\": 14,\"nominalInterestRate\": -1,\"feeAccrued\": 9999,\"accruedInterest\": 120,\"rateMultiplier\": 69,\"rateSpread\": 4901,\"feeRate\": -1,\"nextResetRate\": 29,\"penaltyRate\": 25,\"premiumDiscountAtIED\": 4800,\"priceAtPurchaseDate\": 30,\"cycleOfInterestPayment\": {\"i\": 71,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 359,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 120,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 254,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 26,\"lifeFloor\": 141,\"periodCap\": 49,\"periodFloor\": 3999}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"143,191,165,118,245,31,205,155,22,249,180,14,133,11,209,247,109,189,81,240,96,51,155,201,66,175,119,118,69,226,232,0\"),stringToBytes32(\"178,62,8,136,32,147,166,180,88,3,168,177,21,194,62,254,181,208,244,60,81,34,152,146,22,67,254,84,131,134,180,176\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,86399,950,2014223715,95,4801,14,400,10000,3999,146098,24,14,-1,9999,120,69,4901,-1,29,25,4800,30,Definitions.IPS(71,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(359,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(120,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(254,Definitions.P.W,Definitions.S.SHORT,true),26,141,49,3999)"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [102,83,136,20,138,245,21,112,28,25,79,154,252,20,103,67,136,207,95,49,253,203,122,111,14,223,7,183,32,167,191,62],\"legalEntityIdCounterparty\": [185,81,176,55,99,223,144,0,176,174,186,132,115,0,116,156,176,223,118,222,83,178,197,40,91,231,82,149,55,3,102,83],\"dayCountConvention\": 6,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 96,\"statusDate\": 71,\"initialExchangeDate\": 96,\"maturityDate\": 7,\"terminationDate\": 400,\"purchaseDate\": 131,\"capitalizationEndDate\": 9,\"cycleAnchorDateOfInterestPayment\": 9999,\"cycleAnchorDateOfRateReset\": 1336,\"cycleAnchorDateOfScalingIndex\": 1969,\"cycleAnchorDateOfFee\": 400,\"notionalPrincipal\": 159,\"nominalInterestRate\": 1337,\"feeAccrued\": -1,\"accruedInterest\": 51,\"rateMultiplier\": 4800,\"rateSpread\": 361,\"feeRate\": 26,\"nextResetRate\": 950,\"penaltyRate\": 359,\"premiumDiscountAtIED\": 257,\"priceAtPurchaseDate\": 146098,\"cycleOfInterestPayment\": {\"i\": 119,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4799,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2447,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 31,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 9999,\"lifeFloor\": 150,\"periodCap\": 1969,\"periodFloor\": 4901}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"102,83,136,20,138,245,21,112,28,25,79,154,252,20,103,67,136,207,95,49,253,203,122,111,14,223,7,183,32,167,191,62\"),stringToBytes32(\"185,81,176,55,99,223,144,0,176,174,186,132,115,0,116,156,176,223,118,222,83,178,197,40,91,231,82,149,55,3,102,83\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,96,71,96,7,400,131,9,9999,1336,1969,400,159,1337,-1,51,4800,361,26,950,359,257,146098,Definitions.IPS(119,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(4799,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(2447,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(31,Definitions.P.Q,Definitions.S.LONG,true),9999,150,1969,4901)"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [146,77,145,162,136,230,33,43,60,216,181,74,251,32,160,165,197,16,125,140,27,123,114,7,195,32,61,253,214,242,95,91],\"legalEntityIdCounterparty\": [53,23,230,228,15,221,20,35,23,116,196,139,120,30,248,238,119,15,89,197,190,107,90,55,56,14,237,121,2,199,241,103],\"dayCountConvention\": 5,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 66,\"statusDate\": 90,\"initialExchangeDate\": 4799,\"maturityDate\": 2448,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 31,\"cycleAnchorDateOfRateReset\": 4,\"cycleAnchorDateOfScalingIndex\": 146097,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 1460,\"nominalInterestRate\": 0,\"feeAccrued\": 51,\"accruedInterest\": 4000,\"rateMultiplier\": 151,\"rateSpread\": 2440587,\"feeRate\": 2,\"nextResetRate\": 40,\"penaltyRate\": 12,\"premiumDiscountAtIED\": 40,\"priceAtPurchaseDate\": 2447,\"cycleOfInterestPayment\": {\"i\": 2440588,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 31,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 91,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 901,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 91,\"lifeFloor\": 51,\"periodCap\": 4000,\"periodFloor\": 9999}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"146,77,145,162,136,230,33,43,60,216,181,74,251,32,160,165,197,16,125,140,27,123,114,7,195,32,61,253,214,242,95,91\"),stringToBytes32(\"53,23,230,228,15,221,20,35,23,116,196,139,120,30,248,238,119,15,89,197,190,107,90,55,56,14,237,121,2,199,241,103\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,66,90,4799,2448,0,0,0,31,4,146097,0,1460,0,51,4000,151,2440587,2,40,12,40,2447,Definitions.IPS(2440588,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(31,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(91,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(901,Definitions.P.Q,Definitions.S.LONG,false),91,51,4000,9999)"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [193,116,44,37,220,215,249,210,42,196,143,155,32,116,165,168,165,20,219,37,188,214,163,8,185,1,217,21,183,243,155,52],\"legalEntityIdCounterparty\": [169,209,218,6,236,37,243,197,191,97,137,186,255,184,165,39,101,254,151,218,187,125,230,22,244,100,73,73,31,94,185,236],\"dayCountConvention\": 4,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 399,\"statusDate\": 2447,\"initialExchangeDate\": 12,\"maturityDate\": 901,\"terminationDate\": 18,\"purchaseDate\": 99,\"capitalizationEndDate\": 48,\"cycleAnchorDateOfInterestPayment\": 359,\"cycleAnchorDateOfRateReset\": 1337,\"cycleAnchorDateOfScalingIndex\": 10001,\"cycleAnchorDateOfFee\": 63,\"notionalPrincipal\": 257,\"nominalInterestRate\": 901,\"feeAccrued\": 17,\"accruedInterest\": 23,\"rateMultiplier\": 8,\"rateSpread\": 91,\"feeRate\": 949,\"nextResetRate\": 19,\"penaltyRate\": 130,\"premiumDiscountAtIED\": 60,\"priceAtPurchaseDate\": 64,\"cycleOfInterestPayment\": {\"i\": 11,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 130,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4899,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 99,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 1532892064,\"lifeFloor\": 400,\"periodCap\": 2440587,\"periodFloor\": 49}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"193,116,44,37,220,215,249,210,42,196,143,155,32,116,165,168,165,20,219,37,188,214,163,8,185,1,217,21,183,243,155,52\"),stringToBytes32(\"169,209,218,6,236,37,243,197,191,97,137,186,255,184,165,39,101,254,151,218,187,125,230,22,244,100,73,73,31,94,185,236\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,399,2447,12,901,18,99,48,359,1337,10001,63,257,901,17,23,8,91,949,19,130,60,64,Definitions.IPS(11,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(130,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(4899,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(99,Definitions.P.H,Definitions.S.SHORT,false),1532892064,400,2440587,49)"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [254,155,82,131,37,88,49,44,141,157,12,240,245,164,40,219,223,41,148,38,147,66,234,177,9,101,248,237,149,124,6,99],\"legalEntityIdCounterparty\": [26,51,32,2,70,204,247,58,97,76,228,186,239,73,0,168,237,3,132,72,39,76,246,225,179,172,237,112,160,91,148,29],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 32074,\"statusDate\": 12,\"initialExchangeDate\": 31,\"maturityDate\": 364,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 130,\"cycleAnchorDateOfRateReset\": 4899,\"cycleAnchorDateOfScalingIndex\": 120,\"cycleAnchorDateOfFee\": 2447,\"notionalPrincipal\": 16,\"nominalInterestRate\": 0,\"feeAccrued\": 146096,\"accruedInterest\": 364,\"rateMultiplier\": 4800,\"rateSpread\": 4900,\"feeRate\": 159,\"nextResetRate\": 110,\"penaltyRate\": 899,\"premiumDiscountAtIED\": 400,\"priceAtPurchaseDate\": 899,\"cycleOfInterestPayment\": {\"i\": 9999,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 10000,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 89,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4001,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 66,\"lifeFloor\": 2440589,\"periodCap\": 149,\"periodFloor\": 1461000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"254,155,82,131,37,88,49,44,141,157,12,240,245,164,40,219,223,41,148,38,147,66,234,177,9,101,248,237,149,124,6,99\"),stringToBytes32(\"26,51,32,2,70,204,247,58,97,76,228,186,239,73,0,168,237,3,132,72,39,76,246,225,179,172,237,112,160,91,148,29\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,32074,12,31,364,0,0,0,130,4899,120,2447,16,0,146096,364,4800,4900,159,110,899,400,899,Definitions.IPS(9999,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(10000,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(89,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(4001,Definitions.P.M,Definitions.S.LONG,false),66,2440589,149,1461000)"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.218ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:05:13.241ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}