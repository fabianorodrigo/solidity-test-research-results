,{
  "2020-11-12T08:27:36.280ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "1461",
                "sol": "1461"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:27:36.281ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.282ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.282ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.283ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.283ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.284ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month<=0",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.286ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "minute >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN minute>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.288ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.289ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.289ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.289ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.290ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.291ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.300ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.300ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.301ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.301ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.301ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.302ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.302ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.302ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.303ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.305ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.305ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.306ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.306ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.307ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.307ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.307ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.308ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.308ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.309ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.309ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4802,
                "sol": 4802
              },
              {
                "js": "4801",
                "sol": "4801"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:27:36.311ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 68569,
                "sol": 68569
              },
              {
                "js": "68568",
                "sol": "68568"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:27:36.312ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 360,
                "sol": 360
              },
              {
                "js": "359",
                "sol": "359"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:27:36.313ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 72,
                "sol": 72
              },
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:27:36.314ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 32077,
                "sol": 32077
              },
              {
                "js": "32076",
                "sol": "32076"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:27:36.315ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2440588,
                "sol": 2440588
              },
              {
                "js": "2440587",
                "sol": "2440587"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:27:36.317ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.319ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "109",
                "sol": "109"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:27:36.323ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.ContractRole.BUY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.ContractRole.RFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.328ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "80",
                "sol": "80"
              },
              {
                "js": 79,
                "sol": 79
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1970",
                "sol": "1970"
              },
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": 1336,
                "sol": 1336
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": 10,
                "sol": 10
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": 3,
              "sol": "Definitions.DayCountConvention._30E_360ISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": 159,
                "sol": 159
              },
              {
                "js": 3,
                "sol": "Definitions.DayCountConvention._30E_360ISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T08:27:36.333ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.333ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.333ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.334ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.335ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{\"i\": 8,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(8,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{\"i\": 60,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(60,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{\"i\": 5,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(5,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{\"i\": 150,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(150,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.337ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.339ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.340ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractStatus.DQ"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.343ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.348ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.352ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.353ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.358ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 69,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(69,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 50,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(50,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 900,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(900,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 25,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(25,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 19,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(19,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 10,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(10,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 96,\"p\": 99999,\"s\": 1,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.363ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{\"i\": 10000,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(10000,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{\"i\": 79,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(79,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{\"i\": 900,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(900,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{\"i\": 1461002,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1461002,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{\"i\": 65,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(65,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{\"i\": 86401,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(86401,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{\"i\": 48,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(48,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{\"i\": 257,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(257,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{\"i\": 26,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(26,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.371ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 109,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(109,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 1461000,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1461000,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 141,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(141,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 360,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(360,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 10000,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(10000,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 8,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(8,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 81,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.375ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 1461000,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 4},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 0,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 17,\"stfType\": 20},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 2448,\"eventType\": 3,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 10},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 110,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 20},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 131,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 3},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 160,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 8,\"stfType\": 12},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 4001,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 12},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 255,\"eventType\": 13,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 4},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 146097,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 20},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 159,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 20},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 256,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 17},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 4800,\"eventType\": 1,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 13},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 257,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 17},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 40,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 18},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 21,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 2},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 900,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 7},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 19,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 16},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 14,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 15},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 1462,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 18},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 1461002,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 5},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 12,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 19},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 119,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 11},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 20,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 17},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 368,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 19},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 359,\"eventType\": 1,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 20},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 1532892063,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 161,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 1462,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 8},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 100,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 9},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 79,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 1},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 17,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 2},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 255,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 12},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 27,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 20,\"stfType\": 2},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 7,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 11},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 29,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 9},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 29,\"eventType\": 16,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 4},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 68570,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 3},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 10000,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 4},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 90,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 109,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 11},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 3,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 0},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 2446,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 6,\"stfType\": 4},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 26,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 6,\"stfType\": 19},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 141,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 12},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 1532892063,\"eventType\": 12,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 11},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 17,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 14,\"stfType\": 19},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 4899,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 4},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 59,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 15},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 159,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 2},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 2440589,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 13},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 50,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 16},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 100,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 8},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 131,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 20},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 4001,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 4},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 10,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 0},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 21,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 5},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 90,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 14},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 4899,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 3},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 1461001,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 17,\"stfType\": 5},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 2014223716,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 2},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 1460,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 15},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 2,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 4},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 160,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 13},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 1,\"eventType\": 14,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 0}]",
              "sol": "[Definitions.ProtoEvent(8,97,1461000,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IP),Definitions.ProtoEvent(2,89,0,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.Child),Definitions.ProtoEvent(1460,32074,2448,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.TD),Definitions.ProtoEvent(1337,146098,110,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.Child),Definitions.ProtoEvent(4001,367,131,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IED),Definitions.ProtoEvent(256,257,160,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RR),Definitions.ProtoEvent(28,161,4001,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.RR),Definitions.ProtoEvent(364,97,255,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IP),Definitions.ProtoEvent(4001,2440588,146097,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.Child),Definitions.ProtoEvent(25,2440588,159,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.Child),Definitions.ProtoEvent(160,24,256,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MR),Definitions.ProtoEvent(0,69,4800,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RRY),Definitions.ProtoEvent(4899,59,257,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MR),Definitions.ProtoEvent(5,1461000,40,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCB),Definitions.ProtoEvent(39,1532892064,21,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.AD),Definitions.ProtoEvent(24,139,900,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PY),Definitions.ProtoEvent(160,951,19,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.DV),Definitions.ProtoEvent(900,951,14,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.CD),Definitions.ProtoEvent(26,65,1462,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCB),Definitions.ProtoEvent(360,4899,1461002,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PR),Definitions.ProtoEvent(1971,1970,12,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.STD),Definitions.ProtoEvent(4000,1,119,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCI),Definitions.ProtoEvent(0,360,20,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MR),Definitions.ProtoEvent(257,160,368,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.STD),Definitions.ProtoEvent(27,8,359,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.Child),Definitions.ProtoEvent(161,119,1532892063,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(1460,361,161,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(140,48,1462,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.FP),Definitions.ProtoEvent(30,30,100,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PRD),Definitions.ProtoEvent(68568,48,79,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.MD),Definitions.ProtoEvent(9999,100,17,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.AD),Definitions.ProtoEvent(71,160,255,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RR),Definitions.ProtoEvent(4900,1,27,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.AD),Definitions.ProtoEvent(949,364,7,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCI),Definitions.ProtoEvent(367,159,29,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PRD),Definitions.ProtoEvent(4900,68570,29,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IP),Definitions.ProtoEvent(257,4899,68570,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IED),Definitions.ProtoEvent(1337,4899,10000,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IP),Definitions.ProtoEvent(1970,60,90,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(255,3999,109,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCI),Definitions.ProtoEvent(16,2448,3,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SD),Definitions.ProtoEvent(26,97,2446,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IP),Definitions.ProtoEvent(1461,4900,26,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.STD),Definitions.ProtoEvent(49,254,141,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RR),Definitions.ProtoEvent(1460,79,1532892063,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI),Definitions.ProtoEvent(2014223715,900,17,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.STD),Definitions.ProtoEvent(86399,9,4899,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IP),Definitions.ProtoEvent(0,9,59,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.CD),Definitions.ProtoEvent(4801,1337,159,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.AD),Definitions.ProtoEvent(254,1969,2440589,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RRY),Definitions.ProtoEvent(19,4001,50,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.DV),Definitions.ProtoEvent(368,12,100,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.FP),Definitions.ProtoEvent(69,161,131,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.Child),Definitions.ProtoEvent(130,20,4001,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IP),Definitions.ProtoEvent(8,109,10,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SD),Definitions.ProtoEvent(61,20,21,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PR),Definitions.ProtoEvent(1462,4801,90,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.SC),Definitions.ProtoEvent(4900,16,4899,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IED),Definitions.ProtoEvent(5,4800,1461001,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PR),Definitions.ProtoEvent(4801,89,2014223716,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.AD),Definitions.ProtoEvent(50,89,1460,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.CD),Definitions.ProtoEvent(4899,64,2,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IP),Definitions.ProtoEvent(120,361,160,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RRY),Definitions.ProtoEvent(39,10000,1,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SD)]"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.390ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 2014223715,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 10},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 68570,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 9},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 361,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 17},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 2440587,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 1532892064,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 15,\"stfType\": 18},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 140,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 20},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 364,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 8},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 81,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 11},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 15,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 13},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 4900,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 6},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 2014223714,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 2},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 109,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 8},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 66,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 7,\"eventType\": 14,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 11},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 111,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 9},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 59,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 3},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 90,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 14},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 39,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 14},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 9,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 7},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 1337,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 7},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 146098,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 17},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 1969,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 18},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 4800,\"eventType\": 4,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 16},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 4,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 0},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 1971,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 11},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 65,\"eventType\": 14,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 16},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 1337,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 17},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 9999,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 5},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 101,\"eventType\": 18,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 1},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 900,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 18},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 5,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 4},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 139,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 0},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 95,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 7},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 2440587,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 11},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 1460,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 12},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 24,\"eventType\": 4,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 17},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 69,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 146096,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 15},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 401,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 2},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 86401,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 17},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 64,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 10},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 18,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 30,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 15,\"stfType\": 18},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 900,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 14},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 9999,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 5},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 3,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 15,\"stfType\": 18},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 4000,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 17,\"stfType\": 14},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 49,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 13},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 91,\"eventType\": 4,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 10},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 86400,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 12},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 70,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 6,\"stfType\": 11},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 146096,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 15},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 255,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 254,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 6},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 900,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 11},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 86399,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 20},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 367,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 20},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 86400,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 19},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 2440587,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 14},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 256,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 0},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 31,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 11},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 96,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 5},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 40,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 11},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 95,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 10}]",
              "sol": "[Definitions.ProtoEvent(160,20,2014223715,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.TD),Definitions.ProtoEvent(81,12,68570,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PRD),Definitions.ProtoEvent(900,0,361,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MR),Definitions.ProtoEvent(1460,131,2440587,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(4899,48,1532892064,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCB),Definitions.ProtoEvent(366,2014223714,140,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.Child),Definitions.ProtoEvent(2446,32075,364,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.FP),Definitions.ProtoEvent(949,368,81,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCI),Definitions.ProtoEvent(4900,119,15,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY),Definitions.ProtoEvent(1532892064,4801,4900,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PP),Definitions.ProtoEvent(900,1460,2014223714,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.AD),Definitions.ProtoEvent(2440588,110,109,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.FP),Definitions.ProtoEvent(30,1971,66,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(900,64,7,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IPCI),Definitions.ProtoEvent(900,100,111,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PRD),Definitions.ProtoEvent(32076,66,59,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IED),Definitions.ProtoEvent(32074,9999,90,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SC),Definitions.ProtoEvent(96,20,39,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.SC),Definitions.ProtoEvent(4899,40,9,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PY),Definitions.ProtoEvent(366,1532892064,1337,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PY),Definitions.ProtoEvent(21,151,146098,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MR),Definitions.ProtoEvent(7,27,1969,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCB),Definitions.ProtoEvent(15,146096,4800,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.DV),Definitions.ProtoEvent(5,96,4,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SD),Definitions.ProtoEvent(89,5,1971,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCI),Definitions.ProtoEvent(2446,257,65,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.DV),Definitions.ProtoEvent(66,6,1337,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MR),Definitions.ProtoEvent(139,141,9999,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PR),Definitions.ProtoEvent(256,10,101,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.MD),Definitions.ProtoEvent(4000,2447,900,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCB),Definitions.ProtoEvent(68570,4800,5,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IP),Definitions.ProtoEvent(68568,111,139,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SD),Definitions.ProtoEvent(1461002,949,95,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PY),Definitions.ProtoEvent(32,32,2440587,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCI),Definitions.ProtoEvent(399,2440588,1460,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RR),Definitions.ProtoEvent(86401,69,24,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MR),Definitions.ProtoEvent(29,110,69,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(365,1971,146096,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.CD),Definitions.ProtoEvent(48,1970,401,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.AD),Definitions.ProtoEvent(1461,11,86401,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.MR),Definitions.ProtoEvent(101,257,64,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.TD),Definitions.ProtoEvent(950,30,18,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(1971,109,30,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCB),Definitions.ProtoEvent(12,86400,900,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.SC),Definitions.ProtoEvent(90,160,9999,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PR),Definitions.ProtoEvent(2448,25,3,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCB),Definitions.ProtoEvent(31,364,4000,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SC),Definitions.ProtoEvent(21,366,49,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RRY),Definitions.ProtoEvent(110,1460,91,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.TD),Definitions.ProtoEvent(1969,2,86400,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RR),Definitions.ProtoEvent(1,367,70,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCI),Definitions.ProtoEvent(96,65,146096,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.CD),Definitions.ProtoEvent(49,81,255,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(51,60,254,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PP),Definitions.ProtoEvent(63,68569,900,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCI),Definitions.ProtoEvent(4799,1460,86399,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.Child),Definitions.ProtoEvent(27,364,367,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.Child),Definitions.ProtoEvent(11,32075,86400,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.STD),Definitions.ProtoEvent(17,950,2440587,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SC),Definitions.ProtoEvent(68570,4,256,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SD),Definitions.ProtoEvent(12,39,31,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCI),Definitions.ProtoEvent(901,86399,96,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PR),Definitions.ProtoEvent(2014223714,32075,40,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCI),Definitions.ProtoEvent(10,1461000,95,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.TD)]"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.410ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "endTimestamp < timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN endTimestamp<timestamp",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.413ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [197,132,49,11,144,50,223,46,120,249,3,196,16,217,64,41,218,72,20,132,164,84,225,249,198,208,53,26,114,255,3,193],\"legalEntityIdCounterparty\": [167,59,57,0,128,95,239,10,179,221,15,165,222,118,95,138,209,203,20,191,207,0,174,91,138,241,29,140,42,184,208,214],\"dayCountConvention\": 6,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 61,\"statusDate\": 359,\"initialExchangeDate\": 81,\"maturityDate\": 4901,\"terminationDate\": 900,\"purchaseDate\": 7,\"capitalizationEndDate\": 399,\"cycleAnchorDateOfInterestPayment\": 41,\"cycleAnchorDateOfRateReset\": 364,\"cycleAnchorDateOfScalingIndex\": 1969,\"cycleAnchorDateOfFee\": 64,\"notionalPrincipal\": 17,\"nominalInterestRate\": 2440587,\"feeAccrued\": 146097,\"accruedInterest\": 364,\"rateMultiplier\": 129,\"rateSpread\": 368,\"feeRate\": 4001,\"nextResetRate\": 141,\"penaltyRate\": 2447,\"premiumDiscountAtIED\": 64,\"priceAtPurchaseDate\": 130,\"cycleOfInterestPayment\": {\"i\": 360,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 111,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 50,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 12,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 1338,\"lifeFloor\": 61,\"periodCap\": 31,\"periodFloor\": 2446}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"197,132,49,11,144,50,223,46,120,249,3,196,16,217,64,41,218,72,20,132,164,84,225,249,198,208,53,26,114,255,3,193\"),stringToBytes32(\"167,59,57,0,128,95,239,10,179,221,15,165,222,118,95,138,209,203,20,191,207,0,174,91,138,241,29,140,42,184,208,214\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,61,359,81,4901,900,7,399,41,364,1969,64,17,2440587,146097,364,129,368,4001,141,2447,64,130,Definitions.IPS(360,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(111,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(50,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(12,Definitions.P.Q,Definitions.S.SHORT,false),1338,61,31,2446)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.417ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [218,133,95,166,225,225,175,84,83,215,87,40,160,148,183,113,9,197,247,116,18,4,127,36,243,30,88,147,87,169,28,10],\"legalEntityIdCounterparty\": [236,248,68,125,123,49,117,209,20,172,186,213,224,237,240,236,95,65,111,57,12,156,24,234,234,30,208,181,250,154,239,95],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 68569,\"statusDate\": 4800,\"initialExchangeDate\": 15,\"maturityDate\": 4801,\"terminationDate\": 86400,\"purchaseDate\": 2448,\"capitalizationEndDate\": 1532892063,\"cycleAnchorDateOfInterestPayment\": 1461,\"cycleAnchorDateOfRateReset\": 4,\"cycleAnchorDateOfScalingIndex\": 366,\"cycleAnchorDateOfFee\": 95,\"notionalPrincipal\": 149,\"nominalInterestRate\": 89,\"feeAccrued\": 121,\"accruedInterest\": 6,\"rateMultiplier\": 4001,\"rateSpread\": 160,\"feeRate\": 119,\"nextResetRate\": 50,\"penaltyRate\": 111,\"premiumDiscountAtIED\": 361,\"priceAtPurchaseDate\": 901,\"cycleOfInterestPayment\": {\"i\": 39,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 367,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 86401,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 1971,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 256,\"lifeFloor\": 160,\"periodCap\": 1461000,\"periodFloor\": 18}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"218,133,95,166,225,225,175,84,83,215,87,40,160,148,183,113,9,197,247,116,18,4,127,36,243,30,88,147,87,169,28,10\"),stringToBytes32(\"236,248,68,125,123,49,117,209,20,172,186,213,224,237,240,236,95,65,111,57,12,156,24,234,234,30,208,181,250,154,239,95\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,68569,4800,15,4801,86400,2448,1532892063,1461,4,366,95,149,89,121,6,4001,160,119,50,111,361,901,Definitions.IPS(39,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(367,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(86401,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(1971,Definitions.P.H,Definitions.S.LONG,false),256,160,1461000,18)"
            },
            {
              "js": "{\"lastEventTime\": 141,\"contractStatus\": 3,\"timeFromLastEvent\": 4,\"nominalValue\": 18,\"nominalAccrued\": 121,\"feeAccrued\": 901,\"nominalRate\": 151,\"interestScalingMultiplier\": 59,\"nominalScalingMultiplier\": 161,\"contractRoleSign\": 2}",
              "sol": "Definitions.ContractState(141,Definitions.ContractStatus.DF,4,18,121,901,151,59,161,Definitions.ContractRole.LG)"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.423ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [251,149,158,236,22,137,1,189,220,23,115,185,136,154,113,91,159,120,108,217,9,232,232,40,72,137,187,136,60,161,1,192],\"legalEntityIdCounterparty\": [140,229,21,54,9,246,127,117,198,4,64,220,230,89,157,27,70,74,114,163,215,201,25,165,200,205,54,98,153,121,178,45],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 32,\"statusDate\": 4800,\"initialExchangeDate\": 4801,\"maturityDate\": 18,\"terminationDate\": 68570,\"purchaseDate\": 96,\"capitalizationEndDate\": 4000,\"cycleAnchorDateOfInterestPayment\": 121,\"cycleAnchorDateOfRateReset\": 151,\"cycleAnchorDateOfScalingIndex\": 1,\"cycleAnchorDateOfFee\": 120,\"notionalPrincipal\": 10,\"nominalInterestRate\": 359,\"feeAccrued\": 86399,\"accruedInterest\": 160,\"rateMultiplier\": 146098,\"rateSpread\": 12,\"feeRate\": 8,\"nextResetRate\": 31,\"penaltyRate\": 949,\"premiumDiscountAtIED\": 364,\"priceAtPurchaseDate\": 86401,\"cycleOfInterestPayment\": {\"i\": 950,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1532892063,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 159,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 26,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 1461001,\"lifeFloor\": 18,\"periodCap\": 364,\"periodFloor\": 23}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"251,149,158,236,22,137,1,189,220,23,115,185,136,154,113,91,159,120,108,217,9,232,232,40,72,137,187,136,60,161,1,192\"),stringToBytes32(\"140,229,21,54,9,246,127,117,198,4,64,220,230,89,157,27,70,74,114,163,215,201,25,165,200,205,54,98,153,121,178,45\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,32,4800,4801,18,68570,96,4000,121,151,1,120,10,359,86399,160,146098,12,8,31,949,364,86401,Definitions.IPS(950,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(1532892063,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(159,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(26,Definitions.P.Q,Definitions.S.LONG,false),1461001,18,364,23)"
            },
            {
              "js": "{\"lastEventTime\": 1462,\"contractStatus\": 2,\"timeFromLastEvent\": 1969,\"nominalValue\": 4800,\"nominalAccrued\": 159,\"feeAccrued\": 899,\"nominalRate\": 2447,\"interestScalingMultiplier\": 9,\"nominalScalingMultiplier\": 29,\"contractRoleSign\": 5}",
              "sol": "Definitions.ContractState(1462,Definitions.ContractStatus.DQ,1969,4800,159,899,2447,9,29,Definitions.ContractRole.PFL)"
            },
            {
              "js": "{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 61,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 2}",
              "sol": "Definitions.ProtoEvent(899,2447,61,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.AD)"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.432ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [66,189,156,244,214,17,179,225,248,121,144,133,89,246,194,109,127,236,91,0,105,89,35,154,206,158,102,12,190,69,140,49],\"legalEntityIdCounterparty\": [41,244,212,50,160,74,218,116,218,26,244,65,239,70,7,208,65,197,181,113,235,237,77,244,225,81,4,166,131,1,162,109],\"dayCountConvention\": 3,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 86399,\"statusDate\": 65,\"initialExchangeDate\": 401,\"maturityDate\": 86401,\"terminationDate\": 96,\"purchaseDate\": 32,\"capitalizationEndDate\": 24,\"cycleAnchorDateOfInterestPayment\": 4800,\"cycleAnchorDateOfRateReset\": 1532892064,\"cycleAnchorDateOfScalingIndex\": 2448,\"cycleAnchorDateOfFee\": 7,\"notionalPrincipal\": 1460,\"nominalInterestRate\": 90,\"feeAccrued\": 3999,\"accruedInterest\": 18,\"rateMultiplier\": 1970,\"rateSpread\": 31,\"feeRate\": 2448,\"nextResetRate\": 160,\"penaltyRate\": 8,\"premiumDiscountAtIED\": 32,\"priceAtPurchaseDate\": 255,\"cycleOfInterestPayment\": {\"i\": 146096,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2440587,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 50,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 2014223716,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 64,\"lifeFloor\": 146098,\"periodCap\": 68569,\"periodFloor\": 399}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"66,189,156,244,214,17,179,225,248,121,144,133,89,246,194,109,127,236,91,0,105,89,35,154,206,158,102,12,190,69,140,49\"),stringToBytes32(\"41,244,212,50,160,74,218,116,218,26,244,65,239,70,7,208,65,197,181,113,235,237,77,244,225,81,4,166,131,1,162,109\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,86399,65,401,86401,96,32,24,4800,1532892064,2448,7,1460,90,3999,18,1970,31,2448,160,8,32,255,Definitions.IPS(146096,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(2440587,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(50,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(2014223716,Definitions.P.Q,Definitions.S.LONG,true),64,146098,68569,399)"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [179,124,58,188,249,2,131,128,71,205,70,73,59,15,17,40,24,156,105,173,74,30,202,32,102,41,242,206,131,98,133,2],\"legalEntityIdCounterparty\": [22,163,115,51,11,144,153,222,244,6,135,158,161,255,229,154,35,85,182,158,234,146,208,96,129,184,230,95,57,92,156,78],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 1461002,\"statusDate\": 71,\"initialExchangeDate\": 1338,\"maturityDate\": 1970,\"terminationDate\": 366,\"purchaseDate\": 32074,\"capitalizationEndDate\": 68569,\"cycleAnchorDateOfInterestPayment\": 257,\"cycleAnchorDateOfRateReset\": 4000,\"cycleAnchorDateOfScalingIndex\": 364,\"cycleAnchorDateOfFee\": 949,\"notionalPrincipal\": 1338,\"nominalInterestRate\": 61,\"feeAccrued\": 1461,\"accruedInterest\": 31,\"rateMultiplier\": 1,\"rateSpread\": 160,\"feeRate\": 10000,\"nextResetRate\": 63,\"penaltyRate\": 4900,\"premiumDiscountAtIED\": 901,\"priceAtPurchaseDate\": 11,\"cycleOfInterestPayment\": {\"i\": 129,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 9999,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 364,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 40,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 81,\"lifeFloor\": 86400,\"periodCap\": 30,\"periodFloor\": 64}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"179,124,58,188,249,2,131,128,71,205,70,73,59,15,17,40,24,156,105,173,74,30,202,32,102,41,242,206,131,98,133,2\"),stringToBytes32(\"22,163,115,51,11,144,153,222,244,6,135,158,161,255,229,154,35,85,182,158,234,146,208,96,129,184,230,95,57,92,156,78\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,1461002,71,1338,1970,366,32074,68569,257,4000,364,949,1338,61,1461,31,1,160,10000,63,4900,901,11,Definitions.IPS(129,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(9999,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(364,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(40,Definitions.P.W,Definitions.S.SHORT,false),81,86400,30,64)"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [237,74,252,161,42,228,0,133,76,201,24,152,238,128,67,147,236,235,105,47,136,72,219,60,96,159,137,196,159,232,146,33],\"legalEntityIdCounterparty\": [32,109,240,72,111,122,232,126,189,190,113,79,94,91,253,48,95,163,65,159,75,170,25,139,21,185,205,48,11,4,238,102],\"dayCountConvention\": 2,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 32074,\"statusDate\": 4000,\"initialExchangeDate\": 91,\"maturityDate\": 32074,\"terminationDate\": 257,\"purchaseDate\": 364,\"capitalizationEndDate\": 2014223715,\"cycleAnchorDateOfInterestPayment\": 31,\"cycleAnchorDateOfRateReset\": 96,\"cycleAnchorDateOfScalingIndex\": 1971,\"cycleAnchorDateOfFee\": 90,\"notionalPrincipal\": 97,\"nominalInterestRate\": 121,\"feeAccrued\": 68569,\"accruedInterest\": 50,\"rateMultiplier\": 1461,\"rateSpread\": 2440589,\"feeRate\": 29,\"nextResetRate\": 899,\"penaltyRate\": 9999,\"premiumDiscountAtIED\": 20,\"priceAtPurchaseDate\": 1338,\"cycleOfInterestPayment\": {\"i\": 131,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 7,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 129,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 9,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 4899,\"lifeFloor\": 364,\"periodCap\": 367,\"periodFloor\": 1461002}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"237,74,252,161,42,228,0,133,76,201,24,152,238,128,67,147,236,235,105,47,136,72,219,60,96,159,137,196,159,232,146,33\"),stringToBytes32(\"32,109,240,72,111,122,232,126,189,190,113,79,94,91,253,48,95,163,65,159,75,170,25,139,21,185,205,48,11,4,238,102\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,32074,4000,91,32074,257,364,2014223715,31,96,1971,90,97,121,68569,50,1461,2440589,29,899,9999,20,1338,Definitions.IPS(131,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(7,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(129,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(9,Definitions.P.W,Definitions.S.SHORT,true),4899,364,367,1461002)"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [111,51,158,107,220,185,245,174,154,221,225,41,230,179,20,147,25,28,144,7,48,31,125,218,223,21,207,253,118,160,142,150],\"legalEntityIdCounterparty\": [194,52,143,208,230,149,157,35,95,74,242,16,216,8,100,202,44,107,114,74,51,66,182,238,78,152,162,111,157,182,207,175],\"dayCountConvention\": 2,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 32075,\"statusDate\": 4899,\"initialExchangeDate\": 79,\"maturityDate\": 1969,\"terminationDate\": 70,\"purchaseDate\": 4900,\"capitalizationEndDate\": 4899,\"cycleAnchorDateOfInterestPayment\": 2446,\"cycleAnchorDateOfRateReset\": 121,\"cycleAnchorDateOfScalingIndex\": 1461001,\"cycleAnchorDateOfFee\": 8,\"notionalPrincipal\": 63,\"nominalInterestRate\": 51,\"feeAccrued\": 96,\"accruedInterest\": 68569,\"rateMultiplier\": 9999,\"rateSpread\": 68568,\"feeRate\": 1,\"nextResetRate\": 6,\"penaltyRate\": 120,\"premiumDiscountAtIED\": 109,\"priceAtPurchaseDate\": 68568,\"cycleOfInterestPayment\": {\"i\": 1,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 5,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1460,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 70,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 60,\"lifeFloor\": 31,\"periodCap\": 31,\"periodFloor\": 4899}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"111,51,158,107,220,185,245,174,154,221,225,41,230,179,20,147,25,28,144,7,48,31,125,218,223,21,207,253,118,160,142,150\"),stringToBytes32(\"194,52,143,208,230,149,157,35,95,74,242,16,216,8,100,202,44,107,114,74,51,66,182,238,78,152,162,111,157,182,207,175\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,32075,4899,79,1969,70,4900,4899,2446,121,1461001,8,63,51,96,68569,9999,68568,1,6,120,109,68568,Definitions.IPS(1,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(5,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1460,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(70,Definitions.P.H,Definitions.S.SHORT,false),60,31,31,4899)"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [163,93,97,95,236,171,166,182,76,250,89,211,30,85,69,73,162,228,162,48,249,121,33,189,238,5,159,20,156,122,37,122],\"legalEntityIdCounterparty\": [61,162,207,40,49,189,55,52,97,72,55,49,68,76,151,105,246,4,196,232,99,136,155,219,31,22,13,143,248,96,155,48],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 12,\"statusDate\": 28,\"initialExchangeDate\": 59,\"maturityDate\": 4001,\"terminationDate\": 66,\"purchaseDate\": 0,\"capitalizationEndDate\": 1,\"cycleAnchorDateOfInterestPayment\": 161,\"cycleAnchorDateOfRateReset\": 26,\"cycleAnchorDateOfScalingIndex\": 10,\"cycleAnchorDateOfFee\": 1461001,\"notionalPrincipal\": 32075,\"nominalInterestRate\": 23,\"feeAccrued\": 368,\"accruedInterest\": 160,\"rateMultiplier\": 2,\"rateSpread\": 160,\"feeRate\": 401,\"nextResetRate\": 364,\"penaltyRate\": 4899,\"premiumDiscountAtIED\": 86400,\"priceAtPurchaseDate\": 257,\"cycleOfInterestPayment\": {\"i\": 146098,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 40,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 20,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 2,\"lifeFloor\": 2440589,\"periodCap\": 48,\"periodFloor\": 19}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"163,93,97,95,236,171,166,182,76,250,89,211,30,85,69,73,162,228,162,48,249,121,33,189,238,5,159,20,156,122,37,122\"),stringToBytes32(\"61,162,207,40,49,189,55,52,97,72,55,49,68,76,151,105,246,4,196,232,99,136,155,219,31,22,13,143,248,96,155,48\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,12,28,59,4001,66,0,1,161,26,10,1461001,32075,23,368,160,2,160,401,364,4899,86400,257,Definitions.IPS(146098,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(40,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(4,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(20,Definitions.P.M,Definitions.S.LONG,true),2,2440589,48,19)"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [48,233,33,131,30,207,121,42,20,242,228,108,62,238,255,81,104,226,232,31,14,163,140,35,228,179,198,91,222,149,199,90],\"legalEntityIdCounterparty\": [222,52,62,102,165,213,142,125,1,129,212,9,222,146,187,151,12,60,255,211,87,142,167,62,176,203,52,222,23,139,31,248],\"dayCountConvention\": 0,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 1336,\"statusDate\": 10000,\"initialExchangeDate\": 401,\"maturityDate\": 60,\"terminationDate\": 1971,\"purchaseDate\": 119,\"capitalizationEndDate\": 131,\"cycleAnchorDateOfInterestPayment\": 48,\"cycleAnchorDateOfRateReset\": 79,\"cycleAnchorDateOfScalingIndex\": 129,\"cycleAnchorDateOfFee\": 3999,\"notionalPrincipal\": 91,\"nominalInterestRate\": 21,\"feeAccrued\": 2446,\"accruedInterest\": 1532892062,\"rateMultiplier\": 2447,\"rateSpread\": 2440587,\"feeRate\": 1532892063,\"nextResetRate\": 2014223714,\"penaltyRate\": 20,\"premiumDiscountAtIED\": 361,\"priceAtPurchaseDate\": 2446,\"cycleOfInterestPayment\": {\"i\": 68569,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 18,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4801,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 364,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 399,\"lifeFloor\": 63,\"periodCap\": 256,\"periodFloor\": 96}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"48,233,33,131,30,207,121,42,20,242,228,108,62,238,255,81,104,226,232,31,14,163,140,35,228,179,198,91,222,149,199,90\"),stringToBytes32(\"222,52,62,102,165,213,142,125,1,129,212,9,222,146,187,151,12,60,255,211,87,142,167,62,176,203,52,222,23,139,31,248\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,1336,10000,401,60,1971,119,131,48,79,129,3999,91,21,2446,1532892062,2447,2440587,1532892063,2014223714,20,361,2446,Definitions.IPS(68569,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(18,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(4801,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(364,Definitions.P.Q,Definitions.S.LONG,false),399,63,256,96)"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [10,67,60,245,183,106,58,44,128,202,72,182,220,182,91,115,125,137,25,21,62,54,70,216,93,125,78,63,83,230,115,157],\"legalEntityIdCounterparty\": [112,160,247,81,183,197,90,211,224,49,156,86,193,255,53,95,38,62,140,171,69,226,247,155,157,252,63,81,179,224,244,131],\"dayCountConvention\": 1,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 160,\"statusDate\": 365,\"initialExchangeDate\": 86399,\"maturityDate\": 1337,\"terminationDate\": 900,\"purchaseDate\": 101,\"capitalizationEndDate\": 63,\"cycleAnchorDateOfInterestPayment\": 2446,\"cycleAnchorDateOfRateReset\": 86400,\"cycleAnchorDateOfScalingIndex\": 2,\"cycleAnchorDateOfFee\": 4899,\"notionalPrincipal\": 97,\"nominalInterestRate\": 10000,\"feeAccrued\": 100,\"accruedInterest\": 257,\"rateMultiplier\": 399,\"rateSpread\": 30,\"feeRate\": 61,\"nextResetRate\": 68570,\"penaltyRate\": 79,\"premiumDiscountAtIED\": 2014223716,\"priceAtPurchaseDate\": 1461002,\"cycleOfInterestPayment\": {\"i\": 91,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 256,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 69,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2440588,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 110,\"lifeFloor\": 1336,\"periodCap\": 4800,\"periodFloor\": 160}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"10,67,60,245,183,106,58,44,128,202,72,182,220,182,91,115,125,137,25,21,62,54,70,216,93,125,78,63,83,230,115,157\"),stringToBytes32(\"112,160,247,81,183,197,90,211,224,49,156,86,193,255,53,95,38,62,140,171,69,226,247,155,157,252,63,81,179,224,244,131\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,160,365,86399,1337,900,101,63,2446,86400,2,4899,97,10000,100,257,399,30,61,68570,79,2014223716,1461002,Definitions.IPS(91,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(256,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(69,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(2440588,Definitions.P.D,Definitions.S.LONG,true),110,1336,4800,160)"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [0,105,254,253,76,59,90,176,71,24,123,121,248,37,118,79,36,34,245,145,250,140,163,235,220,218,1,191,118,151,196,85],\"legalEntityIdCounterparty\": [58,11,245,201,119,91,34,137,5,54,188,2,6,196,2,1,155,30,87,64,98,48,49,204,84,78,250,125,238,7,187,26],\"dayCountConvention\": 5,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 150,\"statusDate\": 3,\"initialExchangeDate\": 1461000,\"maturityDate\": 50,\"terminationDate\": 949,\"purchaseDate\": 14,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 360,\"cycleAnchorDateOfRateReset\": 91,\"cycleAnchorDateOfScalingIndex\": 1461000,\"cycleAnchorDateOfFee\": 2014223716,\"notionalPrincipal\": 24,\"nominalInterestRate\": 256,\"feeAccrued\": 159,\"accruedInterest\": 901,\"rateMultiplier\": 361,\"rateSpread\": 2446,\"feeRate\": 90,\"nextResetRate\": 160,\"penaltyRate\": 29,\"premiumDiscountAtIED\": 70,\"priceAtPurchaseDate\": 257,\"cycleOfInterestPayment\": {\"i\": 900,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 367,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 99,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 2448,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 49,\"lifeFloor\": 26,\"periodCap\": 1532892062,\"periodFloor\": 364}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"0,105,254,253,76,59,90,176,71,24,123,121,248,37,118,79,36,34,245,145,250,140,163,235,220,218,1,191,118,151,196,85\"),stringToBytes32(\"58,11,245,201,119,91,34,137,5,54,188,2,6,196,2,1,155,30,87,64,98,48,49,204,84,78,250,125,238,7,187,26\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,150,3,1461000,50,949,14,0,360,91,1461000,2014223716,24,256,159,901,361,2446,90,160,29,70,257,Definitions.IPS(900,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(367,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(99,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(2448,Definitions.P.M,Definitions.S.LONG,true),49,26,1532892062,364)"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [131,174,157,147,119,107,84,252,195,233,68,161,9,177,239,148,72,35,35,130,66,33,212,134,35,100,83,180,249,139,32,2],\"legalEntityIdCounterparty\": [99,157,174,204,198,81,229,224,10,32,186,189,196,57,202,103,172,37,28,25,60,188,70,1,194,18,104,177,2,231,62,204],\"dayCountConvention\": 5,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 6,\"statusDate\": 61,\"initialExchangeDate\": 86400,\"maturityDate\": 365,\"terminationDate\": 49,\"purchaseDate\": 27,\"capitalizationEndDate\": 151,\"cycleAnchorDateOfInterestPayment\": 131,\"cycleAnchorDateOfRateReset\": 160,\"cycleAnchorDateOfScalingIndex\": 2447,\"cycleAnchorDateOfFee\": 13,\"notionalPrincipal\": 27,\"nominalInterestRate\": 111,\"feeAccrued\": 89,\"accruedInterest\": 160,\"rateMultiplier\": 129,\"rateSpread\": 131,\"feeRate\": 365,\"nextResetRate\": 32076,\"penaltyRate\": 13,\"premiumDiscountAtIED\": 8,\"priceAtPurchaseDate\": 32,\"cycleOfInterestPayment\": {\"i\": 365,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 949,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1532892063,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 20,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 2440587,\"lifeFloor\": 2014223716,\"periodCap\": 949,\"periodFloor\": 10}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"131,174,157,147,119,107,84,252,195,233,68,161,9,177,239,148,72,35,35,130,66,33,212,134,35,100,83,180,249,139,32,2\"),stringToBytes32(\"99,157,174,204,198,81,229,224,10,32,186,189,196,57,202,103,172,37,28,25,60,188,70,1,194,18,104,177,2,231,62,204\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,6,61,86400,365,49,27,151,131,160,2447,13,27,111,89,160,129,131,365,32076,13,8,32,Definitions.IPS(365,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(949,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(1532892063,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(20,Definitions.P.M,Definitions.S.LONG,true),2440587,2014223716,949,10)"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [75,58,234,85,121,136,213,99,25,151,201,36,61,31,131,254,70,117,108,28,224,245,73,217,213,71,191,31,47,162,153,64],\"legalEntityIdCounterparty\": [215,253,189,45,9,244,98,223,179,222,54,129,62,19,122,50,240,126,214,73,71,212,232,190,185,202,195,86,219,29,84,83],\"dayCountConvention\": 5,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 4000,\"statusDate\": 2,\"initialExchangeDate\": 159,\"maturityDate\": 19,\"terminationDate\": 361,\"purchaseDate\": 4,\"capitalizationEndDate\": 68569,\"cycleAnchorDateOfInterestPayment\": 4901,\"cycleAnchorDateOfRateReset\": 359,\"cycleAnchorDateOfScalingIndex\": 109,\"cycleAnchorDateOfFee\": 21,\"notionalPrincipal\": 4900,\"nominalInterestRate\": 0,\"feeAccrued\": 19,\"accruedInterest\": 25,\"rateMultiplier\": 139,\"rateSpread\": 4799,\"feeRate\": 48,\"nextResetRate\": 131,\"penaltyRate\": 130,\"premiumDiscountAtIED\": 2440587,\"priceAtPurchaseDate\": 146098,\"cycleOfInterestPayment\": {\"i\": 48,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1461,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4000,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 69,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 4800,\"lifeFloor\": 131,\"periodCap\": 16,\"periodFloor\": 17}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"75,58,234,85,121,136,213,99,25,151,201,36,61,31,131,254,70,117,108,28,224,245,73,217,213,71,191,31,47,162,153,64\"),stringToBytes32(\"215,253,189,45,9,244,98,223,179,222,54,129,62,19,122,50,240,126,214,73,71,212,232,190,185,202,195,86,219,29,84,83\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,4000,2,159,19,361,4,68569,4901,359,109,21,4900,0,19,25,139,4799,48,131,130,2440587,146098,Definitions.IPS(48,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(1461,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(4000,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(69,Definitions.P.D,Definitions.S.SHORT,false),4800,131,16,17)"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [77,154,87,143,232,50,131,211,184,188,45,58,124,138,95,149,42,145,78,72,86,139,94,168,190,33,114,166,5,62,59,216],\"legalEntityIdCounterparty\": [203,154,184,249,89,153,222,94,158,93,216,26,151,116,66,45,64,217,129,63,3,29,234,55,13,80,61,208,198,146,121,111],\"dayCountConvention\": 0,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 32074,\"statusDate\": 361,\"initialExchangeDate\": 66,\"maturityDate\": 30,\"terminationDate\": 400,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 95,\"cycleAnchorDateOfRateReset\": 161,\"cycleAnchorDateOfScalingIndex\": 1337,\"cycleAnchorDateOfFee\": 86401,\"notionalPrincipal\": 4901,\"nominalInterestRate\": 0,\"feeAccrued\": 1461,\"accruedInterest\": 1969,\"rateMultiplier\": 68569,\"rateSpread\": 110,\"feeRate\": 2446,\"nextResetRate\": 140,\"penaltyRate\": 61,\"premiumDiscountAtIED\": 16,\"priceAtPurchaseDate\": 131,\"cycleOfInterestPayment\": {\"i\": 50,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4901,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 26,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 97,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 27,\"lifeFloor\": 86400,\"periodCap\": 32074,\"periodFloor\": 14}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"77,154,87,143,232,50,131,211,184,188,45,58,124,138,95,149,42,145,78,72,86,139,94,168,190,33,114,166,5,62,59,216\"),stringToBytes32(\"203,154,184,249,89,153,222,94,158,93,216,26,151,116,66,45,64,217,129,63,3,29,234,55,13,80,61,208,198,146,121,111\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,32074,361,66,30,400,0,0,95,161,1337,86401,4901,0,1461,1969,68569,110,2446,140,61,16,131,Definitions.IPS(50,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(4901,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(26,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(97,Definitions.P.H,Definitions.S.LONG,true),27,86400,32074,14)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [18,70,240,1,162,193,229,110,158,20,116,84,76,28,43,100,255,70,200,226,241,44,15,63,14,145,181,157,251,102,14,220],\"legalEntityIdCounterparty\": [30,255,226,234,203,237,166,3,145,255,12,148,56,206,173,219,114,109,62,110,125,10,95,118,207,145,154,179,24,86,36,55],\"dayCountConvention\": 5,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 10,\"statusDate\": 1,\"initialExchangeDate\": 1970,\"maturityDate\": 365,\"terminationDate\": 1532892063,\"purchaseDate\": 79,\"capitalizationEndDate\": 4800,\"cycleAnchorDateOfInterestPayment\": 4899,\"cycleAnchorDateOfRateReset\": 25,\"cycleAnchorDateOfScalingIndex\": 26,\"cycleAnchorDateOfFee\": 40,\"notionalPrincipal\": -1,\"nominalInterestRate\": 8,\"feeAccrued\": 139,\"accruedInterest\": 366,\"rateMultiplier\": 359,\"rateSpread\": 2014223715,\"feeRate\": 9,\"nextResetRate\": 27,\"penaltyRate\": 49,\"premiumDiscountAtIED\": 949,\"priceAtPurchaseDate\": 364,\"cycleOfInterestPayment\": {\"i\": 4899,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 160,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 49,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 366,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 150,\"lifeFloor\": 151,\"periodCap\": 49,\"periodFloor\": 69}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"18,70,240,1,162,193,229,110,158,20,116,84,76,28,43,100,255,70,200,226,241,44,15,63,14,145,181,157,251,102,14,220\"),stringToBytes32(\"30,255,226,234,203,237,166,3,145,255,12,148,56,206,173,219,114,109,62,110,125,10,95,118,207,145,154,179,24,86,36,55\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,10,1,1970,365,1532892063,79,4800,4899,25,26,40,-1,8,139,366,359,2014223715,9,27,49,949,364,Definitions.IPS(4899,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(160,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(49,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(366,Definitions.P.Q,Definitions.S.SHORT,true),150,151,49,69)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [0,68,243,150,253,99,107,46,153,38,129,83,190,225,188,57,193,63,205,153,69,157,117,248,178,146,132,51,35,198,137,141],\"legalEntityIdCounterparty\": [129,143,111,122,102,187,81,170,53,69,20,82,46,241,237,92,196,111,175,89,227,226,171,201,54,99,220,9,1,178,54,196],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 100,\"statusDate\": 254,\"initialExchangeDate\": 2014223714,\"maturityDate\": 2014223716,\"terminationDate\": 950,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4901,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 4800,\"cycleAnchorDateOfFee\": 1338,\"notionalPrincipal\": 31,\"nominalInterestRate\": 0,\"feeAccrued\": 4900,\"accruedInterest\": 71,\"rateMultiplier\": 79,\"rateSpread\": 91,\"feeRate\": 26,\"nextResetRate\": 254,\"penaltyRate\": 3,\"premiumDiscountAtIED\": 29,\"priceAtPurchaseDate\": 4800,\"cycleOfInterestPayment\": {\"i\": 1461000,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 99,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 0,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 120,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 109,\"lifeFloor\": 32,\"periodCap\": 2014223716,\"periodFloor\": 151}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"0,68,243,150,253,99,107,46,153,38,129,83,190,225,188,57,193,63,205,153,69,157,117,248,178,146,132,51,35,198,137,141\"),stringToBytes32(\"129,143,111,122,102,187,81,170,53,69,20,82,46,241,237,92,196,111,175,89,227,226,171,201,54,99,220,9,1,178,54,196\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.A,100,254,2014223714,2014223716,950,0,0,4901,0,4800,1338,31,0,4900,71,79,91,26,254,3,29,4800,Definitions.IPS(1461000,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(99,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(0,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(120,Definitions.P.M,Definitions.S.LONG,false),109,32,2014223716,151)"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [247,39,5,42,222,232,33,207,48,46,130,129,37,50,131,82,206,254,40,32,201,157,55,141,8,54,243,233,111,92,204,168],\"legalEntityIdCounterparty\": [95,21,102,205,173,139,54,240,157,173,82,58,250,242,145,42,244,200,191,66,17,75,233,249,239,38,23,193,71,103,110,60],\"dayCountConvention\": 6,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 51,\"statusDate\": 1969,\"initialExchangeDate\": 20,\"maturityDate\": 149,\"terminationDate\": 10001,\"purchaseDate\": 16,\"capitalizationEndDate\": 399,\"cycleAnchorDateOfInterestPayment\": 1532892062,\"cycleAnchorDateOfRateReset\": 41,\"cycleAnchorDateOfScalingIndex\": 1461001,\"cycleAnchorDateOfFee\": 361,\"notionalPrincipal\": 950,\"nominalInterestRate\": 81,\"feeAccrued\": 120,\"accruedInterest\": 9999,\"rateMultiplier\": 1532892062,\"rateSpread\": 69,\"feeRate\": 951,\"nextResetRate\": 1460,\"penaltyRate\": 949,\"premiumDiscountAtIED\": 86401,\"priceAtPurchaseDate\": 141,\"cycleOfInterestPayment\": {\"i\": 130,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 900,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 11,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 100,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 68568,\"lifeFloor\": 86400,\"periodCap\": 1336,\"periodFloor\": 18}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"247,39,5,42,222,232,33,207,48,46,130,129,37,50,131,82,206,254,40,32,201,157,55,141,8,54,243,233,111,92,204,168\"),stringToBytes32(\"95,21,102,205,173,139,54,240,157,173,82,58,250,242,145,42,244,200,191,66,17,75,233,249,239,38,23,193,71,103,110,60\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.A,51,1969,20,149,10001,16,399,1532892062,41,1461001,361,950,81,120,9999,1532892062,69,951,1460,949,86401,141,Definitions.IPS(130,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(900,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(11,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(100,Definitions.P.Q,Definitions.S.SHORT,false),68568,86400,1336,18)"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [62,127,57,78,197,23,109,181,6,207,239,162,239,195,164,42,112,133,83,188,39,97,77,179,39,157,232,58,103,0,96,122],\"legalEntityIdCounterparty\": [172,237,202,157,153,22,168,30,105,139,92,58,167,232,213,192,176,70,42,249,64,163,115,223,30,84,41,99,209,43,35,149],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 64,\"statusDate\": 4000,\"initialExchangeDate\": 109,\"maturityDate\": 399,\"terminationDate\": 1971,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 17,\"cycleAnchorDateOfRateReset\": 28,\"cycleAnchorDateOfScalingIndex\": 150,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 86401,\"nominalInterestRate\": 0,\"feeAccrued\": 48,\"accruedInterest\": 146096,\"rateMultiplier\": 150,\"rateSpread\": 8,\"feeRate\": 1532892062,\"nextResetRate\": 257,\"penaltyRate\": 2440587,\"premiumDiscountAtIED\": 97,\"priceAtPurchaseDate\": 99,\"cycleOfInterestPayment\": {\"i\": 10001,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 68570,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 160,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 257,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 2440587,\"lifeFloor\": 79,\"periodCap\": 2014223715,\"periodFloor\": 86399}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"62,127,57,78,197,23,109,181,6,207,239,162,239,195,164,42,112,133,83,188,39,97,77,179,39,157,232,58,103,0,96,122\"),stringToBytes32(\"172,237,202,157,153,22,168,30,105,139,92,58,167,232,213,192,176,70,42,249,64,163,115,223,30,84,41,99,209,43,35,149\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,64,4000,109,399,1971,0,0,17,28,150,0,86401,0,48,146096,150,8,1532892062,257,2440587,97,99,Definitions.IPS(10001,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(68570,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(160,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(257,Definitions.P.H,Definitions.S.SHORT,false),2440587,79,2014223715,86399)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [166,202,75,234,202,59,17,76,229,100,28,59,143,184,154,129,129,179,170,20,169,111,89,233,233,85,226,132,99,196,89,209],\"legalEntityIdCounterparty\": [72,121,232,223,225,162,25,65,179,177,252,242,72,158,107,121,202,217,163,32,66,104,127,8,12,219,216,157,44,108,237,238],\"dayCountConvention\": 6,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 4799,\"statusDate\": 1532892064,\"initialExchangeDate\": 131,\"maturityDate\": 65,\"terminationDate\": 949,\"purchaseDate\": 61,\"capitalizationEndDate\": 1969,\"cycleAnchorDateOfInterestPayment\": 950,\"cycleAnchorDateOfRateReset\": 399,\"cycleAnchorDateOfScalingIndex\": 21,\"cycleAnchorDateOfFee\": 3,\"notionalPrincipal\": 109,\"nominalInterestRate\": 1461001,\"feeAccrued\": 2440587,\"accruedInterest\": 364,\"rateMultiplier\": 64,\"rateSpread\": 160,\"feeRate\": 1,\"nextResetRate\": 121,\"penaltyRate\": 17,\"premiumDiscountAtIED\": 60,\"priceAtPurchaseDate\": 90,\"cycleOfInterestPayment\": {\"i\": 86400,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 69,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 50,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 359,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 159,\"lifeFloor\": 32075,\"periodCap\": 1460,\"periodFloor\": 51}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"166,202,75,234,202,59,17,76,229,100,28,59,143,184,154,129,129,179,170,20,169,111,89,233,233,85,226,132,99,196,89,209\"),stringToBytes32(\"72,121,232,223,225,162,25,65,179,177,252,242,72,158,107,121,202,217,163,32,66,104,127,8,12,219,216,157,44,108,237,238\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,4799,1532892064,131,65,949,61,1969,950,399,21,3,109,1461001,2440587,364,64,160,1,121,17,60,90,Definitions.IPS(86400,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(69,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(50,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(359,Definitions.P.H,Definitions.S.SHORT,false),159,32075,1460,51)"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [90,32,163,0,220,166,27,177,93,234,15,237,162,104,227,229,3,97,9,20,199,109,240,100,240,168,202,60,58,234,240,29],\"legalEntityIdCounterparty\": [4,91,178,161,37,214,238,202,34,233,252,194,142,211,86,201,211,7,83,177,52,216,172,0,204,198,168,211,195,105,120,51],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 4900,\"statusDate\": 111,\"initialExchangeDate\": 15,\"maturityDate\": 39,\"terminationDate\": 4799,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 364,\"cycleAnchorDateOfRateReset\": 139,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 51,\"notionalPrincipal\": 367,\"nominalInterestRate\": 0,\"feeAccrued\": 12,\"accruedInterest\": 364,\"rateMultiplier\": 4800,\"rateSpread\": 1460,\"feeRate\": 86399,\"nextResetRate\": 100,\"penaltyRate\": 2440587,\"premiumDiscountAtIED\": 26,\"priceAtPurchaseDate\": 140,\"cycleOfInterestPayment\": {\"i\": 86401,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 950,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4000,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 86400,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 368,\"lifeFloor\": 2447,\"periodCap\": 2448,\"periodFloor\": 96}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"90,32,163,0,220,166,27,177,93,234,15,237,162,104,227,229,3,97,9,20,199,109,240,100,240,168,202,60,58,234,240,29\"),stringToBytes32(\"4,91,178,161,37,214,238,202,34,233,252,194,142,211,86,201,211,7,83,177,52,216,172,0,204,198,168,211,195,105,120,51\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,4900,111,15,39,4799,0,0,364,139,0,51,367,0,12,364,4800,1460,86399,100,2440587,26,140,Definitions.IPS(86401,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(950,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(4000,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(86400,Definitions.P.Y,Definitions.S.LONG,true),368,2447,2448,96)"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [43,49,208,26,43,115,115,95,127,22,56,130,44,208,22,84,52,169,215,95,241,51,225,62,127,102,199,223,63,254,253,50],\"legalEntityIdCounterparty\": [97,41,162,112,102,241,170,21,35,176,207,85,104,28,249,238,33,196,80,237,164,3,72,68,86,173,14,253,59,126,201,49],\"dayCountConvention\": 5,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 1461002,\"statusDate\": 69,\"initialExchangeDate\": 41,\"maturityDate\": 2446,\"terminationDate\": 23,\"purchaseDate\": 1,\"capitalizationEndDate\": 27,\"cycleAnchorDateOfInterestPayment\": 2014223716,\"cycleAnchorDateOfRateReset\": 109,\"cycleAnchorDateOfScalingIndex\": 1461002,\"cycleAnchorDateOfFee\": 95,\"notionalPrincipal\": 110,\"nominalInterestRate\": 161,\"feeAccrued\": 1,\"accruedInterest\": 4800,\"rateMultiplier\": 41,\"rateSpread\": 9999,\"feeRate\": 361,\"nextResetRate\": 2440589,\"penaltyRate\": 59,\"premiumDiscountAtIED\": 2446,\"priceAtPurchaseDate\": 49,\"cycleOfInterestPayment\": {\"i\": 80,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2014223716,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 41,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 140,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 899,\"lifeFloor\": 31,\"periodCap\": 4001,\"periodFloor\": 68568}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"43,49,208,26,43,115,115,95,127,22,56,130,44,208,22,84,52,169,215,95,241,51,225,62,127,102,199,223,63,254,253,50\"),stringToBytes32(\"97,41,162,112,102,241,170,21,35,176,207,85,104,28,249,238,33,196,80,237,164,3,72,68,86,173,14,253,59,126,201,49\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,1461002,69,41,2446,23,1,27,2014223716,109,1461002,95,110,161,1,4800,41,9999,361,2440589,59,2446,49,Definitions.IPS(80,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(2014223716,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(41,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(140,Definitions.P.D,Definitions.S.SHORT,true),899,31,4001,68568)"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [252,143,29,103,181,104,118,105,199,155,7,185,24,129,210,237,131,191,31,143,212,95,247,177,48,200,108,169,224,21,245,166],\"legalEntityIdCounterparty\": [155,189,56,68,41,15,209,68,113,13,248,149,105,1,44,103,61,58,30,168,254,41,7,27,123,209,128,99,167,132,239,70],\"dayCountConvention\": 6,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 2448,\"statusDate\": 1460,\"initialExchangeDate\": 4900,\"maturityDate\": 4799,\"terminationDate\": 367,\"purchaseDate\": 1461000,\"capitalizationEndDate\": 1461001,\"cycleAnchorDateOfInterestPayment\": 13,\"cycleAnchorDateOfRateReset\": 64,\"cycleAnchorDateOfScalingIndex\": 146097,\"cycleAnchorDateOfFee\": 49,\"notionalPrincipal\": 13,\"nominalInterestRate\": 1336,\"feeAccrued\": 29,\"accruedInterest\": 4001,\"rateMultiplier\": 2014223715,\"rateSpread\": 2446,\"feeRate\": 86399,\"nextResetRate\": 257,\"penaltyRate\": 100,\"premiumDiscountAtIED\": 24,\"priceAtPurchaseDate\": 4801,\"cycleOfInterestPayment\": {\"i\": 1532892062,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 63,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 97,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1460,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 1,\"lifeFloor\": 151,\"periodCap\": 399,\"periodFloor\": 97}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"252,143,29,103,181,104,118,105,199,155,7,185,24,129,210,237,131,191,31,143,212,95,247,177,48,200,108,169,224,21,245,166\"),stringToBytes32(\"155,189,56,68,41,15,209,68,113,13,248,149,105,1,44,103,61,58,30,168,254,41,7,27,123,209,128,99,167,132,239,70\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,2448,1460,4900,4799,367,1461000,1461001,13,64,146097,49,13,1336,29,4001,2014223715,2446,86399,257,100,24,4801,Definitions.IPS(1532892062,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(63,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(97,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(1460,Definitions.P.W,Definitions.S.SHORT,false),1,151,399,97)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [202,198,241,141,211,174,73,208,25,118,254,192,250,79,96,58,42,140,50,213,217,185,46,209,216,166,6,232,117,207,247,253],\"legalEntityIdCounterparty\": [1,94,136,105,130,93,216,168,119,93,172,217,166,166,144,182,105,151,122,215,230,103,116,250,62,232,137,179,76,15,105,97],\"dayCountConvention\": 2,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 1971,\"statusDate\": 365,\"initialExchangeDate\": 96,\"maturityDate\": 360,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 109,\"cycleAnchorDateOfRateReset\": 4900,\"cycleAnchorDateOfScalingIndex\": 131,\"cycleAnchorDateOfFee\": 4800,\"notionalPrincipal\": 146096,\"nominalInterestRate\": 0,\"feeAccrued\": 255,\"accruedInterest\": 140,\"rateMultiplier\": 32075,\"rateSpread\": 70,\"feeRate\": 4000,\"nextResetRate\": 101,\"penaltyRate\": 28,\"premiumDiscountAtIED\": 32076,\"priceAtPurchaseDate\": 3,\"cycleOfInterestPayment\": {\"i\": 69,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 68568,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 39,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 131,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 401,\"lifeFloor\": 1336,\"periodCap\": 1,\"periodFloor\": 950}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"202,198,241,141,211,174,73,208,25,118,254,192,250,79,96,58,42,140,50,213,217,185,46,209,216,166,6,232,117,207,247,253\"),stringToBytes32(\"1,94,136,105,130,93,216,168,119,93,172,217,166,166,144,182,105,151,122,215,230,103,116,250,62,232,137,179,76,15,105,97\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,1971,365,96,360,0,0,0,109,4900,131,4800,146096,0,255,140,32075,70,4000,101,28,32076,3,Definitions.IPS(69,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(68568,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(39,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(131,Definitions.P.Y,Definitions.S.LONG,false),401,1336,1,950)"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [165,40,251,116,237,69,144,255,148,12,83,210,47,78,91,112,127,235,146,110,212,146,207,32,18,54,46,57,26,145,218,39],\"legalEntityIdCounterparty\": [177,21,38,100,50,164,223,144,246,78,198,125,56,41,241,239,104,57,211,191,63,140,71,115,202,204,17,221,27,200,44,115],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 95,\"statusDate\": 146097,\"initialExchangeDate\": 71,\"maturityDate\": 1336,\"terminationDate\": 121,\"purchaseDate\": 141,\"capitalizationEndDate\": 69,\"cycleAnchorDateOfInterestPayment\": 1532892064,\"cycleAnchorDateOfRateReset\": 8,\"cycleAnchorDateOfScalingIndex\": 66,\"cycleAnchorDateOfFee\": 130,\"notionalPrincipal\": 1970,\"nominalInterestRate\": 901,\"feeAccrued\": 900,\"accruedInterest\": 16,\"rateMultiplier\": 13,\"rateSpread\": 4001,\"feeRate\": 24,\"nextResetRate\": 130,\"penaltyRate\": 2448,\"premiumDiscountAtIED\": 1,\"priceAtPurchaseDate\": 89,\"cycleOfInterestPayment\": {\"i\": 32074,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 161,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 360,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1969,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 39,\"lifeFloor\": 99,\"periodCap\": 951,\"periodFloor\": 40}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"165,40,251,116,237,69,144,255,148,12,83,210,47,78,91,112,127,235,146,110,212,146,207,32,18,54,46,57,26,145,218,39\"),stringToBytes32(\"177,21,38,100,50,164,223,144,246,78,198,125,56,41,241,239,104,57,211,191,63,140,71,115,202,204,17,221,27,200,44,115\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.N,95,146097,71,1336,121,141,69,1532892064,8,66,130,1970,901,900,16,13,4001,24,130,2448,1,89,Definitions.IPS(32074,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(161,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(360,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(1969,Definitions.P.M,Definitions.S.SHORT,true),39,99,951,40)"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [34,188,239,167,113,33,195,64,9,85,170,168,147,138,232,76,82,152,26,73,103,134,204,6,167,113,26,1,25,56,203,99],\"legalEntityIdCounterparty\": [239,40,71,94,203,162,198,138,111,238,129,186,219,65,77,135,42,76,88,180,10,228,32,171,91,124,152,86,169,229,203,229],\"dayCountConvention\": 3,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 901,\"statusDate\": 1460,\"initialExchangeDate\": 32076,\"maturityDate\": 361,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 2440588,\"cycleAnchorDateOfRateReset\": 4,\"cycleAnchorDateOfScalingIndex\": 901,\"cycleAnchorDateOfFee\": 140,\"notionalPrincipal\": 146096,\"nominalInterestRate\": 0,\"feeAccrued\": 50,\"accruedInterest\": 5,\"rateMultiplier\": 4799,\"rateSpread\": 81,\"feeRate\": 69,\"nextResetRate\": 4901,\"penaltyRate\": 111,\"premiumDiscountAtIED\": 4000,\"priceAtPurchaseDate\": 71,\"cycleOfInterestPayment\": {\"i\": 2446,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1532892063,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 2014223714,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 70,\"lifeFloor\": 4900,\"periodCap\": 160,\"periodFloor\": 2014223715}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"34,188,239,167,113,33,195,64,9,85,170,168,147,138,232,76,82,152,26,73,103,134,204,6,167,113,26,1,25,56,203,99\"),stringToBytes32(\"239,40,71,94,203,162,198,138,111,238,129,186,219,65,77,135,42,76,88,180,10,228,32,171,91,124,152,86,169,229,203,229\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,901,1460,32076,361,0,0,0,2440588,4,901,140,146096,0,50,5,4799,81,69,4901,111,4000,71,Definitions.IPS(2446,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(1532892063,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(4,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(2014223714,Definitions.P.M,Definitions.S.LONG,true),70,4900,160,2014223715)"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.486ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:27:36.509ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}