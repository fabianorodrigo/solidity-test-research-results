,{
  "2020-11-13T04:42:49.441ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "13",
                "sol": "13"
              },
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:42:49.442ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.443ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.443ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.444ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.444ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.446ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month <= 0",
            "year < 1970"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month<=0,year<1970",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.449ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "hour >= 24",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour>=24,FunctionCall==true",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.452ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.453ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.453ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.453ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.454ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.455ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.458ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.458ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.458ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.459ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.460ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.460ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.461ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.461ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.462ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.462ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.462ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.463ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.463ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.464ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.464ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.465ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.465ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.465ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.466ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.466ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1971,
                "sol": 1971
              },
              {
                "js": "1970",
                "sol": "1970"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:42:49.467ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2440588,
                "sol": 2440588
              },
              {
                "js": "2440587",
                "sol": "2440587"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:42:49.468ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4800,
                "sol": 4800
              },
              {
                "js": "4799",
                "sol": "4799"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:42:49.469ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223715,
                "sol": 2014223715
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:42:49.470ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 52,
                "sol": 52
              },
              {
                "js": "51",
                "sol": "51"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:42:49.470ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 151,
                "sol": 151
              },
              {
                "js": "150",
                "sol": "150"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:42:49.472ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.474ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "24",
                "sol": "24"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:42:49.477ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractRole.ST"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.ContractRole.RFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.482ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "63",
                "sol": "63"
              },
              {
                "js": 62,
                "sol": 62
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1969",
                "sol": "1969"
              },
              {
                "js": 1968,
                "sol": 1968
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1461002",
                "sol": "1461002"
              },
              {
                "js": 1461001,
                "sol": 1461001
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": 5,
              "sol": "Definitions.DayCountConvention._30_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "364",
                "sol": "364"
              },
              {
                "js": 363,
                "sol": 363
              },
              {
                "js": 5,
                "sol": "Definitions.DayCountConvention._30_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:42:49.487ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.488ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.488ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.489ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.490ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{\"i\": 1337,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1337,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{\"i\": 101,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(101,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{\"i\": 2014223716,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(2014223716,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{\"i\": 96,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(96,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.494ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.494ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.496ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractStatus.PF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.499ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.503ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.507ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.507ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.512ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1532892062,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1532892062,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 359,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(359,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 63,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(63,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 29,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(29,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 1532892062,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1532892062,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 139,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(139,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 111,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.518ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{\"i\": 1971,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1971,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{\"i\": 18,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(18,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{\"i\": 140,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(140,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{\"i\": 359,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(359,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{\"i\": 1338,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1338,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{\"i\": 20,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(20,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{\"i\": 359,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(359,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{\"i\": 255,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(255,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{\"i\": 359,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(359,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.526ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 901,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(901,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 1337,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1337,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 121,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(121,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 139,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(139,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 7,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(7,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 2448,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2448,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 39,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.529ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 146098,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 2,\"stfType\": 5},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 66,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 7},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 2446,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 949,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 11},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 149,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 1},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 951,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 11},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 2447,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 5},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 16,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 7},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 20,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 16},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 365,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 14},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 1338,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 7},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 146097,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 13},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 10001,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 0},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 119,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 2447,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 2},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 950,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 18},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 131,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 1,\"stfType\": 10},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 255,\"eventType\": 18,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 18},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 400,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 1},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 4899,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 4},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 1969,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 5,\"stfType\": 12},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 359,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 9},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 359,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 10},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 66,\"eventType\": 13,\"currency\": accounts[6],\"pofType\": 15,\"stfType\": 19},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 1460,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 2},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 2448,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 17,\"stfType\": 12},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 1971,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 19},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 28,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 16},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 86399,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 1},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 4799,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 15},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 81,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 17,\"stfType\": 6},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 32076,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 7},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 899,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 5},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 146097,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 19},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 5,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 11},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 949,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 16},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 95,\"eventType\": 2,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 2},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 368,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 14,\"stfType\": 5},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 139,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 4},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 4800,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 1},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 66,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 6},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 30,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 4901,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 17},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 1,\"eventType\": 4,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 359,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 20},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 9,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 19},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 2014223714,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 14},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 254,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 13},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 4799,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 8},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 10000,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 9},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 4800,\"eventType\": 17,\"currency\": accounts[6],\"pofType\": 12,\"stfType\": 11},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 13,\"eventType\": 14,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 1},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 90,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 4},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 70,\"eventType\": 18,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 14},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 23,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 8},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 364,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 17},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 4900,\"eventType\": 5,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 7},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 4901,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 18},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 2,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 1,\"stfType\": 10},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 90,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 3},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 18,\"eventType\": 12,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 5},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 69,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 9},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 25,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 9},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 949,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 6,\"stfType\": 14}]",
              "sol": "[Definitions.ProtoEvent(24,2448,146098,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PR),Definitions.ProtoEvent(1462,96,66,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PY),Definitions.ProtoEvent(257,21,2446,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(32076,25,949,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCI),Definitions.ProtoEvent(1971,3,149,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.MD),Definitions.ProtoEvent(130,23,951,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCI),Definitions.ProtoEvent(1,39,2447,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PR),Definitions.ProtoEvent(1969,13,16,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PY),Definitions.ProtoEvent(1461001,4800,20,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.DV),Definitions.ProtoEvent(79,141,365,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SC),Definitions.ProtoEvent(365,399,1338,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PY),Definitions.ProtoEvent(129,3999,146097,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RRY),Definitions.ProtoEvent(161,4,10001,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SD),Definitions.ProtoEvent(951,1461002,119,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(139,4799,2447,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.AD),Definitions.ProtoEvent(60,1532892063,950,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCB),Definitions.ProtoEvent(146096,65,131,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.TD),Definitions.ProtoEvent(5,4799,255,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IPCB),Definitions.ProtoEvent(4899,255,400,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.MD),Definitions.ProtoEvent(4799,18,4899,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IP),Definitions.ProtoEvent(3999,111,1969,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RR),Definitions.ProtoEvent(61,131,359,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PRD),Definitions.ProtoEvent(28,1970,359,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.TD),Definitions.ProtoEvent(1,16,66,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.STD),Definitions.ProtoEvent(1337,26,1460,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.AD),Definitions.ProtoEvent(86400,160,2448,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RR),Definitions.ProtoEvent(365,70,1971,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.STD),Definitions.ProtoEvent(9999,2448,28,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.DV),Definitions.ProtoEvent(15,1971,86399,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MD),Definitions.ProtoEvent(2446,4001,4799,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.CD),Definitions.ProtoEvent(30,4001,81,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PP),Definitions.ProtoEvent(10,89,32076,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PY),Definitions.ProtoEvent(32075,29,899,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PR),Definitions.ProtoEvent(1461000,365,146097,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.STD),Definitions.ProtoEvent(15,2,5,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCI),Definitions.ProtoEvent(129,1532892063,949,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.DV),Definitions.ProtoEvent(359,4900,95,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.AD),Definitions.ProtoEvent(86399,86399,368,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PR),Definitions.ProtoEvent(24,120,139,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IP),Definitions.ProtoEvent(63,2440587,4800,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.MD),Definitions.ProtoEvent(2014223714,29,66,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PP),Definitions.ProtoEvent(1337,26,30,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(401,10,4901,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MR),Definitions.ProtoEvent(99,59,1,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(1461,359,359,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.Child),Definitions.ProtoEvent(900,146098,9,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.STD),Definitions.ProtoEvent(140,10,2014223714,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SC),Definitions.ProtoEvent(71,13,254,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RRY),Definitions.ProtoEvent(3,60,4799,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.FP),Definitions.ProtoEvent(900,1461,10000,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PRD),Definitions.ProtoEvent(367,1338,4800,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCI),Definitions.ProtoEvent(71,139,13,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MD),Definitions.ProtoEvent(120,4800,90,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IP),Definitions.ProtoEvent(10000,110,70,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SC),Definitions.ProtoEvent(7,359,23,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.FP),Definitions.ProtoEvent(121,110,364,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MR),Definitions.ProtoEvent(16,0,4900,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PY),Definitions.ProtoEvent(49,68570,4901,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCB),Definitions.ProtoEvent(111,139,2,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.TD),Definitions.ProtoEvent(86400,1461001,90,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IED),Definitions.ProtoEvent(255,29,18,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PR),Definitions.ProtoEvent(70,99,69,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PRD),Definitions.ProtoEvent(70,121,25,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PRD),Definitions.ProtoEvent(24,949,949,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SC)]"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.540ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 80,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 1},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 7,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 0},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 1,\"eventType\": 5,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 20},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 3999,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 14},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 119,\"eventType\": 20,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 5},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 111,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 8},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 50,\"eventType\": 18,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 15},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 60,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 90,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 4},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 1337,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 8},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 365,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 0},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 151,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 10},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 4900,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 160,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 19},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 2440587,\"eventType\": 9,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 367,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 9},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 1336,\"eventType\": 18,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 5},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 949,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 16},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 39,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 11},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 367,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 17},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 68569,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 19},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 23,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 16},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 100,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 16},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 89,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 1},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 48,\"eventType\": 16,\"currency\": accounts[2],\"pofType\": 6,\"stfType\": 6},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 2014223715,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 13,\"stfType\": 2},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 1970,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 14},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 1338,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 2,\"stfType\": 20},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 2,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 6},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 1969,\"eventType\": 6,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 950,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 14},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 9999,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 3},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 18,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 6,\"stfType\": 20},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 141,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 14},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 1338,\"eventType\": 2,\"currency\": accounts[4],\"pofType\": 14,\"stfType\": 9},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 97,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 256,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 149,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 6},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 140,\"eventType\": 16,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 0},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 361,\"eventType\": 9,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 1337,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 12,\"stfType\": 18},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 361,\"eventType\": 20,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 91,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 16},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 899,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 6},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 1462,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 13},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 949,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 14},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 1532892063,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 19},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 1532892062,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 0},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 95,\"eventType\": 6,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 20},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 129,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 5},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 32075,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 68569,\"eventType\": 5,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 25,\"eventType\": 18,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 15},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 101,\"eventType\": 3,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 8},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 4899,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 9},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 16,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 0},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 89,\"eventType\": 2,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 8},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 17,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 3},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 111,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 19},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 2448,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 16,\"stfType\": 8},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 64,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 6},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 18,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 4},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 366,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 5},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 59,\"eventType\": 1,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 18}]",
              "sol": "[Definitions.ProtoEvent(129,27,80,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.MD),Definitions.ProtoEvent(2446,21,7,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SD),Definitions.ProtoEvent(64,65,1,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.Child),Definitions.ProtoEvent(48,121,3999,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SC),Definitions.ProtoEvent(32074,68568,119,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PR),Definitions.ProtoEvent(9999,366,111,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.FP),Definitions.ProtoEvent(1969,130,50,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.CD),Definitions.ProtoEvent(32074,80,60,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(29,257,90,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IP),Definitions.ProtoEvent(1460,64,1337,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.FP),Definitions.ProtoEvent(400,1460,365,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SD),Definitions.ProtoEvent(111,120,151,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.TD),Definitions.ProtoEvent(97,901,4900,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(111,68568,160,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.STD),Definitions.ProtoEvent(50,1532892063,2440587,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(2446,6,367,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PRD),Definitions.ProtoEvent(140,139,1336,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PR),Definitions.ProtoEvent(28,359,949,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.DV),Definitions.ProtoEvent(146096,4000,39,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IPCI),Definitions.ProtoEvent(1336,1970,367,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.MR),Definitions.ProtoEvent(951,1532892064,68569,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.STD),Definitions.ProtoEvent(99,365,23,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.DV),Definitions.ProtoEvent(21,69,100,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.DV),Definitions.ProtoEvent(96,8,89,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MD),Definitions.ProtoEvent(4,61,48,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PP),Definitions.ProtoEvent(119,900,2014223715,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.AD),Definitions.ProtoEvent(1969,2440588,1970,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SC),Definitions.ProtoEvent(80,1532892063,1338,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.Child),Definitions.ProtoEvent(146096,401,2,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PP),Definitions.ProtoEvent(364,1461001,1969,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(131,2440587,950,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.SC),Definitions.ProtoEvent(13,99,9999,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IED),Definitions.ProtoEvent(399,90,18,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.Child),Definitions.ProtoEvent(359,3,141,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SC),Definitions.ProtoEvent(48,69,1338,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PRD),Definitions.ProtoEvent(49,400,97,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(60,899,256,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(1532892064,91,149,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PP),Definitions.ProtoEvent(32076,1532892064,140,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.SD),Definitions.ProtoEvent(1460,30,361,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(29,1,1337,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCB),Definitions.ProtoEvent(1,4799,361,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(1336,4799,91,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.DV),Definitions.ProtoEvent(68570,68569,899,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PP),Definitions.ProtoEvent(10000,1971,1462,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RRY),Definitions.ProtoEvent(1336,79,949,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SC),Definitions.ProtoEvent(120,86400,1532892063,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.STD),Definitions.ProtoEvent(359,360,1532892062,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SD),Definitions.ProtoEvent(359,140,95,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.Child),Definitions.ProtoEvent(140,86400,129,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PR),Definitions.ProtoEvent(146096,1970,32075,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(31,26,68569,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(111,146096,25,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.CD),Definitions.ProtoEvent(26,4801,101,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.FP),Definitions.ProtoEvent(150,23,4899,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PRD),Definitions.ProtoEvent(159,7,16,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.SD),Definitions.ProtoEvent(86400,90,89,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.FP),Definitions.ProtoEvent(1969,146098,17,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IED),Definitions.ProtoEvent(901,2440587,111,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.STD),Definitions.ProtoEvent(2446,2447,2448,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.FP),Definitions.ProtoEvent(68570,80,64,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PP),Definitions.ProtoEvent(68570,364,18,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IP),Definitions.ProtoEvent(146098,2014223716,366,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PR),Definitions.ProtoEvent(140,1532892062,59,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IPCB)]"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.564ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "endTimestamp < timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN endTimestamp<timestamp",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.567ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [97,154,21,36,235,104,44,91,64,246,37,196,188,181,209,51,67,10,232,59,98,113,39,4,22,158,183,111,146,5,144,193],\"legalEntityIdCounterparty\": [141,129,225,177,198,175,173,13,87,106,225,119,10,142,208,50,110,80,25,207,79,60,89,186,116,121,68,21,199,170,189,44],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 96,\"statusDate\": 26,\"initialExchangeDate\": 161,\"maturityDate\": 60,\"terminationDate\": 1,\"purchaseDate\": 146098,\"capitalizationEndDate\": 3999,\"cycleAnchorDateOfInterestPayment\": 24,\"cycleAnchorDateOfRateReset\": 129,\"cycleAnchorDateOfScalingIndex\": 146096,\"cycleAnchorDateOfFee\": 367,\"notionalPrincipal\": 80,\"nominalInterestRate\": 360,\"feeAccrued\": 159,\"accruedInterest\": 161,\"rateMultiplier\": 16,\"rateSpread\": 140,\"feeRate\": 1,\"nextResetRate\": 65,\"penaltyRate\": 951,\"premiumDiscountAtIED\": 68570,\"priceAtPurchaseDate\": 1532892064,\"cycleOfInterestPayment\": {\"i\": 1460,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 86399,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 150,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 25,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 950,\"lifeFloor\": 100,\"periodCap\": 100,\"periodFloor\": 48}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"97,154,21,36,235,104,44,91,64,246,37,196,188,181,209,51,67,10,232,59,98,113,39,4,22,158,183,111,146,5,144,193\"),stringToBytes32(\"141,129,225,177,198,175,173,13,87,106,225,119,10,142,208,50,110,80,25,207,79,60,89,186,116,121,68,21,199,170,189,44\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.N,96,26,161,60,1,146098,3999,24,129,146096,367,80,360,159,161,16,140,1,65,951,68570,1532892064,Definitions.IPS(1460,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(86399,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(150,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(25,Definitions.P.Q,Definitions.S.LONG,false),950,100,100,48)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.572ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [200,183,180,35,146,51,145,241,10,159,150,38,155,233,5,20,176,172,111,143,157,252,3,169,235,187,234,246,68,143,129,37],\"legalEntityIdCounterparty\": [190,211,3,220,159,65,61,140,173,20,235,29,199,140,190,153,238,227,255,123,67,27,73,219,41,217,43,82,213,5,2,73],\"dayCountConvention\": 6,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 99,\"statusDate\": 4800,\"initialExchangeDate\": 19,\"maturityDate\": 39,\"terminationDate\": 32,\"purchaseDate\": 91,\"capitalizationEndDate\": 150,\"cycleAnchorDateOfInterestPayment\": 1532892062,\"cycleAnchorDateOfRateReset\": 86399,\"cycleAnchorDateOfScalingIndex\": 17,\"cycleAnchorDateOfFee\": 18,\"notionalPrincipal\": 1460,\"nominalInterestRate\": 9999,\"feeAccrued\": 41,\"accruedInterest\": 4000,\"rateMultiplier\": 20,\"rateSpread\": 1,\"feeRate\": 15,\"nextResetRate\": 96,\"penaltyRate\": 109,\"premiumDiscountAtIED\": 139,\"priceAtPurchaseDate\": 4799,\"cycleOfInterestPayment\": {\"i\": 149,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 400,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 65,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 30,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 96,\"lifeFloor\": 21,\"periodCap\": 1,\"periodFloor\": 2440588}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"200,183,180,35,146,51,145,241,10,159,150,38,155,233,5,20,176,172,111,143,157,252,3,169,235,187,234,246,68,143,129,37\"),stringToBytes32(\"190,211,3,220,159,65,61,140,173,20,235,29,199,140,190,153,238,227,255,123,67,27,73,219,41,217,43,82,213,5,2,73\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,99,4800,19,39,32,91,150,1532892062,86399,17,18,1460,9999,41,4000,20,1,15,96,109,139,4799,Definitions.IPS(149,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(400,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(65,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(30,Definitions.P.Q,Definitions.S.LONG,false),96,21,1,2440588)"
            },
            {
              "js": "{\"lastEventTime\": 360,\"contractStatus\": 3,\"timeFromLastEvent\": 2,\"nominalValue\": 4801,\"nominalAccrued\": 18,\"feeAccrued\": 10,\"nominalRate\": 89,\"interestScalingMultiplier\": 27,\"nominalScalingMultiplier\": 12,\"contractRoleSign\": 8}",
              "sol": "Definitions.ContractState(360,Definitions.ContractStatus.DF,2,4801,18,10,89,27,12,Definitions.ContractRole.GUA)"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.576ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [167,80,252,162,213,209,202,10,147,251,69,31,114,164,89,69,78,129,63,195,146,112,185,82,158,167,87,251,17,127,95,167],\"legalEntityIdCounterparty\": [4,95,18,52,53,157,98,150,211,158,156,55,17,189,31,146,70,204,50,2,232,243,61,116,19,225,51,128,220,157,27,159],\"dayCountConvention\": 6,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 1532892064,\"statusDate\": 32075,\"initialExchangeDate\": 401,\"maturityDate\": 68569,\"terminationDate\": 68569,\"purchaseDate\": 257,\"capitalizationEndDate\": 97,\"cycleAnchorDateOfInterestPayment\": 364,\"cycleAnchorDateOfRateReset\": 951,\"cycleAnchorDateOfScalingIndex\": 99,\"cycleAnchorDateOfFee\": 121,\"notionalPrincipal\": 159,\"nominalInterestRate\": 9999,\"feeAccrued\": -1,\"accruedInterest\": 90,\"rateMultiplier\": 3999,\"rateSpread\": 61,\"feeRate\": 111,\"nextResetRate\": 99,\"penaltyRate\": 1461000,\"premiumDiscountAtIED\": 1532892064,\"priceAtPurchaseDate\": 40,\"cycleOfInterestPayment\": {\"i\": 119,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 61,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 66,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 96,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 146096,\"lifeFloor\": 80,\"periodCap\": 141,\"periodFloor\": 51}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"167,80,252,162,213,209,202,10,147,251,69,31,114,164,89,69,78,129,63,195,146,112,185,82,158,167,87,251,17,127,95,167\"),stringToBytes32(\"4,95,18,52,53,157,98,150,211,158,156,55,17,189,31,146,70,204,50,2,232,243,61,116,19,225,51,128,220,157,27,159\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,1532892064,32075,401,68569,68569,257,97,364,951,99,121,159,9999,-1,90,3999,61,111,99,1461000,1532892064,40,Definitions.IPS(119,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(61,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(66,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(96,Definitions.P.W,Definitions.S.LONG,false),146096,80,141,51)"
            },
            {
              "js": "{\"lastEventTime\": 4900,\"contractStatus\": 2,\"timeFromLastEvent\": 950,\"nominalValue\": 2440587,\"nominalAccrued\": 91,\"feeAccrued\": 1970,\"nominalRate\": 66,\"interestScalingMultiplier\": 10001,\"nominalScalingMultiplier\": 1337,\"contractRoleSign\": 8}",
              "sol": "Definitions.ContractState(4900,Definitions.ContractStatus.DQ,950,2440587,91,1970,66,10001,1337,Definitions.ContractRole.GUA)"
            },
            {
              "js": "{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 4801,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 19}",
              "sol": "Definitions.ProtoEvent(51,254,4801,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.STD)"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.585ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [35,206,93,218,36,165,176,235,44,196,159,13,93,42,57,63,192,21,119,217,238,189,172,98,184,137,248,80,117,232,83,184],\"legalEntityIdCounterparty\": [75,14,228,218,112,11,36,114,183,192,178,25,244,150,141,34,190,8,252,7,159,236,182,53,234,22,208,72,18,178,88,239],\"dayCountConvention\": 1,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 4799,\"statusDate\": 1461000,\"initialExchangeDate\": 359,\"maturityDate\": 69,\"terminationDate\": 3,\"purchaseDate\": 63,\"capitalizationEndDate\": 4799,\"cycleAnchorDateOfInterestPayment\": 30,\"cycleAnchorDateOfRateReset\": 26,\"cycleAnchorDateOfScalingIndex\": 401,\"cycleAnchorDateOfFee\": 32075,\"notionalPrincipal\": 146096,\"nominalInterestRate\": 2,\"feeAccrued\": 121,\"accruedInterest\": 99,\"rateMultiplier\": -1,\"rateSpread\": 30,\"feeRate\": 361,\"nextResetRate\": 4899,\"penaltyRate\": 32,\"premiumDiscountAtIED\": 79,\"priceAtPurchaseDate\": 66,\"cycleOfInterestPayment\": {\"i\": 1971,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 19,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 151,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 28,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 15,\"lifeFloor\": 3999,\"periodCap\": 2014223716,\"periodFloor\": 254}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"35,206,93,218,36,165,176,235,44,196,159,13,93,42,57,63,192,21,119,217,238,189,172,98,184,137,248,80,117,232,83,184\"),stringToBytes32(\"75,14,228,218,112,11,36,114,183,192,178,25,244,150,141,34,190,8,252,7,159,236,182,53,234,22,208,72,18,178,88,239\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,4799,1461000,359,69,3,63,4799,30,26,401,32075,146096,2,121,99,-1,30,361,4899,32,79,66,Definitions.IPS(1971,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(19,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(151,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(28,Definitions.P.D,Definitions.S.LONG,false),15,3999,2014223716,254)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [202,237,168,48,76,69,217,7,229,185,108,197,73,240,241,92,157,48,107,97,172,133,26,155,129,108,182,63,46,26,98,15],\"legalEntityIdCounterparty\": [255,3,98,57,53,131,133,50,57,15,254,196,100,250,74,175,159,202,192,153,119,113,182,91,202,100,149,166,82,16,224,6],\"dayCountConvention\": 5,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 2440588,\"statusDate\": 4,\"initialExchangeDate\": 1,\"maturityDate\": 2446,\"terminationDate\": 150,\"purchaseDate\": 130,\"capitalizationEndDate\": 2014223714,\"cycleAnchorDateOfInterestPayment\": 71,\"cycleAnchorDateOfRateReset\": 140,\"cycleAnchorDateOfScalingIndex\": 101,\"cycleAnchorDateOfFee\": 139,\"notionalPrincipal\": 1461001,\"nominalInterestRate\": 41,\"feeAccrued\": 3999,\"accruedInterest\": 150,\"rateMultiplier\": 1461,\"rateSpread\": 359,\"feeRate\": 29,\"nextResetRate\": 95,\"penaltyRate\": 1532892062,\"premiumDiscountAtIED\": 257,\"priceAtPurchaseDate\": 7,\"cycleOfInterestPayment\": {\"i\": 146098,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 9,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1461000,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 14,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 365,\"lifeFloor\": 2014223714,\"periodCap\": 129,\"periodFloor\": 900}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"202,237,168,48,76,69,217,7,229,185,108,197,73,240,241,92,157,48,107,97,172,133,26,155,129,108,182,63,46,26,98,15\"),stringToBytes32(\"255,3,98,57,53,131,133,50,57,15,254,196,100,250,74,175,159,202,192,153,119,113,182,91,202,100,149,166,82,16,224,6\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,2440588,4,1,2446,150,130,2014223714,71,140,101,139,1461001,41,3999,150,1461,359,29,95,1532892062,257,7,Definitions.IPS(146098,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(9,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(1461000,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(14,Definitions.P.H,Definitions.S.SHORT,false),365,2014223714,129,900)"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [106,148,188,170,85,157,30,193,135,160,253,82,43,182,149,117,116,209,117,89,255,208,40,58,86,16,198,99,225,89,10,87],\"legalEntityIdCounterparty\": [61,215,133,71,52,37,197,156,237,189,238,59,152,243,99,32,177,115,41,87,55,104,103,222,219,109,20,213,56,151,108,83],\"dayCountConvention\": 0,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 51,\"statusDate\": 89,\"initialExchangeDate\": 89,\"maturityDate\": 368,\"terminationDate\": 1,\"purchaseDate\": 13,\"capitalizationEndDate\": 6,\"cycleAnchorDateOfInterestPayment\": 2014223715,\"cycleAnchorDateOfRateReset\": 141,\"cycleAnchorDateOfScalingIndex\": 32076,\"cycleAnchorDateOfFee\": 950,\"notionalPrincipal\": 2446,\"nominalInterestRate\": 10001,\"feeAccrued\": 86400,\"accruedInterest\": 51,\"rateMultiplier\": 400,\"rateSpread\": 0,\"feeRate\": 17,\"nextResetRate\": 1461,\"penaltyRate\": 1969,\"premiumDiscountAtIED\": 400,\"priceAtPurchaseDate\": 64,\"cycleOfInterestPayment\": {\"i\": 1,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 40,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 119,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 368,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 949,\"lifeFloor\": 4799,\"periodCap\": 40,\"periodFloor\": 86401}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"106,148,188,170,85,157,30,193,135,160,253,82,43,182,149,117,116,209,117,89,255,208,40,58,86,16,198,99,225,89,10,87\"),stringToBytes32(\"61,215,133,71,52,37,197,156,237,189,238,59,152,243,99,32,177,115,41,87,55,104,103,222,219,109,20,213,56,151,108,83\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,51,89,89,368,1,13,6,2014223715,141,32076,950,2446,10001,86400,51,400,0,17,1461,1969,400,64,Definitions.IPS(1,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(40,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(119,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(368,Definitions.P.Y,Definitions.S.SHORT,true),949,4799,40,86401)"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [145,90,32,62,49,107,147,192,117,229,61,223,157,83,211,101,238,28,187,192,245,55,202,66,154,27,50,138,24,244,68,203],\"legalEntityIdCounterparty\": [243,210,117,120,6,83,254,54,246,124,149,157,84,27,233,80,119,10,3,18,53,95,63,54,246,54,91,83,240,50,168,189],\"dayCountConvention\": 2,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 364,\"statusDate\": 121,\"initialExchangeDate\": 71,\"maturityDate\": 1532892063,\"terminationDate\": 11,\"purchaseDate\": 99,\"capitalizationEndDate\": 950,\"cycleAnchorDateOfInterestPayment\": 359,\"cycleAnchorDateOfRateReset\": 2448,\"cycleAnchorDateOfScalingIndex\": 950,\"cycleAnchorDateOfFee\": 139,\"notionalPrincipal\": 40,\"nominalInterestRate\": 18,\"feeAccrued\": 60,\"accruedInterest\": 1969,\"rateMultiplier\": 365,\"rateSpread\": 366,\"feeRate\": 2014223716,\"nextResetRate\": 2440588,\"penaltyRate\": 19,\"premiumDiscountAtIED\": 27,\"priceAtPurchaseDate\": 97,\"cycleOfInterestPayment\": {\"i\": 60,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 10001,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1460,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 18,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 101,\"lifeFloor\": 10,\"periodCap\": 49,\"periodFloor\": 161}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"145,90,32,62,49,107,147,192,117,229,61,223,157,83,211,101,238,28,187,192,245,55,202,66,154,27,50,138,24,244,68,203\"),stringToBytes32(\"243,210,117,120,6,83,254,54,246,124,149,157,84,27,233,80,119,10,3,18,53,95,63,54,246,54,91,83,240,50,168,189\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,364,121,71,1532892063,11,99,950,359,2448,950,139,40,18,60,1969,365,366,2014223716,2440588,19,27,97,Definitions.IPS(60,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(10001,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(1460,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(18,Definitions.P.H,Definitions.S.SHORT,true),101,10,49,161)"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [116,182,44,133,4,51,91,38,111,157,21,20,9,68,118,241,211,165,126,113,166,85,243,3,84,62,142,68,105,20,8,27],\"legalEntityIdCounterparty\": [61,82,158,18,231,80,128,5,223,136,170,207,108,193,78,124,213,36,155,34,147,19,187,119,186,17,35,12,205,107,191,63],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 69,\"statusDate\": 48,\"initialExchangeDate\": 29,\"maturityDate\": 149,\"terminationDate\": 40,\"purchaseDate\": 0,\"capitalizationEndDate\": 951,\"cycleAnchorDateOfInterestPayment\": 2014223716,\"cycleAnchorDateOfRateReset\": 11,\"cycleAnchorDateOfScalingIndex\": 368,\"cycleAnchorDateOfFee\": 160,\"notionalPrincipal\": 68570,\"nominalInterestRate\": 149,\"feeAccrued\": 9,\"accruedInterest\": 41,\"rateMultiplier\": 360,\"rateSpread\": 111,\"feeRate\": 901,\"nextResetRate\": 10,\"penaltyRate\": 1462,\"premiumDiscountAtIED\": 150,\"priceAtPurchaseDate\": 4899,\"cycleOfInterestPayment\": {\"i\": 70,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2447,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 121,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 23,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 161,\"lifeFloor\": 900,\"periodCap\": 149,\"periodFloor\": 1969}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"116,182,44,133,4,51,91,38,111,157,21,20,9,68,118,241,211,165,126,113,166,85,243,3,84,62,142,68,105,20,8,27\"),stringToBytes32(\"61,82,158,18,231,80,128,5,223,136,170,207,108,193,78,124,213,36,155,34,147,19,187,119,186,17,35,12,205,107,191,63\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,69,48,29,149,40,0,951,2014223716,11,368,160,68570,149,9,41,360,111,901,10,1462,150,4899,Definitions.IPS(70,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(2447,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(121,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(23,Definitions.P.H,Definitions.S.LONG,true),161,900,149,1969)"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [186,157,94,255,199,22,10,196,97,54,194,255,89,7,223,3,224,44,159,221,2,236,122,81,22,71,33,130,110,11,15,39],\"legalEntityIdCounterparty\": [68,20,38,190,64,135,64,38,21,186,16,86,163,128,102,160,92,246,135,9,222,22,34,168,51,95,48,242,90,26,243,99],\"dayCountConvention\": 6,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 8,\"statusDate\": 10000,\"initialExchangeDate\": 13,\"maturityDate\": 129,\"terminationDate\": 81,\"purchaseDate\": 160,\"capitalizationEndDate\": 11,\"cycleAnchorDateOfInterestPayment\": 10,\"cycleAnchorDateOfRateReset\": 29,\"cycleAnchorDateOfScalingIndex\": 399,\"cycleAnchorDateOfFee\": 99,\"notionalPrincipal\": 361,\"nominalInterestRate\": 9,\"feeAccrued\": 150,\"accruedInterest\": 10000,\"rateMultiplier\": 10000,\"rateSpread\": 70,\"feeRate\": 63,\"nextResetRate\": 95,\"penaltyRate\": 91,\"premiumDiscountAtIED\": 89,\"priceAtPurchaseDate\": 11,\"cycleOfInterestPayment\": {\"i\": 2014223714,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 86401,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1532892063,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 257,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 2440587,\"lifeFloor\": 80,\"periodCap\": 4799,\"periodFloor\": 950}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"186,157,94,255,199,22,10,196,97,54,194,255,89,7,223,3,224,44,159,221,2,236,122,81,22,71,33,130,110,11,15,39\"),stringToBytes32(\"68,20,38,190,64,135,64,38,21,186,16,86,163,128,102,160,92,246,135,9,222,22,34,168,51,95,48,242,90,26,243,99\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,8,10000,13,129,81,160,11,10,29,399,99,361,9,150,10000,10000,70,63,95,91,89,11,Definitions.IPS(2014223714,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(86401,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(1532892063,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(257,Definitions.P.W,Definitions.S.LONG,true),2440587,80,4799,950)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [149,246,204,108,40,198,154,61,123,45,0,137,5,107,194,189,103,12,68,181,182,92,129,176,25,247,120,188,224,223,199,117],\"legalEntityIdCounterparty\": [75,133,182,137,142,200,122,76,92,214,164,52,65,220,232,11,59,123,6,206,94,48,225,218,141,196,139,135,150,148,21,161],\"dayCountConvention\": 2,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 149,\"statusDate\": 401,\"initialExchangeDate\": 69,\"maturityDate\": 1532892062,\"terminationDate\": 1532892064,\"purchaseDate\": 1461002,\"capitalizationEndDate\": 119,\"cycleAnchorDateOfInterestPayment\": 364,\"cycleAnchorDateOfRateReset\": 1969,\"cycleAnchorDateOfScalingIndex\": 5,\"cycleAnchorDateOfFee\": 1338,\"notionalPrincipal\": 100,\"nominalInterestRate\": 95,\"feeAccrued\": 9999,\"accruedInterest\": 49,\"rateMultiplier\": 32,\"rateSpread\": 32,\"feeRate\": 109,\"nextResetRate\": 17,\"penaltyRate\": 32075,\"premiumDiscountAtIED\": 2448,\"priceAtPurchaseDate\": 99,\"cycleOfInterestPayment\": {\"i\": 399,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 32075,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 51,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 10000,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 86400,\"lifeFloor\": 1338,\"periodCap\": 1336,\"periodFloor\": 2440588}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"149,246,204,108,40,198,154,61,123,45,0,137,5,107,194,189,103,12,68,181,182,92,129,176,25,247,120,188,224,223,199,117\"),stringToBytes32(\"75,133,182,137,142,200,122,76,92,214,164,52,65,220,232,11,59,123,6,206,94,48,225,218,141,196,139,135,150,148,21,161\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,149,401,69,1532892062,1532892064,1461002,119,364,1969,5,1338,100,95,9999,49,32,32,109,17,32075,2448,99,Definitions.IPS(399,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(32075,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(51,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(10000,Definitions.P.Y,Definitions.S.LONG,true),86400,1338,1336,2440588)"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [250,233,250,100,235,234,84,160,200,36,70,69,77,171,217,22,139,50,67,33,109,57,210,178,176,15,51,118,167,15,18,209],\"legalEntityIdCounterparty\": [122,163,15,7,14,35,195,7,215,235,198,133,173,43,186,68,249,79,190,19,93,140,194,196,123,78,183,75,135,137,241,249],\"dayCountConvention\": 0,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 1532892064,\"statusDate\": 48,\"initialExchangeDate\": 50,\"maturityDate\": 4799,\"terminationDate\": 8,\"purchaseDate\": 79,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 91,\"cycleAnchorDateOfRateReset\": 70,\"cycleAnchorDateOfScalingIndex\": 131,\"cycleAnchorDateOfFee\": 4800,\"notionalPrincipal\": 146096,\"nominalInterestRate\": 1,\"feeAccrued\": 257,\"accruedInterest\": 99,\"rateMultiplier\": 150,\"rateSpread\": 8,\"feeRate\": 399,\"nextResetRate\": 161,\"penaltyRate\": 23,\"premiumDiscountAtIED\": 367,\"priceAtPurchaseDate\": 95,\"cycleOfInterestPayment\": {\"i\": 71,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 256,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1461,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 4801,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 359,\"lifeFloor\": 48,\"periodCap\": 4,\"periodFloor\": 63}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"250,233,250,100,235,234,84,160,200,36,70,69,77,171,217,22,139,50,67,33,109,57,210,178,176,15,51,118,167,15,18,209\"),stringToBytes32(\"122,163,15,7,14,35,195,7,215,235,198,133,173,43,186,68,249,79,190,19,93,140,194,196,123,78,183,75,135,137,241,249\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,1532892064,48,50,4799,8,79,0,91,70,131,4800,146096,1,257,99,150,8,399,161,23,367,95,Definitions.IPS(71,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(256,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(1461,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(4801,Definitions.P.Q,Definitions.S.SHORT,true),359,48,4,63)"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [186,33,92,17,194,173,58,217,62,67,226,225,141,133,218,231,239,41,103,187,116,11,192,36,144,171,70,232,30,86,176,47],\"legalEntityIdCounterparty\": [240,107,50,89,104,117,85,130,117,171,228,107,217,80,115,88,37,22,17,35,38,8,247,110,65,87,125,11,241,97,212,56],\"dayCountConvention\": 0,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 30,\"statusDate\": 26,\"initialExchangeDate\": 28,\"maturityDate\": 51,\"terminationDate\": 6,\"purchaseDate\": 4000,\"capitalizationEndDate\": 360,\"cycleAnchorDateOfInterestPayment\": 51,\"cycleAnchorDateOfRateReset\": 18,\"cycleAnchorDateOfScalingIndex\": 109,\"cycleAnchorDateOfFee\": 66,\"notionalPrincipal\": 1462,\"nominalInterestRate\": 21,\"feeAccrued\": 24,\"accruedInterest\": 26,\"rateMultiplier\": 366,\"rateSpread\": 1336,\"feeRate\": 949,\"nextResetRate\": 1532892063,\"penaltyRate\": 0,\"premiumDiscountAtIED\": 18,\"priceAtPurchaseDate\": 5,\"cycleOfInterestPayment\": {\"i\": 61,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 91,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4799,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 129,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 1971,\"lifeFloor\": 8,\"periodCap\": 366,\"periodFloor\": 32076}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"186,33,92,17,194,173,58,217,62,67,226,225,141,133,218,231,239,41,103,187,116,11,192,36,144,171,70,232,30,86,176,47\"),stringToBytes32(\"240,107,50,89,104,117,85,130,117,171,228,107,217,80,115,88,37,22,17,35,38,8,247,110,65,87,125,11,241,97,212,56\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,30,26,28,51,6,4000,360,51,18,109,66,1462,21,24,26,366,1336,949,1532892063,0,18,5,Definitions.IPS(61,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(91,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(4799,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(129,Definitions.P.Y,Definitions.S.LONG,true),1971,8,366,32076)"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [51,44,40,93,198,64,90,86,7,96,83,35,7,36,33,87,157,31,72,70,105,239,186,143,77,222,195,9,195,84,188,87],\"legalEntityIdCounterparty\": [121,118,234,141,219,204,150,60,241,190,151,15,164,227,112,219,113,185,68,239,146,175,146,116,254,159,47,2,47,200,116,27],\"dayCountConvention\": 1,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 367,\"statusDate\": 146097,\"initialExchangeDate\": 2440589,\"maturityDate\": 14,\"terminationDate\": 150,\"purchaseDate\": 89,\"capitalizationEndDate\": 2,\"cycleAnchorDateOfInterestPayment\": 17,\"cycleAnchorDateOfRateReset\": 29,\"cycleAnchorDateOfScalingIndex\": 95,\"cycleAnchorDateOfFee\": 400,\"notionalPrincipal\": 2440587,\"nominalInterestRate\": 1532892062,\"feeAccrued\": 32076,\"accruedInterest\": 48,\"rateMultiplier\": 49,\"rateSpread\": 69,\"feeRate\": 400,\"nextResetRate\": 4901,\"penaltyRate\": 131,\"premiumDiscountAtIED\": 950,\"priceAtPurchaseDate\": 11,\"cycleOfInterestPayment\": {\"i\": 1461000,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 129,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 68570,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 68569,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 7,\"lifeFloor\": 900,\"periodCap\": 24,\"periodFloor\": 2440587}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"51,44,40,93,198,64,90,86,7,96,83,35,7,36,33,87,157,31,72,70,105,239,186,143,77,222,195,9,195,84,188,87\"),stringToBytes32(\"121,118,234,141,219,204,150,60,241,190,151,15,164,227,112,219,113,185,68,239,146,175,146,116,254,159,47,2,47,200,116,27\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,367,146097,2440589,14,150,89,2,17,29,95,400,2440587,1532892062,32076,48,49,69,400,4901,131,950,11,Definitions.IPS(1461000,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(129,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(68570,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(68569,Definitions.P.Q,Definitions.S.LONG,false),7,900,24,2440587)"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [59,244,242,67,94,182,111,204,203,230,126,47,84,189,217,195,111,80,173,121,236,159,126,222,176,236,147,109,231,150,168,131],\"legalEntityIdCounterparty\": [88,155,250,40,152,169,7,163,224,36,63,65,27,49,78,94,132,223,61,31,193,20,169,138,143,91,163,76,118,216,123,185],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 21,\"statusDate\": 7,\"initialExchangeDate\": 86399,\"maturityDate\": 1970,\"terminationDate\": 63,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1461001,\"cycleAnchorDateOfRateReset\": 8,\"cycleAnchorDateOfScalingIndex\": 1,\"cycleAnchorDateOfFee\": 69,\"notionalPrincipal\": 110,\"nominalInterestRate\": 0,\"feeAccrued\": 32076,\"accruedInterest\": 17,\"rateMultiplier\": 4800,\"rateSpread\": 99,\"feeRate\": 121,\"nextResetRate\": 61,\"penaltyRate\": 25,\"premiumDiscountAtIED\": 359,\"priceAtPurchaseDate\": 121,\"cycleOfInterestPayment\": {\"i\": 2,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 131,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 28,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 90,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 68570,\"lifeFloor\": 4900,\"periodCap\": 95,\"periodFloor\": 119}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"59,244,242,67,94,182,111,204,203,230,126,47,84,189,217,195,111,80,173,121,236,159,126,222,176,236,147,109,231,150,168,131\"),stringToBytes32(\"88,155,250,40,152,169,7,163,224,36,63,65,27,49,78,94,132,223,61,31,193,20,169,138,143,91,163,76,118,216,123,185\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,21,7,86399,1970,63,0,0,1461001,8,1,69,110,0,32076,17,4800,99,121,61,25,359,121,Definitions.IPS(2,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(131,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(28,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(90,Definitions.P.W,Definitions.S.SHORT,true),68570,4900,95,119)"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [86,38,52,242,65,129,77,37,254,62,148,86,76,126,129,172,1,113,35,172,85,32,176,12,191,140,147,37,24,14,170,81],\"legalEntityIdCounterparty\": [75,115,115,21,242,110,236,227,124,210,116,33,37,5,44,249,13,173,63,197,31,185,135,214,193,50,195,81,165,20,44,238],\"dayCountConvention\": 4,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 50,\"statusDate\": 1337,\"initialExchangeDate\": 4001,\"maturityDate\": 367,\"terminationDate\": 149,\"purchaseDate\": 40,\"capitalizationEndDate\": 2447,\"cycleAnchorDateOfInterestPayment\": 5,\"cycleAnchorDateOfRateReset\": 7,\"cycleAnchorDateOfScalingIndex\": 68568,\"cycleAnchorDateOfFee\": 1971,\"notionalPrincipal\": 4899,\"nominalInterestRate\": 151,\"feeAccrued\": 364,\"accruedInterest\": 17,\"rateMultiplier\": 20,\"rateSpread\": 21,\"feeRate\": 24,\"nextResetRate\": 255,\"penaltyRate\": 27,\"premiumDiscountAtIED\": 1532892064,\"priceAtPurchaseDate\": 23,\"cycleOfInterestPayment\": {\"i\": 10000,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 368,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1461001,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 17,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 401,\"lifeFloor\": 1971,\"periodCap\": 111,\"periodFloor\": 100}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"86,38,52,242,65,129,77,37,254,62,148,86,76,126,129,172,1,113,35,172,85,32,176,12,191,140,147,37,24,14,170,81\"),stringToBytes32(\"75,115,115,21,242,110,236,227,124,210,116,33,37,5,44,249,13,173,63,197,31,185,135,214,193,50,195,81,165,20,44,238\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,50,1337,4001,367,149,40,2447,5,7,68568,1971,4899,151,364,17,20,21,24,255,27,1532892064,23,Definitions.IPS(10000,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(368,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(1461001,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(17,Definitions.P.Y,Definitions.S.LONG,false),401,1971,111,100)"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [37,99,100,185,164,99,211,2,20,179,237,234,253,236,201,202,144,146,137,142,75,33,72,34,182,174,101,26,137,176,17,91],\"legalEntityIdCounterparty\": [14,182,96,144,184,106,247,101,7,201,227,161,12,156,187,253,52,113,100,86,155,140,115,74,227,252,49,146,194,218,147,145],\"dayCountConvention\": 3,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 8,\"statusDate\": 19,\"initialExchangeDate\": 30,\"maturityDate\": 41,\"terminationDate\": 1970,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 48,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 48,\"cycleAnchorDateOfFee\": 4801,\"notionalPrincipal\": 81,\"nominalInterestRate\": 0,\"feeAccrued\": 3,\"accruedInterest\": 140,\"rateMultiplier\": 3999,\"rateSpread\": 29,\"feeRate\": 40,\"nextResetRate\": 141,\"penaltyRate\": 23,\"premiumDiscountAtIED\": 150,\"priceAtPurchaseDate\": 151,\"cycleOfInterestPayment\": {\"i\": 146098,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1969,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 48,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 4001,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 63,\"lifeFloor\": 60,\"periodCap\": 365,\"periodFloor\": 0}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"37,99,100,185,164,99,211,2,20,179,237,234,253,236,201,202,144,146,137,142,75,33,72,34,182,174,101,26,137,176,17,91\"),stringToBytes32(\"14,182,96,144,184,106,247,101,7,201,227,161,12,156,187,253,52,113,100,86,155,140,115,74,227,252,49,146,194,218,147,145\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.A,8,19,30,41,1970,0,0,48,0,48,4801,81,0,3,140,3999,29,40,141,23,150,151,Definitions.IPS(146098,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(1969,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(48,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(4001,Definitions.P.W,Definitions.S.LONG,true),63,60,365,0)"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [19,74,158,208,143,43,223,236,68,15,159,120,104,149,5,148,203,219,227,251,81,229,132,238,193,4,208,59,189,54,179,248],\"legalEntityIdCounterparty\": [142,206,239,132,183,4,218,15,56,123,163,221,119,50,178,110,214,234,125,230,181,153,228,69,57,202,189,146,188,163,90,70],\"dayCountConvention\": 0,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 4800,\"statusDate\": 32076,\"initialExchangeDate\": 63,\"maturityDate\": 4900,\"terminationDate\": 146098,\"purchaseDate\": 96,\"capitalizationEndDate\": 16,\"cycleAnchorDateOfInterestPayment\": 96,\"cycleAnchorDateOfRateReset\": 9999,\"cycleAnchorDateOfScalingIndex\": 69,\"cycleAnchorDateOfFee\": 4800,\"notionalPrincipal\": 2014223714,\"nominalInterestRate\": 71,\"feeAccrued\": 29,\"accruedInterest\": 39,\"rateMultiplier\": 146097,\"rateSpread\": 2448,\"feeRate\": 68570,\"nextResetRate\": 86400,\"penaltyRate\": 99,\"premiumDiscountAtIED\": 899,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 12,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 146096,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 150,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2014223716,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 949,\"lifeFloor\": 1461,\"periodCap\": 99,\"periodFloor\": 10001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"19,74,158,208,143,43,223,236,68,15,159,120,104,149,5,148,203,219,227,251,81,229,132,238,193,4,208,59,189,54,179,248\"),stringToBytes32(\"142,206,239,132,183,4,218,15,56,123,163,221,119,50,178,110,214,234,125,230,181,153,228,69,57,202,189,146,188,163,90,70\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,4800,32076,63,4900,146098,96,16,96,9999,69,4800,2014223714,71,29,39,146097,2448,68570,86400,99,899,1,Definitions.IPS(12,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(146096,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(150,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(2014223716,Definitions.P.Q,Definitions.S.LONG,false),949,1461,99,10001)"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [68,171,143,67,136,166,21,107,94,19,124,140,23,148,209,173,141,242,134,86,123,210,235,160,188,106,39,33,28,133,106,136],\"legalEntityIdCounterparty\": [149,86,227,227,75,67,139,124,11,247,190,175,216,178,111,30,131,232,17,81,120,119,248,85,180,237,183,246,150,218,223,74],\"dayCountConvention\": 5,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 2440587,\"statusDate\": 2014223715,\"initialExchangeDate\": 899,\"maturityDate\": 4000,\"terminationDate\": 96,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 2014223715,\"cycleAnchorDateOfRateReset\": 110,\"cycleAnchorDateOfScalingIndex\": 121,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 2440588,\"nominalInterestRate\": 0,\"feeAccrued\": 3,\"accruedInterest\": 13,\"rateMultiplier\": 17,\"rateSpread\": 949,\"feeRate\": 2014223715,\"nextResetRate\": 32075,\"penaltyRate\": 2440587,\"premiumDiscountAtIED\": 359,\"priceAtPurchaseDate\": 32075,\"cycleOfInterestPayment\": {\"i\": 49,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 27,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4799,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 255,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 4,\"lifeFloor\": 366,\"periodCap\": 4000,\"periodFloor\": 90}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"68,171,143,67,136,166,21,107,94,19,124,140,23,148,209,173,141,242,134,86,123,210,235,160,188,106,39,33,28,133,106,136\"),stringToBytes32(\"149,86,227,227,75,67,139,124,11,247,190,175,216,178,111,30,131,232,17,81,120,119,248,85,180,237,183,246,150,218,223,74\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,2440587,2014223715,899,4000,96,0,0,2014223715,110,121,0,2440588,0,3,13,17,949,2014223715,32075,2440587,359,32075,Definitions.IPS(49,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(27,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(4799,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(255,Definitions.P.W,Definitions.S.SHORT,false),4,366,4000,90)"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [177,83,66,235,168,27,96,199,184,176,113,240,146,41,53,110,133,155,61,31,165,175,136,4,32,69,98,241,250,52,79,72],\"legalEntityIdCounterparty\": [206,186,18,103,138,25,174,5,27,99,182,18,84,199,184,245,161,246,32,204,71,14,209,225,56,105,228,108,27,81,241,14],\"dayCountConvention\": 2,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 161,\"statusDate\": 130,\"initialExchangeDate\": 4801,\"maturityDate\": 5,\"terminationDate\": 1460,\"purchaseDate\": 19,\"capitalizationEndDate\": 1971,\"cycleAnchorDateOfInterestPayment\": 255,\"cycleAnchorDateOfRateReset\": 131,\"cycleAnchorDateOfScalingIndex\": 2440587,\"cycleAnchorDateOfFee\": 68569,\"notionalPrincipal\": 40,\"nominalInterestRate\": 2440587,\"feeAccrued\": 7,\"accruedInterest\": 68570,\"rateMultiplier\": 141,\"rateSpread\": 1,\"feeRate\": 39,\"nextResetRate\": 366,\"penaltyRate\": 10000,\"premiumDiscountAtIED\": 32,\"priceAtPurchaseDate\": 27,\"cycleOfInterestPayment\": {\"i\": 900,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1461,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 16,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 3,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 48,\"lifeFloor\": 64,\"periodCap\": 0,\"periodFloor\": 68570}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"177,83,66,235,168,27,96,199,184,176,113,240,146,41,53,110,133,155,61,31,165,175,136,4,32,69,98,241,250,52,79,72\"),stringToBytes32(\"206,186,18,103,138,25,174,5,27,99,182,18,84,199,184,245,161,246,32,204,71,14,209,225,56,105,228,108,27,81,241,14\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,161,130,4801,5,1460,19,1971,255,131,2440587,68569,40,2440587,7,68570,141,1,39,366,10000,32,27,Definitions.IPS(900,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(1461,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(16,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(3,Definitions.P.Y,Definitions.S.SHORT,true),48,64,0,68570)"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [124,63,244,189,117,94,251,16,76,17,163,7,233,117,16,126,142,248,179,149,230,225,209,155,43,17,173,69,111,44,8,81],\"legalEntityIdCounterparty\": [99,117,105,185,106,135,165,12,235,16,166,96,178,154,181,218,220,153,14,74,69,50,133,148,20,227,232,161,99,154,97,184],\"dayCountConvention\": 5,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 91,\"statusDate\": 1969,\"initialExchangeDate\": 359,\"maturityDate\": 1461000,\"terminationDate\": 109,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 139,\"cycleAnchorDateOfRateReset\": 4800,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 101,\"notionalPrincipal\": 1461001,\"nominalInterestRate\": 0,\"feeAccrued\": 399,\"accruedInterest\": 1,\"rateMultiplier\": 254,\"rateSpread\": 8,\"feeRate\": 949,\"nextResetRate\": 257,\"penaltyRate\": 2014223714,\"premiumDiscountAtIED\": 140,\"priceAtPurchaseDate\": 91,\"cycleOfInterestPayment\": {\"i\": 89,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 111,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 141,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 25,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 360,\"lifeFloor\": 1336,\"periodCap\": 8,\"periodFloor\": 159}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"124,63,244,189,117,94,251,16,76,17,163,7,233,117,16,126,142,248,179,149,230,225,209,155,43,17,173,69,111,44,8,81\"),stringToBytes32(\"99,117,105,185,106,135,165,12,235,16,166,96,178,154,181,218,220,153,14,74,69,50,133,148,20,227,232,161,99,154,97,184\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,91,1969,359,1461000,109,0,0,139,4800,0,101,1461001,0,399,1,254,8,949,257,2014223714,140,91,Definitions.IPS(89,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(111,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(141,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(25,Definitions.P.H,Definitions.S.LONG,true),360,1336,8,159)"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [121,219,235,243,246,242,83,206,207,38,37,141,157,253,226,95,193,248,103,39,148,162,69,73,169,41,205,42,86,31,173,90],\"legalEntityIdCounterparty\": [149,47,226,72,20,45,10,138,52,181,159,115,27,116,23,63,164,61,146,41,179,129,116,98,17,138,209,72,253,59,2,187],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 31,\"statusDate\": 2,\"initialExchangeDate\": 109,\"maturityDate\": 86401,\"terminationDate\": 16,\"purchaseDate\": 51,\"capitalizationEndDate\": 10001,\"cycleAnchorDateOfInterestPayment\": 149,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 10,\"cycleAnchorDateOfFee\": 10000,\"notionalPrincipal\": 99,\"nominalInterestRate\": 366,\"feeAccrued\": 12,\"accruedInterest\": 161,\"rateMultiplier\": 40,\"rateSpread\": 6,\"feeRate\": 31,\"nextResetRate\": 61,\"penaltyRate\": 30,\"premiumDiscountAtIED\": 11,\"priceAtPurchaseDate\": 86401,\"cycleOfInterestPayment\": {\"i\": 1461,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 359,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 27,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 129,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 8,\"lifeFloor\": 68568,\"periodCap\": 60,\"periodFloor\": 140}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"121,219,235,243,246,242,83,206,207,38,37,141,157,253,226,95,193,248,103,39,148,162,69,73,169,41,205,42,86,31,173,90\"),stringToBytes32(\"149,47,226,72,20,45,10,138,52,181,159,115,27,116,23,63,164,61,146,41,179,129,116,98,17,138,209,72,253,59,2,187\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,31,2,109,86401,16,51,10001,149,0,10,10000,99,366,12,161,40,6,31,61,30,11,86401,Definitions.IPS(1461,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(359,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(27,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(129,Definitions.P.Y,Definitions.S.LONG,false),8,68568,60,140)"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [21,12,229,48,61,194,233,221,142,149,134,39,78,209,224,204,123,185,156,133,231,196,85,125,38,147,5,134,179,104,103,23],\"legalEntityIdCounterparty\": [90,209,168,255,17,216,3,186,138,41,147,94,17,170,83,15,79,151,158,72,35,88,12,221,132,190,95,115,202,165,123,226],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 359,\"statusDate\": 4000,\"initialExchangeDate\": 32075,\"maturityDate\": 101,\"terminationDate\": 1461002,\"purchaseDate\": 99,\"capitalizationEndDate\": 68570,\"cycleAnchorDateOfInterestPayment\": 254,\"cycleAnchorDateOfRateReset\": 10001,\"cycleAnchorDateOfScalingIndex\": 140,\"cycleAnchorDateOfFee\": 60,\"notionalPrincipal\": 79,\"nominalInterestRate\": 150,\"feeAccrued\": 951,\"accruedInterest\": 24,\"rateMultiplier\": 2014223714,\"rateSpread\": 65,\"feeRate\": 68570,\"nextResetRate\": 1461000,\"penaltyRate\": 1461002,\"premiumDiscountAtIED\": 10001,\"priceAtPurchaseDate\": 365,\"cycleOfInterestPayment\": {\"i\": 68569,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 900,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 367,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 59,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 71,\"lifeFloor\": 365,\"periodCap\": 1461001,\"periodFloor\": 9999}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"21,12,229,48,61,194,233,221,142,149,134,39,78,209,224,204,123,185,156,133,231,196,85,125,38,147,5,134,179,104,103,23\"),stringToBytes32(\"90,209,168,255,17,216,3,186,138,41,147,94,17,170,83,15,79,151,158,72,35,88,12,221,132,190,95,115,202,165,123,226\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,359,4000,32075,101,1461002,99,68570,254,10001,140,60,79,150,951,24,2014223714,65,68570,1461000,1461002,10001,365,Definitions.IPS(68569,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(900,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(367,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(59,Definitions.P.D,Definitions.S.SHORT,false),71,365,1461001,9999)"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [150,78,54,249,59,102,255,159,234,73,176,236,253,126,167,200,96,249,214,106,141,1,139,213,218,193,131,114,21,206,142,238],\"legalEntityIdCounterparty\": [185,213,16,254,38,113,50,200,141,250,229,171,218,217,227,165,232,191,117,203,51,180,1,51,234,182,226,25,30,194,28,251],\"dayCountConvention\": 2,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 59,\"statusDate\": 4900,\"initialExchangeDate\": 97,\"maturityDate\": 31,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 25,\"cycleAnchorDateOfRateReset\": 10,\"cycleAnchorDateOfScalingIndex\": 5,\"cycleAnchorDateOfFee\": 365,\"notionalPrincipal\": 91,\"nominalInterestRate\": 0,\"feeAccrued\": 15,\"accruedInterest\": 121,\"rateMultiplier\": 255,\"rateSpread\": 23,\"feeRate\": 367,\"nextResetRate\": 1461000,\"penaltyRate\": 71,\"premiumDiscountAtIED\": 146096,\"priceAtPurchaseDate\": 2014223714,\"cycleOfInterestPayment\": {\"i\": 159,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 368,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4000,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 899,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 26,\"lifeFloor\": 949,\"periodCap\": 86400,\"periodFloor\": 51}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"150,78,54,249,59,102,255,159,234,73,176,236,253,126,167,200,96,249,214,106,141,1,139,213,218,193,131,114,21,206,142,238\"),stringToBytes32(\"185,213,16,254,38,113,50,200,141,250,229,171,218,217,227,165,232,191,117,203,51,180,1,51,234,182,226,25,30,194,28,251\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,59,4900,97,31,0,0,0,25,10,5,365,91,0,15,121,255,23,367,1461000,71,146096,2014223714,Definitions.IPS(159,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(368,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(4000,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(899,Definitions.P.Y,Definitions.S.LONG,true),26,949,86400,51)"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [237,59,72,148,73,223,251,15,173,41,222,142,195,202,164,172,170,182,119,55,0,63,101,166,86,152,50,81,180,137,169,38],\"legalEntityIdCounterparty\": [51,53,195,64,50,175,65,58,29,88,98,241,159,174,110,73,74,67,132,253,245,37,106,19,55,98,11,252,56,125,101,35],\"dayCountConvention\": 1,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 3999,\"statusDate\": 61,\"initialExchangeDate\": 68569,\"maturityDate\": 20,\"terminationDate\": 97,\"purchaseDate\": 399,\"capitalizationEndDate\": 2448,\"cycleAnchorDateOfInterestPayment\": 15,\"cycleAnchorDateOfRateReset\": 60,\"cycleAnchorDateOfScalingIndex\": 257,\"cycleAnchorDateOfFee\": 2440588,\"notionalPrincipal\": 2014223714,\"nominalInterestRate\": 69,\"feeAccrued\": 140,\"accruedInterest\": 2448,\"rateMultiplier\": 951,\"rateSpread\": 367,\"feeRate\": 32076,\"nextResetRate\": 95,\"penaltyRate\": 900,\"premiumDiscountAtIED\": 2447,\"priceAtPurchaseDate\": 21,\"cycleOfInterestPayment\": {\"i\": 9,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 254,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 139,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 18,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 70,\"lifeFloor\": 12,\"periodCap\": 951,\"periodFloor\": 8}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"237,59,72,148,73,223,251,15,173,41,222,142,195,202,164,172,170,182,119,55,0,63,101,166,86,152,50,81,180,137,169,38\"),stringToBytes32(\"51,53,195,64,50,175,65,58,29,88,98,241,159,174,110,73,74,67,132,253,245,37,106,19,55,98,11,252,56,125,101,35\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,3999,61,68569,20,97,399,2448,15,60,257,2440588,2014223714,69,140,2448,951,367,32076,95,900,2447,21,Definitions.IPS(9,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(254,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(139,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(18,Definitions.P.M,Definitions.S.LONG,true),70,12,951,8)"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [56,196,35,51,23,85,32,47,125,133,127,107,203,221,138,148,47,193,59,196,19,184,89,63,29,145,241,166,173,2,13,48],\"legalEntityIdCounterparty\": [72,161,24,224,144,150,112,85,166,28,95,153,223,232,102,189,3,186,137,13,13,244,147,127,173,249,27,79,63,151,61,171],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 32074,\"statusDate\": 1462,\"initialExchangeDate\": 949,\"maturityDate\": 1532892063,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 32076,\"cycleAnchorDateOfRateReset\": 131,\"cycleAnchorDateOfScalingIndex\": 29,\"cycleAnchorDateOfFee\": 368,\"notionalPrincipal\": 150,\"nominalInterestRate\": 0,\"feeAccrued\": 1461000,\"accruedInterest\": 4900,\"rateMultiplier\": 7,\"rateSpread\": 111,\"feeRate\": 49,\"nextResetRate\": 1971,\"penaltyRate\": 9,\"premiumDiscountAtIED\": 1532892062,\"priceAtPurchaseDate\": 400,\"cycleOfInterestPayment\": {\"i\": 121,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 119,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 159,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 9999,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 18,\"lifeFloor\": 23,\"periodCap\": 99,\"periodFloor\": -1}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"56,196,35,51,23,85,32,47,125,133,127,107,203,221,138,148,47,193,59,196,19,184,89,63,29,145,241,166,173,2,13,48\"),stringToBytes32(\"72,161,24,224,144,150,112,85,166,28,95,153,223,232,102,189,3,186,137,13,13,244,147,127,173,249,27,79,63,151,61,171\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,32074,1462,949,1532892063,0,0,0,32076,131,29,368,150,0,1461000,4900,7,111,49,1971,9,1532892062,400,Definitions.IPS(121,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(119,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(159,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(9999,Definitions.P.H,Definitions.S.LONG,false),18,23,99,-1)"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.636ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:42:49.659ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}