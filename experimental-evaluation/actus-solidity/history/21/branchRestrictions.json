,{
  "2020-11-13T02:48:41.538ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "131",
                "sol": "131"
              },
              {
                "js": "1460",
                "sol": "1460"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:48:41.545ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.546ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.546ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.547ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.547ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.549ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12",
            "year < 1970"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12,year<1970",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.552ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "minute >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN minute>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.554ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.555ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.555ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.556ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.556ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.558ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.562ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.562ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.562ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.563ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.563ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.563ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.563ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.564ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.564ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.565ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.565ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.565ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.566ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.566ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.567ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.567ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.567ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.568ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.568ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.569ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223715,
                "sol": 2014223715
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:48:41.570ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1463,
                "sol": 1463
              },
              {
                "js": "1462",
                "sol": "1462"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:48:41.570ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892063,
                "sol": 1532892063
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:48:41.571ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892065,
                "sol": 1532892065
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:48:41.572ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 68570,
                "sol": 68570
              },
              {
                "js": "68569",
                "sol": "68569"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:48:41.572ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1339,
                "sol": 1339
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:48:41.575ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.576ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "1462",
                "sol": "1462"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:48:41.579ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.ContractRole.SEL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.ContractRole.BUY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.596ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "110",
                "sol": "110"
              },
              {
                "js": 109,
                "sol": 109
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "2447",
                "sol": "2447"
              },
              {
                "js": 2446,
                "sol": 2446
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "400",
                "sol": "400"
              },
              {
                "js": 399,
                "sol": 399
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "359",
                "sol": "359"
              },
              {
                "js": 358,
                "sol": 358
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": 6,
              "sol": "Definitions.DayCountConvention.BUS_252"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "146098",
                "sol": "146098"
              },
              {
                "js": 146097,
                "sol": 146097
              },
              {
                "js": 6,
                "sol": "Definitions.DayCountConvention.BUS_252"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T02:48:41.600ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.601ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.601ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.601ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.603ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{\"i\": 2440587,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(2440587,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{\"i\": 90,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(90,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{\"i\": 13,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(13,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{\"i\": 4799,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(4799,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.607ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.607ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.612ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractStatus.DQ"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.614ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.620ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.624ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.625ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.629ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 86401,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(86401,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 2014223716,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(2014223716,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 13,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(13,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 4900,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(4900,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 60,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(60,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 130,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(130,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 28,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.634ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{\"i\": 17,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(17,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{\"i\": 1336,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1336,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{\"i\": 10,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(10,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{\"i\": 1461,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1461,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{\"i\": 2440587,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2440587,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{\"i\": 79,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(79,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{\"i\": 39,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(39,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{\"i\": 86400,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(86400,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{\"i\": 400,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(400,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.643ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1461,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1461,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 101,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(101,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 949,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(949,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 10000,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(10000,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 15,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(15,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 12,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(12,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 19,\"p\": 99999,\"s\": 1,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.647ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 29,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 13},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 86399,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 2},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 109,\"eventType\": 1,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 13},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 2014223716,\"eventType\": 11,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 14},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 8,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 0},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 29,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 23,\"eventType\": 6,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 15},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 2,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 13},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 25,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 6,\"stfType\": 3},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 2014223716,\"eventType\": 8,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 14},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 39,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 8},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 160,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 15},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 401,\"eventType\": 18,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 18},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 10001,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 17},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 361,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 31,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 19},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 111,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 9},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 2014223715,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 17},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 1337,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 13,\"stfType\": 2},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 10001,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 4},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 68568,\"eventType\": 1,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 0},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 901,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 8},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 2447,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 17},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 130,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 7,\"stfType\": 15},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 129,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 13},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 4899,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 0},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 111,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 3},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 365,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 1461001,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 16},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 1,\"eventType\": 1,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 7},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 26,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 15},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 99,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 360,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 0},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 899,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 7},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 949,\"eventType\": 1,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 17},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 48,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 20},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 901,\"eventType\": 13,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 16},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 101,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 18},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 1461002,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 0},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 120,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 11},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 254,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 15,\"stfType\": 11},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 4,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 2},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 366,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 7},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 254,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 6},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 32076,\"eventType\": 5,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 2},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 1970,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 11},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 71,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 5},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 149,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 6},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 364,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 10},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 16,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 366,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 1},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 17,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 9},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 21,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 71,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 2},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 365,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 1,\"stfType\": 19},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 901,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 86399,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 11},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 4800,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 1},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 32075,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 9},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 69,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 9},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 10,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 20},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 951,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 17,\"stfType\": 20},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 68569,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 4},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 10001,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 15,\"stfType\": 2}]",
              "sol": "[Definitions.ProtoEvent(25,100,29,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RRY),Definitions.ProtoEvent(8,2440588,86399,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.AD),Definitions.ProtoEvent(17,2440588,109,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RRY),Definitions.ProtoEvent(101,32,2014223716,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SC),Definitions.ProtoEvent(146098,900,8,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SD),Definitions.ProtoEvent(19,1461,29,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(2440588,111,23,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.CD),Definitions.ProtoEvent(365,68568,2,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RRY),Definitions.ProtoEvent(256,1336,25,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IED),Definitions.ProtoEvent(254,2448,2014223716,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SC),Definitions.ProtoEvent(1338,119,39,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.FP),Definitions.ProtoEvent(401,10001,160,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.CD),Definitions.ProtoEvent(146096,51,401,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCB),Definitions.ProtoEvent(4899,7,10001,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MR),Definitions.ProtoEvent(89,48,361,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(97,39,31,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.STD),Definitions.ProtoEvent(20,1970,111,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PRD),Definitions.ProtoEvent(97,255,2014223715,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MR),Definitions.ProtoEvent(1532892064,4000,1337,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.AD),Definitions.ProtoEvent(50,70,10001,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IP),Definitions.ProtoEvent(64,1461001,68568,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SD),Definitions.ProtoEvent(79,1461001,901,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.FP),Definitions.ProtoEvent(49,131,2447,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MR),Definitions.ProtoEvent(2014223716,365,130,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.CD),Definitions.ProtoEvent(110,2448,129,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RRY),Definitions.ProtoEvent(39,121,4899,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SD),Definitions.ProtoEvent(28,139,111,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IED),Definitions.ProtoEvent(61,14,365,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(2014223714,160,1461001,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.DV),Definitions.ProtoEvent(950,68568,1,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PY),Definitions.ProtoEvent(3,951,26,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.CD),Definitions.ProtoEvent(10000,6,99,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(14,65,360,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SD),Definitions.ProtoEvent(4000,900,899,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PY),Definitions.ProtoEvent(91,60,949,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MR),Definitions.ProtoEvent(3,130,48,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.Child),Definitions.ProtoEvent(89,28,901,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.DV),Definitions.ProtoEvent(48,131,101,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCB),Definitions.ProtoEvent(4900,0,1461002,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SD),Definitions.ProtoEvent(79,17,120,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IPCI),Definitions.ProtoEvent(69,365,254,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCI),Definitions.ProtoEvent(400,21,4,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.AD),Definitions.ProtoEvent(399,361,366,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PY),Definitions.ProtoEvent(21,27,254,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PP),Definitions.ProtoEvent(121,141,32076,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.AD),Definitions.ProtoEvent(4001,30,1970,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCI),Definitions.ProtoEvent(949,65,71,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PR),Definitions.ProtoEvent(1970,951,149,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PP),Definitions.ProtoEvent(146097,2447,364,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.TD),Definitions.ProtoEvent(12,29,16,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(91,4901,366,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MD),Definitions.ProtoEvent(4001,99,17,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PRD),Definitions.ProtoEvent(89,13,21,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(4799,49,71,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.AD),Definitions.ProtoEvent(950,130,365,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.STD),Definitions.ProtoEvent(1461000,4901,901,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(19,32075,86399,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCI),Definitions.ProtoEvent(13,10000,4800,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MD),Definitions.ProtoEvent(1532892063,146096,32075,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PRD),Definitions.ProtoEvent(119,86400,69,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PRD),Definitions.ProtoEvent(159,400,10,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.Child),Definitions.ProtoEvent(151,129,951,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.Child),Definitions.ProtoEvent(91,359,68569,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IP),Definitions.ProtoEvent(257,4,10001,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.AD)]"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.663ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 79,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 1},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 32,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 5},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 1,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 4},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 1,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 3},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 99,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 1},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 1971,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 13},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 70,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 13},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 6,\"eventType\": 3,\"currency\": accounts[4],\"pofType\": 17,\"stfType\": 13},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 68570,\"eventType\": 13,\"currency\": accounts[6],\"pofType\": 2,\"stfType\": 20},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 99,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 16,\"stfType\": 1},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 4799,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 7},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 97,\"eventType\": 6,\"currency\": accounts[8],\"pofType\": 15,\"stfType\": 13},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 32,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 11},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 86401,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 15,\"stfType\": 18},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 151,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 14},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 31,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 10},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 399,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 17},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 146098,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 3999,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 5},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 141,\"eventType\": 11,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 5,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 9},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 401,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 97,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 1},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 159,\"eventType\": 19,\"currency\": accounts[8],\"pofType\": 15,\"stfType\": 8},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 901,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 13},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 41,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 3},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 66,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 13},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 2014223714,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 4},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 2014223715,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 12},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 65,\"eventType\": 1,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 9999,\"eventType\": 19,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 1},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 101,\"eventType\": 6,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 899,\"eventType\": 1,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 2},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 900,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 5},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 4,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 12},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 97,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 4},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 28,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 146097,\"eventType\": 3,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 3},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 1969,\"eventType\": 4,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 17},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 40,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 9},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 1462,\"eventType\": 4,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 1},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 365,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 9},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 86399,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 8},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 86399,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 2},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 9,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 6},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 96,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 3},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 10000,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 5},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 4900,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 8,\"stfType\": 18},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 899,\"eventType\": 18,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 20},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 64,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 95,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 1,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 14},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 899,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 12},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 50,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 0},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 10,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 7},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 4000,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 16},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 66,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 1},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 1336,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 13},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 1970,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 13},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 1462,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 14},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 1462,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 14},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 96,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 9},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 79,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 32075,\"eventType\": 9,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 5}]",
              "sol": "[Definitions.ProtoEvent(1337,28,79,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MD),Definitions.ProtoEvent(50,1461,32,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PR),Definitions.ProtoEvent(4799,27,1,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IP),Definitions.ProtoEvent(17,121,1,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IED),Definitions.ProtoEvent(50,28,99,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.MD),Definitions.ProtoEvent(23,1971,1971,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RRY),Definitions.ProtoEvent(4800,141,70,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RRY),Definitions.ProtoEvent(2447,1,6,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RRY),Definitions.ProtoEvent(95,399,68570,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.Child),Definitions.ProtoEvent(149,3,99,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MD),Definitions.ProtoEvent(31,121,4799,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PY),Definitions.ProtoEvent(146098,1460,97,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RRY),Definitions.ProtoEvent(49,149,32,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCI),Definitions.ProtoEvent(1,65,86401,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCB),Definitions.ProtoEvent(13,365,151,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SC),Definitions.ProtoEvent(50,26,31,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.TD),Definitions.ProtoEvent(1970,1,399,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MR),Definitions.ProtoEvent(17,950,146098,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(1461002,18,3999,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PR),Definitions.ProtoEvent(65,401,141,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(1336,1461,5,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PRD),Definitions.ProtoEvent(79,25,401,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(69,90,97,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MD),Definitions.ProtoEvent(255,110,159,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.FP),Definitions.ProtoEvent(24,1,901,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RRY),Definitions.ProtoEvent(3999,949,41,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IED),Definitions.ProtoEvent(140,6,66,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RRY),Definitions.ProtoEvent(32075,1969,2014223714,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IP),Definitions.ProtoEvent(11,2440589,2014223715,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.RR),Definitions.ProtoEvent(256,1,65,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(29,97,9999,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MD),Definitions.ProtoEvent(150,29,101,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(360,10001,899,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.AD),Definitions.ProtoEvent(50,359,900,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PR),Definitions.ProtoEvent(899,32075,4,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.RR),Definitions.ProtoEvent(86400,41,97,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IP),Definitions.ProtoEvent(51,5,28,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(146098,11,146097,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IED),Definitions.ProtoEvent(255,1461,1969,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MR),Definitions.ProtoEvent(86399,17,40,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PRD),Definitions.ProtoEvent(64,150,1462,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MD),Definitions.ProtoEvent(366,41,365,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PRD),Definitions.ProtoEvent(26,68569,86399,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.FP),Definitions.ProtoEvent(1336,2440587,86399,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.AD),Definitions.ProtoEvent(7,68568,9,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PP),Definitions.ProtoEvent(129,51,96,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IED),Definitions.ProtoEvent(2014223716,68570,10000,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PR),Definitions.ProtoEvent(50,1,4900,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCB),Definitions.ProtoEvent(121,10000,899,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.Child),Definitions.ProtoEvent(6,27,64,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(1,901,95,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(130,256,1,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SC),Definitions.ProtoEvent(949,28,899,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.RR),Definitions.ProtoEvent(26,4801,50,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SD),Definitions.ProtoEvent(950,901,10,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PY),Definitions.ProtoEvent(1461000,12,4000,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.DV),Definitions.ProtoEvent(901,257,66,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.MD),Definitions.ProtoEvent(146098,31,1336,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RRY),Definitions.ProtoEvent(32076,32075,1970,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RRY),Definitions.ProtoEvent(1336,86401,1462,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SC),Definitions.ProtoEvent(121,79,1462,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SC),Definitions.ProtoEvent(32074,68569,96,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PRD),Definitions.ProtoEvent(26,10000,79,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(29,96,32075,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PR)]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.680ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.683ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [221,250,233,249,40,192,86,34,131,170,146,50,48,197,228,252,7,240,158,18,99,12,3,212,166,93,125,35,183,238,45,180],\"legalEntityIdCounterparty\": [247,178,24,187,99,216,238,52,64,154,121,250,54,75,152,165,227,130,134,227,74,189,175,213,159,187,56,77,207,214,219,160],\"dayCountConvention\": 4,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 141,\"statusDate\": 20,\"initialExchangeDate\": 10000,\"maturityDate\": 159,\"terminationDate\": 401,\"purchaseDate\": 119,\"capitalizationEndDate\": 949,\"cycleAnchorDateOfInterestPayment\": 23,\"cycleAnchorDateOfRateReset\": 9999,\"cycleAnchorDateOfScalingIndex\": 32,\"cycleAnchorDateOfFee\": 1338,\"notionalPrincipal\": 951,\"nominalInterestRate\": 2014223716,\"feeAccrued\": 6,\"accruedInterest\": 48,\"rateMultiplier\": 8,\"rateSpread\": 256,\"feeRate\": 2,\"nextResetRate\": 60,\"penaltyRate\": 1971,\"premiumDiscountAtIED\": 68570,\"priceAtPurchaseDate\": 2448,\"cycleOfInterestPayment\": {\"i\": 130,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 89,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 149,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 70,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 364,\"lifeFloor\": 24,\"periodCap\": 63,\"periodFloor\": 4799}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"221,250,233,249,40,192,86,34,131,170,146,50,48,197,228,252,7,240,158,18,99,12,3,212,166,93,125,35,183,238,45,180\"),stringToBytes32(\"247,178,24,187,99,216,238,52,64,154,121,250,54,75,152,165,227,130,134,227,74,189,175,213,159,187,56,77,207,214,219,160\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,141,20,10000,159,401,119,949,23,9999,32,1338,951,2014223716,6,48,8,256,2,60,1971,68570,2448,Definitions.IPS(130,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(89,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(149,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(70,Definitions.P.D,Definitions.S.SHORT,false),364,24,63,4799)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.686ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [237,212,32,210,41,71,27,15,170,112,112,246,115,178,136,43,66,88,249,195,112,169,112,77,42,207,136,66,162,198,114,245],\"legalEntityIdCounterparty\": [228,111,219,196,11,70,109,122,36,75,28,118,80,25,94,106,140,64,48,137,109,32,84,133,68,159,22,0,67,246,141,105],\"dayCountConvention\": 3,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 1337,\"statusDate\": 32,\"initialExchangeDate\": 149,\"maturityDate\": 10000,\"terminationDate\": 1337,\"purchaseDate\": 2448,\"capitalizationEndDate\": 141,\"cycleAnchorDateOfInterestPayment\": 95,\"cycleAnchorDateOfRateReset\": 86400,\"cycleAnchorDateOfScalingIndex\": 1532892062,\"cycleAnchorDateOfFee\": 2014223714,\"notionalPrincipal\": 367,\"nominalInterestRate\": 1970,\"feeAccrued\": 899,\"accruedInterest\": 8,\"rateMultiplier\": 1,\"rateSpread\": 146098,\"feeRate\": 119,\"nextResetRate\": 19,\"penaltyRate\": 364,\"premiumDiscountAtIED\": 899,\"priceAtPurchaseDate\": 4,\"cycleOfInterestPayment\": {\"i\": 81,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1969,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 61,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 64,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 3,\"lifeFloor\": 255,\"periodCap\": 2014223714,\"periodFloor\": 1462}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"237,212,32,210,41,71,27,15,170,112,112,246,115,178,136,43,66,88,249,195,112,169,112,77,42,207,136,66,162,198,114,245\"),stringToBytes32(\"228,111,219,196,11,70,109,122,36,75,28,118,80,25,94,106,140,64,48,137,109,32,84,133,68,159,22,0,67,246,141,105\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,1337,32,149,10000,1337,2448,141,95,86400,1532892062,2014223714,367,1970,899,8,1,146098,119,19,364,899,4,Definitions.IPS(81,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(1969,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(61,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(64,Definitions.P.W,Definitions.S.LONG,false),3,255,2014223714,1462)"
            },
            {
              "js": "{\"lastEventTime\": 254,\"contractStatus\": 0,\"timeFromLastEvent\": 400,\"nominalValue\": 19,\"nominalAccrued\": 4,\"feeAccrued\": 23,\"nominalRate\": 86399,\"interestScalingMultiplier\": 2448,\"nominalScalingMultiplier\": 365,\"contractRoleSign\": 8}",
              "sol": "Definitions.ContractState(254,Definitions.ContractStatus.PF,400,19,4,23,86399,2448,365,Definitions.ContractRole.GUA)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.689ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [81,192,74,11,132,87,236,177,96,77,159,187,90,142,50,133,166,36,72,201,188,30,221,127,183,173,146,118,113,237,38,161],\"legalEntityIdCounterparty\": [67,144,163,11,55,70,233,171,198,9,47,81,143,161,68,188,139,233,113,248,68,171,202,157,204,137,18,201,217,141,138,142],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 1461,\"statusDate\": 161,\"initialExchangeDate\": 69,\"maturityDate\": 71,\"terminationDate\": 2014223714,\"purchaseDate\": 70,\"capitalizationEndDate\": 141,\"cycleAnchorDateOfInterestPayment\": 65,\"cycleAnchorDateOfRateReset\": 32074,\"cycleAnchorDateOfScalingIndex\": 91,\"cycleAnchorDateOfFee\": 29,\"notionalPrincipal\": 141,\"nominalInterestRate\": 11,\"feeAccrued\": -1,\"accruedInterest\": 18,\"rateMultiplier\": 61,\"rateSpread\": 68569,\"feeRate\": 40,\"nextResetRate\": 131,\"penaltyRate\": 96,\"premiumDiscountAtIED\": 3,\"priceAtPurchaseDate\": 119,\"cycleOfInterestPayment\": {\"i\": 11,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1461001,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 17,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2448,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 0,\"lifeFloor\": 8,\"periodCap\": 65,\"periodFloor\": 64}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"81,192,74,11,132,87,236,177,96,77,159,187,90,142,50,133,166,36,72,201,188,30,221,127,183,173,146,118,113,237,38,161\"),stringToBytes32(\"67,144,163,11,55,70,233,171,198,9,47,81,143,161,68,188,139,233,113,248,68,171,202,157,204,137,18,201,217,141,138,142\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,1461,161,69,71,2014223714,70,141,65,32074,91,29,141,11,-1,18,61,68569,40,131,96,3,119,Definitions.IPS(11,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(1461001,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(17,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(2448,Definitions.P.Y,Definitions.S.LONG,false),0,8,65,64)"
            },
            {
              "js": "{\"lastEventTime\": 254,\"contractStatus\": 2,\"timeFromLastEvent\": -1,\"nominalValue\": 86400,\"nominalAccrued\": 86400,\"feeAccrued\": 1336,\"nominalRate\": 949,\"interestScalingMultiplier\": 3,\"nominalScalingMultiplier\": 95,\"contractRoleSign\": 3}",
              "sol": "Definitions.ContractState(254,Definitions.ContractStatus.DQ,-1,86400,86400,1336,949,3,95,Definitions.ContractRole.ST)"
            },
            {
              "js": "{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 89,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 1}",
              "sol": "Definitions.ProtoEvent(101,28,89,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MD)"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.696ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [16,164,38,125,73,28,242,251,86,128,49,215,165,229,242,217,88,156,16,31,178,83,245,236,7,249,182,220,172,58,209,237],\"legalEntityIdCounterparty\": [188,78,241,89,255,189,145,195,121,185,166,132,221,213,66,44,84,34,39,49,230,132,138,62,126,217,238,177,102,211,66,147],\"dayCountConvention\": 1,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 161,\"statusDate\": 3999,\"initialExchangeDate\": 257,\"maturityDate\": 129,\"terminationDate\": 66,\"purchaseDate\": 71,\"capitalizationEndDate\": 7,\"cycleAnchorDateOfInterestPayment\": 68569,\"cycleAnchorDateOfRateReset\": 13,\"cycleAnchorDateOfScalingIndex\": 30,\"cycleAnchorDateOfFee\": 141,\"notionalPrincipal\": 4801,\"nominalInterestRate\": 2440587,\"feeAccrued\": 2014223716,\"accruedInterest\": 3999,\"rateMultiplier\": 81,\"rateSpread\": 91,\"feeRate\": 20,\"nextResetRate\": 18,\"penaltyRate\": 32075,\"premiumDiscountAtIED\": 900,\"priceAtPurchaseDate\": 69,\"cycleOfInterestPayment\": {\"i\": 86399,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 30,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 27,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 41,\"lifeFloor\": 1461000,\"periodCap\": 86400,\"periodFloor\": 950}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"16,164,38,125,73,28,242,251,86,128,49,215,165,229,242,217,88,156,16,31,178,83,245,236,7,249,182,220,172,58,209,237\"),stringToBytes32(\"188,78,241,89,255,189,145,195,121,185,166,132,221,213,66,44,84,34,39,49,230,132,138,62,126,217,238,177,102,211,66,147\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,161,3999,257,129,66,71,7,68569,13,30,141,4801,2440587,2014223716,3999,81,91,20,18,32075,900,69,Definitions.IPS(86399,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(30,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(2,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(27,Definitions.P.Y,Definitions.S.SHORT,true),41,1461000,86400,950)"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [9,37,219,175,138,20,74,88,27,83,163,213,90,232,223,149,58,67,102,2,169,170,157,71,9,233,169,15,146,238,71,245],\"legalEntityIdCounterparty\": [97,206,193,146,203,48,235,194,201,82,50,177,183,229,112,248,6,29,76,131,204,132,243,35,70,5,155,223,64,49,45,116],\"dayCountConvention\": 0,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 2447,\"statusDate\": 7,\"initialExchangeDate\": 4899,\"maturityDate\": 1532892064,\"terminationDate\": 146098,\"purchaseDate\": 365,\"capitalizationEndDate\": 49,\"cycleAnchorDateOfInterestPayment\": 68570,\"cycleAnchorDateOfRateReset\": 901,\"cycleAnchorDateOfScalingIndex\": 899,\"cycleAnchorDateOfFee\": 89,\"notionalPrincipal\": 96,\"nominalInterestRate\": 255,\"feeAccrued\": 361,\"accruedInterest\": 120,\"rateMultiplier\": 1,\"rateSpread\": 10001,\"feeRate\": 20,\"nextResetRate\": 2440588,\"penaltyRate\": 140,\"premiumDiscountAtIED\": 146096,\"priceAtPurchaseDate\": 160,\"cycleOfInterestPayment\": {\"i\": 10000,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1532892062,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 86399,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 41,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 10,\"lifeFloor\": 10001,\"periodCap\": 9999,\"periodFloor\": 161}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"9,37,219,175,138,20,74,88,27,83,163,213,90,232,223,149,58,67,102,2,169,170,157,71,9,233,169,15,146,238,71,245\"),stringToBytes32(\"97,206,193,146,203,48,235,194,201,82,50,177,183,229,112,248,6,29,76,131,204,132,243,35,70,5,155,223,64,49,45,116\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,2447,7,4899,1532892064,146098,365,49,68570,901,899,89,96,255,361,120,1,10001,20,2440588,140,146096,160,Definitions.IPS(10000,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(1532892062,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(86399,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(41,Definitions.P.D,Definitions.S.SHORT,true),10,10001,9999,161)"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [10,81,115,42,233,197,224,201,0,73,218,120,108,198,175,115,196,52,225,136,196,177,95,44,195,140,93,83,14,204,117,175],\"legalEntityIdCounterparty\": [2,26,34,54,137,230,117,184,63,211,107,15,99,225,7,157,11,2,196,61,161,127,167,57,175,90,8,12,36,30,38,146],\"dayCountConvention\": 4,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 1461002,\"statusDate\": 68569,\"initialExchangeDate\": 2448,\"maturityDate\": 2440588,\"terminationDate\": 32,\"purchaseDate\": 32,\"capitalizationEndDate\": 119,\"cycleAnchorDateOfInterestPayment\": 257,\"cycleAnchorDateOfRateReset\": 254,\"cycleAnchorDateOfScalingIndex\": 1,\"cycleAnchorDateOfFee\": 68569,\"notionalPrincipal\": 64,\"nominalInterestRate\": 95,\"feeAccrued\": 86401,\"accruedInterest\": 64,\"rateMultiplier\": 4901,\"rateSpread\": -1,\"feeRate\": 80,\"nextResetRate\": 2014223715,\"penaltyRate\": 1532892063,\"premiumDiscountAtIED\": 899,\"priceAtPurchaseDate\": 4001,\"cycleOfInterestPayment\": {\"i\": 68570,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2440587,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 949,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1337,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 96,\"lifeFloor\": 64,\"periodCap\": 4799,\"periodFloor\": 367}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"10,81,115,42,233,197,224,201,0,73,218,120,108,198,175,115,196,52,225,136,196,177,95,44,195,140,93,83,14,204,117,175\"),stringToBytes32(\"2,26,34,54,137,230,117,184,63,211,107,15,99,225,7,157,11,2,196,61,161,127,167,57,175,90,8,12,36,30,38,146\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.N,1461002,68569,2448,2440588,32,32,119,257,254,1,68569,64,95,86401,64,4901,-1,80,2014223715,1532892063,899,4001,Definitions.IPS(68570,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(2440587,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(949,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(1337,Definitions.P.Y,Definitions.S.SHORT,false),96,64,4799,367)"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [49,66,12,161,101,141,72,24,175,15,243,93,54,109,123,47,170,104,222,200,147,43,23,94,204,237,132,252,162,129,41,234],\"legalEntityIdCounterparty\": [205,51,35,6,200,211,41,158,32,74,40,9,149,139,16,209,97,205,84,130,91,106,186,113,172,205,101,60,119,167,43,173],\"dayCountConvention\": 6,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 86401,\"statusDate\": 257,\"initialExchangeDate\": 89,\"maturityDate\": 1461001,\"terminationDate\": 96,\"purchaseDate\": 29,\"capitalizationEndDate\": 10000,\"cycleAnchorDateOfInterestPayment\": 2446,\"cycleAnchorDateOfRateReset\": 111,\"cycleAnchorDateOfScalingIndex\": 131,\"cycleAnchorDateOfFee\": 32074,\"notionalPrincipal\": 101,\"nominalInterestRate\": 81,\"feeAccrued\": 4001,\"accruedInterest\": 10000,\"rateMultiplier\": 68568,\"rateSpread\": 80,\"feeRate\": 256,\"nextResetRate\": 368,\"penaltyRate\": 9999,\"premiumDiscountAtIED\": 159,\"priceAtPurchaseDate\": 32076,\"cycleOfInterestPayment\": {\"i\": 69,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 130,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 80,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 129,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 901,\"lifeFloor\": 109,\"periodCap\": 24,\"periodFloor\": 89}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"49,66,12,161,101,141,72,24,175,15,243,93,54,109,123,47,170,104,222,200,147,43,23,94,204,237,132,252,162,129,41,234\"),stringToBytes32(\"205,51,35,6,200,211,41,158,32,74,40,9,149,139,16,209,97,205,84,130,91,106,186,113,172,205,101,60,119,167,43,173\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.N,86401,257,89,1461001,96,29,10000,2446,111,131,32074,101,81,4001,10000,68568,80,256,368,9999,159,32076,Definitions.IPS(69,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(130,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(80,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(129,Definitions.P.W,Definitions.S.LONG,true),901,109,24,89)"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [79,251,145,93,108,226,146,210,245,39,242,16,174,58,241,143,107,9,109,128,24,207,130,80,23,60,60,248,65,137,138,153],\"legalEntityIdCounterparty\": [43,125,143,158,249,71,9,7,248,163,241,181,89,186,31,45,208,52,3,116,85,137,4,149,14,75,242,247,68,188,9,142],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 4,\"statusDate\": 400,\"initialExchangeDate\": 32075,\"maturityDate\": 25,\"terminationDate\": 256,\"purchaseDate\": 0,\"capitalizationEndDate\": 1532892062,\"cycleAnchorDateOfInterestPayment\": 899,\"cycleAnchorDateOfRateReset\": 367,\"cycleAnchorDateOfScalingIndex\": 120,\"cycleAnchorDateOfFee\": 111,\"notionalPrincipal\": 4901,\"nominalInterestRate\": 25,\"feeAccrued\": 68570,\"accruedInterest\": 23,\"rateMultiplier\": 131,\"rateSpread\": 2,\"feeRate\": 1461001,\"nextResetRate\": 11,\"penaltyRate\": 100,\"premiumDiscountAtIED\": 1461,\"priceAtPurchaseDate\": 61,\"cycleOfInterestPayment\": {\"i\": 141,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 141,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 89,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 96,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 20,\"lifeFloor\": 32,\"periodCap\": 4901,\"periodFloor\": 161}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"79,251,145,93,108,226,146,210,245,39,242,16,174,58,241,143,107,9,109,128,24,207,130,80,23,60,60,248,65,137,138,153\"),stringToBytes32(\"43,125,143,158,249,71,9,7,248,163,241,181,89,186,31,45,208,52,3,116,85,137,4,149,14,75,242,247,68,188,9,142\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,4,400,32075,25,256,0,1532892062,899,367,120,111,4901,25,68570,23,131,2,1461001,11,100,1461,61,Definitions.IPS(141,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(141,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(89,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(96,Definitions.P.Q,Definitions.S.LONG,true),20,32,4901,161)"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [173,203,159,189,64,142,12,19,220,235,38,66,228,122,134,36,119,149,203,25,2,154,229,55,236,162,233,202,101,148,155,171],\"legalEntityIdCounterparty\": [198,110,96,40,68,48,171,200,241,66,236,124,192,96,15,5,164,57,76,232,243,132,113,57,103,6,3,191,209,132,182,13],\"dayCountConvention\": 3,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 64,\"statusDate\": 1338,\"initialExchangeDate\": 32075,\"maturityDate\": 359,\"terminationDate\": 1,\"purchaseDate\": 399,\"capitalizationEndDate\": 4801,\"cycleAnchorDateOfInterestPayment\": 365,\"cycleAnchorDateOfRateReset\": 368,\"cycleAnchorDateOfScalingIndex\": 257,\"cycleAnchorDateOfFee\": 2446,\"notionalPrincipal\": 151,\"nominalInterestRate\": 60,\"feeAccrued\": 80,\"accruedInterest\": 1462,\"rateMultiplier\": 51,\"rateSpread\": 1461000,\"feeRate\": 951,\"nextResetRate\": 17,\"penaltyRate\": 4900,\"premiumDiscountAtIED\": 899,\"priceAtPurchaseDate\": 4800,\"cycleOfInterestPayment\": {\"i\": 95,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1461,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 81,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 66,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 368,\"lifeFloor\": 950,\"periodCap\": 1461,\"periodFloor\": 399}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"173,203,159,189,64,142,12,19,220,235,38,66,228,122,134,36,119,149,203,25,2,154,229,55,236,162,233,202,101,148,155,171\"),stringToBytes32(\"198,110,96,40,68,48,171,200,241,66,236,124,192,96,15,5,164,57,76,232,243,132,113,57,103,6,3,191,209,132,182,13\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,64,1338,32075,359,1,399,4801,365,368,257,2446,151,60,80,1462,51,1461000,951,17,4900,899,4800,Definitions.IPS(95,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1461,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(81,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(66,Definitions.P.Q,Definitions.S.LONG,true),368,950,1461,399)"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [25,215,157,15,88,177,62,240,58,80,52,199,246,175,220,255,144,135,42,12,39,125,88,200,126,168,154,38,77,67,54,130],\"legalEntityIdCounterparty\": [113,89,1,91,103,20,107,147,157,128,3,40,237,64,39,194,220,126,241,158,12,183,88,82,59,122,103,88,163,80,75,168],\"dayCountConvention\": 1,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 0,\"statusDate\": 13,\"initialExchangeDate\": 1,\"maturityDate\": 5,\"terminationDate\": 13,\"purchaseDate\": 25,\"capitalizationEndDate\": 119,\"cycleAnchorDateOfInterestPayment\": 367,\"cycleAnchorDateOfRateReset\": 399,\"cycleAnchorDateOfScalingIndex\": 1969,\"cycleAnchorDateOfFee\": 900,\"notionalPrincipal\": 96,\"nominalInterestRate\": 1969,\"feeAccrued\": 8,\"accruedInterest\": 146097,\"rateMultiplier\": 66,\"rateSpread\": 63,\"feeRate\": 2448,\"nextResetRate\": 21,\"penaltyRate\": 96,\"premiumDiscountAtIED\": 3,\"priceAtPurchaseDate\": 2440588,\"cycleOfInterestPayment\": {\"i\": 8,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 15,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1532892062,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 17,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 129,\"lifeFloor\": 79,\"periodCap\": 1532892063,\"periodFloor\": 159}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"25,215,157,15,88,177,62,240,58,80,52,199,246,175,220,255,144,135,42,12,39,125,88,200,126,168,154,38,77,67,54,130\"),stringToBytes32(\"113,89,1,91,103,20,107,147,157,128,3,40,237,64,39,194,220,126,241,158,12,183,88,82,59,122,103,88,163,80,75,168\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,0,13,1,5,13,25,119,367,399,1969,900,96,1969,8,146097,66,63,2448,21,96,3,2440588,Definitions.IPS(8,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(15,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(1532892062,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(17,Definitions.P.D,Definitions.S.LONG,false),129,79,1532892063,159)"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [55,98,119,108,229,201,191,116,75,251,48,243,193,195,147,132,93,164,42,69,204,245,198,188,237,107,172,53,124,249,151,149],\"legalEntityIdCounterparty\": [194,3,11,227,162,87,231,98,104,0,51,248,163,21,195,174,209,118,233,94,82,91,11,97,93,49,24,54,223,22,114,248],\"dayCountConvention\": 2,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 90,\"statusDate\": 129,\"initialExchangeDate\": 60,\"maturityDate\": 68570,\"terminationDate\": 121,\"purchaseDate\": 81,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 121,\"cycleAnchorDateOfRateReset\": 146097,\"cycleAnchorDateOfScalingIndex\": 71,\"cycleAnchorDateOfFee\": 64,\"notionalPrincipal\": 32074,\"nominalInterestRate\": 901,\"feeAccrued\": 254,\"accruedInterest\": 99,\"rateMultiplier\": 901,\"rateSpread\": 1,\"feeRate\": 1,\"nextResetRate\": 1461002,\"penaltyRate\": -1,\"premiumDiscountAtIED\": 97,\"priceAtPurchaseDate\": 23,\"cycleOfInterestPayment\": {\"i\": 109,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 68569,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 160,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 86400,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 4001,\"lifeFloor\": 24,\"periodCap\": 146097,\"periodFloor\": 1532892064}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"55,98,119,108,229,201,191,116,75,251,48,243,193,195,147,132,93,164,42,69,204,245,198,188,237,107,172,53,124,249,151,149\"),stringToBytes32(\"194,3,11,227,162,87,231,98,104,0,51,248,163,21,195,174,209,118,233,94,82,91,11,97,93,49,24,54,223,22,114,248\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,90,129,60,68570,121,81,0,121,146097,71,64,32074,901,254,99,901,1,1,1461002,-1,97,23,Definitions.IPS(109,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(68569,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(160,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(86400,Definitions.P.H,Definitions.S.LONG,true),4001,24,146097,1532892064)"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [130,229,164,168,74,235,68,244,101,253,245,61,70,37,4,143,3,180,142,104,27,141,32,108,54,51,81,29,201,217,27,252],\"legalEntityIdCounterparty\": [14,145,136,219,146,57,54,18,3,204,50,90,19,206,188,205,229,58,191,218,141,55,34,159,64,133,29,83,101,182,94,234],\"dayCountConvention\": 2,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 80,\"statusDate\": 368,\"initialExchangeDate\": 10000,\"maturityDate\": 399,\"terminationDate\": 16,\"purchaseDate\": 32,\"capitalizationEndDate\": 160,\"cycleAnchorDateOfInterestPayment\": 68570,\"cycleAnchorDateOfRateReset\": 131,\"cycleAnchorDateOfScalingIndex\": 32075,\"cycleAnchorDateOfFee\": 949,\"notionalPrincipal\": 360,\"nominalInterestRate\": 949,\"feeAccrued\": 141,\"accruedInterest\": 17,\"rateMultiplier\": 2014223716,\"rateSpread\": 89,\"feeRate\": 4,\"nextResetRate\": 11,\"penaltyRate\": 361,\"premiumDiscountAtIED\": 1461001,\"priceAtPurchaseDate\": 24,\"cycleOfInterestPayment\": {\"i\": 1461001,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 51,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 29,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2440589,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 1460,\"lifeFloor\": 900,\"periodCap\": 0,\"periodFloor\": 60}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"130,229,164,168,74,235,68,244,101,253,245,61,70,37,4,143,3,180,142,104,27,141,32,108,54,51,81,29,201,217,27,252\"),stringToBytes32(\"14,145,136,219,146,57,54,18,3,204,50,90,19,206,188,205,229,58,191,218,141,55,34,159,64,133,29,83,101,182,94,234\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,80,368,10000,399,16,32,160,68570,131,32075,949,360,949,141,17,2014223716,89,4,11,361,1461001,24,Definitions.IPS(1461001,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(51,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(29,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(2440589,Definitions.P.M,Definitions.S.LONG,true),1460,900,0,60)"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [89,158,135,11,66,252,192,39,226,154,123,142,127,190,238,96,27,32,159,136,106,152,17,133,211,36,56,137,205,104,66,176],\"legalEntityIdCounterparty\": [224,175,59,14,196,20,160,196,225,165,190,242,62,166,157,8,246,40,184,26,39,177,160,231,190,226,105,58,1,60,99,92],\"dayCountConvention\": 4,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 950,\"statusDate\": 1461,\"initialExchangeDate\": 1,\"maturityDate\": 68569,\"terminationDate\": 119,\"purchaseDate\": 14,\"capitalizationEndDate\": 89,\"cycleAnchorDateOfInterestPayment\": 9999,\"cycleAnchorDateOfRateReset\": 86399,\"cycleAnchorDateOfScalingIndex\": 4900,\"cycleAnchorDateOfFee\": 26,\"notionalPrincipal\": 96,\"nominalInterestRate\": 10001,\"feeAccrued\": 61,\"accruedInterest\": 111,\"rateMultiplier\": 40,\"rateSpread\": 95,\"feeRate\": 18,\"nextResetRate\": 146098,\"penaltyRate\": 81,\"premiumDiscountAtIED\": 68570,\"priceAtPurchaseDate\": 257,\"cycleOfInterestPayment\": {\"i\": 49,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2440588,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 64,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 96,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 51,\"lifeFloor\": 3999,\"periodCap\": 1970,\"periodFloor\": 1461}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"89,158,135,11,66,252,192,39,226,154,123,142,127,190,238,96,27,32,159,136,106,152,17,133,211,36,56,137,205,104,66,176\"),stringToBytes32(\"224,175,59,14,196,20,160,196,225,165,190,242,62,166,157,8,246,40,184,26,39,177,160,231,190,226,105,58,1,60,99,92\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,950,1461,1,68569,119,14,89,9999,86399,4900,26,96,10001,61,111,40,95,18,146098,81,68570,257,Definitions.IPS(49,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(2440588,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(64,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(96,Definitions.P.W,Definitions.S.SHORT,true),51,3999,1970,1461)"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [230,52,3,227,193,228,119,226,107,129,195,145,128,114,163,89,86,221,122,77,118,136,128,195,192,83,15,152,86,24,169,124],\"legalEntityIdCounterparty\": [76,114,2,76,42,87,177,8,26,134,10,4,145,36,128,209,92,243,198,226,47,45,38,232,135,84,218,111,190,4,215,15],\"dayCountConvention\": 2,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 50,\"statusDate\": 2447,\"initialExchangeDate\": 5,\"maturityDate\": 365,\"terminationDate\": 101,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 2,\"cycleAnchorDateOfRateReset\": 1971,\"cycleAnchorDateOfScalingIndex\": 32,\"cycleAnchorDateOfFee\": 12,\"notionalPrincipal\": 90,\"nominalInterestRate\": 0,\"feeAccrued\": 68570,\"accruedInterest\": 361,\"rateMultiplier\": 401,\"rateSpread\": 13,\"feeRate\": 11,\"nextResetRate\": 2014223715,\"penaltyRate\": 48,\"premiumDiscountAtIED\": 13,\"priceAtPurchaseDate\": 51,\"cycleOfInterestPayment\": {\"i\": 1337,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 17,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1532892064,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 23,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 949,\"lifeFloor\": 19,\"periodCap\": 1969,\"periodFloor\": -1}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"230,52,3,227,193,228,119,226,107,129,195,145,128,114,163,89,86,221,122,77,118,136,128,195,192,83,15,152,86,24,169,124\"),stringToBytes32(\"76,114,2,76,42,87,177,8,26,134,10,4,145,36,128,209,92,243,198,226,47,45,38,232,135,84,218,111,190,4,215,15\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.N,50,2447,5,365,101,0,0,2,1971,32,12,90,0,68570,361,401,13,11,2014223715,48,13,51,Definitions.IPS(1337,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(17,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(1532892064,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(23,Definitions.P.H,Definitions.S.SHORT,true),949,19,1969,-1)"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [224,158,227,131,128,116,175,27,98,242,35,2,223,84,152,197,228,57,94,111,202,205,132,112,202,227,153,171,13,103,66,222],\"legalEntityIdCounterparty\": [255,99,27,55,74,225,54,67,0,191,83,63,170,163,164,44,218,17,144,171,220,179,2,159,25,93,172,34,134,4,131,46],\"dayCountConvention\": 6,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 64,\"statusDate\": 367,\"initialExchangeDate\": 366,\"maturityDate\": 3,\"terminationDate\": 1969,\"purchaseDate\": 1970,\"capitalizationEndDate\": 4799,\"cycleAnchorDateOfInterestPayment\": 4800,\"cycleAnchorDateOfRateReset\": 32,\"cycleAnchorDateOfScalingIndex\": 68570,\"cycleAnchorDateOfFee\": 89,\"notionalPrincipal\": 25,\"nominalInterestRate\": 20,\"feeAccrued\": 89,\"accruedInterest\": 1461001,\"rateMultiplier\": 10000,\"rateSpread\": 25,\"feeRate\": 111,\"nextResetRate\": 99,\"penaltyRate\": 80,\"premiumDiscountAtIED\": 110,\"priceAtPurchaseDate\": 130,\"cycleOfInterestPayment\": {\"i\": 61,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 951,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 10000,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 32,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 131,\"lifeFloor\": 2440589,\"periodCap\": 96,\"periodFloor\": 69}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"224,158,227,131,128,116,175,27,98,242,35,2,223,84,152,197,228,57,94,111,202,205,132,112,202,227,153,171,13,103,66,222\"),stringToBytes32(\"255,99,27,55,74,225,54,67,0,191,83,63,170,163,164,44,218,17,144,171,220,179,2,159,25,93,172,34,134,4,131,46\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,64,367,366,3,1969,1970,4799,4800,32,68570,89,25,20,89,1461001,10000,25,111,99,80,110,130,Definitions.IPS(61,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(951,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(10000,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(32,Definitions.P.Q,Definitions.S.SHORT,false),131,2440589,96,69)"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [67,139,211,208,155,50,50,154,98,189,108,130,252,227,255,8,154,171,67,89,201,70,53,151,135,89,57,248,162,124,191,171],\"legalEntityIdCounterparty\": [111,3,93,224,232,98,139,125,247,166,158,249,81,118,9,227,0,101,168,130,183,219,191,126,64,227,161,239,160,226,13,180],\"dayCountConvention\": 0,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 4899,\"statusDate\": 140,\"initialExchangeDate\": 4,\"maturityDate\": 9999,\"terminationDate\": 1532892062,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 11,\"cycleAnchorDateOfFee\": 23,\"notionalPrincipal\": 68568,\"nominalInterestRate\": 0,\"feeAccrued\": 150,\"accruedInterest\": 65,\"rateMultiplier\": 4800,\"rateSpread\": 11,\"feeRate\": 32074,\"nextResetRate\": 68570,\"penaltyRate\": 12,\"premiumDiscountAtIED\": 4000,\"priceAtPurchaseDate\": 64,\"cycleOfInterestPayment\": {\"i\": 2446,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 89,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1461002,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 23,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 63,\"lifeFloor\": 3999,\"periodCap\": 1,\"periodFloor\": 6}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"67,139,211,208,155,50,50,154,98,189,108,130,252,227,255,8,154,171,67,89,201,70,53,151,135,89,57,248,162,124,191,171\"),stringToBytes32(\"111,3,93,224,232,98,139,125,247,166,158,249,81,118,9,227,0,101,168,130,183,219,191,126,64,227,161,239,160,226,13,180\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,4899,140,4,9999,1532892062,0,0,1,0,11,23,68568,0,150,65,4800,11,32074,68570,12,4000,64,Definitions.IPS(2446,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(89,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(1461002,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(23,Definitions.P.D,Definitions.S.LONG,true),63,3999,1,6)"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [170,253,54,121,76,109,41,67,3,133,224,168,229,27,196,243,235,168,79,168,224,141,161,244,223,169,135,17,51,165,153,103],\"legalEntityIdCounterparty\": [2,146,170,244,83,124,162,235,214,78,23,133,3,70,130,2,211,32,15,206,167,31,90,52,37,62,54,215,217,214,206,68],\"dayCountConvention\": 6,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 68569,\"statusDate\": 2014223714,\"initialExchangeDate\": 96,\"maturityDate\": 1970,\"terminationDate\": 81,\"purchaseDate\": 89,\"capitalizationEndDate\": 2014223715,\"cycleAnchorDateOfInterestPayment\": 7,\"cycleAnchorDateOfRateReset\": 65,\"cycleAnchorDateOfScalingIndex\": 120,\"cycleAnchorDateOfFee\": 4,\"notionalPrincipal\": 64,\"nominalInterestRate\": 40,\"feeAccrued\": 0,\"accruedInterest\": 25,\"rateMultiplier\": 149,\"rateSpread\": 66,\"feeRate\": 86400,\"nextResetRate\": 66,\"penaltyRate\": 1,\"premiumDiscountAtIED\": 18,\"priceAtPurchaseDate\": 97,\"cycleOfInterestPayment\": {\"i\": 150,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2014223714,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 30,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 130,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 28,\"lifeFloor\": 2440587,\"periodCap\": 2014223716,\"periodFloor\": 2440589}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"170,253,54,121,76,109,41,67,3,133,224,168,229,27,196,243,235,168,79,168,224,141,161,244,223,169,135,17,51,165,153,103\"),stringToBytes32(\"2,146,170,244,83,124,162,235,214,78,23,133,3,70,130,2,211,32,15,206,167,31,90,52,37,62,54,215,217,214,206,68\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,68569,2014223714,96,1970,81,89,2014223715,7,65,120,4,64,40,0,25,149,66,86400,66,1,18,97,Definitions.IPS(150,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(2014223714,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(30,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(130,Definitions.P.W,Definitions.S.SHORT,true),28,2440587,2014223716,2440589)"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [149,55,200,216,17,53,113,16,62,6,234,165,43,152,143,142,31,213,204,41,1,224,178,91,182,146,65,56,158,138,239,90],\"legalEntityIdCounterparty\": [12,149,173,40,198,142,109,195,151,163,93,222,57,50,163,101,85,222,123,154,253,138,162,186,87,196,251,221,96,244,201,94],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 27,\"statusDate\": 400,\"initialExchangeDate\": 68570,\"maturityDate\": 24,\"terminationDate\": 24,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 131,\"cycleAnchorDateOfRateReset\": 151,\"cycleAnchorDateOfScalingIndex\": 4900,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 26,\"nominalInterestRate\": 0,\"feeAccrued\": 146096,\"accruedInterest\": 255,\"rateMultiplier\": 4899,\"rateSpread\": 1338,\"feeRate\": 96,\"nextResetRate\": 2014223714,\"penaltyRate\": 14,\"premiumDiscountAtIED\": 365,\"priceAtPurchaseDate\": 7,\"cycleOfInterestPayment\": {\"i\": 68570,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 15,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 17,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 399,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 17,\"lifeFloor\": 121,\"periodCap\": 1970,\"periodFloor\": 13}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"149,55,200,216,17,53,113,16,62,6,234,165,43,152,143,142,31,213,204,41,1,224,178,91,182,146,65,56,158,138,239,90\"),stringToBytes32(\"12,149,173,40,198,142,109,195,151,163,93,222,57,50,163,101,85,222,123,154,253,138,162,186,87,196,251,221,96,244,201,94\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.A,27,400,68570,24,24,0,0,131,151,4900,0,26,0,146096,255,4899,1338,96,2014223714,14,365,7,Definitions.IPS(68570,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(15,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(17,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(399,Definitions.P.Q,Definitions.S.LONG,true),17,121,1970,13)"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [84,169,3,208,53,204,64,22,39,3,142,109,211,56,231,41,34,237,101,240,227,49,194,126,41,124,41,186,194,34,211,23],\"legalEntityIdCounterparty\": [207,155,10,211,187,231,32,119,227,105,201,131,240,183,191,28,172,206,189,152,72,162,100,36,172,46,126,9,148,25,213,114],\"dayCountConvention\": 1,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 99,\"statusDate\": 1532892063,\"initialExchangeDate\": 2448,\"maturityDate\": 64,\"terminationDate\": 8,\"purchaseDate\": 950,\"capitalizationEndDate\": 90,\"cycleAnchorDateOfInterestPayment\": 2014223714,\"cycleAnchorDateOfRateReset\": 51,\"cycleAnchorDateOfScalingIndex\": 12,\"cycleAnchorDateOfFee\": 39,\"notionalPrincipal\": 32,\"nominalInterestRate\": 32075,\"feeAccrued\": 31,\"accruedInterest\": -1,\"rateMultiplier\": 2440587,\"rateSpread\": 131,\"feeRate\": 130,\"nextResetRate\": 68569,\"penaltyRate\": 86400,\"premiumDiscountAtIED\": 32,\"priceAtPurchaseDate\": 130,\"cycleOfInterestPayment\": {\"i\": 68569,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2448,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 63,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 21,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 91,\"lifeFloor\": 31,\"periodCap\": 27,\"periodFloor\": 48}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"84,169,3,208,53,204,64,22,39,3,142,109,211,56,231,41,34,237,101,240,227,49,194,126,41,124,41,186,194,34,211,23\"),stringToBytes32(\"207,155,10,211,187,231,32,119,227,105,201,131,240,183,191,28,172,206,189,152,72,162,100,36,172,46,126,9,148,25,213,114\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,99,1532892063,2448,64,8,950,90,2014223714,51,12,39,32,32075,31,-1,2440587,131,130,68569,86400,32,130,Definitions.IPS(68569,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(2448,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(63,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(21,Definitions.P.D,Definitions.S.SHORT,true),91,31,27,48)"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [170,207,249,114,137,36,173,237,168,200,102,151,227,25,13,66,195,241,205,186,214,94,229,118,139,10,35,165,13,127,70,198],\"legalEntityIdCounterparty\": [172,177,111,148,189,191,146,154,137,245,15,133,236,1,35,212,153,222,201,253,71,188,85,57,239,38,93,209,18,138,79,110],\"dayCountConvention\": 0,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 41,\"statusDate\": 1461001,\"initialExchangeDate\": 1,\"maturityDate\": 159,\"terminationDate\": 32,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 60,\"cycleAnchorDateOfRateReset\": 17,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 7,\"notionalPrincipal\": 2440589,\"nominalInterestRate\": 0,\"feeAccrued\": 150,\"accruedInterest\": 1,\"rateMultiplier\": 4901,\"rateSpread\": 11,\"feeRate\": 2,\"nextResetRate\": 2440587,\"penaltyRate\": 14,\"premiumDiscountAtIED\": 25,\"priceAtPurchaseDate\": 12,\"cycleOfInterestPayment\": {\"i\": 24,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 149,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 28,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 151,\"lifeFloor\": 21,\"periodCap\": 97,\"periodFloor\": 99}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"170,207,249,114,137,36,173,237,168,200,102,151,227,25,13,66,195,241,205,186,214,94,229,118,139,10,35,165,13,127,70,198\"),stringToBytes32(\"172,177,111,148,189,191,146,154,137,245,15,133,236,1,35,212,153,222,201,253,71,188,85,57,239,38,93,209,18,138,79,110\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.A,41,1461001,1,159,32,0,0,60,17,0,7,2440589,0,150,1,4901,11,2,2440587,14,25,12,Definitions.IPS(24,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(149,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(28,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(2,Definitions.P.Q,Definitions.S.LONG,false),151,21,97,99)"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [84,60,229,247,175,240,215,32,109,123,141,116,212,28,35,106,8,187,89,142,62,220,225,75,9,191,152,99,230,79,115,223],\"legalEntityIdCounterparty\": [200,29,210,79,175,10,253,209,81,235,232,201,54,49,103,238,44,162,219,140,6,227,155,197,223,117,209,247,79,122,137,71],\"dayCountConvention\": 5,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 18,\"statusDate\": 1532892063,\"initialExchangeDate\": 139,\"maturityDate\": 17,\"terminationDate\": 2014223716,\"purchaseDate\": 1532892062,\"capitalizationEndDate\": 60,\"cycleAnchorDateOfInterestPayment\": 4900,\"cycleAnchorDateOfRateReset\": 141,\"cycleAnchorDateOfScalingIndex\": 400,\"cycleAnchorDateOfFee\": 96,\"notionalPrincipal\": 13,\"nominalInterestRate\": 1338,\"feeAccrued\": 1462,\"accruedInterest\": 70,\"rateMultiplier\": 4900,\"rateSpread\": 24,\"feeRate\": 2448,\"nextResetRate\": 4901,\"penaltyRate\": 2014223716,\"premiumDiscountAtIED\": 2,\"priceAtPurchaseDate\": 151,\"cycleOfInterestPayment\": {\"i\": 9999,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1460,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 949,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 0,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 146096,\"lifeFloor\": 10000,\"periodCap\": 91,\"periodFloor\": 69}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"84,60,229,247,175,240,215,32,109,123,141,116,212,28,35,106,8,187,89,142,62,220,225,75,9,191,152,99,230,79,115,223\"),stringToBytes32(\"200,29,210,79,175,10,253,209,81,235,232,201,54,49,103,238,44,162,219,140,6,227,155,197,223,117,209,247,79,122,137,71\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,18,1532892063,139,17,2014223716,1532892062,60,4900,141,400,96,13,1338,1462,70,4900,24,2448,4901,2014223716,2,151,Definitions.IPS(9999,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(1460,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(949,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(0,Definitions.P.M,Definitions.S.LONG,true),146096,10000,91,69)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [102,66,167,33,231,0,73,31,216,20,15,95,15,90,28,82,116,152,183,90,51,120,73,100,213,209,50,162,32,90,93,55],\"legalEntityIdCounterparty\": [141,87,192,55,28,148,219,255,156,209,6,101,131,54,198,142,22,237,174,20,39,51,200,32,79,121,140,245,108,29,64,229],\"dayCountConvention\": 1,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 254,\"statusDate\": 400,\"initialExchangeDate\": 4001,\"maturityDate\": 120,\"terminationDate\": 68569,\"purchaseDate\": 51,\"capitalizationEndDate\": 11,\"cycleAnchorDateOfInterestPayment\": 1,\"cycleAnchorDateOfRateReset\": 90,\"cycleAnchorDateOfScalingIndex\": 31,\"cycleAnchorDateOfFee\": 96,\"notionalPrincipal\": 68570,\"nominalInterestRate\": 110,\"feeAccrued\": 25,\"accruedInterest\": 366,\"rateMultiplier\": 2014223716,\"rateSpread\": 50,\"feeRate\": 4900,\"nextResetRate\": 96,\"penaltyRate\": 20,\"premiumDiscountAtIED\": 129,\"priceAtPurchaseDate\": 4901,\"cycleOfInterestPayment\": {\"i\": 10001,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 949,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 141,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 11,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 129,\"lifeFloor\": 4,\"periodCap\": 1970,\"periodFloor\": 951}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"102,66,167,33,231,0,73,31,216,20,15,95,15,90,28,82,116,152,183,90,51,120,73,100,213,209,50,162,32,90,93,55\"),stringToBytes32(\"141,87,192,55,28,148,219,255,156,209,6,101,131,54,198,142,22,237,174,20,39,51,200,32,79,121,140,245,108,29,64,229\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,254,400,4001,120,68569,51,11,1,90,31,96,68570,110,25,366,2014223716,50,4900,96,20,129,4901,Definitions.IPS(10001,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(949,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(141,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(11,Definitions.P.D,Definitions.S.LONG,false),129,4,1970,951)"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [129,70,19,100,98,231,3,46,43,157,138,193,201,35,221,129,85,122,178,207,198,221,153,242,204,118,204,32,238,208,143,235],\"legalEntityIdCounterparty\": [133,207,105,143,169,255,69,85,67,58,86,92,45,24,18,171,120,209,41,72,152,157,174,14,118,187,54,76,142,88,25,202],\"dayCountConvention\": 0,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 86401,\"statusDate\": 86399,\"initialExchangeDate\": 110,\"maturityDate\": 86401,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 40,\"cycleAnchorDateOfRateReset\": 79,\"cycleAnchorDateOfScalingIndex\": 1461,\"cycleAnchorDateOfFee\": 1336,\"notionalPrincipal\": 86400,\"nominalInterestRate\": 0,\"feeAccrued\": 150,\"accruedInterest\": 29,\"rateMultiplier\": 86399,\"rateSpread\": 96,\"feeRate\": 2014223715,\"nextResetRate\": 89,\"penaltyRate\": 951,\"premiumDiscountAtIED\": 1,\"priceAtPurchaseDate\": 30,\"cycleOfInterestPayment\": {\"i\": 91,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2440587,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1461002,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 4800,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 0,\"lifeFloor\": 2,\"periodCap\": 149,\"periodFloor\": 151}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"129,70,19,100,98,231,3,46,43,157,138,193,201,35,221,129,85,122,178,207,198,221,153,242,204,118,204,32,238,208,143,235\"),stringToBytes32(\"133,207,105,143,169,255,69,85,67,58,86,92,45,24,18,171,120,209,41,72,152,157,174,14,118,187,54,76,142,88,25,202\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.N,86401,86399,110,86401,0,0,0,40,79,1461,1336,86400,0,150,29,86399,96,2014223715,89,951,1,30,Definitions.IPS(91,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(2440587,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(1461002,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(4800,Definitions.P.M,Definitions.S.LONG,false),0,2,149,151)"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [71,31,242,173,74,6,236,71,125,100,23,153,120,20,224,31,157,44,246,136,129,9,110,114,215,87,252,250,48,215,237,178],\"legalEntityIdCounterparty\": [170,127,204,215,139,89,233,170,197,122,144,56,2,77,25,192,100,137,38,3,171,3,118,213,213,239,72,236,29,216,197,116],\"dayCountConvention\": 3,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 96,\"statusDate\": 68568,\"initialExchangeDate\": 40,\"maturityDate\": 899,\"terminationDate\": 1461001,\"purchaseDate\": 24,\"capitalizationEndDate\": 1461,\"cycleAnchorDateOfInterestPayment\": 1461002,\"cycleAnchorDateOfRateReset\": 17,\"cycleAnchorDateOfScalingIndex\": 11,\"cycleAnchorDateOfFee\": 159,\"notionalPrincipal\": 69,\"nominalInterestRate\": 80,\"feeAccrued\": 20,\"accruedInterest\": 1969,\"rateMultiplier\": 68569,\"rateSpread\": 2014223714,\"feeRate\": 96,\"nextResetRate\": 150,\"penaltyRate\": 4,\"premiumDiscountAtIED\": 31,\"priceAtPurchaseDate\": 130,\"cycleOfInterestPayment\": {\"i\": 10000,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 401,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 3,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 86400,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 11,\"lifeFloor\": 80,\"periodCap\": 1337,\"periodFloor\": 19}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"71,31,242,173,74,6,236,71,125,100,23,153,120,20,224,31,157,44,246,136,129,9,110,114,215,87,252,250,48,215,237,178\"),stringToBytes32(\"170,127,204,215,139,89,233,170,197,122,144,56,2,77,25,192,100,137,38,3,171,3,118,213,213,239,72,236,29,216,197,116\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,96,68568,40,899,1461001,24,1461,1461002,17,11,159,69,80,20,1969,68569,2014223714,96,150,4,31,130,Definitions.IPS(10000,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(401,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(3,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(86400,Definitions.P.M,Definitions.S.LONG,true),11,80,1337,19)"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [47,251,8,218,38,16,84,76,51,206,247,215,32,193,83,2,193,16,93,223,19,255,51,66,96,119,113,209,202,161,233,21],\"legalEntityIdCounterparty\": [99,124,174,254,72,35,253,203,18,31,10,54,35,223,174,245,180,100,75,29,28,69,0,188,160,67,45,124,8,98,14,33],\"dayCountConvention\": 1,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 2447,\"statusDate\": 11,\"initialExchangeDate\": 14,\"maturityDate\": 1461002,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 141,\"cycleAnchorDateOfRateReset\": 900,\"cycleAnchorDateOfScalingIndex\": 2447,\"cycleAnchorDateOfFee\": 901,\"notionalPrincipal\": 109,\"nominalInterestRate\": 0,\"feeAccrued\": 399,\"accruedInterest\": 4899,\"rateMultiplier\": 2014223716,\"rateSpread\": 2014223714,\"feeRate\": 1461001,\"nextResetRate\": 0,\"penaltyRate\": 90,\"premiumDiscountAtIED\": 1532892062,\"priceAtPurchaseDate\": 2014223714,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 95,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 130,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 41,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 1969,\"lifeFloor\": 901,\"periodCap\": 1532892063,\"periodFloor\": 141}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"47,251,8,218,38,16,84,76,51,206,247,215,32,193,83,2,193,16,93,223,19,255,51,66,96,119,113,209,202,161,233,21\"),stringToBytes32(\"99,124,174,254,72,35,253,203,18,31,10,54,35,223,174,245,180,100,75,29,28,69,0,188,160,67,45,124,8,98,14,33\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,2447,11,14,1461002,0,0,0,141,900,2447,901,109,0,399,4899,2014223716,2014223714,1461001,0,90,1532892062,2014223714,Definitions.IPS(4799,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(95,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(130,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(41,Definitions.P.D,Definitions.S.SHORT,true),1969,901,1532892063,141)"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.756ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T02:48:41.780ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}