,{
  "2020-11-10T13:26:17.348ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "368",
                "sol": "368"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:26:17.349ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.349ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.350ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.350ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.351ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.352ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.354ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "minute >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN minute>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.364ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.365ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.365ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.365ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.366ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.367ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.372ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.373ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.373ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.373ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.374ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.374ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.374ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.375ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.375ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.376ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.376ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.376ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.377ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.378ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.378ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.379ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.379ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.380ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.380ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.381ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2449,
                "sol": 2449
              },
              {
                "js": "2448",
                "sol": "2448"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:26:17.382ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 68571,
                "sol": 68571
              },
              {
                "js": "68570",
                "sol": "68570"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:26:17.382ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 950,
                "sol": 950
              },
              {
                "js": "949",
                "sol": "949"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:26:17.383ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 141,
                "sol": 141
              },
              {
                "js": "140",
                "sol": "140"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:26:17.384ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223717,
                "sol": 2014223717
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:26:17.384ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 900,
                "sol": 900
              },
              {
                "js": "899",
                "sol": "899"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:26:17.387ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.388ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "2440589",
                "sol": "2440589"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:26:17.390ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractRole.ST"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractRole.LG"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.395ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": 160,
                "sol": 160
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1462",
                "sol": "1462"
              },
              {
                "js": 1461,
                "sol": 1461
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": 30,
                "sol": 30
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "109",
                "sol": "109"
              },
              {
                "js": 108,
                "sol": 108
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": 5,
              "sol": "Definitions.DayCountConvention._30_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "41",
                "sol": "41"
              },
              {
                "js": 40,
                "sol": 40
              },
              {
                "js": 5,
                "sol": "Definitions.DayCountConvention._30_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T13:26:17.399ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.400ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.401ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.401ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.402ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{\"i\": 111,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(111,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{\"i\": 89,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(89,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{\"i\": 159,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(159,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{\"i\": 360,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(360,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.405ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.405ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.407ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractStatus.PF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.410ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.413ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.417ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.417ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.421ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 79,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(79,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 1460,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1460,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 28,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(28,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 1532892063,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1532892063,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 86401,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(86401,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 146097,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(146097,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 150,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.425ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{\"i\": 2014223715,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(2014223715,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{\"i\": 25,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(25,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{\"i\": 4900,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(4900,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{\"i\": 146097,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(146097,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{\"i\": 41,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(41,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{\"i\": 255,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(255,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{\"i\": 17,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(17,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{\"i\": 1460,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1460,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{\"i\": 96,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(96,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.435ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 101,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(101,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 366,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(366,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 4801,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(4801,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 4799,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(4799,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 366,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(366,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 64,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(64,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 6,\"p\": 99999,\"s\": 1,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.437ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 4899,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 3},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 130,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 5},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 24,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 17},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 7,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 7},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 151,\"eventType\": 5,\"currency\": accounts[2],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 32074,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 3},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 90,\"eventType\": 19,\"currency\": accounts[8],\"pofType\": 16,\"stfType\": 18},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 1460,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 12,\"stfType\": 10},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 89,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 10},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 5,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 16},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 1338,\"eventType\": 3,\"currency\": accounts[4],\"pofType\": 6,\"stfType\": 18},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 9999,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 17},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 254,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 15,\"stfType\": 4},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 60,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 3},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 14,\"eventType\": 6,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 18},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 0,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 18},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 111,\"eventType\": 6,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 5},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 0,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 13,\"stfType\": 13},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 20,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 2447,\"eventType\": 4,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 2},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 1462,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 17},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 131,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 4},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 95,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 13,\"eventType\": 2,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 15},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 32076,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 6},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 79,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 1},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 950,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 10},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 63,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 130,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 3},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 68570,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 16},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 80,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 15},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 10001,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 3},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 41,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 13,\"stfType\": 0},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 1532892062,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 8},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 5,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 1},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 1,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 8},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 23,\"eventType\": 11,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 10},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 254,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 6},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 110,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 139,\"eventType\": 5,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 900,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 1},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 49,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 3},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 15,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 6,\"stfType\": 7},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 1,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 1,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 7},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 367,\"eventType\": 1,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 10},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 901,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 4},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 951,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 3},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 10000,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 7},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 20,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 16},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 139,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 3},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 368,\"eventType\": 18,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 2447,\"eventType\": 1,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 4},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 400,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 17},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 61,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 2,\"stfType\": 5},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 1532892064,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 121,\"eventType\": 17,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 15},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 8,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 20},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 79,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 20},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 8,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 13,\"stfType\": 12},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 1970,\"eventType\": 1,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 14},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 361,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 10},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 9999,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 16},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 86399,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 4}]",
              "sol": "[Definitions.ProtoEvent(4800,2014223715,4899,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IED),Definitions.ProtoEvent(367,40,130,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PR),Definitions.ProtoEvent(950,40,24,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MR),Definitions.ProtoEvent(951,65,7,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PY),Definitions.ProtoEvent(139,3,151,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(50,48,32074,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IED),Definitions.ProtoEvent(109,86399,90,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCB),Definitions.ProtoEvent(2,1532892062,1460,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.TD),Definitions.ProtoEvent(60,9999,89,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.TD),Definitions.ProtoEvent(10000,66,5,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.DV),Definitions.ProtoEvent(3999,79,1338,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCB),Definitions.ProtoEvent(86400,91,9999,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MR),Definitions.ProtoEvent(31,59,254,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IP),Definitions.ProtoEvent(109,6,60,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IED),Definitions.ProtoEvent(19,2440588,14,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCB),Definitions.ProtoEvent(160,27,0,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCB),Definitions.ProtoEvent(900,5,111,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PR),Definitions.ProtoEvent(257,32075,0,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RRY),Definitions.ProtoEvent(68570,146096,20,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(32074,146097,2447,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.AD),Definitions.ProtoEvent(151,18,1462,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MR),Definitions.ProtoEvent(61,51,131,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IP),Definitions.ProtoEvent(32075,23,95,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(4901,99,13,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.CD),Definitions.ProtoEvent(91,60,32076,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PP),Definitions.ProtoEvent(12,68568,79,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.MD),Definitions.ProtoEvent(11,901,950,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.TD),Definitions.ProtoEvent(119,109,63,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(399,150,130,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IED),Definitions.ProtoEvent(5,97,68570,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.DV),Definitions.ProtoEvent(101,10,80,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.CD),Definitions.ProtoEvent(8,1461002,10001,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IED),Definitions.ProtoEvent(32076,30,41,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SD),Definitions.ProtoEvent(32,400,1532892062,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.FP),Definitions.ProtoEvent(1461000,79,5,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.MD),Definitions.ProtoEvent(150,150,1,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.FP),Definitions.ProtoEvent(121,2014223715,23,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.TD),Definitions.ProtoEvent(30,1532892063,254,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PP),Definitions.ProtoEvent(29,19,110,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(949,160,139,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(1971,9,900,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MD),Definitions.ProtoEvent(61,50,49,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IED),Definitions.ProtoEvent(24,65,15,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PY),Definitions.ProtoEvent(16,2447,1,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(27,4800,1,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PY),Definitions.ProtoEvent(4899,0,367,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.TD),Definitions.ProtoEvent(1461,4799,901,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IP),Definitions.ProtoEvent(949,69,951,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IED),Definitions.ProtoEvent(101,14,10000,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PY),Definitions.ProtoEvent(89,950,20,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.DV),Definitions.ProtoEvent(109,2440588,139,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IED),Definitions.ProtoEvent(40,60,368,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(1460,68569,2447,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IP),Definitions.ProtoEvent(32076,1532892064,400,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MR),Definitions.ProtoEvent(0,9,61,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PR),Definitions.ProtoEvent(2440588,65,1532892064,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(131,17,121,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.CD),Definitions.ProtoEvent(368,899,8,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.Child),Definitions.ProtoEvent(366,49,79,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.Child),Definitions.ProtoEvent(129,23,8,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RR),Definitions.ProtoEvent(151,1337,1970,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SC),Definitions.ProtoEvent(109,1337,361,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.TD),Definitions.ProtoEvent(23,4801,9999,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.DV),Definitions.ProtoEvent(12,1969,86399,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IP)]"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.449ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 60,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 5},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 13,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 2},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 3,\"eventType\": 16,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 8},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 2014223715,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 5},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 121,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 17},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 32075,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 0},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 25,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 2},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 10,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 14},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 146096,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 8},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 1,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 13},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 146097,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 365,\"eventType\": 4,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 16},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 121,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 6},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 27,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 10},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 51,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 7},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 2440589,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 15},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 146096,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 11},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 10001,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 12},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 2014223715,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 4},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 1461000,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 5},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 4900,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 9},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 401,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 6},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 89,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 0},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 4000,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 254,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 20},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 1969,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 2},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 7,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 18},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 150,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 13},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 8,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 8},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 150,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 10},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 24,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 12},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 4800,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 16},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 4001,\"eventType\": 4,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 6},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 68570,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 7,\"stfType\": 18},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 360,\"eventType\": 16,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 18},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 9999,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 366,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 19},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 10001,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 7},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 95,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 4},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 9999,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 12},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 366,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 20},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 4801,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 17,\"stfType\": 8},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 950,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 7},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 80,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 11},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 110,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 17,\"stfType\": 11},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 1532892062,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 15},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 949,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 20},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 3999,\"eventType\": 14,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 0},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 120,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 15,\"stfType\": 9},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 40,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 8},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 69,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 5},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 4,\"eventType\": 20,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 7},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 141,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 0},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 4901,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 13},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 69,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 13},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 70,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 19},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 1971,\"eventType\": 5,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 4},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 16,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 0},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 121,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 20},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 86399,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 13,\"stfType\": 10},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 1336,\"eventType\": 6,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 16},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 95,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 18},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 16,\"eventType\": 16,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 3},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 79,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 12}]",
              "sol": "[Definitions.ProtoEvent(11,10000,60,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PR),Definitions.ProtoEvent(97,4801,13,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.AD),Definitions.ProtoEvent(399,70,3,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.FP),Definitions.ProtoEvent(12,4800,2014223715,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PR),Definitions.ProtoEvent(14,89,121,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MR),Definitions.ProtoEvent(1461001,4000,32075,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.SD),Definitions.ProtoEvent(1969,1336,25,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.AD),Definitions.ProtoEvent(3999,11,10,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SC),Definitions.ProtoEvent(2440588,69,146096,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.FP),Definitions.ProtoEvent(31,140,1,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RRY),Definitions.ProtoEvent(365,366,146097,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(26,97,365,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.DV),Definitions.ProtoEvent(109,68568,121,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PP),Definitions.ProtoEvent(366,950,27,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.TD),Definitions.ProtoEvent(1461001,2440588,51,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PY),Definitions.ProtoEvent(19,32074,2440589,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.CD),Definitions.ProtoEvent(149,23,146096,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCI),Definitions.ProtoEvent(30,161,10001,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RR),Definitions.ProtoEvent(4801,14,2014223715,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IP),Definitions.ProtoEvent(9,15,1461000,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PR),Definitions.ProtoEvent(4001,64,4900,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PRD),Definitions.ProtoEvent(2014223715,1532892064,401,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PP),Definitions.ProtoEvent(9,32076,89,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SD),Definitions.ProtoEvent(12,401,4000,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(2448,6,254,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.Child),Definitions.ProtoEvent(129,101,1969,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.AD),Definitions.ProtoEvent(5,255,7,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCB),Definitions.ProtoEvent(16,119,150,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RRY),Definitions.ProtoEvent(65,64,8,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.FP),Definitions.ProtoEvent(1461002,8,150,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.TD),Definitions.ProtoEvent(900,49,24,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RR),Definitions.ProtoEvent(160,32,4800,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.DV),Definitions.ProtoEvent(81,95,4001,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PP),Definitions.ProtoEvent(900,161,68570,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCB),Definitions.ProtoEvent(365,367,360,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCB),Definitions.ProtoEvent(68570,366,9999,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(68570,17,366,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.STD),Definitions.ProtoEvent(1338,361,10001,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PY),Definitions.ProtoEvent(97,1969,95,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IP),Definitions.ProtoEvent(70,150,9999,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RR),Definitions.ProtoEvent(6,1532892064,366,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.Child),Definitions.ProtoEvent(31,13,4801,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.FP),Definitions.ProtoEvent(8,63,950,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PY),Definitions.ProtoEvent(900,1461002,80,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCI),Definitions.ProtoEvent(2440587,97,110,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCI),Definitions.ProtoEvent(899,70,1532892062,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.CD),Definitions.ProtoEvent(79,4900,949,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.Child),Definitions.ProtoEvent(256,31,3999,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SD),Definitions.ProtoEvent(1969,4001,120,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PRD),Definitions.ProtoEvent(40,61,40,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.FP),Definitions.ProtoEvent(161,4801,69,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PR),Definitions.ProtoEvent(151,60,4,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PY),Definitions.ProtoEvent(119,86399,141,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.SD),Definitions.ProtoEvent(59,1532892062,4901,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RRY),Definitions.ProtoEvent(48,367,69,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RRY),Definitions.ProtoEvent(2014223715,366,70,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.STD),Definitions.ProtoEvent(40,949,1971,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IP),Definitions.ProtoEvent(901,1971,16,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SD),Definitions.ProtoEvent(10001,1460,121,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.Child),Definitions.ProtoEvent(70,359,86399,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.TD),Definitions.ProtoEvent(1337,79,1336,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.DV),Definitions.ProtoEvent(150,4899,95,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCB),Definitions.ProtoEvent(70,1532892064,16,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IED),Definitions.ProtoEvent(86401,1969,79,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.RR)]"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.467ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.469ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [197,232,168,209,196,96,105,174,67,111,60,51,162,247,49,135,217,217,135,223,230,166,165,251,66,14,48,70,53,2,189,210],\"legalEntityIdCounterparty\": [110,166,4,167,165,179,14,238,197,46,219,252,210,117,51,48,158,74,119,228,215,48,244,4,11,81,210,168,103,158,227,203],\"dayCountConvention\": 4,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 61,\"statusDate\": 48,\"initialExchangeDate\": 0,\"maturityDate\": 256,\"terminationDate\": 4,\"purchaseDate\": 160,\"capitalizationEndDate\": 1461000,\"cycleAnchorDateOfInterestPayment\": 120,\"cycleAnchorDateOfRateReset\": 40,\"cycleAnchorDateOfScalingIndex\": 3,\"cycleAnchorDateOfFee\": 4,\"notionalPrincipal\": 32076,\"nominalInterestRate\": 100,\"feeAccrued\": 23,\"accruedInterest\": 4,\"rateMultiplier\": 99,\"rateSpread\": 31,\"feeRate\": 2446,\"nextResetRate\": 120,\"penaltyRate\": 257,\"premiumDiscountAtIED\": 15,\"priceAtPurchaseDate\": 360,\"cycleOfInterestPayment\": {\"i\": 401,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 95,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 254,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 0,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 120,\"lifeFloor\": 146096,\"periodCap\": 68569,\"periodFloor\": 257}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"197,232,168,209,196,96,105,174,67,111,60,51,162,247,49,135,217,217,135,223,230,166,165,251,66,14,48,70,53,2,189,210\"),stringToBytes32(\"110,166,4,167,165,179,14,238,197,46,219,252,210,117,51,48,158,74,119,228,215,48,244,4,11,81,210,168,103,158,227,203\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,61,48,0,256,4,160,1461000,120,40,3,4,32076,100,23,4,99,31,2446,120,257,15,360,Definitions.IPS(401,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(95,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(254,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(0,Definitions.P.Y,Definitions.S.SHORT,false),120,146096,68569,257)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.471ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [87,61,219,27,21,146,13,214,73,206,25,32,254,137,128,83,113,158,33,120,203,3,167,73,201,183,169,121,196,136,42,168],\"legalEntityIdCounterparty\": [103,168,137,109,35,55,121,184,202,193,94,102,37,53,22,255,100,216,169,122,233,139,218,122,23,194,115,85,216,115,189,236],\"dayCountConvention\": 1,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 141,\"statusDate\": 61,\"initialExchangeDate\": 9999,\"maturityDate\": 949,\"terminationDate\": 119,\"purchaseDate\": 18,\"capitalizationEndDate\": 2440587,\"cycleAnchorDateOfInterestPayment\": 50,\"cycleAnchorDateOfRateReset\": 5,\"cycleAnchorDateOfScalingIndex\": 100,\"cycleAnchorDateOfFee\": 257,\"notionalPrincipal\": 254,\"nominalInterestRate\": 367,\"feeAccrued\": 59,\"accruedInterest\": 2447,\"rateMultiplier\": 10000,\"rateSpread\": 68568,\"feeRate\": 130,\"nextResetRate\": 0,\"penaltyRate\": 3999,\"premiumDiscountAtIED\": 899,\"priceAtPurchaseDate\": 3,\"cycleOfInterestPayment\": {\"i\": 89,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 131,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 32074,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 17,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 949,\"lifeFloor\": 1460,\"periodCap\": 950,\"periodFloor\": 68568}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"87,61,219,27,21,146,13,214,73,206,25,32,254,137,128,83,113,158,33,120,203,3,167,73,201,183,169,121,196,136,42,168\"),stringToBytes32(\"103,168,137,109,35,55,121,184,202,193,94,102,37,53,22,255,100,216,169,122,233,139,218,122,23,194,115,85,216,115,189,236\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,141,61,9999,949,119,18,2440587,50,5,100,257,254,367,59,2447,10000,68568,130,0,3999,899,3,Definitions.IPS(89,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(131,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(32074,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(17,Definitions.P.Q,Definitions.S.LONG,false),949,1460,950,68568)"
            },
            {
              "js": "{\"lastEventTime\": 86401,\"contractStatus\": 2,\"timeFromLastEvent\": 50,\"nominalValue\": 151,\"nominalAccrued\": 2440589,\"feeAccrued\": 1461000,\"nominalRate\": 150,\"interestScalingMultiplier\": 5,\"nominalScalingMultiplier\": 159,\"contractRoleSign\": 7}",
              "sol": "Definitions.ContractState(86401,Definitions.ContractStatus.DQ,50,151,2440589,1461000,150,5,159,Definitions.ContractRole.SEL)"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.474ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [163,111,7,114,251,56,49,199,68,218,196,85,203,238,245,62,182,224,14,44,33,0,194,47,201,114,113,91,216,70,135,188],\"legalEntityIdCounterparty\": [81,212,75,54,35,19,208,248,178,99,226,14,119,198,59,118,50,158,209,182,94,152,33,184,107,134,153,128,186,145,92,139],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 368,\"statusDate\": 68568,\"initialExchangeDate\": 161,\"maturityDate\": 90,\"terminationDate\": 2447,\"purchaseDate\": 139,\"capitalizationEndDate\": 1532892062,\"cycleAnchorDateOfInterestPayment\": 61,\"cycleAnchorDateOfRateReset\": 69,\"cycleAnchorDateOfScalingIndex\": 23,\"cycleAnchorDateOfFee\": 1461000,\"notionalPrincipal\": 1462,\"nominalInterestRate\": 3999,\"feeAccrued\": 68570,\"accruedInterest\": 81,\"rateMultiplier\": 97,\"rateSpread\": 367,\"feeRate\": 51,\"nextResetRate\": 6,\"penaltyRate\": 1532892063,\"premiumDiscountAtIED\": 68570,\"priceAtPurchaseDate\": 90,\"cycleOfInterestPayment\": {\"i\": 50,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 149,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 368,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 140,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 61,\"lifeFloor\": 1532892064,\"periodCap\": 39,\"periodFloor\": 89}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"163,111,7,114,251,56,49,199,68,218,196,85,203,238,245,62,182,224,14,44,33,0,194,47,201,114,113,91,216,70,135,188\"),stringToBytes32(\"81,212,75,54,35,19,208,248,178,99,226,14,119,198,59,118,50,158,209,182,94,152,33,184,107,134,153,128,186,145,92,139\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.N,368,68568,161,90,2447,139,1532892062,61,69,23,1461000,1462,3999,68570,81,97,367,51,6,1532892063,68570,90,Definitions.IPS(50,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(149,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(368,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(140,Definitions.P.M,Definitions.S.LONG,false),61,1532892064,39,89)"
            },
            {
              "js": "{\"lastEventTime\": 97,\"contractStatus\": 1,\"timeFromLastEvent\": 86400,\"nominalValue\": 360,\"nominalAccrued\": 69,\"feeAccrued\": 1461,\"nominalRate\": 146097,\"interestScalingMultiplier\": 39,\"nominalScalingMultiplier\": 96,\"contractRoleSign\": 6}",
              "sol": "Definitions.ContractState(97,Definitions.ContractStatus.DL,86400,360,69,1461,146097,39,96,Definitions.ContractRole.BUY)"
            },
            {
              "js": "{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 254,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 11}",
              "sol": "Definitions.ProtoEvent(40,49,254,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IPCI)"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.479ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [147,5,3,17,239,75,60,215,95,146,228,183,71,157,6,101,166,206,188,68,185,145,15,42,75,75,238,40,149,243,49,246],\"legalEntityIdCounterparty\": [245,12,109,209,20,26,144,102,41,54,224,80,4,254,185,18,137,247,195,231,79,74,95,142,245,220,230,219,184,163,178,94],\"dayCountConvention\": 0,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 97,\"statusDate\": 7,\"initialExchangeDate\": 1461,\"maturityDate\": 161,\"terminationDate\": 66,\"purchaseDate\": 160,\"capitalizationEndDate\": 1461001,\"cycleAnchorDateOfInterestPayment\": 90,\"cycleAnchorDateOfRateReset\": 901,\"cycleAnchorDateOfScalingIndex\": 146097,\"cycleAnchorDateOfFee\": 12,\"notionalPrincipal\": 401,\"nominalInterestRate\": 4001,\"feeAccrued\": 64,\"accruedInterest\": 1336,\"rateMultiplier\": 68569,\"rateSpread\": 2440588,\"feeRate\": 1,\"nextResetRate\": 30,\"penaltyRate\": 13,\"premiumDiscountAtIED\": 141,\"priceAtPurchaseDate\": 3,\"cycleOfInterestPayment\": {\"i\": 1970,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2440587,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 28,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 0,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 86399,\"lifeFloor\": 368,\"periodCap\": 1460,\"periodFloor\": 65}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"147,5,3,17,239,75,60,215,95,146,228,183,71,157,6,101,166,206,188,68,185,145,15,42,75,75,238,40,149,243,49,246\"),stringToBytes32(\"245,12,109,209,20,26,144,102,41,54,224,80,4,254,185,18,137,247,195,231,79,74,95,142,245,220,230,219,184,163,178,94\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,97,7,1461,161,66,160,1461001,90,901,146097,12,401,4001,64,1336,68569,2440588,1,30,13,141,3,Definitions.IPS(1970,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(2440587,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(28,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(0,Definitions.P.D,Definitions.S.LONG,true),86399,368,1460,65)"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [35,78,153,199,253,94,251,23,164,83,138,180,62,218,131,66,114,89,71,82,142,42,228,147,194,240,51,69,89,199,181,106],\"legalEntityIdCounterparty\": [163,247,217,187,14,100,204,199,154,105,87,40,117,50,27,42,8,91,87,3,95,25,164,206,66,15,228,223,44,168,205,20],\"dayCountConvention\": 2,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 86400,\"statusDate\": 28,\"initialExchangeDate\": 80,\"maturityDate\": 2448,\"terminationDate\": 146097,\"purchaseDate\": 151,\"capitalizationEndDate\": 139,\"cycleAnchorDateOfInterestPayment\": 2014223716,\"cycleAnchorDateOfRateReset\": 111,\"cycleAnchorDateOfScalingIndex\": 99,\"cycleAnchorDateOfFee\": 2014223716,\"notionalPrincipal\": 255,\"nominalInterestRate\": 32,\"feeAccrued\": 951,\"accruedInterest\": 23,\"rateMultiplier\": 257,\"rateSpread\": 119,\"feeRate\": 51,\"nextResetRate\": 1532892062,\"penaltyRate\": 2,\"premiumDiscountAtIED\": 100,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 1461001,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 9,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 19,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 4799,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 4900,\"lifeFloor\": 30,\"periodCap\": 50,\"periodFloor\": 32076}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"35,78,153,199,253,94,251,23,164,83,138,180,62,218,131,66,114,89,71,82,142,42,228,147,194,240,51,69,89,199,181,106\"),stringToBytes32(\"163,247,217,187,14,100,204,199,154,105,87,40,117,50,27,42,8,91,87,3,95,25,164,206,66,15,228,223,44,168,205,20\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,86400,28,80,2448,146097,151,139,2014223716,111,99,2014223716,255,32,951,23,257,119,51,1532892062,2,100,1,Definitions.IPS(1461001,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(9,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(19,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(4799,Definitions.P.Y,Definitions.S.SHORT,true),4900,30,50,32076)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [5,223,140,205,183,206,179,173,127,129,178,117,201,241,139,92,7,206,232,201,144,97,24,249,175,69,34,193,177,164,76,229],\"legalEntityIdCounterparty\": [51,130,61,148,44,88,145,11,228,178,196,136,242,0,70,42,203,203,244,221,205,92,231,80,101,143,146,33,84,69,239,38],\"dayCountConvention\": 5,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 2014223715,\"statusDate\": 24,\"initialExchangeDate\": 1462,\"maturityDate\": 2440588,\"terminationDate\": 360,\"purchaseDate\": 16,\"capitalizationEndDate\": 4901,\"cycleAnchorDateOfInterestPayment\": 69,\"cycleAnchorDateOfRateReset\": 4799,\"cycleAnchorDateOfScalingIndex\": 16,\"cycleAnchorDateOfFee\": 2448,\"notionalPrincipal\": 69,\"nominalInterestRate\": 119,\"feeAccrued\": 30,\"accruedInterest\": 160,\"rateMultiplier\": 69,\"rateSpread\": 79,\"feeRate\": 61,\"nextResetRate\": 1338,\"penaltyRate\": 86401,\"premiumDiscountAtIED\": 10001,\"priceAtPurchaseDate\": 8,\"cycleOfInterestPayment\": {\"i\": 64,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2014223715,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 399,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 68570,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 159,\"lifeFloor\": 1337,\"periodCap\": 32076,\"periodFloor\": 1462}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"5,223,140,205,183,206,179,173,127,129,178,117,201,241,139,92,7,206,232,201,144,97,24,249,175,69,34,193,177,164,76,229\"),stringToBytes32(\"51,130,61,148,44,88,145,11,228,178,196,136,242,0,70,42,203,203,244,221,205,92,231,80,101,143,146,33,84,69,239,38\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,2014223715,24,1462,2440588,360,16,4901,69,4799,16,2448,69,119,30,160,69,79,61,1338,86401,10001,8,Definitions.IPS(64,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(2014223715,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(399,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(68570,Definitions.P.W,Definitions.S.LONG,false),159,1337,32076,1462)"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [247,83,182,121,22,236,190,114,72,118,102,222,46,113,171,86,83,58,124,46,161,213,191,16,102,64,255,93,225,125,84,78],\"legalEntityIdCounterparty\": [189,192,203,22,91,116,231,39,210,99,79,113,190,118,67,206,198,112,173,217,46,37,51,106,116,177,21,201,129,74,228,62],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 15,\"statusDate\": 2014223715,\"initialExchangeDate\": 65,\"maturityDate\": 1,\"terminationDate\": 2447,\"purchaseDate\": 50,\"capitalizationEndDate\": 400,\"cycleAnchorDateOfInterestPayment\": 90,\"cycleAnchorDateOfRateReset\": 9,\"cycleAnchorDateOfScalingIndex\": 70,\"cycleAnchorDateOfFee\": 1970,\"notionalPrincipal\": 14,\"nominalInterestRate\": 141,\"feeAccrued\": 901,\"accruedInterest\": 400,\"rateMultiplier\": 4899,\"rateSpread\": 146098,\"feeRate\": -1,\"nextResetRate\": 79,\"penaltyRate\": 146098,\"premiumDiscountAtIED\": 19,\"priceAtPurchaseDate\": 400,\"cycleOfInterestPayment\": {\"i\": 2446,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 141,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 146096,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 4801,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 140,\"lifeFloor\": 4,\"periodCap\": 399,\"periodFloor\": 131}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"247,83,182,121,22,236,190,114,72,118,102,222,46,113,171,86,83,58,124,46,161,213,191,16,102,64,255,93,225,125,84,78\"),stringToBytes32(\"189,192,203,22,91,116,231,39,210,99,79,113,190,118,67,206,198,112,173,217,46,37,51,106,116,177,21,201,129,74,228,62\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,15,2014223715,65,1,2447,50,400,90,9,70,1970,14,141,901,400,4899,146098,-1,79,146098,19,400,Definitions.IPS(2446,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(141,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(146096,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(4801,Definitions.P.D,Definitions.S.LONG,true),140,4,399,131)"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [46,162,95,84,5,139,91,85,53,234,109,142,7,1,22,255,96,95,225,246,73,163,41,59,44,219,26,237,83,121,110,117],\"legalEntityIdCounterparty\": [166,252,92,52,98,188,102,129,56,168,138,204,26,223,2,124,181,244,69,197,151,19,116,183,33,163,66,249,102,120,168,203],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 95,\"statusDate\": 360,\"initialExchangeDate\": 4001,\"maturityDate\": 3,\"terminationDate\": 21,\"purchaseDate\": 0,\"capitalizationEndDate\": 368,\"cycleAnchorDateOfInterestPayment\": 4800,\"cycleAnchorDateOfRateReset\": 2014223715,\"cycleAnchorDateOfScalingIndex\": 4801,\"cycleAnchorDateOfFee\": 8,\"notionalPrincipal\": 2014223714,\"nominalInterestRate\": 139,\"feeAccrued\": 68568,\"accruedInterest\": 109,\"rateMultiplier\": 257,\"rateSpread\": 1461,\"feeRate\": 80,\"nextResetRate\": 27,\"penaltyRate\": 40,\"premiumDiscountAtIED\": 1336,\"priceAtPurchaseDate\": 399,\"cycleOfInterestPayment\": {\"i\": 900,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1532892063,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 367,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 27,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 2440589,\"lifeFloor\": 141,\"periodCap\": 27,\"periodFloor\": 1337}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"46,162,95,84,5,139,91,85,53,234,109,142,7,1,22,255,96,95,225,246,73,163,41,59,44,219,26,237,83,121,110,117\"),stringToBytes32(\"166,252,92,52,98,188,102,129,56,168,138,204,26,223,2,124,181,244,69,197,151,19,116,183,33,163,66,249,102,120,168,203\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,95,360,4001,3,21,0,368,4800,2014223715,4801,8,2014223714,139,68568,109,257,1461,80,27,40,1336,399,Definitions.IPS(900,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(1532892063,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(367,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(27,Definitions.P.W,Definitions.S.LONG,true),2440589,141,27,1337)"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [52,124,68,15,104,223,174,187,247,56,204,244,212,145,209,212,149,75,90,193,215,244,102,87,113,87,198,149,53,167,35,130],\"legalEntityIdCounterparty\": [19,29,149,69,147,177,55,96,137,197,88,4,157,8,12,198,176,86,26,124,127,54,69,52,204,235,219,218,226,13,211,190],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 49,\"statusDate\": 69,\"initialExchangeDate\": 32,\"maturityDate\": 61,\"terminationDate\": 131,\"purchaseDate\": 0,\"capitalizationEndDate\": 99,\"cycleAnchorDateOfInterestPayment\": 4001,\"cycleAnchorDateOfRateReset\": 141,\"cycleAnchorDateOfScalingIndex\": 41,\"cycleAnchorDateOfFee\": 121,\"notionalPrincipal\": 150,\"nominalInterestRate\": 109,\"feeAccrued\": 28,\"accruedInterest\": 366,\"rateMultiplier\": 364,\"rateSpread\": 1461,\"feeRate\": 14,\"nextResetRate\": 4799,\"penaltyRate\": 1532892062,\"premiumDiscountAtIED\": 91,\"priceAtPurchaseDate\": 366,\"cycleOfInterestPayment\": {\"i\": 59,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 28,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 97,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1461,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 86400,\"lifeFloor\": 119,\"periodCap\": 13,\"periodFloor\": 161}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"52,124,68,15,104,223,174,187,247,56,204,244,212,145,209,212,149,75,90,193,215,244,102,87,113,87,198,149,53,167,35,130\"),stringToBytes32(\"19,29,149,69,147,177,55,96,137,197,88,4,157,8,12,198,176,86,26,124,127,54,69,52,204,235,219,218,226,13,211,190\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,49,69,32,61,131,0,99,4001,141,41,121,150,109,28,366,364,1461,14,4799,1532892062,91,366,Definitions.IPS(59,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(28,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(97,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(1461,Definitions.P.M,Definitions.S.LONG,false),86400,119,13,161)"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [87,252,202,6,172,7,38,154,39,37,176,20,110,245,119,123,134,53,234,198,68,8,157,76,113,65,8,119,55,246,20,247],\"legalEntityIdCounterparty\": [174,234,14,245,31,88,5,255,60,58,250,228,55,101,181,98,114,141,169,73,126,96,147,59,70,18,243,151,210,252,87,45],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 161,\"statusDate\": 4901,\"initialExchangeDate\": 2447,\"maturityDate\": 86400,\"terminationDate\": 366,\"purchaseDate\": 254,\"capitalizationEndDate\": 2446,\"cycleAnchorDateOfInterestPayment\": 1461,\"cycleAnchorDateOfRateReset\": 360,\"cycleAnchorDateOfScalingIndex\": 60,\"cycleAnchorDateOfFee\": 61,\"notionalPrincipal\": 8,\"nominalInterestRate\": 1461000,\"feeAccrued\": 68568,\"accruedInterest\": 10001,\"rateMultiplier\": 32074,\"rateSpread\": 10,\"feeRate\": 4800,\"nextResetRate\": 1461000,\"penaltyRate\": 4799,\"premiumDiscountAtIED\": 51,\"priceAtPurchaseDate\": 18,\"cycleOfInterestPayment\": {\"i\": 90,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 27,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 2447,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 23,\"lifeFloor\": 160,\"periodCap\": 257,\"periodFloor\": 31}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"87,252,202,6,172,7,38,154,39,37,176,20,110,245,119,123,134,53,234,198,68,8,157,76,113,65,8,119,55,246,20,247\"),stringToBytes32(\"174,234,14,245,31,88,5,255,60,58,250,228,55,101,181,98,114,141,169,73,126,96,147,59,70,18,243,151,210,252,87,45\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,161,4901,2447,86400,366,254,2446,1461,360,60,61,8,1461000,68568,10001,32074,10,4800,1461000,4799,51,18,Definitions.IPS(90,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(1,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(27,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(2447,Definitions.P.Q,Definitions.S.SHORT,false),23,160,257,31)"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [218,252,5,197,229,46,190,238,57,61,33,219,103,237,49,81,141,211,122,127,204,67,180,136,66,244,65,25,33,84,148,64],\"legalEntityIdCounterparty\": [252,137,94,2,152,91,132,217,137,44,87,40,111,78,28,68,133,177,52,237,59,80,246,51,240,8,254,213,232,151,94,98],\"dayCountConvention\": 5,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 4801,\"statusDate\": 9,\"initialExchangeDate\": 0,\"maturityDate\": 96,\"terminationDate\": 10,\"purchaseDate\": 5,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 121,\"cycleAnchorDateOfRateReset\": 130,\"cycleAnchorDateOfScalingIndex\": 2447,\"cycleAnchorDateOfFee\": 111,\"notionalPrincipal\": 121,\"nominalInterestRate\": 68570,\"feeAccrued\": 131,\"accruedInterest\": 27,\"rateMultiplier\": 40,\"rateSpread\": 24,\"feeRate\": 254,\"nextResetRate\": 130,\"penaltyRate\": 4900,\"premiumDiscountAtIED\": 3999,\"priceAtPurchaseDate\": 86399,\"cycleOfInterestPayment\": {\"i\": 360,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4799,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 159,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 3,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 131,\"lifeFloor\": 21,\"periodCap\": 360,\"periodFloor\": 5}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"218,252,5,197,229,46,190,238,57,61,33,219,103,237,49,81,141,211,122,127,204,67,180,136,66,244,65,25,33,84,148,64\"),stringToBytes32(\"252,137,94,2,152,91,132,217,137,44,87,40,111,78,28,68,133,177,52,237,59,80,246,51,240,8,254,213,232,151,94,98\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,4801,9,0,96,10,5,0,121,130,2447,111,121,68570,131,27,40,24,254,130,4900,3999,86399,Definitions.IPS(360,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(4799,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(159,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(3,Definitions.P.D,Definitions.S.SHORT,true),131,21,360,5)"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [126,129,86,6,216,76,131,186,156,184,78,104,227,159,167,112,4,243,223,30,126,224,96,187,151,212,197,78,38,51,63,217],\"legalEntityIdCounterparty\": [109,115,92,204,30,251,98,138,76,94,5,219,164,206,143,147,184,95,100,60,205,192,231,67,203,75,197,102,199,219,223,25],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 139,\"statusDate\": 129,\"initialExchangeDate\": 899,\"maturityDate\": 86400,\"terminationDate\": 97,\"purchaseDate\": 68568,\"capitalizationEndDate\": 1,\"cycleAnchorDateOfInterestPayment\": 256,\"cycleAnchorDateOfRateReset\": 364,\"cycleAnchorDateOfScalingIndex\": 17,\"cycleAnchorDateOfFee\": 18,\"notionalPrincipal\": 359,\"nominalInterestRate\": 65,\"feeAccrued\": 41,\"accruedInterest\": 19,\"rateMultiplier\": 25,\"rateSpread\": 11,\"feeRate\": 1532892062,\"nextResetRate\": 50,\"penaltyRate\": 109,\"premiumDiscountAtIED\": 12,\"priceAtPurchaseDate\": 364,\"cycleOfInterestPayment\": {\"i\": 59,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 901,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 10001,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 366,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 254,\"lifeFloor\": 89,\"periodCap\": 4899,\"periodFloor\": 86401}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"126,129,86,6,216,76,131,186,156,184,78,104,227,159,167,112,4,243,223,30,126,224,96,187,151,212,197,78,38,51,63,217\"),stringToBytes32(\"109,115,92,204,30,251,98,138,76,94,5,219,164,206,143,147,184,95,100,60,205,192,231,67,203,75,197,102,199,219,223,25\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,139,129,899,86400,97,68568,1,256,364,17,18,359,65,41,19,25,11,1532892062,50,109,12,364,Definitions.IPS(59,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(901,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(10001,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(366,Definitions.P.H,Definitions.S.LONG,true),254,89,4899,86401)"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [237,184,141,67,114,2,167,163,70,214,116,64,183,84,182,239,123,111,188,36,157,17,176,228,167,7,26,89,111,85,36,133],\"legalEntityIdCounterparty\": [145,38,97,19,251,163,163,13,32,117,16,50,128,141,194,10,163,23,89,9,147,141,32,110,35,31,22,166,100,91,134,196],\"dayCountConvention\": 4,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 131,\"statusDate\": 17,\"initialExchangeDate\": 399,\"maturityDate\": 3,\"terminationDate\": 32,\"purchaseDate\": 49,\"capitalizationEndDate\": 399,\"cycleAnchorDateOfInterestPayment\": 4900,\"cycleAnchorDateOfRateReset\": 23,\"cycleAnchorDateOfScalingIndex\": 120,\"cycleAnchorDateOfFee\": 151,\"notionalPrincipal\": 366,\"nominalInterestRate\": 50,\"feeAccrued\": 4900,\"accruedInterest\": 16,\"rateMultiplier\": 109,\"rateSpread\": 1532892063,\"feeRate\": -1,\"nextResetRate\": 26,\"penaltyRate\": 80,\"premiumDiscountAtIED\": 2440589,\"priceAtPurchaseDate\": 32,\"cycleOfInterestPayment\": {\"i\": 254,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 29,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 80,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 2014223716,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 1971,\"lifeFloor\": 2014223714,\"periodCap\": 100,\"periodFloor\": 951}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"237,184,141,67,114,2,167,163,70,214,116,64,183,84,182,239,123,111,188,36,157,17,176,228,167,7,26,89,111,85,36,133\"),stringToBytes32(\"145,38,97,19,251,163,163,13,32,117,16,50,128,141,194,10,163,23,89,9,147,141,32,110,35,31,22,166,100,91,134,196\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,131,17,399,3,32,49,399,4900,23,120,151,366,50,4900,16,109,1532892063,-1,26,80,2440589,32,Definitions.IPS(254,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(29,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(80,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(2014223716,Definitions.P.W,Definitions.S.LONG,true),1971,2014223714,100,951)"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [203,241,46,252,157,97,4,126,8,198,41,175,148,167,2,150,205,34,152,174,110,235,142,242,44,148,165,170,156,144,8,57],\"legalEntityIdCounterparty\": [87,117,235,199,100,125,118,148,217,145,8,130,40,89,192,18,132,94,4,242,128,35,103,123,123,14,173,213,155,223,230,118],\"dayCountConvention\": 0,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 30,\"statusDate\": 4799,\"initialExchangeDate\": 11,\"maturityDate\": 901,\"terminationDate\": 12,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 255,\"cycleAnchorDateOfRateReset\": 4800,\"cycleAnchorDateOfScalingIndex\": 28,\"cycleAnchorDateOfFee\": 110,\"notionalPrincipal\": 31,\"nominalInterestRate\": 0,\"feeAccrued\": 101,\"accruedInterest\": 119,\"rateMultiplier\": 161,\"rateSpread\": 4900,\"feeRate\": 1338,\"nextResetRate\": 0,\"penaltyRate\": 1461001,\"premiumDiscountAtIED\": 41,\"priceAtPurchaseDate\": 359,\"cycleOfInterestPayment\": {\"i\": 7,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 28,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 146097,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 899,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 0,\"lifeFloor\": 64,\"periodCap\": 4900,\"periodFloor\": 2440587}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"203,241,46,252,157,97,4,126,8,198,41,175,148,167,2,150,205,34,152,174,110,235,142,242,44,148,165,170,156,144,8,57\"),stringToBytes32(\"87,117,235,199,100,125,118,148,217,145,8,130,40,89,192,18,132,94,4,242,128,35,103,123,123,14,173,213,155,223,230,118\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,30,4799,11,901,12,0,0,255,4800,28,110,31,0,101,119,161,4900,1338,0,1461001,41,359,Definitions.IPS(7,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(28,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(146097,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(899,Definitions.P.Y,Definitions.S.SHORT,false),0,64,4900,2440587)"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [187,46,8,181,226,78,115,43,247,140,1,231,66,147,1,135,50,110,106,30,69,75,238,252,129,34,89,233,251,199,134,72],\"legalEntityIdCounterparty\": [140,95,165,120,106,214,124,206,154,130,252,158,8,0,146,187,23,189,212,249,204,73,232,213,151,234,4,239,188,121,36,130],\"dayCountConvention\": 1,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 111,\"statusDate\": 4800,\"initialExchangeDate\": 4901,\"maturityDate\": 951,\"terminationDate\": 27,\"purchaseDate\": 901,\"capitalizationEndDate\": 32076,\"cycleAnchorDateOfInterestPayment\": 1460,\"cycleAnchorDateOfRateReset\": 28,\"cycleAnchorDateOfScalingIndex\": 81,\"cycleAnchorDateOfFee\": 1461001,\"notionalPrincipal\": 0,\"nominalInterestRate\": 2014223715,\"feeAccrued\": 4801,\"accruedInterest\": 41,\"rateMultiplier\": 7,\"rateSpread\": 71,\"feeRate\": 91,\"nextResetRate\": 5,\"penaltyRate\": 40,\"premiumDiscountAtIED\": 109,\"priceAtPurchaseDate\": 101,\"cycleOfInterestPayment\": {\"i\": 6,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 21,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 69,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 9999,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 10001,\"lifeFloor\": 25,\"periodCap\": 399,\"periodFloor\": 23}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"187,46,8,181,226,78,115,43,247,140,1,231,66,147,1,135,50,110,106,30,69,75,238,252,129,34,89,233,251,199,134,72\"),stringToBytes32(\"140,95,165,120,106,214,124,206,154,130,252,158,8,0,146,187,23,189,212,249,204,73,232,213,151,234,4,239,188,121,36,130\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.N,111,4800,4901,951,27,901,32076,1460,28,81,1461001,0,2014223715,4801,41,7,71,91,5,40,109,101,Definitions.IPS(6,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(21,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(69,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(9999,Definitions.P.Y,Definitions.S.SHORT,true),10001,25,399,23)"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [234,74,182,62,177,164,27,35,7,120,192,180,236,148,31,151,193,215,173,203,106,240,78,47,83,228,207,19,227,169,96,204],\"legalEntityIdCounterparty\": [251,89,3,156,18,61,205,53,198,217,2,249,253,130,88,170,198,13,216,155,230,253,122,60,9,140,190,90,177,253,135,68],\"dayCountConvention\": 2,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 1,\"statusDate\": 6,\"initialExchangeDate\": 15,\"maturityDate\": 256,\"terminationDate\": 151,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 399,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 4900,\"cycleAnchorDateOfFee\": 15,\"notionalPrincipal\": 364,\"nominalInterestRate\": 0,\"feeAccrued\": 109,\"accruedInterest\": 4800,\"rateMultiplier\": 366,\"rateSpread\": 146098,\"feeRate\": 95,\"nextResetRate\": 71,\"penaltyRate\": 15,\"premiumDiscountAtIED\": 2447,\"priceAtPurchaseDate\": 13,\"cycleOfInterestPayment\": {\"i\": 10001,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1532892063,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 97,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 401,\"lifeFloor\": 1971,\"periodCap\": 1461002,\"periodFloor\": 2}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"234,74,182,62,177,164,27,35,7,120,192,180,236,148,31,151,193,215,173,203,106,240,78,47,83,228,207,19,227,169,96,204\"),stringToBytes32(\"251,89,3,156,18,61,205,53,198,217,2,249,253,130,88,170,198,13,216,155,230,253,122,60,9,140,190,90,177,253,135,68\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,1,6,15,256,151,0,0,399,0,4900,15,364,0,109,4800,366,146098,95,71,15,2447,13,Definitions.IPS(10001,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(1532892063,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(2,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(97,Definitions.P.Y,Definitions.S.SHORT,true),401,1971,1461002,2)"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [146,163,197,77,43,188,143,112,8,104,67,101,250,124,189,62,76,197,204,186,190,245,18,139,144,83,115,249,129,155,160,32],\"legalEntityIdCounterparty\": [72,220,92,16,36,189,37,32,69,100,172,23,177,87,179,253,226,58,106,243,180,140,186,57,55,111,87,13,125,19,83,59],\"dayCountConvention\": 0,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 399,\"statusDate\": 139,\"initialExchangeDate\": 131,\"maturityDate\": 3999,\"terminationDate\": 86400,\"purchaseDate\": 49,\"capitalizationEndDate\": 4900,\"cycleAnchorDateOfInterestPayment\": 2014223716,\"cycleAnchorDateOfRateReset\": 401,\"cycleAnchorDateOfScalingIndex\": 10001,\"cycleAnchorDateOfFee\": 121,\"notionalPrincipal\": 79,\"nominalInterestRate\": 60,\"feeAccrued\": 4799,\"accruedInterest\": 150,\"rateMultiplier\": 2014223716,\"rateSpread\": 1337,\"feeRate\": 4000,\"nextResetRate\": 16,\"penaltyRate\": 2014223716,\"premiumDiscountAtIED\": 19,\"priceAtPurchaseDate\": 81,\"cycleOfInterestPayment\": {\"i\": 255,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1462,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 12,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 19,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 399,\"lifeFloor\": 69,\"periodCap\": 1969,\"periodFloor\": 71}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"146,163,197,77,43,188,143,112,8,104,67,101,250,124,189,62,76,197,204,186,190,245,18,139,144,83,115,249,129,155,160,32\"),stringToBytes32(\"72,220,92,16,36,189,37,32,69,100,172,23,177,87,179,253,226,58,106,243,180,140,186,57,55,111,87,13,125,19,83,59\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.A,399,139,131,3999,86400,49,4900,2014223716,401,10001,121,79,60,4799,150,2014223716,1337,4000,16,2014223716,19,81,Definitions.IPS(255,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(1462,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(12,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(19,Definitions.P.W,Definitions.S.LONG,false),399,69,1969,71)"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [176,244,47,144,230,170,117,145,214,120,253,215,54,119,212,16,18,143,215,14,109,19,121,33,239,130,57,221,81,240,41,234],\"legalEntityIdCounterparty\": [40,144,205,114,95,123,132,250,90,72,16,231,71,197,215,70,84,220,20,101,213,30,73,185,31,161,242,14,163,127,40,6],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 71,\"statusDate\": 90,\"initialExchangeDate\": 359,\"maturityDate\": 3,\"terminationDate\": 61,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1532892062,\"cycleAnchorDateOfRateReset\": 6,\"cycleAnchorDateOfScalingIndex\": 101,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 0,\"nominalInterestRate\": 0,\"feeAccrued\": 131,\"accruedInterest\": 17,\"rateMultiplier\": 1971,\"rateSpread\": 2014223715,\"feeRate\": 2014223714,\"nextResetRate\": 401,\"penaltyRate\": 366,\"premiumDiscountAtIED\": 399,\"priceAtPurchaseDate\": 4000,\"cycleOfInterestPayment\": {\"i\": 2440589,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 17,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 7,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 50,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 109,\"lifeFloor\": 161,\"periodCap\": 23,\"periodFloor\": 95}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"176,244,47,144,230,170,117,145,214,120,253,215,54,119,212,16,18,143,215,14,109,19,121,33,239,130,57,221,81,240,41,234\"),stringToBytes32(\"40,144,205,114,95,123,132,250,90,72,16,231,71,197,215,70,84,220,20,101,213,30,73,185,31,161,242,14,163,127,40,6\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,71,90,359,3,61,0,0,1532892062,6,101,0,0,0,131,17,1971,2014223715,2014223714,401,366,399,4000,Definitions.IPS(2440589,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(17,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(7,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(50,Definitions.P.W,Definitions.S.LONG,false),109,161,23,95)"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [99,64,174,198,75,172,97,147,19,204,2,85,154,234,84,220,161,187,192,87,177,203,173,245,245,189,173,231,186,21,147,210],\"legalEntityIdCounterparty\": [103,112,15,155,50,232,173,81,7,174,28,196,151,150,193,176,217,241,190,8,0,13,237,18,14,110,72,206,156,109,202,240],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 360,\"statusDate\": 10001,\"initialExchangeDate\": 2446,\"maturityDate\": 3999,\"terminationDate\": 9,\"purchaseDate\": 3,\"capitalizationEndDate\": 101,\"cycleAnchorDateOfInterestPayment\": 17,\"cycleAnchorDateOfRateReset\": 139,\"cycleAnchorDateOfScalingIndex\": 359,\"cycleAnchorDateOfFee\": 59,\"notionalPrincipal\": 8,\"nominalInterestRate\": 359,\"feeAccrued\": 86400,\"accruedInterest\": 4001,\"rateMultiplier\": 1532892063,\"rateSpread\": 366,\"feeRate\": 255,\"nextResetRate\": 61,\"penaltyRate\": 2440589,\"premiumDiscountAtIED\": 361,\"priceAtPurchaseDate\": 80,\"cycleOfInterestPayment\": {\"i\": 1461002,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 61,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 901,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1338,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 2448,\"lifeFloor\": 49,\"periodCap\": 48,\"periodFloor\": 121}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"99,64,174,198,75,172,97,147,19,204,2,85,154,234,84,220,161,187,192,87,177,203,173,245,245,189,173,231,186,21,147,210\"),stringToBytes32(\"103,112,15,155,50,232,173,81,7,174,28,196,151,150,193,176,217,241,190,8,0,13,237,18,14,110,72,206,156,109,202,240\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,360,10001,2446,3999,9,3,101,17,139,359,59,8,359,86400,4001,1532892063,366,255,61,2440589,361,80,Definitions.IPS(1461002,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(61,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(901,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1338,Definitions.P.D,Definitions.S.SHORT,true),2448,49,48,121)"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [105,9,98,150,5,96,116,244,32,34,17,52,14,196,57,242,169,145,188,74,23,172,161,33,19,162,23,167,87,78,9,31],\"legalEntityIdCounterparty\": [188,221,242,200,195,104,98,129,103,6,46,89,23,77,92,24,173,137,44,54,16,222,170,96,165,212,128,92,56,103,72,232],\"dayCountConvention\": 2,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 60,\"statusDate\": 19,\"initialExchangeDate\": 48,\"maturityDate\": 2440589,\"terminationDate\": 10,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 23,\"cycleAnchorDateOfRateReset\": 1971,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 18,\"notionalPrincipal\": 4900,\"nominalInterestRate\": 0,\"feeAccrued\": 2440587,\"accruedInterest\": 368,\"rateMultiplier\": 8,\"rateSpread\": 69,\"feeRate\": 367,\"nextResetRate\": 70,\"penaltyRate\": 95,\"premiumDiscountAtIED\": 51,\"priceAtPurchaseDate\": 110,\"cycleOfInterestPayment\": {\"i\": 161,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 368,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 900,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 95,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 2446,\"lifeFloor\": 64,\"periodCap\": 401,\"periodFloor\": 68569}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"105,9,98,150,5,96,116,244,32,34,17,52,14,196,57,242,169,145,188,74,23,172,161,33,19,162,23,167,87,78,9,31\"),stringToBytes32(\"188,221,242,200,195,104,98,129,103,6,46,89,23,77,92,24,173,137,44,54,16,222,170,96,165,212,128,92,56,103,72,232\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,60,19,48,2440589,10,0,0,23,1971,0,18,4900,0,2440587,368,8,69,367,70,95,51,110,Definitions.IPS(161,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(368,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(900,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(95,Definitions.P.D,Definitions.S.SHORT,false),2446,64,401,68569)"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [81,68,144,249,163,247,152,31,40,1,78,53,134,120,179,253,79,10,47,2,226,158,214,251,50,158,87,223,24,74,109,86],\"legalEntityIdCounterparty\": [47,45,205,157,112,176,240,0,69,183,244,222,218,236,113,82,84,47,91,101,96,242,77,215,175,179,223,114,188,102,139,26],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 131,\"statusDate\": 131,\"initialExchangeDate\": 51,\"maturityDate\": 364,\"terminationDate\": 368,\"purchaseDate\": 2440587,\"capitalizationEndDate\": 25,\"cycleAnchorDateOfInterestPayment\": 360,\"cycleAnchorDateOfRateReset\": 4800,\"cycleAnchorDateOfScalingIndex\": 110,\"cycleAnchorDateOfFee\": 2446,\"notionalPrincipal\": 141,\"nominalInterestRate\": 1338,\"feeAccrued\": 3999,\"accruedInterest\": 32074,\"rateMultiplier\": 949,\"rateSpread\": 146098,\"feeRate\": 399,\"nextResetRate\": 1461,\"penaltyRate\": 100,\"premiumDiscountAtIED\": 86399,\"priceAtPurchaseDate\": 66,\"cycleOfInterestPayment\": {\"i\": 900,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 70,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 79,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 365,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 130,\"lifeFloor\": 1,\"periodCap\": 91,\"periodFloor\": 366}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"81,68,144,249,163,247,152,31,40,1,78,53,134,120,179,253,79,10,47,2,226,158,214,251,50,158,87,223,24,74,109,86\"),stringToBytes32(\"47,45,205,157,112,176,240,0,69,183,244,222,218,236,113,82,84,47,91,101,96,242,77,215,175,179,223,114,188,102,139,26\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,131,131,51,364,368,2440587,25,360,4800,110,2446,141,1338,3999,32074,949,146098,399,1461,100,86399,66,Definitions.IPS(900,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(70,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(79,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(365,Definitions.P.M,Definitions.S.SHORT,false),130,1,91,366)"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [57,75,222,46,111,235,55,51,109,218,220,150,245,192,249,255,184,178,62,169,23,219,240,216,40,203,241,8,34,199,196,25],\"legalEntityIdCounterparty\": [151,230,39,160,97,170,123,223,112,177,255,239,101,253,104,94,197,27,1,207,221,220,213,193,156,199,62,59,74,28,218,218],\"dayCountConvention\": 6,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 4799,\"statusDate\": 400,\"initialExchangeDate\": 26,\"maturityDate\": 256,\"terminationDate\": 89,\"purchaseDate\": 129,\"capitalizationEndDate\": 1337,\"cycleAnchorDateOfInterestPayment\": 2014223715,\"cycleAnchorDateOfRateReset\": 4,\"cycleAnchorDateOfScalingIndex\": 254,\"cycleAnchorDateOfFee\": 32076,\"notionalPrincipal\": 48,\"nominalInterestRate\": 10000,\"feeAccrued\": 23,\"accruedInterest\": 24,\"rateMultiplier\": 4001,\"rateSpread\": 900,\"feeRate\": 80,\"nextResetRate\": 1338,\"penaltyRate\": 64,\"premiumDiscountAtIED\": 99,\"priceAtPurchaseDate\": 9,\"cycleOfInterestPayment\": {\"i\": 399,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 150,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 68570,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 4001,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 1970,\"lifeFloor\": 365,\"periodCap\": 1461,\"periodFloor\": 19}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"57,75,222,46,111,235,55,51,109,218,220,150,245,192,249,255,184,178,62,169,23,219,240,216,40,203,241,8,34,199,196,25\"),stringToBytes32(\"151,230,39,160,97,170,123,223,112,177,255,239,101,253,104,94,197,27,1,207,221,220,213,193,156,199,62,59,74,28,218,218\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,4799,400,26,256,89,129,1337,2014223715,4,254,32076,48,10000,23,24,4001,900,80,1338,64,99,9,Definitions.IPS(399,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(150,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(68570,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(4001,Definitions.P.W,Definitions.S.SHORT,true),1970,365,1461,19)"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [237,57,162,196,75,20,119,153,82,98,153,221,185,179,210,143,229,248,36,110,107,255,241,159,136,129,112,151,146,156,162,104],\"legalEntityIdCounterparty\": [1,122,45,0,60,9,206,17,251,108,55,204,7,44,70,103,18,9,34,213,214,146,154,199,162,96,212,12,30,51,90,140],\"dayCountConvention\": 1,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 1336,\"statusDate\": 121,\"initialExchangeDate\": 30,\"maturityDate\": 65,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 951,\"cycleAnchorDateOfRateReset\": 900,\"cycleAnchorDateOfScalingIndex\": 19,\"cycleAnchorDateOfFee\": 951,\"notionalPrincipal\": 23,\"nominalInterestRate\": 0,\"feeAccrued\": 80,\"accruedInterest\": 2446,\"rateMultiplier\": 3,\"rateSpread\": 2440589,\"feeRate\": 10,\"nextResetRate\": 951,\"penaltyRate\": 359,\"premiumDiscountAtIED\": 2446,\"priceAtPurchaseDate\": 6,\"cycleOfInterestPayment\": {\"i\": 32,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 63,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 366,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2440589,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 368,\"lifeFloor\": 4801,\"periodCap\": 8,\"periodFloor\": 2}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"237,57,162,196,75,20,119,153,82,98,153,221,185,179,210,143,229,248,36,110,107,255,241,159,136,129,112,151,146,156,162,104\"),stringToBytes32(\"1,122,45,0,60,9,206,17,251,108,55,204,7,44,70,103,18,9,34,213,214,146,154,199,162,96,212,12,30,51,90,140\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,1336,121,30,65,0,0,0,951,900,19,951,23,0,80,2446,3,2440589,10,951,359,2446,6,Definitions.IPS(32,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(63,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(366,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(2440589,Definitions.P.M,Definitions.S.LONG,true),368,4801,8,2)"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [137,92,193,160,138,233,243,50,232,67,73,168,225,215,145,176,122,219,19,223,210,34,49,207,115,197,47,78,134,125,203,30],\"legalEntityIdCounterparty\": [97,66,181,219,166,239,11,11,247,122,226,46,184,20,13,77,152,146,171,183,226,88,80,120,39,39,229,178,34,64,130,80],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 254,\"statusDate\": 0,\"initialExchangeDate\": 59,\"maturityDate\": 141,\"terminationDate\": 2440588,\"purchaseDate\": 151,\"capitalizationEndDate\": 4900,\"cycleAnchorDateOfInterestPayment\": 160,\"cycleAnchorDateOfRateReset\": 2440589,\"cycleAnchorDateOfScalingIndex\": 21,\"cycleAnchorDateOfFee\": 80,\"notionalPrincipal\": 4000,\"nominalInterestRate\": 17,\"feeAccrued\": 950,\"accruedInterest\": 70,\"rateMultiplier\": 32,\"rateSpread\": 400,\"feeRate\": 900,\"nextResetRate\": 51,\"penaltyRate\": 4799,\"premiumDiscountAtIED\": 2,\"priceAtPurchaseDate\": 130,\"cycleOfInterestPayment\": {\"i\": 61,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2448,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2447,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 139,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 10,\"lifeFloor\": 2014223714,\"periodCap\": 6,\"periodFloor\": 48}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"137,92,193,160,138,233,243,50,232,67,73,168,225,215,145,176,122,219,19,223,210,34,49,207,115,197,47,78,134,125,203,30\"),stringToBytes32(\"97,66,181,219,166,239,11,11,247,122,226,46,184,20,13,77,152,146,171,183,226,88,80,120,39,39,229,178,34,64,130,80\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,254,0,59,141,2440588,151,4900,160,2440589,21,80,4000,17,950,70,32,400,900,51,4799,2,130,Definitions.IPS(61,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(2448,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(2447,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(139,Definitions.P.W,Definitions.S.SHORT,false),10,2014223714,6,48)"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [141,92,239,246,28,114,144,126,45,185,121,171,29,162,208,13,183,75,136,174,39,104,129,44,233,39,85,106,65,238,175,17],\"legalEntityIdCounterparty\": [57,39,96,148,83,37,241,158,204,236,64,178,100,53,149,146,4,90,28,1,114,19,190,3,140,141,173,234,56,16,207,156],\"dayCountConvention\": 5,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 951,\"statusDate\": 19,\"initialExchangeDate\": 1532892063,\"maturityDate\": 2448,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 949,\"cycleAnchorDateOfRateReset\": 16,\"cycleAnchorDateOfScalingIndex\": 24,\"cycleAnchorDateOfFee\": 950,\"notionalPrincipal\": 10000,\"nominalInterestRate\": 0,\"feeAccrued\": 4900,\"accruedInterest\": 399,\"rateMultiplier\": 11,\"rateSpread\": 2447,\"feeRate\": 100,\"nextResetRate\": 68570,\"penaltyRate\": 14,\"premiumDiscountAtIED\": 159,\"priceAtPurchaseDate\": 140,\"cycleOfInterestPayment\": {\"i\": 95,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 41,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 359,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4900,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 6,\"lifeFloor\": 91,\"periodCap\": 4001,\"periodFloor\": 66}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"141,92,239,246,28,114,144,126,45,185,121,171,29,162,208,13,183,75,136,174,39,104,129,44,233,39,85,106,65,238,175,17\"),stringToBytes32(\"57,39,96,148,83,37,241,158,204,236,64,178,100,53,149,146,4,90,28,1,114,19,190,3,140,141,173,234,56,16,207,156\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,951,19,1532892063,2448,0,0,0,949,16,24,950,10000,0,4900,399,11,2447,100,68570,14,159,140,Definitions.IPS(95,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(41,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(359,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(4900,Definitions.P.Q,Definitions.S.SHORT,false),6,91,4001,66)"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.533ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T13:26:17.553ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}