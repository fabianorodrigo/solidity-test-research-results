,{
  "2020-11-13T03:37:37.310ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:37:37.311ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.312ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.312ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.315ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.315ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.316ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.318ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "minute >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN minute>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.320ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.321ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.321ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.322ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.322ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.323ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.327ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.327ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.328ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.328ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.328ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.329ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.329ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.330ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.330ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.331ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.332ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.332ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.333ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.333ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.334ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.335ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.336ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.336ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.337ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.337ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1461002,
                "sol": 1461002
              },
              {
                "js": "1461001",
                "sol": "1461001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:37:37.338ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2440590,
                "sol": 2440590
              },
              {
                "js": "2440589",
                "sol": "2440589"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:37:37.339ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 68569,
                "sol": 68569
              },
              {
                "js": "68568",
                "sol": "68568"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:37:37.339ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1461,
                "sol": 1461
              },
              {
                "js": "1460",
                "sol": "1460"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:37:37.340ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4002,
                "sol": 4002
              },
              {
                "js": "4001",
                "sol": "4001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:37:37.341ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 146099,
                "sol": 146099
              },
              {
                "js": "146098",
                "sol": "146098"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:37:37.344ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.345ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "4800",
                "sol": "4800"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:37:37.347ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.ContractRole.RFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.ContractRole.RFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.352ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": 1336,
                "sol": 1336
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "8",
                "sol": "8"
              },
              {
                "js": 7,
                "sol": 7
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "70",
                "sol": "70"
              },
              {
                "js": 69,
                "sol": 69
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": 28,
                "sol": 28
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": 5,
              "sol": "Definitions.DayCountConvention._30_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1970",
                "sol": "1970"
              },
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": 5,
                "sol": "Definitions.DayCountConvention._30_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:37:37.355ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.357ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.357ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.358ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.360ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{\"i\": 2014223716,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2014223716,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{\"i\": 41,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(41,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{\"i\": 121,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(121,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{\"i\": 10000,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(10000,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.363ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.364ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.366ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractStatus.PF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.370ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.373ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.377ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.378ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.382ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1532892064,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1532892064,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 14,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(14,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 101,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(101,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 63,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(63,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 901,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(901,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 400,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(400,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 151,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.386ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{\"i\": 110,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(110,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{\"i\": 900,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(900,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{\"i\": 12,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(12,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{\"i\": 24,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(24,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{\"i\": 86400,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(86400,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{\"i\": 361,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(361,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{\"i\": 4,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(4,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{\"i\": 14,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(14,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{\"i\": 25,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(25,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.396ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 63,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(63,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 27,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(27,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 1336,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1336,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 40,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(40,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 4000,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(4000,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 80,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(80,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1460,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.398ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 950,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 149,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 16,\"stfType\": 2},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 4,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 19,\"stfType\": 4},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 61,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 8},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 365,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 14},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 2440589,\"eventType\": 16,\"currency\": accounts[2],\"pofType\": 17,\"stfType\": 1},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 23,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 14},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 4799,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 6},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 15,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 6,\"stfType\": 8},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 139,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 68568,\"eventType\": 3,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 6},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 49,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 5},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 2440588,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 19},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 21,\"eventType\": 17,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 4},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 2014223714,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 10},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 1970,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 9},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 29,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 17},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 2,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 2},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 2447,\"eventType\": 20,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 12},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 18,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 18},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 366,\"eventType\": 2,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 16},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 30,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 12,\"stfType\": 16},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 32074,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 1461000,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 51,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 19},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 2446,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 5},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 1971,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 6},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 150,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 5},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 86401,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 14},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 86399,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 3},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 1461001,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 17},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 255,\"eventType\": 14,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 0},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 141,\"eventType\": 6,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 2},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 1336,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 26,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 18},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 40,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 1},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 1461,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 14},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 25,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 6},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 1532892064,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 11},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 4001,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 12},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 2446,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 20},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 4000,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 15},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 119,\"eventType\": 5,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 7},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 1969,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 12},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 0,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 10},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 1461000,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 16},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 140,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 9},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 365,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 3},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 1460,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 15,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 18},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 359,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 6},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 29,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 17,\"stfType\": 18},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 31,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 20},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 40,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 1},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 16,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 6,\"stfType\": 2},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 256,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 9},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 32,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 20},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 121,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 14},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 17,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 3},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 100,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 6},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 1532892062,\"eventType\": 12,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 20},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 81,\"eventType\": 7,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 2},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 1460,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 18},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 2448,\"eventType\": 2,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 5}]",
              "sol": "[Definitions.ProtoEvent(6,119,950,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(140,66,149,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.AD),Definitions.ProtoEvent(9999,4801,4,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IP),Definitions.ProtoEvent(90,10000,61,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.FP),Definitions.ProtoEvent(64,29,365,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.SC),Definitions.ProtoEvent(28,50,2440589,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.MD),Definitions.ProtoEvent(2014223714,86399,23,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SC),Definitions.ProtoEvent(367,95,4799,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PP),Definitions.ProtoEvent(159,13,15,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.FP),Definitions.ProtoEvent(23,131,139,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(1461002,27,68568,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PP),Definitions.ProtoEvent(367,30,49,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PR),Definitions.ProtoEvent(25,1461000,2440588,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.STD),Definitions.ProtoEvent(4001,4899,21,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IP),Definitions.ProtoEvent(32074,15,2014223714,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.TD),Definitions.ProtoEvent(951,17,1970,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PRD),Definitions.ProtoEvent(146097,1970,29,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MR),Definitions.ProtoEvent(900,1461,2,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.AD),Definitions.ProtoEvent(121,68570,2447,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RR),Definitions.ProtoEvent(30,21,18,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCB),Definitions.ProtoEvent(366,28,366,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.DV),Definitions.ProtoEvent(8,131,30,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.DV),Definitions.ProtoEvent(130,1461002,32074,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(899,101,1461000,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(32074,30,51,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.STD),Definitions.ProtoEvent(361,3999,2446,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PR),Definitions.ProtoEvent(368,1,1971,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PP),Definitions.ProtoEvent(81,40,150,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PR),Definitions.ProtoEvent(2448,146096,86401,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SC),Definitions.ProtoEvent(1969,24,86399,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IED),Definitions.ProtoEvent(5,27,1461001,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MR),Definitions.ProtoEvent(4000,4799,255,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SD),Definitions.ProtoEvent(1462,899,141,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.AD),Definitions.ProtoEvent(91,951,1336,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(97,368,26,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCB),Definitions.ProtoEvent(1,1532892064,40,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MD),Definitions.ProtoEvent(15,2440589,1461,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SC),Definitions.ProtoEvent(18,4900,25,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PP),Definitions.ProtoEvent(100,367,1532892064,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCI),Definitions.ProtoEvent(161,2014223714,4001,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RR),Definitions.ProtoEvent(401,401,2446,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.Child),Definitions.ProtoEvent(2014223715,81,4000,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.CD),Definitions.ProtoEvent(3999,4000,119,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PY),Definitions.ProtoEvent(2014223714,13,1969,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RR),Definitions.ProtoEvent(257,9,0,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.TD),Definitions.ProtoEvent(86400,254,1461000,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.DV),Definitions.ProtoEvent(91,400,140,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PRD),Definitions.ProtoEvent(949,28,365,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IED),Definitions.ProtoEvent(64,32074,1460,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(79,40,15,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCB),Definitions.ProtoEvent(3,4000,359,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PP),Definitions.ProtoEvent(255,6,29,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCB),Definitions.ProtoEvent(899,13,31,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.Child),Definitions.ProtoEvent(59,3999,40,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MD),Definitions.ProtoEvent(2014223716,1532892063,16,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.AD),Definitions.ProtoEvent(71,1532892062,256,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PRD),Definitions.ProtoEvent(69,359,32,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.Child),Definitions.ProtoEvent(68569,1532892062,121,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SC),Definitions.ProtoEvent(97,1336,17,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IED),Definitions.ProtoEvent(40,951,100,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PP),Definitions.ProtoEvent(364,140,1532892062,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.Child),Definitions.ProtoEvent(68568,4800,81,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.AD),Definitions.ProtoEvent(91,25,1460,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCB),Definitions.ProtoEvent(32076,4901,2448,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PR)]"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.411ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 40,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 18},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 146098,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 12},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 100,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 13},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 161,\"eventType\": 19,\"currency\": accounts[8],\"pofType\": 2,\"stfType\": 10},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 9,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 13},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 130,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 1336,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 17},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 70,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 7},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 10001,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 14},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 2448,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 1,\"stfType\": 2},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 368,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 13},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 24,\"eventType\": 4,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 8},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 1532892063,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 9},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 7,\"eventType\": 11,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 19},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 949,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 13},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 10001,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 1460,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 12},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 70,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 0},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 360,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 13},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 400,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 9},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 24,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 13},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 1532892062,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 13},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 5,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 1},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 10,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 3},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 27,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 3},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 2440588,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 131,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 20,\"stfType\": 10},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 69,\"eventType\": 2,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 14},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 140,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 18},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 159,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 7},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 4900,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 1,\"stfType\": 16},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 89,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 9},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 40,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 8,\"stfType\": 0},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 110,\"eventType\": 17,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 9},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 146098,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 1,\"stfType\": 6},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 120,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 2},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 255,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 70,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 16},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 39,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 12},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 2447,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 13},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 32,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 1338,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 23,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 5,\"stfType\": 8},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 60,\"eventType\": 6,\"currency\": accounts[4],\"pofType\": 6,\"stfType\": 12},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 3,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 15,\"stfType\": 12},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 12,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 15,\"stfType\": 19},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 32074,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 2},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 141,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 0},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 1,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 6},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 11,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 7},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 361,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 5},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 5,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 16},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 59,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 4},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 32076,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 16},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 2447,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 15},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 1336,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 20},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 5,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 16},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 950,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 20},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 159,\"eventType\": 1,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 0},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 10,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 13,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 2},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 2014223715,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 17},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 96,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 19},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 161,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 11}]",
              "sol": "[Definitions.ProtoEvent(1970,10001,40,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IPCB),Definitions.ProtoEvent(21,97,146098,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RR),Definitions.ProtoEvent(366,18,100,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.RRY),Definitions.ProtoEvent(254,1461001,161,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.TD),Definitions.ProtoEvent(63,61,9,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RRY),Definitions.ProtoEvent(950,901,130,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(2014223715,11,1336,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.MR),Definitions.ProtoEvent(17,79,70,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PY),Definitions.ProtoEvent(86399,79,10001,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SC),Definitions.ProtoEvent(3999,65,2448,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.AD),Definitions.ProtoEvent(68568,101,368,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RRY),Definitions.ProtoEvent(1969,111,24,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.FP),Definitions.ProtoEvent(31,2447,1532892063,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PRD),Definitions.ProtoEvent(3999,2447,7,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.STD),Definitions.ProtoEvent(121,60,949,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY),Definitions.ProtoEvent(4000,97,10001,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(86399,96,1460,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RR),Definitions.ProtoEvent(16,97,70,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.SD),Definitions.ProtoEvent(71,10001,360,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RRY),Definitions.ProtoEvent(86400,4001,400,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PRD),Definitions.ProtoEvent(130,60,24,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RRY),Definitions.ProtoEvent(111,950,1532892062,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.RRY),Definitions.ProtoEvent(65,4,5,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MD),Definitions.ProtoEvent(65,51,10,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IED),Definitions.ProtoEvent(130,359,27,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IED),Definitions.ProtoEvent(1462,60,2440588,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(90,69,131,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.TD),Definitions.ProtoEvent(1971,5,69,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SC),Definitions.ProtoEvent(97,51,140,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCB),Definitions.ProtoEvent(4800,2014223716,159,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PY),Definitions.ProtoEvent(129,400,4900,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.DV),Definitions.ProtoEvent(29,1532892062,89,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PRD),Definitions.ProtoEvent(3,32074,40,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.SD),Definitions.ProtoEvent(151,26,110,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PRD),Definitions.ProtoEvent(95,65,146098,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PP),Definitions.ProtoEvent(257,68570,120,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.AD),Definitions.ProtoEvent(110,2447,255,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(139,4000,70,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.DV),Definitions.ProtoEvent(1971,86401,39,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RR),Definitions.ProtoEvent(901,65,2447,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RRY),Definitions.ProtoEvent(89,139,32,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(10,256,1338,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(4901,146098,23,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.FP),Definitions.ProtoEvent(367,86399,60,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RR),Definitions.ProtoEvent(80,256,3,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RR),Definitions.ProtoEvent(951,400,12,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.STD),Definitions.ProtoEvent(1461002,24,32074,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.AD),Definitions.ProtoEvent(2014223715,101,141,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SD),Definitions.ProtoEvent(1532892064,2440587,1,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PP),Definitions.ProtoEvent(365,7,11,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PY),Definitions.ProtoEvent(65,17,361,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PR),Definitions.ProtoEvent(146097,257,5,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.DV),Definitions.ProtoEvent(68568,49,59,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IP),Definitions.ProtoEvent(7,28,32076,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.DV),Definitions.ProtoEvent(7,366,2447,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.CD),Definitions.ProtoEvent(1,119,1336,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.Child),Definitions.ProtoEvent(2,1337,5,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.DV),Definitions.ProtoEvent(40,20,950,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.Child),Definitions.ProtoEvent(90,160,159,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SD),Definitions.ProtoEvent(2014223715,151,10,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(2440587,10,13,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.AD),Definitions.ProtoEvent(951,2448,2014223715,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MR),Definitions.ProtoEvent(66,13,96,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.STD),Definitions.ProtoEvent(27,79,161,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCI)]"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.432ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.435ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [247,4,15,211,7,140,23,126,34,245,93,68,57,203,177,254,35,95,85,116,178,34,91,143,234,56,110,86,16,183,52,17],\"legalEntityIdCounterparty\": [27,226,185,75,168,62,116,33,86,167,144,75,41,190,43,104,252,28,231,25,99,51,19,59,161,221,198,211,82,18,64,27],\"dayCountConvention\": 5,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 2448,\"statusDate\": 4001,\"initialExchangeDate\": 99,\"maturityDate\": 4000,\"terminationDate\": 129,\"purchaseDate\": 32075,\"capitalizationEndDate\": 150,\"cycleAnchorDateOfInterestPayment\": 97,\"cycleAnchorDateOfRateReset\": 63,\"cycleAnchorDateOfScalingIndex\": 950,\"cycleAnchorDateOfFee\": 899,\"notionalPrincipal\": 2440589,\"nominalInterestRate\": 4801,\"feeAccrued\": 4000,\"accruedInterest\": 3,\"rateMultiplier\": 4901,\"rateSpread\": 7,\"feeRate\": 361,\"nextResetRate\": 4001,\"penaltyRate\": 1971,\"premiumDiscountAtIED\": 100,\"priceAtPurchaseDate\": 368,\"cycleOfInterestPayment\": {\"i\": 1336,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 51,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 146096,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 31,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 1971,\"lifeFloor\": 39,\"periodCap\": 257,\"periodFloor\": 18}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"247,4,15,211,7,140,23,126,34,245,93,68,57,203,177,254,35,95,85,116,178,34,91,143,234,56,110,86,16,183,52,17\"),stringToBytes32(\"27,226,185,75,168,62,116,33,86,167,144,75,41,190,43,104,252,28,231,25,99,51,19,59,161,221,198,211,82,18,64,27\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,2448,4001,99,4000,129,32075,150,97,63,950,899,2440589,4801,4000,3,4901,7,361,4001,1971,100,368,Definitions.IPS(1336,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(51,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(146096,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(31,Definitions.P.H,Definitions.S.SHORT,false),1971,39,257,18)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.437ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [89,206,255,242,133,126,169,157,242,23,99,152,145,244,63,178,185,189,141,116,250,78,103,78,208,112,127,219,191,194,7,192],\"legalEntityIdCounterparty\": [74,193,42,29,179,173,203,1,14,219,6,103,50,92,36,20,26,164,155,85,27,54,111,144,73,20,60,71,49,153,176,15],\"dayCountConvention\": 2,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 10000,\"statusDate\": 86399,\"initialExchangeDate\": 96,\"maturityDate\": 4900,\"terminationDate\": 96,\"purchaseDate\": 10000,\"capitalizationEndDate\": 2014223715,\"cycleAnchorDateOfInterestPayment\": 949,\"cycleAnchorDateOfRateReset\": 1532892064,\"cycleAnchorDateOfScalingIndex\": 69,\"cycleAnchorDateOfFee\": 63,\"notionalPrincipal\": 80,\"nominalInterestRate\": 96,\"feeAccrued\": 149,\"accruedInterest\": 30,\"rateMultiplier\": 130,\"rateSpread\": 161,\"feeRate\": 365,\"nextResetRate\": 99,\"penaltyRate\": 28,\"premiumDiscountAtIED\": 86399,\"priceAtPurchaseDate\": 9,\"cycleOfInterestPayment\": {\"i\": 60,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4000,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 110,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 109,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 30,\"lifeFloor\": 6,\"periodCap\": 950,\"periodFloor\": 86401}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"89,206,255,242,133,126,169,157,242,23,99,152,145,244,63,178,185,189,141,116,250,78,103,78,208,112,127,219,191,194,7,192\"),stringToBytes32(\"74,193,42,29,179,173,203,1,14,219,6,103,50,92,36,20,26,164,155,85,27,54,111,144,73,20,60,71,49,153,176,15\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,10000,86399,96,4900,96,10000,2014223715,949,1532892064,69,63,80,96,149,30,130,161,365,99,28,86399,9,Definitions.IPS(60,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(4000,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(110,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(109,Definitions.P.D,Definitions.S.LONG,true),30,6,950,86401)"
            },
            {
              "js": "{\"lastEventTime\": 129,\"contractStatus\": 2,\"timeFromLastEvent\": 61,\"nominalValue\": 951,\"nominalAccrued\": 899,\"feeAccrued\": 1969,\"nominalRate\": 899,\"interestScalingMultiplier\": 1532892062,\"nominalScalingMultiplier\": 26,\"contractRoleSign\": 6}",
              "sol": "Definitions.ContractState(129,Definitions.ContractStatus.DQ,61,951,899,1969,899,1532892062,26,Definitions.ContractRole.BUY)"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.440ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [206,172,239,64,251,229,20,72,148,243,80,67,122,240,80,126,2,87,255,71,245,238,127,197,202,241,119,253,220,3,72,7],\"legalEntityIdCounterparty\": [121,161,196,156,185,75,203,109,152,60,235,0,222,62,198,143,144,67,41,156,151,98,15,184,119,79,163,199,198,197,41,162],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 949,\"statusDate\": 19,\"initialExchangeDate\": 70,\"maturityDate\": 2014223716,\"terminationDate\": 9999,\"purchaseDate\": 26,\"capitalizationEndDate\": 950,\"cycleAnchorDateOfInterestPayment\": 2446,\"cycleAnchorDateOfRateReset\": 368,\"cycleAnchorDateOfScalingIndex\": 1461,\"cycleAnchorDateOfFee\": 949,\"notionalPrincipal\": 254,\"nominalInterestRate\": 10,\"feeAccrued\": 14,\"accruedInterest\": 1461,\"rateMultiplier\": 90,\"rateSpread\": 8,\"feeRate\": 111,\"nextResetRate\": 2447,\"penaltyRate\": 130,\"premiumDiscountAtIED\": 86401,\"priceAtPurchaseDate\": 2448,\"cycleOfInterestPayment\": {\"i\": 1461000,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 13,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 32076,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 119,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 17,\"lifeFloor\": 5,\"periodCap\": 120,\"periodFloor\": 60}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"206,172,239,64,251,229,20,72,148,243,80,67,122,240,80,126,2,87,255,71,245,238,127,197,202,241,119,253,220,3,72,7\"),stringToBytes32(\"121,161,196,156,185,75,203,109,152,60,235,0,222,62,198,143,144,67,41,156,151,98,15,184,119,79,163,199,198,197,41,162\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,949,19,70,2014223716,9999,26,950,2446,368,1461,949,254,10,14,1461,90,8,111,2447,130,86401,2448,Definitions.IPS(1461000,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(13,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(32076,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(119,Definitions.P.W,Definitions.S.LONG,false),17,5,120,60)"
            },
            {
              "js": "{\"lastEventTime\": 1461001,\"contractStatus\": 1,\"timeFromLastEvent\": 4000,\"nominalValue\": 111,\"nominalAccrued\": 4,\"feeAccrued\": 399,\"nominalRate\": 100,\"interestScalingMultiplier\": 59,\"nominalScalingMultiplier\": 140,\"contractRoleSign\": 8}",
              "sol": "Definitions.ContractState(1461001,Definitions.ContractStatus.DL,4000,111,4,399,100,59,140,Definitions.ContractRole.GUA)"
            },
            {
              "js": "{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 1969,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 3}",
              "sol": "Definitions.ProtoEvent(2447,51,1969,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IED)"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.451ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [153,95,230,240,232,111,184,152,38,51,72,172,58,70,101,47,72,218,184,227,228,56,4,85,100,76,28,86,72,134,214,76],\"legalEntityIdCounterparty\": [55,222,148,155,95,223,243,78,137,14,254,229,33,128,218,96,200,167,231,172,155,100,65,64,39,166,46,141,214,39,162,25],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 111,\"statusDate\": 95,\"initialExchangeDate\": 4899,\"maturityDate\": 10,\"terminationDate\": 40,\"purchaseDate\": 109,\"capitalizationEndDate\": 160,\"cycleAnchorDateOfInterestPayment\": 10000,\"cycleAnchorDateOfRateReset\": 32075,\"cycleAnchorDateOfScalingIndex\": 150,\"cycleAnchorDateOfFee\": 1462,\"notionalPrincipal\": 951,\"nominalInterestRate\": 400,\"feeAccrued\": 86400,\"accruedInterest\": 4,\"rateMultiplier\": 17,\"rateSpread\": 361,\"feeRate\": 14,\"nextResetRate\": 1336,\"penaltyRate\": 27,\"premiumDiscountAtIED\": 950,\"priceAtPurchaseDate\": 6,\"cycleOfInterestPayment\": {\"i\": 27,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 31,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 6,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 161,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 101,\"lifeFloor\": 4799,\"periodCap\": 141,\"periodFloor\": 364}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"153,95,230,240,232,111,184,152,38,51,72,172,58,70,101,47,72,218,184,227,228,56,4,85,100,76,28,86,72,134,214,76\"),stringToBytes32(\"55,222,148,155,95,223,243,78,137,14,254,229,33,128,218,96,200,167,231,172,155,100,65,64,39,166,46,141,214,39,162,25\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,111,95,4899,10,40,109,160,10000,32075,150,1462,951,400,86400,4,17,361,14,1336,27,950,6,Definitions.IPS(27,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(31,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(6,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(161,Definitions.P.W,Definitions.S.SHORT,true),101,4799,141,364)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [83,185,55,29,74,245,32,206,124,104,2,44,141,42,227,82,95,56,212,176,52,17,199,233,36,226,230,124,129,88,147,105],\"legalEntityIdCounterparty\": [89,182,46,37,19,83,179,79,63,62,197,9,76,204,216,87,126,231,106,141,28,184,196,135,119,38,231,156,175,97,16,39],\"dayCountConvention\": 6,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 120,\"statusDate\": 27,\"initialExchangeDate\": 97,\"maturityDate\": 100,\"terminationDate\": 2014223715,\"purchaseDate\": 2014223716,\"capitalizationEndDate\": 65,\"cycleAnchorDateOfInterestPayment\": 900,\"cycleAnchorDateOfRateReset\": 160,\"cycleAnchorDateOfScalingIndex\": 10000,\"cycleAnchorDateOfFee\": 1969,\"notionalPrincipal\": 69,\"nominalInterestRate\": 4800,\"feeAccrued\": 121,\"accruedInterest\": 1532892064,\"rateMultiplier\": 4,\"rateSpread\": 1,\"feeRate\": 41,\"nextResetRate\": 146096,\"penaltyRate\": 146098,\"premiumDiscountAtIED\": 149,\"priceAtPurchaseDate\": 29,\"cycleOfInterestPayment\": {\"i\": 70,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4799,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 1461001,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 950,\"lifeFloor\": 29,\"periodCap\": 2440588,\"periodFloor\": 146096}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"83,185,55,29,74,245,32,206,124,104,2,44,141,42,227,82,95,56,212,176,52,17,199,233,36,226,230,124,129,88,147,105\"),stringToBytes32(\"89,182,46,37,19,83,179,79,63,62,197,9,76,204,216,87,126,231,106,141,28,184,196,135,119,38,231,156,175,97,16,39\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,120,27,97,100,2014223715,2014223716,65,900,160,10000,1969,69,4800,121,1532892064,4,1,41,146096,146098,149,29,Definitions.IPS(70,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(4,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(4799,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(1461001,Definitions.P.D,Definitions.S.LONG,true),950,29,2440588,146096)"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [63,5,225,80,22,58,242,3,27,68,9,140,59,175,184,68,97,98,115,104,182,120,200,245,66,171,48,97,170,51,100,80],\"legalEntityIdCounterparty\": [119,252,38,243,95,205,22,134,105,116,2,118,64,6,80,7,158,71,228,28,179,155,44,254,46,221,17,116,139,219,224,147],\"dayCountConvention\": 0,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 4,\"statusDate\": 1460,\"initialExchangeDate\": 1336,\"maturityDate\": 140,\"terminationDate\": 366,\"purchaseDate\": 4001,\"capitalizationEndDate\": 130,\"cycleAnchorDateOfInterestPayment\": 1461002,\"cycleAnchorDateOfRateReset\": 131,\"cycleAnchorDateOfScalingIndex\": 4900,\"cycleAnchorDateOfFee\": 1462,\"notionalPrincipal\": 950,\"nominalInterestRate\": 1461,\"feeAccrued\": 1532892062,\"accruedInterest\": 26,\"rateMultiplier\": 110,\"rateSpread\": 1971,\"feeRate\": 11,\"nextResetRate\": 24,\"penaltyRate\": 900,\"premiumDiscountAtIED\": 109,\"priceAtPurchaseDate\": 39,\"cycleOfInterestPayment\": {\"i\": 131,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 6,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 16,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 121,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 2448,\"lifeFloor\": 146096,\"periodCap\": 3999,\"periodFloor\": 159}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"63,5,225,80,22,58,242,3,27,68,9,140,59,175,184,68,97,98,115,104,182,120,200,245,66,171,48,97,170,51,100,80\"),stringToBytes32(\"119,252,38,243,95,205,22,134,105,116,2,118,64,6,80,7,158,71,228,28,179,155,44,254,46,221,17,116,139,219,224,147\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,4,1460,1336,140,366,4001,130,1461002,131,4900,1462,950,1461,1532892062,26,110,1971,11,24,900,109,39,Definitions.IPS(131,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(6,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(16,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(121,Definitions.P.M,Definitions.S.LONG,true),2448,146096,3999,159)"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [108,235,54,193,25,196,91,255,60,152,4,227,251,199,145,117,251,135,202,198,243,211,50,115,151,178,90,161,130,141,12,177],\"legalEntityIdCounterparty\": [45,254,237,150,94,195,206,140,169,145,72,169,123,207,200,203,10,93,61,124,16,45,32,31,21,210,89,244,234,136,238,119],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 1462,\"statusDate\": 97,\"initialExchangeDate\": 91,\"maturityDate\": 40,\"terminationDate\": 51,\"purchaseDate\": 14,\"capitalizationEndDate\": 365,\"cycleAnchorDateOfInterestPayment\": 2440587,\"cycleAnchorDateOfRateReset\": 30,\"cycleAnchorDateOfScalingIndex\": 13,\"cycleAnchorDateOfFee\": 900,\"notionalPrincipal\": 32076,\"nominalInterestRate\": 39,\"feeAccrued\": 2446,\"accruedInterest\": 146097,\"rateMultiplier\": 40,\"rateSpread\": 951,\"feeRate\": 400,\"nextResetRate\": 1969,\"penaltyRate\": 2440589,\"premiumDiscountAtIED\": 80,\"priceAtPurchaseDate\": 159,\"cycleOfInterestPayment\": {\"i\": 10001,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 368,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1336,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 120,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 2014223715,\"lifeFloor\": 2440588,\"periodCap\": 18,\"periodFloor\": 2014223716}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"108,235,54,193,25,196,91,255,60,152,4,227,251,199,145,117,251,135,202,198,243,211,50,115,151,178,90,161,130,141,12,177\"),stringToBytes32(\"45,254,237,150,94,195,206,140,169,145,72,169,123,207,200,203,10,93,61,124,16,45,32,31,21,210,89,244,234,136,238,119\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,1462,97,91,40,51,14,365,2440587,30,13,900,32076,39,2446,146097,40,951,400,1969,2440589,80,159,Definitions.IPS(10001,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(368,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(1336,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(120,Definitions.P.W,Definitions.S.SHORT,true),2014223715,2440588,18,2014223716)"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [23,191,152,121,104,57,50,124,166,111,7,115,141,178,89,101,55,25,255,36,139,114,119,123,39,132,139,155,48,73,69,243],\"legalEntityIdCounterparty\": [83,230,181,91,35,50,80,248,16,182,238,163,46,62,240,61,21,178,57,180,157,73,113,7,89,253,105,120,76,39,49,113],\"dayCountConvention\": 2,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 2447,\"statusDate\": 8,\"initialExchangeDate\": 141,\"maturityDate\": 31,\"terminationDate\": 141,\"purchaseDate\": 0,\"capitalizationEndDate\": 4000,\"cycleAnchorDateOfInterestPayment\": 1532892064,\"cycleAnchorDateOfRateReset\": 367,\"cycleAnchorDateOfScalingIndex\": 10000,\"cycleAnchorDateOfFee\": 97,\"notionalPrincipal\": 1462,\"nominalInterestRate\": 29,\"feeAccrued\": 21,\"accruedInterest\": 32074,\"rateMultiplier\": 68569,\"rateSpread\": 17,\"feeRate\": 6,\"nextResetRate\": 13,\"penaltyRate\": 23,\"premiumDiscountAtIED\": 129,\"priceAtPurchaseDate\": 4900,\"cycleOfInterestPayment\": {\"i\": 1336,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1461000,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 8,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 359,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 18,\"lifeFloor\": 23,\"periodCap\": 256,\"periodFloor\": 1}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"23,191,152,121,104,57,50,124,166,111,7,115,141,178,89,101,55,25,255,36,139,114,119,123,39,132,139,155,48,73,69,243\"),stringToBytes32(\"83,230,181,91,35,50,80,248,16,182,238,163,46,62,240,61,21,178,57,180,157,73,113,7,89,253,105,120,76,39,49,113\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,2447,8,141,31,141,0,4000,1532892064,367,10000,97,1462,29,21,32074,68569,17,6,13,23,129,4900,Definitions.IPS(1336,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(1461000,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(8,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(359,Definitions.P.W,Definitions.S.SHORT,false),18,23,256,1)"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [52,87,213,250,197,112,178,42,13,137,245,34,4,7,119,219,117,129,217,81,160,205,181,66,152,78,172,91,226,255,197,168],\"legalEntityIdCounterparty\": [253,62,205,215,153,55,241,20,172,13,195,157,181,91,185,70,23,140,100,53,186,39,11,25,162,236,14,183,1,24,101,220],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 160,\"statusDate\": 2447,\"initialExchangeDate\": 100,\"maturityDate\": 40,\"terminationDate\": 2446,\"purchaseDate\": 71,\"capitalizationEndDate\": 1460,\"cycleAnchorDateOfInterestPayment\": 146097,\"cycleAnchorDateOfRateReset\": 9,\"cycleAnchorDateOfScalingIndex\": 50,\"cycleAnchorDateOfFee\": 399,\"notionalPrincipal\": 31,\"nominalInterestRate\": 151,\"feeAccrued\": 68570,\"accruedInterest\": 50,\"rateMultiplier\": 257,\"rateSpread\": 79,\"feeRate\": 17,\"nextResetRate\": 2440587,\"penaltyRate\": 8,\"premiumDiscountAtIED\": 1337,\"priceAtPurchaseDate\": 4001,\"cycleOfInterestPayment\": {\"i\": 3,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 139,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 950,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 9,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 2447,\"lifeFloor\": 2440589,\"periodCap\": 18,\"periodFloor\": 80}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"52,87,213,250,197,112,178,42,13,137,245,34,4,7,119,219,117,129,217,81,160,205,181,66,152,78,172,91,226,255,197,168\"),stringToBytes32(\"253,62,205,215,153,55,241,20,172,13,195,157,181,91,185,70,23,140,100,53,186,39,11,25,162,236,14,183,1,24,101,220\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,160,2447,100,40,2446,71,1460,146097,9,50,399,31,151,68570,50,257,79,17,2440587,8,1337,4001,Definitions.IPS(3,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(139,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(950,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(9,Definitions.P.W,Definitions.S.SHORT,true),2447,2440589,18,80)"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [8,177,217,10,224,13,75,252,16,23,134,153,196,60,19,154,231,110,68,112,214,227,192,109,149,39,206,94,234,199,212,201],\"legalEntityIdCounterparty\": [107,241,77,20,2,153,231,40,109,23,226,160,224,199,40,154,27,188,123,85,180,210,23,104,17,186,236,126,64,232,176,161],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 256,\"statusDate\": 97,\"initialExchangeDate\": 0,\"maturityDate\": 1532892064,\"terminationDate\": 4900,\"purchaseDate\": 399,\"capitalizationEndDate\": 1532892064,\"cycleAnchorDateOfInterestPayment\": 27,\"cycleAnchorDateOfRateReset\": 28,\"cycleAnchorDateOfScalingIndex\": 86401,\"cycleAnchorDateOfFee\": 32075,\"notionalPrincipal\": 6,\"nominalInterestRate\": 149,\"feeAccrued\": 13,\"accruedInterest\": 28,\"rateMultiplier\": 4900,\"rateSpread\": 32074,\"feeRate\": 2440587,\"nextResetRate\": 146097,\"penaltyRate\": 367,\"premiumDiscountAtIED\": 40,\"priceAtPurchaseDate\": 950,\"cycleOfInterestPayment\": {\"i\": 13,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 129,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 899,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 256,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 2440588,\"lifeFloor\": 254,\"periodCap\": 6,\"periodFloor\": 91}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"8,177,217,10,224,13,75,252,16,23,134,153,196,60,19,154,231,110,68,112,214,227,192,109,149,39,206,94,234,199,212,201\"),stringToBytes32(\"107,241,77,20,2,153,231,40,109,23,226,160,224,199,40,154,27,188,123,85,180,210,23,104,17,186,236,126,64,232,176,161\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,256,97,0,1532892064,4900,399,1532892064,27,28,86401,32075,6,149,13,28,4900,32074,2440587,146097,367,40,950,Definitions.IPS(13,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(129,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(899,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(256,Definitions.P.M,Definitions.S.SHORT,false),2440588,254,6,91)"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [218,6,234,151,10,141,92,31,68,217,221,167,76,4,196,31,158,182,72,27,198,170,193,16,252,84,231,32,179,249,152,201],\"legalEntityIdCounterparty\": [194,124,82,236,76,66,174,33,119,145,21,124,23,208,201,63,226,171,15,79,150,202,24,217,154,12,5,234,240,24,98,74],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 13,\"statusDate\": 2014223715,\"initialExchangeDate\": 49,\"maturityDate\": 161,\"terminationDate\": 140,\"purchaseDate\": 360,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 2,\"cycleAnchorDateOfRateReset\": 101,\"cycleAnchorDateOfScalingIndex\": 140,\"cycleAnchorDateOfFee\": 151,\"notionalPrincipal\": 4900,\"nominalInterestRate\": 361,\"feeAccrued\": 400,\"accruedInterest\": 61,\"rateMultiplier\": 1,\"rateSpread\": 2014223714,\"feeRate\": 2440587,\"nextResetRate\": 8,\"penaltyRate\": 65,\"premiumDiscountAtIED\": 949,\"priceAtPurchaseDate\": 1460,\"cycleOfInterestPayment\": {\"i\": 18,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 12,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 2447,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 32074,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 4899,\"lifeFloor\": 1971,\"periodCap\": 16,\"periodFloor\": 1}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"218,6,234,151,10,141,92,31,68,217,221,167,76,4,196,31,158,182,72,27,198,170,193,16,252,84,231,32,179,249,152,201\"),stringToBytes32(\"194,124,82,236,76,66,174,33,119,145,21,124,23,208,201,63,226,171,15,79,150,202,24,217,154,12,5,234,240,24,98,74\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.A,13,2014223715,49,161,140,360,0,2,101,140,151,4900,361,400,61,1,2014223714,2440587,8,65,949,1460,Definitions.IPS(18,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(12,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(2447,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(32074,Definitions.P.W,Definitions.S.LONG,false),4899,1971,16,1)"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [252,191,97,174,5,232,201,223,4,0,38,122,79,47,89,148,38,210,198,1,58,231,190,8,93,248,145,87,6,110,145,125],\"legalEntityIdCounterparty\": [100,243,105,140,44,45,7,46,237,172,83,204,3,210,178,23,59,208,87,19,48,34,72,94,208,189,206,110,215,219,165,248],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 400,\"statusDate\": 120,\"initialExchangeDate\": 1532892063,\"maturityDate\": 64,\"terminationDate\": 68570,\"purchaseDate\": 1336,\"capitalizationEndDate\": 25,\"cycleAnchorDateOfInterestPayment\": 86401,\"cycleAnchorDateOfRateReset\": 255,\"cycleAnchorDateOfScalingIndex\": 119,\"cycleAnchorDateOfFee\": 951,\"notionalPrincipal\": 91,\"nominalInterestRate\": 68570,\"feeAccrued\": 367,\"accruedInterest\": 39,\"rateMultiplier\": 360,\"rateSpread\": 139,\"feeRate\": 1532892064,\"nextResetRate\": 1970,\"penaltyRate\": 1338,\"premiumDiscountAtIED\": 150,\"priceAtPurchaseDate\": 63,\"cycleOfInterestPayment\": {\"i\": 401,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1969,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 110,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 10,\"lifeFloor\": 950,\"periodCap\": 951,\"periodFloor\": 26}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"252,191,97,174,5,232,201,223,4,0,38,122,79,47,89,148,38,210,198,1,58,231,190,8,93,248,145,87,6,110,145,125\"),stringToBytes32(\"100,243,105,140,44,45,7,46,237,172,83,204,3,210,178,23,59,208,87,19,48,34,72,94,208,189,206,110,215,219,165,248\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,400,120,1532892063,64,68570,1336,25,86401,255,119,951,91,68570,367,39,360,139,1532892064,1970,1338,150,63,Definitions.IPS(401,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(1969,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(110,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(2,Definitions.P.W,Definitions.S.SHORT,true),10,950,951,26)"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [255,154,141,57,31,41,83,171,152,217,59,203,182,169,148,42,4,193,49,70,225,144,29,101,110,127,185,190,195,117,134,208],\"legalEntityIdCounterparty\": [96,59,114,123,10,34,198,236,130,98,24,150,4,119,222,93,182,183,125,10,49,137,230,48,59,194,218,41,4,2,74,210],\"dayCountConvention\": 4,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 81,\"statusDate\": 255,\"initialExchangeDate\": 254,\"maturityDate\": 28,\"terminationDate\": 951,\"purchaseDate\": 6,\"capitalizationEndDate\": 26,\"cycleAnchorDateOfInterestPayment\": 32076,\"cycleAnchorDateOfRateReset\": 131,\"cycleAnchorDateOfScalingIndex\": 146097,\"cycleAnchorDateOfFee\": 3,\"notionalPrincipal\": 1532892063,\"nominalInterestRate\": 399,\"feeAccrued\": 8,\"accruedInterest\": 10000,\"rateMultiplier\": 30,\"rateSpread\": 901,\"feeRate\": 1969,\"nextResetRate\": 130,\"penaltyRate\": 97,\"premiumDiscountAtIED\": 50,\"priceAtPurchaseDate\": 1461001,\"cycleOfInterestPayment\": {\"i\": 32,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 111,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 65,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 7,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 400,\"lifeFloor\": 1971,\"periodCap\": 86399,\"periodFloor\": 1461}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"255,154,141,57,31,41,83,171,152,217,59,203,182,169,148,42,4,193,49,70,225,144,29,101,110,127,185,190,195,117,134,208\"),stringToBytes32(\"96,59,114,123,10,34,198,236,130,98,24,150,4,119,222,93,182,183,125,10,49,137,230,48,59,194,218,41,4,2,74,210\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,81,255,254,28,951,6,26,32076,131,146097,3,1532892063,399,8,10000,30,901,1969,130,97,50,1461001,Definitions.IPS(32,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(111,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(65,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(7,Definitions.P.Q,Definitions.S.LONG,true),400,1971,86399,1461)"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [245,135,237,159,148,172,13,110,223,201,182,85,41,165,68,211,210,9,191,215,215,195,95,12,47,12,190,8,122,166,79,1],\"legalEntityIdCounterparty\": [12,238,89,169,19,81,166,183,244,244,164,169,217,183,111,68,30,88,156,89,150,180,77,242,174,223,35,240,154,73,47,117],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 120,\"statusDate\": 1460,\"initialExchangeDate\": 2014223716,\"maturityDate\": 65,\"terminationDate\": 7,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 150,\"cycleAnchorDateOfRateReset\": 254,\"cycleAnchorDateOfScalingIndex\": 120,\"cycleAnchorDateOfFee\": 11,\"notionalPrincipal\": 18,\"nominalInterestRate\": 0,\"feeAccrued\": 29,\"accruedInterest\": 2014223715,\"rateMultiplier\": 86401,\"rateSpread\": 80,\"feeRate\": 89,\"nextResetRate\": 1971,\"penaltyRate\": 9,\"premiumDiscountAtIED\": 950,\"priceAtPurchaseDate\": 949,\"cycleOfInterestPayment\": {\"i\": 89,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 121,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 2014223715,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1532892062,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 141,\"lifeFloor\": 10000,\"periodCap\": 50,\"periodFloor\": 40}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"245,135,237,159,148,172,13,110,223,201,182,85,41,165,68,211,210,9,191,215,215,195,95,12,47,12,190,8,122,166,79,1\"),stringToBytes32(\"12,238,89,169,19,81,166,183,244,244,164,169,217,183,111,68,30,88,156,89,150,180,77,242,174,223,35,240,154,73,47,117\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,120,1460,2014223716,65,7,0,0,150,254,120,11,18,0,29,2014223715,86401,80,89,1971,9,950,949,Definitions.IPS(89,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(121,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(2014223715,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(1532892062,Definitions.P.D,Definitions.S.LONG,false),141,10000,50,40)"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [177,225,244,169,85,120,211,195,131,109,229,27,8,82,77,227,221,5,117,51,229,29,44,134,194,220,173,61,129,2,82,203],\"legalEntityIdCounterparty\": [78,133,232,175,31,9,127,152,209,148,82,150,60,50,206,14,167,127,231,93,236,13,142,59,53,213,117,145,52,188,36,255],\"dayCountConvention\": 4,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 81,\"statusDate\": 68570,\"initialExchangeDate\": 1,\"maturityDate\": 27,\"terminationDate\": 29,\"purchaseDate\": 51,\"capitalizationEndDate\": 2440587,\"cycleAnchorDateOfInterestPayment\": 6,\"cycleAnchorDateOfRateReset\": 10,\"cycleAnchorDateOfScalingIndex\": 399,\"cycleAnchorDateOfFee\": 32076,\"notionalPrincipal\": 32074,\"nominalInterestRate\": 368,\"feeAccrued\": 2,\"accruedInterest\": 120,\"rateMultiplier\": 100,\"rateSpread\": 4900,\"feeRate\": 48,\"nextResetRate\": 86401,\"penaltyRate\": 40,\"premiumDiscountAtIED\": 14,\"priceAtPurchaseDate\": 68569,\"cycleOfInterestPayment\": {\"i\": 8,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2440587,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 51,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 10,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 14,\"lifeFloor\": 86401,\"periodCap\": 2446,\"periodFloor\": 129}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"177,225,244,169,85,120,211,195,131,109,229,27,8,82,77,227,221,5,117,51,229,29,44,134,194,220,173,61,129,2,82,203\"),stringToBytes32(\"78,133,232,175,31,9,127,152,209,148,82,150,60,50,206,14,167,127,231,93,236,13,142,59,53,213,117,145,52,188,36,255\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,81,68570,1,27,29,51,2440587,6,10,399,32076,32074,368,2,120,100,4900,48,86401,40,14,68569,Definitions.IPS(8,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(2440587,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(51,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(10,Definitions.P.W,Definitions.S.SHORT,false),14,86401,2446,129)"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [25,132,105,188,39,253,232,109,24,38,108,67,165,65,57,89,242,33,198,250,2,41,105,145,254,212,74,221,148,65,161,96],\"legalEntityIdCounterparty\": [112,119,115,13,66,31,231,131,132,224,9,105,67,97,67,80,195,89,203,140,233,153,56,71,127,255,82,245,246,157,227,97],\"dayCountConvention\": 0,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 151,\"statusDate\": 1969,\"initialExchangeDate\": 23,\"maturityDate\": 159,\"terminationDate\": 6,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 149,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 64,\"cycleAnchorDateOfFee\": 1338,\"notionalPrincipal\": 359,\"nominalInterestRate\": 0,\"feeAccrued\": 16,\"accruedInterest\": 69,\"rateMultiplier\": 32076,\"rateSpread\": 68570,\"feeRate\": 2014223716,\"nextResetRate\": 366,\"penaltyRate\": 5,\"premiumDiscountAtIED\": 20,\"priceAtPurchaseDate\": 86400,\"cycleOfInterestPayment\": {\"i\": 50,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 10,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 401,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 29,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 86399,\"lifeFloor\": 99,\"periodCap\": 1461000,\"periodFloor\": 146096}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"25,132,105,188,39,253,232,109,24,38,108,67,165,65,57,89,242,33,198,250,2,41,105,145,254,212,74,221,148,65,161,96\"),stringToBytes32(\"112,119,115,13,66,31,231,131,132,224,9,105,67,97,67,80,195,89,203,140,233,153,56,71,127,255,82,245,246,157,227,97\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,151,1969,23,159,6,0,0,149,0,64,1338,359,0,16,69,32076,68570,2014223716,366,5,20,86400,Definitions.IPS(50,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(10,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(401,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(29,Definitions.P.D,Definitions.S.SHORT,true),86399,99,1461000,146096)"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [253,189,217,82,215,79,33,50,71,123,52,123,214,61,4,38,217,171,87,107,229,164,137,21,0,245,252,137,68,106,141,217],\"legalEntityIdCounterparty\": [182,144,142,53,186,230,64,110,161,220,169,219,103,68,17,204,242,89,164,157,239,154,200,203,208,139,113,229,219,141,78,116],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 100,\"statusDate\": 140,\"initialExchangeDate\": 4901,\"maturityDate\": 79,\"terminationDate\": 257,\"purchaseDate\": 2447,\"capitalizationEndDate\": 51,\"cycleAnchorDateOfInterestPayment\": 121,\"cycleAnchorDateOfRateReset\": 119,\"cycleAnchorDateOfScalingIndex\": 32074,\"cycleAnchorDateOfFee\": 31,\"notionalPrincipal\": 1,\"nominalInterestRate\": 950,\"feeAccrued\": 1336,\"accruedInterest\": 86401,\"rateMultiplier\": 364,\"rateSpread\": 90,\"feeRate\": 40,\"nextResetRate\": 32075,\"penaltyRate\": 8,\"premiumDiscountAtIED\": 1461000,\"priceAtPurchaseDate\": 16,\"cycleOfInterestPayment\": {\"i\": 2446,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 27,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 7,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 5,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 4800,\"lifeFloor\": 12,\"periodCap\": 12,\"periodFloor\": 160}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"253,189,217,82,215,79,33,50,71,123,52,123,214,61,4,38,217,171,87,107,229,164,137,21,0,245,252,137,68,106,141,217\"),stringToBytes32(\"182,144,142,53,186,230,64,110,161,220,169,219,103,68,17,204,242,89,164,157,239,154,200,203,208,139,113,229,219,141,78,116\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,100,140,4901,79,257,2447,51,121,119,32074,31,1,950,1336,86401,364,90,40,32075,8,1461000,16,Definitions.IPS(2446,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(27,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(7,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(5,Definitions.P.Q,Definitions.S.SHORT,false),4800,12,12,160)"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [249,133,103,101,183,85,227,146,109,123,60,42,94,146,95,208,0,51,231,194,57,135,11,36,10,239,252,169,189,180,46,48],\"legalEntityIdCounterparty\": [145,79,90,198,106,236,170,75,30,147,230,225,239,17,238,134,184,65,199,154,64,196,170,176,7,159,66,100,85,238,110,177],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 130,\"statusDate\": 50,\"initialExchangeDate\": 1461001,\"maturityDate\": 8,\"terminationDate\": 27,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4900,\"cycleAnchorDateOfRateReset\": 100,\"cycleAnchorDateOfScalingIndex\": 399,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 2014223715,\"nominalInterestRate\": 0,\"feeAccrued\": 40,\"accruedInterest\": 1462,\"rateMultiplier\": 1969,\"rateSpread\": 255,\"feeRate\": 9999,\"nextResetRate\": 0,\"penaltyRate\": 24,\"premiumDiscountAtIED\": 949,\"priceAtPurchaseDate\": 1461002,\"cycleOfInterestPayment\": {\"i\": 140,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 109,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 90,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 254,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 899,\"lifeFloor\": 10,\"periodCap\": 119,\"periodFloor\": 366}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"249,133,103,101,183,85,227,146,109,123,60,42,94,146,95,208,0,51,231,194,57,135,11,36,10,239,252,169,189,180,46,48\"),stringToBytes32(\"145,79,90,198,106,236,170,75,30,147,230,225,239,17,238,134,184,65,199,154,64,196,170,176,7,159,66,100,85,238,110,177\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,130,50,1461001,8,27,0,0,4900,100,399,0,2014223715,0,40,1462,1969,255,9999,0,24,949,1461002,Definitions.IPS(140,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(109,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(90,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(254,Definitions.P.W,Definitions.S.LONG,false),899,10,119,366)"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [77,110,14,128,190,126,120,198,40,243,230,200,59,195,230,14,158,185,148,78,229,68,179,83,204,0,22,208,212,222,123,37],\"legalEntityIdCounterparty\": [43,85,154,37,126,34,93,37,241,179,140,49,67,186,226,192,138,126,178,53,132,101,211,158,152,206,236,125,130,74,18,200],\"dayCountConvention\": 1,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 101,\"statusDate\": 4900,\"initialExchangeDate\": 950,\"maturityDate\": 89,\"terminationDate\": 86399,\"purchaseDate\": 2446,\"capitalizationEndDate\": 950,\"cycleAnchorDateOfInterestPayment\": 141,\"cycleAnchorDateOfRateReset\": 8,\"cycleAnchorDateOfScalingIndex\": 2448,\"cycleAnchorDateOfFee\": 17,\"notionalPrincipal\": 51,\"nominalInterestRate\": 361,\"feeAccrued\": 159,\"accruedInterest\": 111,\"rateMultiplier\": -1,\"rateSpread\": 146098,\"feeRate\": 2447,\"nextResetRate\": 4001,\"penaltyRate\": 66,\"premiumDiscountAtIED\": 32076,\"priceAtPurchaseDate\": 17,\"cycleOfInterestPayment\": {\"i\": 68570,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2440587,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 110,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 32075,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 11,\"lifeFloor\": 71,\"periodCap\": 66,\"periodFloor\": 80}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"77,110,14,128,190,126,120,198,40,243,230,200,59,195,230,14,158,185,148,78,229,68,179,83,204,0,22,208,212,222,123,37\"),stringToBytes32(\"43,85,154,37,126,34,93,37,241,179,140,49,67,186,226,192,138,126,178,53,132,101,211,158,152,206,236,125,130,74,18,200\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,101,4900,950,89,86399,2446,950,141,8,2448,17,51,361,159,111,-1,146098,2447,4001,66,32076,17,Definitions.IPS(68570,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(2440587,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(110,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(32075,Definitions.P.M,Definitions.S.LONG,true),11,71,66,80)"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [249,219,37,162,42,202,216,194,205,135,109,94,231,131,114,191,134,244,11,133,161,21,125,77,151,234,7,54,61,206,84,54],\"legalEntityIdCounterparty\": [226,27,161,255,74,27,90,142,66,152,82,44,167,158,37,236,121,216,81,28,165,78,160,81,20,86,186,55,161,146,140,111],\"dayCountConvention\": 0,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 1532892062,\"statusDate\": 101,\"initialExchangeDate\": 120,\"maturityDate\": 60,\"terminationDate\": 30,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 361,\"cycleAnchorDateOfRateReset\": 1532892063,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 1336,\"notionalPrincipal\": 2,\"nominalInterestRate\": 0,\"feeAccrued\": 68569,\"accruedInterest\": 12,\"rateMultiplier\": 32075,\"rateSpread\": 32,\"feeRate\": 1,\"nextResetRate\": 4900,\"penaltyRate\": 11,\"premiumDiscountAtIED\": 951,\"priceAtPurchaseDate\": 4001,\"cycleOfInterestPayment\": {\"i\": 399,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 51,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4800,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1336,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 30,\"lifeFloor\": 255,\"periodCap\": 99,\"periodFloor\": 28}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"249,219,37,162,42,202,216,194,205,135,109,94,231,131,114,191,134,244,11,133,161,21,125,77,151,234,7,54,61,206,84,54\"),stringToBytes32(\"226,27,161,255,74,27,90,142,66,152,82,44,167,158,37,236,121,216,81,28,165,78,160,81,20,86,186,55,161,146,140,111\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,1532892062,101,120,60,30,0,0,361,1532892063,0,1336,2,0,68569,12,32075,32,1,4900,11,951,4001,Definitions.IPS(399,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(51,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(4800,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(1336,Definitions.P.Y,Definitions.S.LONG,true),30,255,99,28)"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [142,31,38,237,40,84,155,173,118,251,184,50,58,20,116,83,54,241,145,111,128,151,206,103,25,122,224,27,38,192,12,158],\"legalEntityIdCounterparty\": [242,58,29,58,142,32,254,42,70,103,36,19,120,200,74,44,164,74,86,118,82,227,0,187,228,168,251,27,167,243,45,136],\"dayCountConvention\": 6,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 6,\"statusDate\": 20,\"initialExchangeDate\": 255,\"maturityDate\": 361,\"terminationDate\": 80,\"purchaseDate\": 17,\"capitalizationEndDate\": 2014223716,\"cycleAnchorDateOfInterestPayment\": 365,\"cycleAnchorDateOfRateReset\": 951,\"cycleAnchorDateOfScalingIndex\": 146098,\"cycleAnchorDateOfFee\": 81,\"notionalPrincipal\": 146097,\"nominalInterestRate\": 21,\"feeAccrued\": 140,\"accruedInterest\": 68569,\"rateMultiplier\": 101,\"rateSpread\": 6,\"feeRate\": 256,\"nextResetRate\": 68568,\"penaltyRate\": 4,\"premiumDiscountAtIED\": 80,\"priceAtPurchaseDate\": 365,\"cycleOfInterestPayment\": {\"i\": 140,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2440588,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4801,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2447,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 80,\"lifeFloor\": 48,\"periodCap\": 2440588,\"periodFloor\": 2014223716}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"142,31,38,237,40,84,155,173,118,251,184,50,58,20,116,83,54,241,145,111,128,151,206,103,25,122,224,27,38,192,12,158\"),stringToBytes32(\"242,58,29,58,142,32,254,42,70,103,36,19,120,200,74,44,164,74,86,118,82,227,0,187,228,168,251,27,167,243,45,136\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.N,6,20,255,361,80,17,2014223716,365,951,146098,81,146097,21,140,68569,101,6,256,68568,4,80,365,Definitions.IPS(140,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(2440588,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(4801,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(2447,Definitions.P.M,Definitions.S.LONG,false),80,48,2440588,2014223716)"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [249,122,28,172,74,129,171,64,207,132,253,200,212,67,74,238,171,168,111,10,240,131,89,34,179,79,89,220,209,53,42,3],\"legalEntityIdCounterparty\": [95,248,88,122,100,254,208,234,22,157,143,42,237,52,255,83,141,182,233,105,174,82,44,167,26,27,162,190,207,67,70,105],\"dayCountConvention\": 5,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 28,\"statusDate\": 86399,\"initialExchangeDate\": 96,\"maturityDate\": 95,\"terminationDate\": 66,\"purchaseDate\": 150,\"capitalizationEndDate\": 1338,\"cycleAnchorDateOfInterestPayment\": 101,\"cycleAnchorDateOfRateReset\": 51,\"cycleAnchorDateOfScalingIndex\": 1461002,\"cycleAnchorDateOfFee\": 2447,\"notionalPrincipal\": 31,\"nominalInterestRate\": 2440587,\"feeAccrued\": 1969,\"accruedInterest\": 2,\"rateMultiplier\": 70,\"rateSpread\": 1969,\"feeRate\": 901,\"nextResetRate\": 0,\"penaltyRate\": 140,\"premiumDiscountAtIED\": 18,\"priceAtPurchaseDate\": 2440587,\"cycleOfInterestPayment\": {\"i\": 130,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1461001,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 90,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 68570,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 101,\"lifeFloor\": 40,\"periodCap\": 901,\"periodFloor\": 9}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"249,122,28,172,74,129,171,64,207,132,253,200,212,67,74,238,171,168,111,10,240,131,89,34,179,79,89,220,209,53,42,3\"),stringToBytes32(\"95,248,88,122,100,254,208,234,22,157,143,42,237,52,255,83,141,182,233,105,174,82,44,167,26,27,162,190,207,67,70,105\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,28,86399,96,95,66,150,1338,101,51,1461002,2447,31,2440587,1969,2,70,1969,901,0,140,18,2440587,Definitions.IPS(130,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(1461001,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(90,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(68570,Definitions.P.D,Definitions.S.LONG,true),101,40,901,9)"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [226,79,32,2,255,208,132,251,51,127,21,175,247,4,86,70,100,237,187,204,91,184,53,56,23,7,99,133,216,68,119,186],\"legalEntityIdCounterparty\": [80,209,63,47,255,144,87,213,26,108,183,57,157,59,184,217,189,233,236,49,229,218,29,54,54,36,14,76,94,145,20,148],\"dayCountConvention\": 2,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 949,\"statusDate\": 40,\"initialExchangeDate\": 10001,\"maturityDate\": 2440588,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 11,\"cycleAnchorDateOfRateReset\": 63,\"cycleAnchorDateOfScalingIndex\": 28,\"cycleAnchorDateOfFee\": 146096,\"notionalPrincipal\": 1,\"nominalInterestRate\": 0,\"feeAccrued\": 68568,\"accruedInterest\": 254,\"rateMultiplier\": 26,\"rateSpread\": 101,\"feeRate\": 4901,\"nextResetRate\": 2014223715,\"penaltyRate\": 13,\"premiumDiscountAtIED\": 1336,\"priceAtPurchaseDate\": 32075,\"cycleOfInterestPayment\": {\"i\": 5,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 59,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 361,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 69,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 10,\"lifeFloor\": 120,\"periodCap\": 31,\"periodFloor\": 0}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"226,79,32,2,255,208,132,251,51,127,21,175,247,4,86,70,100,237,187,204,91,184,53,56,23,7,99,133,216,68,119,186\"),stringToBytes32(\"80,209,63,47,255,144,87,213,26,108,183,57,157,59,184,217,189,233,236,49,229,218,29,54,54,36,14,76,94,145,20,148\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,949,40,10001,2440588,0,0,0,11,63,28,146096,1,0,68568,254,26,101,4901,2014223715,13,1336,32075,Definitions.IPS(5,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(59,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(361,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(69,Definitions.P.M,Definitions.S.LONG,true),10,120,31,0)"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [242,71,159,185,83,106,167,63,163,42,37,83,72,110,111,209,172,142,243,104,48,232,113,18,38,67,25,148,136,64,217,174],\"legalEntityIdCounterparty\": [81,219,39,95,229,249,8,239,117,104,241,129,83,54,81,2,35,200,155,240,100,206,146,249,80,202,32,83,84,92,174,231],\"dayCountConvention\": 6,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 68570,\"statusDate\": 257,\"initialExchangeDate\": 111,\"maturityDate\": 1,\"terminationDate\": 2,\"purchaseDate\": 40,\"capitalizationEndDate\": 149,\"cycleAnchorDateOfInterestPayment\": 2014223715,\"cycleAnchorDateOfRateReset\": 1460,\"cycleAnchorDateOfScalingIndex\": 901,\"cycleAnchorDateOfFee\": 66,\"notionalPrincipal\": 39,\"nominalInterestRate\": 3,\"feeAccrued\": 10000,\"accruedInterest\": 2440588,\"rateMultiplier\": 32076,\"rateSpread\": 68569,\"feeRate\": 899,\"nextResetRate\": 9,\"penaltyRate\": 6,\"premiumDiscountAtIED\": 99,\"priceAtPurchaseDate\": 254,\"cycleOfInterestPayment\": {\"i\": 69,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 364,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 255,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 18,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 1336,\"lifeFloor\": 2447,\"periodCap\": 17,\"periodFloor\": 368}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"242,71,159,185,83,106,167,63,163,42,37,83,72,110,111,209,172,142,243,104,48,232,113,18,38,67,25,148,136,64,217,174\"),stringToBytes32(\"81,219,39,95,229,249,8,239,117,104,241,129,83,54,81,2,35,200,155,240,100,206,146,249,80,202,32,83,84,92,174,231\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,68570,257,111,1,2,40,149,2014223715,1460,901,66,39,3,10000,2440588,32076,68569,899,9,6,99,254,Definitions.IPS(69,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(364,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(255,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(18,Definitions.P.D,Definitions.S.LONG,true),1336,2447,17,368)"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [72,52,36,2,168,96,41,5,189,184,9,191,149,130,83,238,44,229,26,141,125,44,155,151,133,235,213,92,176,41,205,226],\"legalEntityIdCounterparty\": [202,137,62,186,154,223,223,229,66,50,151,248,135,46,255,75,120,175,160,92,230,252,89,219,172,69,104,29,222,177,78,63],\"dayCountConvention\": 3,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 23,\"statusDate\": 68569,\"initialExchangeDate\": 4000,\"maturityDate\": 141,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 2014223716,\"cycleAnchorDateOfRateReset\": 51,\"cycleAnchorDateOfScalingIndex\": 109,\"cycleAnchorDateOfFee\": 71,\"notionalPrincipal\": 1532892063,\"nominalInterestRate\": 0,\"feeAccrued\": 2446,\"accruedInterest\": 1461000,\"rateMultiplier\": 2440588,\"rateSpread\": 65,\"feeRate\": 400,\"nextResetRate\": 96,\"penaltyRate\": 96,\"premiumDiscountAtIED\": 951,\"priceAtPurchaseDate\": 364,\"cycleOfInterestPayment\": {\"i\": 950,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2447,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2447,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 86400,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 1,\"lifeFloor\": 1338,\"periodCap\": 120,\"periodFloor\": 1461000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"72,52,36,2,168,96,41,5,189,184,9,191,149,130,83,238,44,229,26,141,125,44,155,151,133,235,213,92,176,41,205,226\"),stringToBytes32(\"202,137,62,186,154,223,223,229,66,50,151,248,135,46,255,75,120,175,160,92,230,252,89,219,172,69,104,29,222,177,78,63\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,23,68569,4000,141,0,0,0,2014223716,51,109,71,1532892063,0,2446,1461000,2440588,65,400,96,96,951,364,Definitions.IPS(950,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(2447,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(2447,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(86400,Definitions.P.W,Definitions.S.LONG,false),1,1338,120,1461000)"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.508ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:37:37.530ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}