,{
  "2020-11-12T23:41:35.466ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "899",
                "sol": "899"
              },
              {
                "js": "368",
                "sol": "368"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T23:41:35.468ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.468ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.469ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.470ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.470ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.471ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.473ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "hour >= 24",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour>=24,FunctionCall==true",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.475ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.475ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.476ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.476ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.477ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.478ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.480ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.481ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.481ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.481ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.482ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.482ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.482ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.483ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.494ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.495ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.496ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.496ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.497ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.497ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.497ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.498ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.498ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.499ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.499ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.500ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 146097,
                "sol": 146097
              },
              {
                "js": "146096",
                "sol": "146096"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T23:41:35.500ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 162,
                "sol": 162
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T23:41:35.501ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4902,
                "sol": 4902
              },
              {
                "js": "4901",
                "sol": "4901"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T23:41:35.502ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1461003,
                "sol": 1461003
              },
              {
                "js": "1461002",
                "sol": "1461002"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T23:41:35.502ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 255,
                "sol": 255
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T23:41:35.503ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 369,
                "sol": 369
              },
              {
                "js": "368",
                "sol": "368"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T23:41:35.505ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.506ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T23:41:35.509ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.ContractRole.OBL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.519ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "361",
                "sol": "361"
              },
              {
                "js": 360,
                "sol": 360
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "2440588",
                "sol": "2440588"
              },
              {
                "js": 2440587,
                "sol": 2440587
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": 18,
                "sol": 18
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": 26,
                "sol": 26
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": 3,
              "sol": "Definitions.DayCountConvention._30E_360ISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": 70,
                "sol": 70
              },
              {
                "js": 3,
                "sol": "Definitions.DayCountConvention._30E_360ISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T23:41:35.524ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.525ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.525ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.525ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.527ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{\"i\": 4000,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(4000,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{\"i\": 41,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(41,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{\"i\": 1532892064,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1532892064,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{\"i\": 50,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(50,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.530ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.531ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.532ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractStatus.DQ"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.535ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.539ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.543ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.545ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.548ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1970,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1970,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 4899,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(4899,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 1462,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1462,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 4801,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(4801,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 360,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(360,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 18,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(18,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 81,\"p\": 99999,\"s\": 1,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.553ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{\"i\": 900,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(900,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{\"i\": 111,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(111,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{\"i\": 1460,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1460,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{\"i\": 951,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(951,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{\"i\": 149,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(149,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{\"i\": 86400,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(86400,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{\"i\": 71,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(71,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{\"i\": 65,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(65,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{\"i\": 1461,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1461,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.562ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 159,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(159,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 1461000,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1461000,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 41,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(41,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 2447,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2447,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 1461,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1461,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 32,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(32,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1336,\"p\": 99999,\"s\": 1,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.565ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 3999,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 7},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 49,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 11},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 10000,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 9},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 1461001,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 68568,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 7},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 70,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 6},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 4799,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 20},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 1532892062,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 14,\"stfType\": 5},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 401,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 10},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 79,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 10},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 86401,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 950,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 2},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 161,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 11},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 367,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 14},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 10000,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 1969,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 1},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 2014223716,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 1,\"stfType\": 20},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 26,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 900,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 4},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 121,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 13},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 97,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 10},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 79,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 20},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 368,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 9},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 31,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 3},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 359,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 14},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 359,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 0},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 359,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 16},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 32075,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 86401,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 5},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 71,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 367,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 1461001,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 18},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 32074,\"eventType\": 9,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 12},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 159,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 8},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 16,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 11},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 25,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 10},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 367,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 1},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 17,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 15},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 4801,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 18},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 4799,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 20},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 399,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 9},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 1969,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 14},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 364,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 6},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 26,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 9},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 1462,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 15},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 90,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 12},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 1337,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 18},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 361,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 15,\"stfType\": 18},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 1,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 17},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 1461002,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 3},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 69,\"eventType\": 11,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 18},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 1461000,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 4801,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 3},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 366,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 40,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 6,\"stfType\": 11},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 130,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 16},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 109,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 11},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 95,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 8},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 899,\"eventType\": 1,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 19},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 900,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 23,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 111,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 0,\"stfType\": 11},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 20,\"eventType\": 14,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 11},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 99,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 16}]",
              "sol": "[Definitions.ProtoEvent(26,61,3999,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PY),Definitions.ProtoEvent(10,141,49,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCI),Definitions.ProtoEvent(80,5,10000,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PRD),Definitions.ProtoEvent(81,364,1461001,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(30,255,68568,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PY),Definitions.ProtoEvent(5,68570,70,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PP),Definitions.ProtoEvent(130,10000,4799,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.Child),Definitions.ProtoEvent(30,20,1532892062,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PR),Definitions.ProtoEvent(11,21,401,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.TD),Definitions.ProtoEvent(159,97,79,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.TD),Definitions.ProtoEvent(2448,91,86401,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(26,11,950,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.AD),Definitions.ProtoEvent(119,29,161,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCI),Definitions.ProtoEvent(141,27,367,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SC),Definitions.ProtoEvent(66,121,10000,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(141,4801,1969,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.MD),Definitions.ProtoEvent(131,1460,2014223716,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.Child),Definitions.ProtoEvent(1461000,1532892062,26,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(101,1338,900,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IP),Definitions.ProtoEvent(9,86401,121,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RRY),Definitions.ProtoEvent(111,140,97,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.TD),Definitions.ProtoEvent(4899,120,79,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.Child),Definitions.ProtoEvent(1532892064,951,368,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PRD),Definitions.ProtoEvent(100,1532892064,31,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IED),Definitions.ProtoEvent(2014223714,12,359,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SC),Definitions.ProtoEvent(119,161,359,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.SD),Definitions.ProtoEvent(31,3999,359,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.DV),Definitions.ProtoEvent(4000,899,32075,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(32075,256,86401,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PR),Definitions.ProtoEvent(96,256,71,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(28,4800,367,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(3,151,1461001,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IPCB),Definitions.ProtoEvent(11,2440589,32074,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.RR),Definitions.ProtoEvent(360,366,159,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.FP),Definitions.ProtoEvent(1461001,150,16,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCI),Definitions.ProtoEvent(2448,81,25,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.TD),Definitions.ProtoEvent(360,64,367,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.MD),Definitions.ProtoEvent(27,119,17,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.CD),Definitions.ProtoEvent(91,17,4801,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCB),Definitions.ProtoEvent(26,1338,4799,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.Child),Definitions.ProtoEvent(368,2014223714,399,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PRD),Definitions.ProtoEvent(48,1461000,1969,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SC),Definitions.ProtoEvent(1461,367,364,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PP),Definitions.ProtoEvent(51,41,26,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PRD),Definitions.ProtoEvent(12,257,1462,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.CD),Definitions.ProtoEvent(4,86401,90,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RR),Definitions.ProtoEvent(121,146096,1337,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCB),Definitions.ProtoEvent(10,23,361,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCB),Definitions.ProtoEvent(10001,129,1,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MR),Definitions.ProtoEvent(2446,951,1461002,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IED),Definitions.ProtoEvent(51,1,69,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCB),Definitions.ProtoEvent(3,5,1461000,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(2447,1461002,4801,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IED),Definitions.ProtoEvent(30,4001,366,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(1337,21,40,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCI),Definitions.ProtoEvent(140,59,130,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.DV),Definitions.ProtoEvent(149,368,109,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCI),Definitions.ProtoEvent(1971,28,95,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.FP),Definitions.ProtoEvent(4801,950,899,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.STD),Definitions.ProtoEvent(51,1462,900,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(2014223714,26,23,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(0,368,111,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCI),Definitions.ProtoEvent(69,59,20,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCI),Definitions.ProtoEvent(90,101,99,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.DV)]"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.579ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 51,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 12},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 368,\"eventType\": 17,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 15},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 900,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 6},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 96,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 0},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 119,\"eventType\": 7,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 15},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 2447,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 11},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 900,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 7},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 109,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 4},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 2448,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 1338,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 9},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 71,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 2},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 80,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 8},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 7,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 17},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 364,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 3},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 17,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 14},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 2440589,\"eventType\": 13,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 0},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 2,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 4800,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 2},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 26,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 2},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 2,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 0},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 100,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 8},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 29,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 16},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 2014223716,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 7},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 101,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 13,\"stfType\": 5},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 16,\"eventType\": 1,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 9},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 8,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 11},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 2440589,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 19},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 70,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 12},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 32075,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 15},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 70,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 15,\"stfType\": 13},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 10,\"eventType\": 1,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 18},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 149,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 16},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 25,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 14},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 899,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 12},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 364,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 63,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 4},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 19,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 16},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 2440589,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 19,\"stfType\": 14},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 96,\"eventType\": 9,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 15},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 89,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 32075,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 13},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 951,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 9},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 256,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 16},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 97,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 11},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 161,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 20},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 159,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 19},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 4,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 10},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 360,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 2440587,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 10},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 367,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 11,\"stfType\": 9},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 18,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 5,\"stfType\": 11},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 10001,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 9},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 1460,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 12},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 26,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 25,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 8},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 150,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 2},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 61,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 4},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 1336,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 19},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 13,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 1},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 1,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 0},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 60,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 5},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 159,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 6,\"stfType\": 10},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 81,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 14},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 140,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 2}]",
              "sol": "[Definitions.ProtoEvent(25,16,51,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RR),Definitions.ProtoEvent(109,1461001,368,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.CD),Definitions.ProtoEvent(2014223716,256,900,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PP),Definitions.ProtoEvent(2440588,5,96,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SD),Definitions.ProtoEvent(151,254,119,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.CD),Definitions.ProtoEvent(366,11,2447,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCI),Definitions.ProtoEvent(1,139,900,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PY),Definitions.ProtoEvent(2446,32076,109,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IP),Definitions.ProtoEvent(1969,111,2448,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(359,29,1338,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PRD),Definitions.ProtoEvent(25,61,71,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.AD),Definitions.ProtoEvent(91,101,80,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.FP),Definitions.ProtoEvent(3,366,7,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.MR),Definitions.ProtoEvent(23,0,364,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IED),Definitions.ProtoEvent(99,1460,17,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SC),Definitions.ProtoEvent(48,4901,2440589,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SD),Definitions.ProtoEvent(1462,4899,2,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(2440587,69,4800,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.AD),Definitions.ProtoEvent(368,109,26,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.AD),Definitions.ProtoEvent(4,1,2,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.SD),Definitions.ProtoEvent(365,91,100,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.FP),Definitions.ProtoEvent(69,2447,29,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.DV),Definitions.ProtoEvent(1532892064,68570,2014223716,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PY),Definitions.ProtoEvent(359,146097,101,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PR),Definitions.ProtoEvent(140,4801,16,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PRD),Definitions.ProtoEvent(32074,150,8,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCI),Definitions.ProtoEvent(68568,89,2440589,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.STD),Definitions.ProtoEvent(41,360,70,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RR),Definitions.ProtoEvent(129,1532892062,32075,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.CD),Definitions.ProtoEvent(20,99,70,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RRY),Definitions.ProtoEvent(1461,2440587,10,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCB),Definitions.ProtoEvent(4,1,149,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.DV),Definitions.ProtoEvent(109,1,25,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SC),Definitions.ProtoEvent(900,256,899,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RR),Definitions.ProtoEvent(146096,9,364,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(32076,367,63,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IP),Definitions.ProtoEvent(119,256,19,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.DV),Definitions.ProtoEvent(86400,6,2440589,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SC),Definitions.ProtoEvent(366,50,96,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.CD),Definitions.ProtoEvent(399,150,89,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(14,254,32075,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RRY),Definitions.ProtoEvent(4,900,951,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PRD),Definitions.ProtoEvent(16,140,256,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.DV),Definitions.ProtoEvent(15,161,97,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCI),Definitions.ProtoEvent(1532892063,100,161,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.Child),Definitions.ProtoEvent(120,159,159,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.STD),Definitions.ProtoEvent(25,149,4,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.TD),Definitions.ProtoEvent(6,11,360,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(399,4899,2440587,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.TD),Definitions.ProtoEvent(146098,32076,367,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PRD),Definitions.ProtoEvent(950,4001,18,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IPCI),Definitions.ProtoEvent(160,1461002,10001,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PRD),Definitions.ProtoEvent(129,23,1460,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RR),Definitions.ProtoEvent(1338,20,26,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(4899,32074,25,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.FP),Definitions.ProtoEvent(69,7,150,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.AD),Definitions.ProtoEvent(2014223715,48,61,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IP),Definitions.ProtoEvent(32076,141,1336,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.STD),Definitions.ProtoEvent(23,949,13,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MD),Definitions.ProtoEvent(1461001,140,1,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SD),Definitions.ProtoEvent(3,86401,60,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PR),Definitions.ProtoEvent(150,2014223714,159,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.TD),Definitions.ProtoEvent(14,28,81,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.SC),Definitions.ProtoEvent(61,32,140,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.AD)]"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.600ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "endTimestamp < timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN endTimestamp<timestamp",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.603ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [145,213,102,233,191,118,247,170,121,243,7,214,64,163,138,113,21,224,213,239,129,33,146,216,19,118,188,155,239,79,52,221],\"legalEntityIdCounterparty\": [57,246,110,66,101,108,121,16,229,200,57,60,194,159,228,224,2,0,64,15,234,21,3,223,43,203,247,226,216,1,227,142],\"dayCountConvention\": 1,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 1969,\"statusDate\": 1338,\"initialExchangeDate\": 4000,\"maturityDate\": 3,\"terminationDate\": 255,\"purchaseDate\": 360,\"capitalizationEndDate\": 255,\"cycleAnchorDateOfInterestPayment\": 59,\"cycleAnchorDateOfRateReset\": 366,\"cycleAnchorDateOfScalingIndex\": 20,\"cycleAnchorDateOfFee\": 14,\"notionalPrincipal\": 1,\"nominalInterestRate\": 4001,\"feeAccrued\": -1,\"accruedInterest\": 26,\"rateMultiplier\": 101,\"rateSpread\": 5,\"feeRate\": 64,\"nextResetRate\": 949,\"penaltyRate\": 32,\"premiumDiscountAtIED\": 32,\"priceAtPurchaseDate\": 40,\"cycleOfInterestPayment\": {\"i\": 18,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 400,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 4,\"lifeFloor\": 64,\"periodCap\": 1461001,\"periodFloor\": 146097}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"145,213,102,233,191,118,247,170,121,243,7,214,64,163,138,113,21,224,213,239,129,33,146,216,19,118,188,155,239,79,52,221\"),stringToBytes32(\"57,246,110,66,101,108,121,16,229,200,57,60,194,159,228,224,2,0,64,15,234,21,3,223,43,203,247,226,216,1,227,142\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,1969,1338,4000,3,255,360,255,59,366,20,14,1,4001,-1,26,101,5,64,949,32,32,40,Definitions.IPS(18,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(2,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(2,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(400,Definitions.P.Q,Definitions.S.SHORT,true),4,64,1461001,146097)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.610ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [203,37,226,174,140,233,40,65,17,199,168,34,155,74,5,210,130,43,190,7,174,140,1,112,230,49,241,125,33,219,146,115],\"legalEntityIdCounterparty\": [66,101,235,129,170,227,219,20,232,70,226,71,81,112,161,248,224,102,160,96,22,23,166,55,94,153,113,157,150,138,249,25],\"dayCountConvention\": 0,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 120,\"statusDate\": 2,\"initialExchangeDate\": 65,\"maturityDate\": 2448,\"terminationDate\": 41,\"purchaseDate\": 3999,\"capitalizationEndDate\": 96,\"cycleAnchorDateOfInterestPayment\": 68568,\"cycleAnchorDateOfRateReset\": 1338,\"cycleAnchorDateOfScalingIndex\": 159,\"cycleAnchorDateOfFee\": 27,\"notionalPrincipal\": 141,\"nominalInterestRate\": 1532892064,\"feeAccrued\": 4001,\"accruedInterest\": 950,\"rateMultiplier\": 68569,\"rateSpread\": 59,\"feeRate\": 2014223715,\"nextResetRate\": 1970,\"penaltyRate\": 64,\"premiumDiscountAtIED\": 68568,\"priceAtPurchaseDate\": 50,\"cycleOfInterestPayment\": {\"i\": 6,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 49,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 32074,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 6,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 4799,\"lifeFloor\": 80,\"periodCap\": 146096,\"periodFloor\": 9}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"203,37,226,174,140,233,40,65,17,199,168,34,155,74,5,210,130,43,190,7,174,140,1,112,230,49,241,125,33,219,146,115\"),stringToBytes32(\"66,101,235,129,170,227,219,20,232,70,226,71,81,112,161,248,224,102,160,96,22,23,166,55,94,153,113,157,150,138,249,25\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,120,2,65,2448,41,3999,96,68568,1338,159,27,141,1532892064,4001,950,68569,59,2014223715,1970,64,68568,50,Definitions.IPS(6,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(49,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(32074,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(6,Definitions.P.Y,Definitions.S.LONG,true),4799,80,146096,9)"
            },
            {
              "js": "{\"lastEventTime\": 131,\"contractStatus\": 3,\"timeFromLastEvent\": 110,\"nominalValue\": 2447,\"nominalAccrued\": 10,\"feeAccrued\": 95,\"nominalRate\": 91,\"interestScalingMultiplier\": 110,\"nominalScalingMultiplier\": 19,\"contractRoleSign\": 0}",
              "sol": "Definitions.ContractState(131,Definitions.ContractStatus.DF,110,2447,10,95,91,110,19,Definitions.ContractRole.RPA)"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.616ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [99,186,186,244,152,100,86,170,93,72,252,205,125,18,250,211,94,7,162,80,193,55,105,55,171,217,124,138,100,25,85,146],\"legalEntityIdCounterparty\": [94,210,82,178,44,242,131,69,107,219,159,133,51,189,236,122,53,112,116,247,70,239,172,57,192,254,83,149,89,187,89,5],\"dayCountConvention\": 2,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 1532892063,\"statusDate\": 254,\"initialExchangeDate\": 129,\"maturityDate\": 29,\"terminationDate\": 360,\"purchaseDate\": 39,\"capitalizationEndDate\": 4900,\"cycleAnchorDateOfInterestPayment\": 2014223714,\"cycleAnchorDateOfRateReset\": 1337,\"cycleAnchorDateOfScalingIndex\": 30,\"cycleAnchorDateOfFee\": 366,\"notionalPrincipal\": 7,\"nominalInterestRate\": 0,\"feeAccrued\": 899,\"accruedInterest\": 1,\"rateMultiplier\": 26,\"rateSpread\": 149,\"feeRate\": 1460,\"nextResetRate\": 86401,\"penaltyRate\": 18,\"premiumDiscountAtIED\": 949,\"priceAtPurchaseDate\": 4901,\"cycleOfInterestPayment\": {\"i\": 254,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 20,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 59,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 31,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 17,\"lifeFloor\": 86399,\"periodCap\": 401,\"periodFloor\": -1}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"99,186,186,244,152,100,86,170,93,72,252,205,125,18,250,211,94,7,162,80,193,55,105,55,171,217,124,138,100,25,85,146\"),stringToBytes32(\"94,210,82,178,44,242,131,69,107,219,159,133,51,189,236,122,53,112,116,247,70,239,172,57,192,254,83,149,89,187,89,5\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,1532892063,254,129,29,360,39,4900,2014223714,1337,30,366,7,0,899,1,26,149,1460,86401,18,949,4901,Definitions.IPS(254,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(20,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(59,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(31,Definitions.P.H,Definitions.S.SHORT,true),17,86399,401,-1)"
            },
            {
              "js": "{\"lastEventTime\": 68570,\"contractStatus\": 2,\"timeFromLastEvent\": 141,\"nominalValue\": 951,\"nominalAccrued\": 95,\"feeAccrued\": 110,\"nominalRate\": 1461002,\"interestScalingMultiplier\": 40,\"nominalScalingMultiplier\": 10001,\"contractRoleSign\": 7}",
              "sol": "Definitions.ContractState(68570,Definitions.ContractStatus.DQ,141,951,95,110,1461002,40,10001,Definitions.ContractRole.SEL)"
            },
            {
              "js": "{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 68569,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 13,\"stfType\": 16}",
              "sol": "Definitions.ProtoEvent(0,10000,68569,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.DV)"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.625ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [168,227,117,213,53,60,46,45,94,137,40,31,134,186,36,7,168,29,27,190,234,119,118,57,191,252,119,192,99,25,226,79],\"legalEntityIdCounterparty\": [47,5,14,196,3,181,243,234,182,221,95,164,232,184,98,123,137,2,51,70,136,86,59,126,71,177,99,87,252,140,215,238],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 101,\"statusDate\": 3999,\"initialExchangeDate\": 1462,\"maturityDate\": 2440588,\"terminationDate\": 11,\"purchaseDate\": 14,\"capitalizationEndDate\": 27,\"cycleAnchorDateOfInterestPayment\": 1336,\"cycleAnchorDateOfRateReset\": 30,\"cycleAnchorDateOfScalingIndex\": 39,\"cycleAnchorDateOfFee\": 1462,\"notionalPrincipal\": 109,\"nominalInterestRate\": 1462,\"feeAccrued\": 110,\"accruedInterest\": 1532892064,\"rateMultiplier\": -1,\"rateSpread\": 20,\"feeRate\": 359,\"nextResetRate\": 101,\"penaltyRate\": 13,\"premiumDiscountAtIED\": 1461000,\"priceAtPurchaseDate\": 40,\"cycleOfInterestPayment\": {\"i\": 4900,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 24,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2440589,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 2447,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 129,\"lifeFloor\": 89,\"periodCap\": 1969,\"periodFloor\": 12}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"168,227,117,213,53,60,46,45,94,137,40,31,134,186,36,7,168,29,27,190,234,119,118,57,191,252,119,192,99,25,226,79\"),stringToBytes32(\"47,5,14,196,3,181,243,234,182,221,95,164,232,184,98,123,137,2,51,70,136,86,59,126,71,177,99,87,252,140,215,238\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,101,3999,1462,2440588,11,14,27,1336,30,39,1462,109,1462,110,1532892064,-1,20,359,101,13,1461000,40,Definitions.IPS(4900,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(24,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(2440589,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(2447,Definitions.P.W,Definitions.S.SHORT,true),129,89,1969,12)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [22,53,236,142,86,60,87,166,62,16,216,184,193,5,182,194,11,128,126,195,44,125,3,133,227,196,147,160,244,204,122,252],\"legalEntityIdCounterparty\": [197,63,174,243,121,228,234,60,242,152,237,50,209,73,117,35,169,181,98,157,216,131,142,112,217,65,117,215,27,31,174,169],\"dayCountConvention\": 4,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 89,\"statusDate\": 24,\"initialExchangeDate\": 1461,\"maturityDate\": 29,\"terminationDate\": 4901,\"purchaseDate\": 151,\"capitalizationEndDate\": 130,\"cycleAnchorDateOfInterestPayment\": 49,\"cycleAnchorDateOfRateReset\": 10000,\"cycleAnchorDateOfScalingIndex\": 150,\"cycleAnchorDateOfFee\": 31,\"notionalPrincipal\": 49,\"nominalInterestRate\": 141,\"feeAccrued\": 2014223716,\"accruedInterest\": 10,\"rateMultiplier\": 0,\"rateSpread\": 10,\"feeRate\": 2446,\"nextResetRate\": 146098,\"penaltyRate\": 2446,\"premiumDiscountAtIED\": 2446,\"priceAtPurchaseDate\": 10000,\"cycleOfInterestPayment\": {\"i\": 109,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 949,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 40,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 81,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 364,\"lifeFloor\": 121,\"periodCap\": 949,\"periodFloor\": 0}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"22,53,236,142,86,60,87,166,62,16,216,184,193,5,182,194,11,128,126,195,44,125,3,133,227,196,147,160,244,204,122,252\"),stringToBytes32(\"197,63,174,243,121,228,234,60,242,152,237,50,209,73,117,35,169,181,98,157,216,131,142,112,217,65,117,215,27,31,174,169\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.A,89,24,1461,29,4901,151,130,49,10000,150,31,49,141,2014223716,10,0,10,2446,146098,2446,2446,10000,Definitions.IPS(109,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(949,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(40,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(81,Definitions.P.H,Definitions.S.SHORT,true),364,121,949,0)"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [121,241,237,11,45,29,173,228,177,239,22,65,174,205,108,194,211,27,241,251,29,140,117,197,1,168,138,13,186,44,15,112],\"legalEntityIdCounterparty\": [118,236,16,253,112,233,153,72,171,252,74,79,64,169,131,254,208,146,219,190,81,229,129,14,82,24,18,233,97,154,106,153],\"dayCountConvention\": 3,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 256,\"statusDate\": 68569,\"initialExchangeDate\": 1338,\"maturityDate\": 151,\"terminationDate\": 96,\"purchaseDate\": 50,\"capitalizationEndDate\": 65,\"cycleAnchorDateOfInterestPayment\": 2446,\"cycleAnchorDateOfRateReset\": 68570,\"cycleAnchorDateOfScalingIndex\": 1462,\"cycleAnchorDateOfFee\": 149,\"notionalPrincipal\": 49,\"nominalInterestRate\": 32074,\"feeAccrued\": 1462,\"accruedInterest\": 68568,\"rateMultiplier\": 951,\"rateSpread\": 32076,\"feeRate\": 90,\"nextResetRate\": 401,\"penaltyRate\": 0,\"premiumDiscountAtIED\": 40,\"priceAtPurchaseDate\": 41,\"cycleOfInterestPayment\": {\"i\": 21,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 32,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 81,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 96,\"lifeFloor\": 79,\"periodCap\": 0,\"periodFloor\": 19}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"121,241,237,11,45,29,173,228,177,239,22,65,174,205,108,194,211,27,241,251,29,140,117,197,1,168,138,13,186,44,15,112\"),stringToBytes32(\"118,236,16,253,112,233,153,72,171,252,74,79,64,169,131,254,208,146,219,190,81,229,129,14,82,24,18,233,97,154,106,153\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,256,68569,1338,151,96,50,65,2446,68570,1462,149,49,32074,1462,68568,951,32076,90,401,0,40,41,Definitions.IPS(21,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(4,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(32,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(81,Definitions.P.M,Definitions.S.LONG,true),96,79,0,19)"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [109,253,55,16,245,8,84,187,246,136,194,110,98,137,45,101,237,195,226,8,234,171,177,236,84,236,7,151,226,14,129,250],\"legalEntityIdCounterparty\": [216,120,134,97,149,79,66,159,27,137,134,90,203,121,225,15,233,222,110,114,130,131,212,2,17,83,197,167,103,149,75,254],\"dayCountConvention\": 4,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 139,\"statusDate\": 159,\"initialExchangeDate\": 68570,\"maturityDate\": 1337,\"terminationDate\": 2447,\"purchaseDate\": 149,\"capitalizationEndDate\": 26,\"cycleAnchorDateOfInterestPayment\": 899,\"cycleAnchorDateOfRateReset\": 97,\"cycleAnchorDateOfScalingIndex\": 3999,\"cycleAnchorDateOfFee\": 149,\"notionalPrincipal\": 161,\"nominalInterestRate\": 1,\"feeAccrued\": 26,\"accruedInterest\": 86400,\"rateMultiplier\": 29,\"rateSpread\": 139,\"feeRate\": 12,\"nextResetRate\": 32076,\"penaltyRate\": 71,\"premiumDiscountAtIED\": 110,\"priceAtPurchaseDate\": 1460,\"cycleOfInterestPayment\": {\"i\": 97,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 63,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 14,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 49,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 1969,\"lifeFloor\": 24,\"periodCap\": 15,\"periodFloor\": 101}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"109,253,55,16,245,8,84,187,246,136,194,110,98,137,45,101,237,195,226,8,234,171,177,236,84,236,7,151,226,14,129,250\"),stringToBytes32(\"216,120,134,97,149,79,66,159,27,137,134,90,203,121,225,15,233,222,110,114,130,131,212,2,17,83,197,167,103,149,75,254\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,139,159,68570,1337,2447,149,26,899,97,3999,149,161,1,26,86400,29,139,12,32076,71,110,1460,Definitions.IPS(97,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(63,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(14,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(49,Definitions.P.W,Definitions.S.SHORT,true),1969,24,15,101)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [94,151,238,49,208,196,179,226,76,136,213,134,92,191,161,132,176,38,196,252,236,99,223,208,75,246,107,218,41,110,194,158],\"legalEntityIdCounterparty\": [52,109,239,171,39,13,114,142,183,155,145,233,178,82,113,213,2,249,44,122,102,63,248,154,172,157,248,51,143,59,211,171],\"dayCountConvention\": 0,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 4799,\"statusDate\": 950,\"initialExchangeDate\": 131,\"maturityDate\": 161,\"terminationDate\": 4899,\"purchaseDate\": 0,\"capitalizationEndDate\": 4899,\"cycleAnchorDateOfInterestPayment\": 2014223716,\"cycleAnchorDateOfRateReset\": 96,\"cycleAnchorDateOfScalingIndex\": 360,\"cycleAnchorDateOfFee\": 95,\"notionalPrincipal\": 146097,\"nominalInterestRate\": 14,\"feeAccrued\": 49,\"accruedInterest\": 949,\"rateMultiplier\": 20,\"rateSpread\": 79,\"feeRate\": 899,\"nextResetRate\": 4001,\"penaltyRate\": 149,\"premiumDiscountAtIED\": 1532892062,\"priceAtPurchaseDate\": 2440589,\"cycleOfInterestPayment\": {\"i\": 2440589,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 365,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 149,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 66,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 2440587,\"lifeFloor\": 257,\"periodCap\": 359,\"periodFloor\": 31}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"94,151,238,49,208,196,179,226,76,136,213,134,92,191,161,132,176,38,196,252,236,99,223,208,75,246,107,218,41,110,194,158\"),stringToBytes32(\"52,109,239,171,39,13,114,142,183,155,145,233,178,82,113,213,2,249,44,122,102,63,248,154,172,157,248,51,143,59,211,171\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,4799,950,131,161,4899,0,4899,2014223716,96,360,95,146097,14,49,949,20,79,899,4001,149,1532892062,2440589,Definitions.IPS(2440589,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(365,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(149,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(66,Definitions.P.H,Definitions.S.SHORT,false),2440587,257,359,31)"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [94,202,92,87,238,231,222,123,190,102,182,34,74,163,143,84,7,35,18,41,59,128,0,156,72,158,4,29,20,216,72,28],\"legalEntityIdCounterparty\": [67,189,244,42,61,152,109,248,165,151,130,88,156,32,42,142,254,186,193,192,75,86,63,154,29,182,141,192,81,210,178,194],\"dayCountConvention\": 6,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 29,\"statusDate\": 86399,\"initialExchangeDate\": 90,\"maturityDate\": 2014223714,\"terminationDate\": 160,\"purchaseDate\": 901,\"capitalizationEndDate\": 119,\"cycleAnchorDateOfInterestPayment\": 149,\"cycleAnchorDateOfRateReset\": 48,\"cycleAnchorDateOfScalingIndex\": 7,\"cycleAnchorDateOfFee\": 146098,\"notionalPrincipal\": 4801,\"nominalInterestRate\": 1969,\"feeAccrued\": 2,\"accruedInterest\": 3,\"rateMultiplier\": 31,\"rateSpread\": 6,\"feeRate\": 255,\"nextResetRate\": 10,\"penaltyRate\": 86400,\"premiumDiscountAtIED\": 400,\"priceAtPurchaseDate\": 17,\"cycleOfInterestPayment\": {\"i\": 1,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 365,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 900,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 360,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 64,\"lifeFloor\": 11,\"periodCap\": 255,\"periodFloor\": 900}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"94,202,92,87,238,231,222,123,190,102,182,34,74,163,143,84,7,35,18,41,59,128,0,156,72,158,4,29,20,216,72,28\"),stringToBytes32(\"67,189,244,42,61,152,109,248,165,151,130,88,156,32,42,142,254,186,193,192,75,86,63,154,29,182,141,192,81,210,178,194\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,29,86399,90,2014223714,160,901,119,149,48,7,146098,4801,1969,2,3,31,6,255,10,86400,400,17,Definitions.IPS(1,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(365,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(900,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(360,Definitions.P.D,Definitions.S.SHORT,false),64,11,255,900)"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [186,2,245,66,65,135,78,114,193,197,53,53,26,210,135,155,91,205,20,123,220,35,0,46,62,150,56,13,226,63,85,147],\"legalEntityIdCounterparty\": [136,125,67,152,217,233,89,115,232,193,127,73,48,166,213,191,79,11,146,253,55,221,93,229,248,217,14,51,158,236,141,139],\"dayCountConvention\": 1,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 1461,\"statusDate\": 20,\"initialExchangeDate\": 27,\"maturityDate\": 49,\"terminationDate\": 48,\"purchaseDate\": 109,\"capitalizationEndDate\": 25,\"cycleAnchorDateOfInterestPayment\": 2014223714,\"cycleAnchorDateOfRateReset\": 2440587,\"cycleAnchorDateOfScalingIndex\": 68570,\"cycleAnchorDateOfFee\": 51,\"notionalPrincipal\": 2440589,\"nominalInterestRate\": 1,\"feeAccrued\": 359,\"accruedInterest\": 159,\"rateMultiplier\": 71,\"rateSpread\": 25,\"feeRate\": 3999,\"nextResetRate\": 360,\"penaltyRate\": 254,\"premiumDiscountAtIED\": 10,\"priceAtPurchaseDate\": 11,\"cycleOfInterestPayment\": {\"i\": 19,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 899,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1969,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 7,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 159,\"lifeFloor\": 359,\"periodCap\": 6,\"periodFloor\": 49}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"186,2,245,66,65,135,78,114,193,197,53,53,26,210,135,155,91,205,20,123,220,35,0,46,62,150,56,13,226,63,85,147\"),stringToBytes32(\"136,125,67,152,217,233,89,115,232,193,127,73,48,166,213,191,79,11,146,253,55,221,93,229,248,217,14,51,158,236,141,139\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,1461,20,27,49,48,109,25,2014223714,2440587,68570,51,2440589,1,359,159,71,25,3999,360,254,10,11,Definitions.IPS(19,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(899,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(1969,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(7,Definitions.P.M,Definitions.S.LONG,true),159,359,6,49)"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [236,246,2,52,195,30,147,210,212,152,4,167,208,75,10,183,121,244,174,246,67,252,212,254,16,35,143,9,211,148,104,59],\"legalEntityIdCounterparty\": [55,4,171,222,49,129,223,62,235,5,72,248,121,72,169,235,51,176,225,109,61,56,168,58,203,194,83,52,84,105,99,127],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 4,\"statusDate\": 79,\"initialExchangeDate\": 86400,\"maturityDate\": 68568,\"terminationDate\": 1532892062,\"purchaseDate\": 51,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 2440589,\"cycleAnchorDateOfRateReset\": 81,\"cycleAnchorDateOfScalingIndex\": 27,\"cycleAnchorDateOfFee\": 111,\"notionalPrincipal\": 4000,\"nominalInterestRate\": 10001,\"feeAccrued\": 4800,\"accruedInterest\": 4801,\"rateMultiplier\": 4001,\"rateSpread\": 24,\"feeRate\": 68568,\"nextResetRate\": 68570,\"penaltyRate\": 101,\"premiumDiscountAtIED\": 24,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 368,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 99,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 146096,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 359,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 2014223715,\"lifeFloor\": 30,\"periodCap\": 70,\"periodFloor\": 900}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"236,246,2,52,195,30,147,210,212,152,4,167,208,75,10,183,121,244,174,246,67,252,212,254,16,35,143,9,211,148,104,59\"),stringToBytes32(\"55,4,171,222,49,129,223,62,235,5,72,248,121,72,169,235,51,176,225,109,61,56,168,58,203,194,83,52,84,105,99,127\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,4,79,86400,68568,1532892062,51,0,2440589,81,27,111,4000,10001,4800,4801,4001,24,68568,68570,101,24,1,Definitions.IPS(368,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(99,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(146096,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(359,Definitions.P.Q,Definitions.S.SHORT,true),2014223715,30,70,900)"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [176,161,222,58,158,96,199,149,70,87,46,227,211,142,165,146,51,103,151,31,167,181,181,195,25,197,27,224,155,202,60,186],\"legalEntityIdCounterparty\": [30,117,128,211,89,242,117,34,233,185,63,178,44,93,47,112,76,16,146,174,42,100,153,0,85,49,187,8,187,194,173,16],\"dayCountConvention\": 3,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 257,\"statusDate\": 1461,\"initialExchangeDate\": 27,\"maturityDate\": 1532892064,\"terminationDate\": 146098,\"purchaseDate\": 2446,\"capitalizationEndDate\": 1461002,\"cycleAnchorDateOfInterestPayment\": 4000,\"cycleAnchorDateOfRateReset\": 4900,\"cycleAnchorDateOfScalingIndex\": 4900,\"cycleAnchorDateOfFee\": 70,\"notionalPrincipal\": 139,\"nominalInterestRate\": 68569,\"feeAccrued\": 150,\"accruedInterest\": 71,\"rateMultiplier\": 50,\"rateSpread\": 949,\"feeRate\": 99,\"nextResetRate\": 401,\"penaltyRate\": 10000,\"premiumDiscountAtIED\": 12,\"priceAtPurchaseDate\": 31,\"cycleOfInterestPayment\": {\"i\": 61,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 91,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 120,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2440589,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 8,\"lifeFloor\": 68569,\"periodCap\": 1460,\"periodFloor\": 0}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"176,161,222,58,158,96,199,149,70,87,46,227,211,142,165,146,51,103,151,31,167,181,181,195,25,197,27,224,155,202,60,186\"),stringToBytes32(\"30,117,128,211,89,242,117,34,233,185,63,178,44,93,47,112,76,16,146,174,42,100,153,0,85,49,187,8,187,194,173,16\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,257,1461,27,1532892064,146098,2446,1461002,4000,4900,4900,70,139,68569,150,71,50,949,99,401,10000,12,31,Definitions.IPS(61,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(91,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(120,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(2440589,Definitions.P.W,Definitions.S.SHORT,true),8,68569,1460,0)"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [55,45,182,38,185,208,234,135,15,156,121,209,38,114,194,125,224,18,212,199,144,192,165,186,152,158,199,232,126,156,191,142],\"legalEntityIdCounterparty\": [19,22,49,176,49,19,244,213,166,24,223,185,61,142,110,123,42,138,4,137,177,86,191,216,65,95,9,176,243,83,61,225],\"dayCountConvention\": 5,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 109,\"statusDate\": 1971,\"initialExchangeDate\": 2014223715,\"maturityDate\": 139,\"terminationDate\": 63,\"purchaseDate\": 1532892064,\"capitalizationEndDate\": 399,\"cycleAnchorDateOfInterestPayment\": 70,\"cycleAnchorDateOfRateReset\": 13,\"cycleAnchorDateOfScalingIndex\": 71,\"cycleAnchorDateOfFee\": 13,\"notionalPrincipal\": 68569,\"nominalInterestRate\": 1336,\"feeAccrued\": 1462,\"accruedInterest\": 2014223714,\"rateMultiplier\": 146096,\"rateSpread\": 69,\"feeRate\": 70,\"nextResetRate\": 15,\"penaltyRate\": 15,\"premiumDiscountAtIED\": 101,\"priceAtPurchaseDate\": 130,\"cycleOfInterestPayment\": {\"i\": 91,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4901,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 95,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 24,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 367,\"lifeFloor\": 2014223716,\"periodCap\": -1,\"periodFloor\": 4899}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"55,45,182,38,185,208,234,135,15,156,121,209,38,114,194,125,224,18,212,199,144,192,165,186,152,158,199,232,126,156,191,142\"),stringToBytes32(\"19,22,49,176,49,19,244,213,166,24,223,185,61,142,110,123,42,138,4,137,177,86,191,216,65,95,9,176,243,83,61,225\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,109,1971,2014223715,139,63,1532892064,399,70,13,71,13,68569,1336,1462,2014223714,146096,69,70,15,15,101,130,Definitions.IPS(91,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(4901,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(95,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(24,Definitions.P.M,Definitions.S.SHORT,false),367,2014223716,-1,4899)"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [247,49,136,133,1,36,152,113,188,40,1,149,174,8,123,246,34,241,56,231,205,33,155,200,24,87,31,249,10,11,191,105],\"legalEntityIdCounterparty\": [245,74,128,162,254,253,103,8,47,1,124,132,114,169,48,225,25,241,247,62,79,111,71,138,254,56,8,98,215,159,232,11],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 31,\"statusDate\": 2447,\"initialExchangeDate\": 3999,\"maturityDate\": 949,\"terminationDate\": 100,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 8,\"cycleAnchorDateOfRateReset\": 401,\"cycleAnchorDateOfScalingIndex\": 63,\"cycleAnchorDateOfFee\": 367,\"notionalPrincipal\": 26,\"nominalInterestRate\": 0,\"feeAccrued\": 9,\"accruedInterest\": 65,\"rateMultiplier\": 18,\"rateSpread\": 63,\"feeRate\": 81,\"nextResetRate\": 95,\"penaltyRate\": 8,\"premiumDiscountAtIED\": 361,\"priceAtPurchaseDate\": 86400,\"cycleOfInterestPayment\": {\"i\": 400,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 69,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 65,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 368,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 60,\"lifeFloor\": 11,\"periodCap\": 120,\"periodFloor\": 4801}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"247,49,136,133,1,36,152,113,188,40,1,149,174,8,123,246,34,241,56,231,205,33,155,200,24,87,31,249,10,11,191,105\"),stringToBytes32(\"245,74,128,162,254,253,103,8,47,1,124,132,114,169,48,225,25,241,247,62,79,111,71,138,254,56,8,98,215,159,232,11\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,31,2447,3999,949,100,0,0,8,401,63,367,26,0,9,65,18,63,81,95,8,361,86400,Definitions.IPS(400,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(69,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(65,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(368,Definitions.P.H,Definitions.S.LONG,true),60,11,120,4801)"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [158,51,30,245,88,222,121,190,56,25,92,218,80,194,105,46,162,79,163,61,61,215,48,225,178,83,250,112,35,61,99,134],\"legalEntityIdCounterparty\": [211,234,213,41,114,105,234,146,79,234,68,40,42,39,145,239,156,96,252,204,215,116,132,123,13,5,154,9,164,66,208,52],\"dayCountConvention\": 3,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 10000,\"statusDate\": 257,\"initialExchangeDate\": 901,\"maturityDate\": 21,\"terminationDate\": 1462,\"purchaseDate\": 900,\"capitalizationEndDate\": 5,\"cycleAnchorDateOfInterestPayment\": 364,\"cycleAnchorDateOfRateReset\": 19,\"cycleAnchorDateOfScalingIndex\": 364,\"cycleAnchorDateOfFee\": 899,\"notionalPrincipal\": 141,\"nominalInterestRate\": 899,\"feeAccrued\": 61,\"accruedInterest\": 100,\"rateMultiplier\": 8,\"rateSpread\": 400,\"feeRate\": 61,\"nextResetRate\": 12,\"penaltyRate\": 99,\"premiumDiscountAtIED\": 32076,\"priceAtPurchaseDate\": 401,\"cycleOfInterestPayment\": {\"i\": 4800,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1338,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 61,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 12,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 48,\"lifeFloor\": 86399,\"periodCap\": 20,\"periodFloor\": 100}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"158,51,30,245,88,222,121,190,56,25,92,218,80,194,105,46,162,79,163,61,61,215,48,225,178,83,250,112,35,61,99,134\"),stringToBytes32(\"211,234,213,41,114,105,234,146,79,234,68,40,42,39,145,239,156,96,252,204,215,116,132,123,13,5,154,9,164,66,208,52\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,10000,257,901,21,1462,900,5,364,19,364,899,141,899,61,100,8,400,61,12,99,32076,401,Definitions.IPS(4800,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(1338,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(61,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(12,Definitions.P.M,Definitions.S.SHORT,false),48,86399,20,100)"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [249,3,195,48,137,217,108,136,164,107,46,144,233,60,69,180,208,29,193,194,43,237,46,253,53,86,245,202,219,18,91,207],\"legalEntityIdCounterparty\": [241,121,31,119,131,77,204,42,226,19,9,20,158,180,183,68,40,150,255,156,105,122,61,249,1,250,137,139,115,128,73,2],\"dayCountConvention\": 2,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 367,\"statusDate\": 4801,\"initialExchangeDate\": 899,\"maturityDate\": 2446,\"terminationDate\": 16,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 119,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 4,\"cycleAnchorDateOfFee\": 4,\"notionalPrincipal\": 32076,\"nominalInterestRate\": 0,\"feeAccrued\": 4000,\"accruedInterest\": 11,\"rateMultiplier\": 130,\"rateSpread\": 366,\"feeRate\": 2447,\"nextResetRate\": 30,\"penaltyRate\": 130,\"premiumDiscountAtIED\": 2014223716,\"priceAtPurchaseDate\": 12,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 31,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 111,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2440587,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": -1,\"lifeFloor\": 1532892064,\"periodCap\": 1337,\"periodFloor\": 111}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"249,3,195,48,137,217,108,136,164,107,46,144,233,60,69,180,208,29,193,194,43,237,46,253,53,86,245,202,219,18,91,207\"),stringToBytes32(\"241,121,31,119,131,77,204,42,226,19,9,20,158,180,183,68,40,150,255,156,105,122,61,249,1,250,137,139,115,128,73,2\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,367,4801,899,2446,16,0,0,119,0,4,4,32076,0,4000,11,130,366,2447,30,130,2014223716,12,Definitions.IPS(4799,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(31,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(111,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(2440587,Definitions.P.Y,Definitions.S.SHORT,false),-1,1532892064,1337,111)"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [25,189,15,227,181,129,193,75,226,180,58,171,193,217,79,199,118,185,66,23,198,95,208,208,87,172,78,202,189,155,13,229],\"legalEntityIdCounterparty\": [135,155,235,210,114,192,123,167,40,234,220,92,219,113,73,167,49,112,245,143,253,81,59,80,198,178,4,128,240,153,218,247],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 6,\"statusDate\": 3999,\"initialExchangeDate\": 10000,\"maturityDate\": 97,\"terminationDate\": 32076,\"purchaseDate\": 1532892063,\"capitalizationEndDate\": 4000,\"cycleAnchorDateOfInterestPayment\": 110,\"cycleAnchorDateOfRateReset\": 13,\"cycleAnchorDateOfScalingIndex\": 10001,\"cycleAnchorDateOfFee\": 146096,\"notionalPrincipal\": 2440589,\"nominalInterestRate\": 1336,\"feeAccrued\": 91,\"accruedInterest\": 0,\"rateMultiplier\": 95,\"rateSpread\": 1532892062,\"feeRate\": 1969,\"nextResetRate\": 68568,\"penaltyRate\": 1969,\"premiumDiscountAtIED\": 110,\"priceAtPurchaseDate\": 2014223716,\"cycleOfInterestPayment\": {\"i\": 367,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 139,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 151,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 99,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 140,\"lifeFloor\": 71,\"periodCap\": 254,\"periodFloor\": 100}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"25,189,15,227,181,129,193,75,226,180,58,171,193,217,79,199,118,185,66,23,198,95,208,208,87,172,78,202,189,155,13,229\"),stringToBytes32(\"135,155,235,210,114,192,123,167,40,234,220,92,219,113,73,167,49,112,245,143,253,81,59,80,198,178,4,128,240,153,218,247\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,6,3999,10000,97,32076,1532892063,4000,110,13,10001,146096,2440589,1336,91,0,95,1532892062,1969,68568,1969,110,2014223716,Definitions.IPS(367,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(139,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(151,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(99,Definitions.P.H,Definitions.S.LONG,false),140,71,254,100)"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [155,223,226,36,66,213,242,190,245,238,36,180,14,53,174,60,3,94,130,241,195,23,205,203,48,161,41,91,77,243,90,141],\"legalEntityIdCounterparty\": [10,209,216,223,90,4,127,55,102,197,85,73,75,211,244,84,96,71,47,11,9,98,13,195,63,254,47,106,145,133,243,151],\"dayCountConvention\": 5,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 80,\"statusDate\": 6,\"initialExchangeDate\": 61,\"maturityDate\": 59,\"terminationDate\": 1336,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 61,\"cycleAnchorDateOfRateReset\": 27,\"cycleAnchorDateOfScalingIndex\": 1,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 365,\"nominalInterestRate\": 0,\"feeAccrued\": 1336,\"accruedInterest\": 255,\"rateMultiplier\": 0,\"rateSpread\": 121,\"feeRate\": 1460,\"nextResetRate\": 949,\"penaltyRate\": 151,\"premiumDiscountAtIED\": 257,\"priceAtPurchaseDate\": 4,\"cycleOfInterestPayment\": {\"i\": 9999,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4900,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 61,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 91,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 2014223716,\"lifeFloor\": 10000,\"periodCap\": 4800,\"periodFloor\": 32075}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"155,223,226,36,66,213,242,190,245,238,36,180,14,53,174,60,3,94,130,241,195,23,205,203,48,161,41,91,77,243,90,141\"),stringToBytes32(\"10,209,216,223,90,4,127,55,102,197,85,73,75,211,244,84,96,71,47,11,9,98,13,195,63,254,47,106,145,133,243,151\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,80,6,61,59,1336,0,0,61,27,1,0,365,0,1336,255,0,121,1460,949,151,257,4,Definitions.IPS(9999,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(4900,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(61,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(91,Definitions.P.M,Definitions.S.SHORT,false),2014223716,10000,4800,32075)"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [162,14,172,191,82,103,153,244,108,144,94,233,121,202,98,159,166,139,58,99,177,61,111,240,154,199,152,35,179,63,171,41],\"legalEntityIdCounterparty\": [211,126,147,40,69,216,169,227,232,34,149,219,146,8,15,162,231,160,50,27,102,148,135,61,168,30,246,197,173,119,85,208],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 86400,\"statusDate\": 19,\"initialExchangeDate\": 1460,\"maturityDate\": 10000,\"terminationDate\": 0,\"purchaseDate\": 121,\"capitalizationEndDate\": 12,\"cycleAnchorDateOfInterestPayment\": 48,\"cycleAnchorDateOfRateReset\": 23,\"cycleAnchorDateOfScalingIndex\": 360,\"cycleAnchorDateOfFee\": 254,\"notionalPrincipal\": 901,\"nominalInterestRate\": 1460,\"feeAccrued\": 80,\"accruedInterest\": 79,\"rateMultiplier\": 14,\"rateSpread\": 48,\"feeRate\": 160,\"nextResetRate\": 31,\"penaltyRate\": 0,\"premiumDiscountAtIED\": 3999,\"priceAtPurchaseDate\": 4900,\"cycleOfInterestPayment\": {\"i\": 149,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 366,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 111,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 48,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 151,\"lifeFloor\": 71,\"periodCap\": 70,\"periodFloor\": 4900}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"162,14,172,191,82,103,153,244,108,144,94,233,121,202,98,159,166,139,58,99,177,61,111,240,154,199,152,35,179,63,171,41\"),stringToBytes32(\"211,126,147,40,69,216,169,227,232,34,149,219,146,8,15,162,231,160,50,27,102,148,135,61,168,30,246,197,173,119,85,208\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,86400,19,1460,10000,0,121,12,48,23,360,254,901,1460,80,79,14,48,160,31,0,3999,4900,Definitions.IPS(149,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(366,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(111,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(48,Definitions.P.Q,Definitions.S.SHORT,false),151,71,70,4900)"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [19,127,97,36,21,206,61,121,219,15,163,68,88,205,47,22,99,138,133,85,107,188,161,161,205,154,203,151,250,122,113,170],\"legalEntityIdCounterparty\": [238,201,248,52,135,242,98,148,2,19,254,201,75,151,103,159,212,119,120,30,135,50,91,76,185,209,169,214,88,177,35,48],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 2440589,\"statusDate\": 160,\"initialExchangeDate\": 2440587,\"maturityDate\": 10001,\"terminationDate\": 900,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4801,\"cycleAnchorDateOfRateReset\": 4,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 50,\"notionalPrincipal\": 1,\"nominalInterestRate\": 0,\"feeAccrued\": 4800,\"accruedInterest\": 97,\"rateMultiplier\": 3999,\"rateSpread\": 96,\"feeRate\": 8,\"nextResetRate\": 6,\"penaltyRate\": 951,\"premiumDiscountAtIED\": 101,\"priceAtPurchaseDate\": 129,\"cycleOfInterestPayment\": {\"i\": 64,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 8,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 89,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 120,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 257,\"lifeFloor\": 1461,\"periodCap\": 28,\"periodFloor\": 27}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"19,127,97,36,21,206,61,121,219,15,163,68,88,205,47,22,99,138,133,85,107,188,161,161,205,154,203,151,250,122,113,170\"),stringToBytes32(\"238,201,248,52,135,242,98,148,2,19,254,201,75,151,103,159,212,119,120,30,135,50,91,76,185,209,169,214,88,177,35,48\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,2440589,160,2440587,10001,900,0,0,4801,4,0,50,1,0,4800,97,3999,96,8,6,951,101,129,Definitions.IPS(64,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(8,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(89,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(120,Definitions.P.M,Definitions.S.LONG,true),257,1461,28,27)"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [211,196,229,172,207,152,244,114,173,185,248,197,248,197,201,128,122,73,83,32,255,118,117,50,248,141,213,254,213,121,98,138],\"legalEntityIdCounterparty\": [52,175,118,28,2,231,85,194,32,136,199,149,59,157,83,251,23,111,234,239,138,69,51,250,181,180,167,74,147,201,207,116],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 86399,\"statusDate\": 64,\"initialExchangeDate\": 110,\"maturityDate\": 161,\"terminationDate\": 89,\"purchaseDate\": 2014223714,\"capitalizationEndDate\": 2014223716,\"cycleAnchorDateOfInterestPayment\": 146096,\"cycleAnchorDateOfRateReset\": 119,\"cycleAnchorDateOfScalingIndex\": 59,\"cycleAnchorDateOfFee\": 1461001,\"notionalPrincipal\": 1337,\"nominalInterestRate\": 119,\"feeAccrued\": 59,\"accruedInterest\": 1970,\"rateMultiplier\": 366,\"rateSpread\": 86399,\"feeRate\": 150,\"nextResetRate\": 66,\"penaltyRate\": 1532892062,\"premiumDiscountAtIED\": 130,\"priceAtPurchaseDate\": 49,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 368,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 129,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 32074,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 146098,\"lifeFloor\": 110,\"periodCap\": 28,\"periodFloor\": 65}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"211,196,229,172,207,152,244,114,173,185,248,197,248,197,201,128,122,73,83,32,255,118,117,50,248,141,213,254,213,121,98,138\"),stringToBytes32(\"52,175,118,28,2,231,85,194,32,136,199,149,59,157,83,251,23,111,234,239,138,69,51,250,181,180,167,74,147,201,207,116\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,86399,64,110,161,89,2014223714,2014223716,146096,119,59,1461001,1337,119,59,1970,366,86399,150,66,1532892062,130,49,Definitions.IPS(4799,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(368,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(129,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(32074,Definitions.P.W,Definitions.S.SHORT,true),146098,110,28,65)"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [27,51,139,77,134,38,31,109,252,137,89,226,211,38,138,118,147,27,170,9,174,135,34,151,98,179,75,169,205,54,241,103],\"legalEntityIdCounterparty\": [182,153,33,207,159,253,68,252,15,203,159,158,98,222,20,96,211,184,35,157,34,148,158,64,7,163,230,153,114,100,237,252],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 4800,\"statusDate\": 4900,\"initialExchangeDate\": 400,\"maturityDate\": 4801,\"terminationDate\": 364,\"purchaseDate\": 68568,\"capitalizationEndDate\": 101,\"cycleAnchorDateOfInterestPayment\": 86401,\"cycleAnchorDateOfRateReset\": 1461002,\"cycleAnchorDateOfScalingIndex\": 90,\"cycleAnchorDateOfFee\": 109,\"notionalPrincipal\": 1336,\"nominalInterestRate\": 254,\"feeAccrued\": 2447,\"accruedInterest\": 140,\"rateMultiplier\": 49,\"rateSpread\": 7,\"feeRate\": 32,\"nextResetRate\": 900,\"penaltyRate\": 151,\"premiumDiscountAtIED\": 1971,\"priceAtPurchaseDate\": 949,\"cycleOfInterestPayment\": {\"i\": 110,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 68569,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 30,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 24,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 2448,\"lifeFloor\": 149,\"periodCap\": 4801,\"periodFloor\": 11}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"27,51,139,77,134,38,31,109,252,137,89,226,211,38,138,118,147,27,170,9,174,135,34,151,98,179,75,169,205,54,241,103\"),stringToBytes32(\"182,153,33,207,159,253,68,252,15,203,159,158,98,222,20,96,211,184,35,157,34,148,158,64,7,163,230,153,114,100,237,252\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,4800,4900,400,4801,364,68568,101,86401,1461002,90,109,1336,254,2447,140,49,7,32,900,151,1971,949,Definitions.IPS(110,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(68569,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(30,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(24,Definitions.P.Q,Definitions.S.LONG,true),2448,149,4801,11)"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [58,108,92,195,54,139,53,164,136,84,46,22,255,174,1,179,18,250,20,22,204,220,164,243,216,198,145,80,87,7,164,233],\"legalEntityIdCounterparty\": [156,129,18,175,47,85,138,41,220,123,16,221,198,242,124,211,33,132,237,201,217,184,84,21,172,23,157,2,117,237,11,81],\"dayCountConvention\": 4,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 4900,\"statusDate\": 1462,\"initialExchangeDate\": 99,\"maturityDate\": 151,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 13,\"cycleAnchorDateOfRateReset\": 48,\"cycleAnchorDateOfScalingIndex\": 4900,\"cycleAnchorDateOfFee\": 1970,\"notionalPrincipal\": 1460,\"nominalInterestRate\": 0,\"feeAccrued\": 28,\"accruedInterest\": 101,\"rateMultiplier\": 90,\"rateSpread\": 90,\"feeRate\": 2440588,\"nextResetRate\": 19,\"penaltyRate\": 367,\"premiumDiscountAtIED\": 12,\"priceAtPurchaseDate\": 81,\"cycleOfInterestPayment\": {\"i\": 951,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 64,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4901,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 79,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 26,\"lifeFloor\": 68570,\"periodCap\": 141,\"periodFloor\": 1532892064}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"58,108,92,195,54,139,53,164,136,84,46,22,255,174,1,179,18,250,20,22,204,220,164,243,216,198,145,80,87,7,164,233\"),stringToBytes32(\"156,129,18,175,47,85,138,41,220,123,16,221,198,242,124,211,33,132,237,201,217,184,84,21,172,23,157,2,117,237,11,81\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,4900,1462,99,151,0,0,0,13,48,4900,1970,1460,0,28,101,90,90,2440588,19,367,12,81,Definitions.IPS(951,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(64,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(4901,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(79,Definitions.P.M,Definitions.S.LONG,false),26,68570,141,1532892064)"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [87,97,210,34,253,99,0,60,169,204,139,40,26,71,79,171,205,96,233,8,16,160,13,6,120,185,243,142,18,22,89,75],\"legalEntityIdCounterparty\": [255,102,80,250,207,46,96,61,101,124,38,63,53,97,187,99,202,156,136,101,167,234,67,205,17,55,167,8,203,194,120,235],\"dayCountConvention\": 0,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 4900,\"statusDate\": 24,\"initialExchangeDate\": 359,\"maturityDate\": 256,\"terminationDate\": 2014223716,\"purchaseDate\": 364,\"capitalizationEndDate\": 899,\"cycleAnchorDateOfInterestPayment\": 359,\"cycleAnchorDateOfRateReset\": 160,\"cycleAnchorDateOfScalingIndex\": 40,\"cycleAnchorDateOfFee\": 100,\"notionalPrincipal\": 146097,\"nominalInterestRate\": 8,\"feeAccrued\": 27,\"accruedInterest\": 2014223716,\"rateMultiplier\": 4900,\"rateSpread\": 256,\"feeRate\": 1338,\"nextResetRate\": 60,\"penaltyRate\": 366,\"premiumDiscountAtIED\": 1532892063,\"priceAtPurchaseDate\": 63,\"cycleOfInterestPayment\": {\"i\": 49,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 110,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 160,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 49,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 91,\"lifeFloor\": 31,\"periodCap\": 90,\"periodFloor\": 399}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"87,97,210,34,253,99,0,60,169,204,139,40,26,71,79,171,205,96,233,8,16,160,13,6,120,185,243,142,18,22,89,75\"),stringToBytes32(\"255,102,80,250,207,46,96,61,101,124,38,63,53,97,187,99,202,156,136,101,167,234,67,205,17,55,167,8,203,194,120,235\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,4900,24,359,256,2014223716,364,899,359,160,40,100,146097,8,27,2014223716,4900,256,1338,60,366,1532892063,63,Definitions.IPS(49,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(110,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(160,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(49,Definitions.P.W,Definitions.S.LONG,false),91,31,90,399)"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [25,61,11,58,46,203,198,228,84,21,204,142,137,242,161,116,231,60,33,154,127,50,175,92,119,65,46,8,8,92,186,159],\"legalEntityIdCounterparty\": [247,168,83,160,119,47,64,90,38,12,36,215,133,47,226,229,134,128,125,200,171,13,182,154,116,44,123,161,204,93,76,99],\"dayCountConvention\": 1,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 2440589,\"statusDate\": 257,\"initialExchangeDate\": 5,\"maturityDate\": 119,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 140,\"cycleAnchorDateOfRateReset\": 129,\"cycleAnchorDateOfScalingIndex\": 4899,\"cycleAnchorDateOfFee\": 39,\"notionalPrincipal\": 61,\"nominalInterestRate\": 0,\"feeAccrued\": 4900,\"accruedInterest\": 32074,\"rateMultiplier\": 159,\"rateSpread\": 68568,\"feeRate\": 146096,\"nextResetRate\": 28,\"penaltyRate\": 121,\"premiumDiscountAtIED\": 2440587,\"priceAtPurchaseDate\": 146097,\"cycleOfInterestPayment\": {\"i\": 7,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2014223714,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4801,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4899,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 21,\"lifeFloor\": 367,\"periodCap\": 89,\"periodFloor\": 95}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"25,61,11,58,46,203,198,228,84,21,204,142,137,242,161,116,231,60,33,154,127,50,175,92,119,65,46,8,8,92,186,159\"),stringToBytes32(\"247,168,83,160,119,47,64,90,38,12,36,215,133,47,226,229,134,128,125,200,171,13,182,154,116,44,123,161,204,93,76,99\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.N,2440589,257,5,119,0,0,0,140,129,4899,39,61,0,4900,32074,159,68568,146096,28,121,2440587,146097,Definitions.IPS(7,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(2014223714,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(4801,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(4899,Definitions.P.M,Definitions.S.LONG,false),21,367,89,95)"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.674ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:41:35.698ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}